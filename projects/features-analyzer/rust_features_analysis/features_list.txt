Cargo.lock:713:name = "cpufeatures"
Cargo.lock:3199: "rustc_feature",
Cargo.lock:3227: "rustc_feature",
Cargo.lock:3285: "rustc_feature",
Cargo.lock:3460: "rustc_feature",
Cargo.lock:3556: "rustc_feature",
Cargo.lock:3571:name = "rustc_feature"
Cargo.lock:3626: "rustc_feature",
Cargo.lock:3800: "rustc_feature",
Cargo.lock:3873: "rustc_feature",
Cargo.lock:3911: "rustc_feature",
Cargo.lock:4030: "rustc_feature",
Cargo.lock:4061: "rustc_feature",
Cargo.lock:4141: "rustc_feature",
Cargo.lock:4169: "rustc_feature",
Cargo.lock:4206: "rustc_feature",
Cargo.lock:4280: "rustc_feature",
Cargo.lock:4675: "cpufeatures",
Cargo.lock:4686: "cpufeatures",
RELEASES.md:118:  crate's `kv_unstable` feature should update to `log v0.4.18` or later.
RELEASES.md:189:- [Stabilize movbe target feature](https://github.com/rust-lang/rust/pull/107711/)
RELEASES.md:262:- [WebAssembly targets enable `sign-ext` and `mutable-globals` features in codegen](https://github.com/rust-lang/rust/issues/109807)
RELEASES.md:288:- [Stabilize the `cmpxchg16b` target feature on x86 and x86_64.](https://github.com/rust-lang/rust/pull/106774/)
RELEASES.md:366:- [When `default-features` is set to false of a workspace dependency, and an inherited dependency of a member has `default-features = true`, Cargo will enable default features of that dependency.](https://github.com/rust-lang/cargo/pull/11409/)
RELEASES.md:1313:- The [`#[target_feature]`][target_feature] attribute [can now be used with aarch64 features][90621]
RELEASES.md:1314:- X86 [`#[target_feature = "adx"]` is now stable][93745]
RELEASES.md:1353:No feature changes, but see compatibility notes.
RELEASES.md:1366:- [`cfg` predicates in `all()` and `any()` are always evaluated to detect errors, instead of short-circuiting.][94295] The compatibility considerations here arise in nightly-only code that used the short-circuiting behavior of `all` to write something like `cfg(all(feature = "nightly", syntax-requiring-nightly))`, which will now fail to compile. Instead, use either `cfg_attr(feature = "nightly", ...)` or nested uses of `cfg`.
RELEASES.md:1420:[target_feature]: https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute
RELEASES.md:1482:- [`arch::is_aarch64_feature_detected!`][is_aarch64_feature_detected]
RELEASES.md:1488:- [Stabilize namespaced and weak dependency features.][cargo/10269]
RELEASES.md:1576:[is_aarch64_feature_detected]: https://doc.rust-lang.org/stable/std/arch/macro.is_aarch64_feature_detected.html
RELEASES.md:1696:  unstable feature.][91867]
RELEASES.md:2057:  This feature is primarily intended for usage by `cargo fix`, rather than end users.
RELEASES.md:2351:- [You can now use `#[target_feature]` on safe functions when targeting
RELEASES.md:2840:- [The `target-cpu=native` option will now detect individual features of CPUs.][80749]
RELEASES.md:2888:- [Added the `resolver` field to `Cargo.toml` to enable the new feature resolver
RELEASES.md:2889:  and CLI option behavior.][cargo/8997] Version 2 of the feature resolver will try
RELEASES.md:2890:  to avoid unifying features of dependencies where that unification could be unwanted.
RELEASES.md:2891:  Such as using the same dependency with a `std` feature in a build scripts and
RELEASES.md:2892:  proc-macros, while using the `no-std` feature in the final binary. See the
RELEASES.md:2893:  [Cargo book documentation][feature-resolver@2.0] for more information on the feature.
RELEASES.md:2960:[feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2
RELEASES.md:3275:- [You can now use `-C target-feature=+crt-static` on `linux-gnu` targets.][77386]
RELEASES.md:3341:- [`#[target_feature]` will now error if used in a place where it has no effect.][78143]
RELEASES.md:3687:- [You can now override individual target features through the `target-feature`
RELEASES.md:3688:  flag.][72094] E.g. `-C target-feature=+avx2 -C target-feature=+fma` is now
RELEASES.md:3689:  equivalent to `-C target-feature=+avx2,+fma`.
RELEASES.md:4011:* [Fixed the stabilization of AVX-512 features.][71473]
RELEASES.md:4475:- [Feature flags (except `--all-features`) passed to a virtual workspace will
RELEASES.md:4583:  **Note** Cargo currently doesn't use this feature. Refer to
RELEASES.md:4584:  [cargo#7315][cargo/7315] to track this feature's progress.
RELEASES.md:4715:- [You can now pass the `--features` option multiple times to enable
RELEASES.md:4716:  multiple features.][cargo/7084]
RELEASES.md:4938:- [Cargo will now produce an error if you attempt to use the name of a required dependency as a feature.][cargo/6860]
RELEASES.md:5282:  this feature will by default produce a warning as this behaviour can be
RELEASES.md:5354:- [You can now publish crates that require a feature flag to compile with
RELEASES.md:5355:  `cargo publish --features` or `cargo publish --all-features`.][cargo/6453]
RELEASES.md:6245:  SIMD intrinsics, a new macro called `is_x86_feature_detected!`, the
RELEASES.md:6246:  `#[target_feature(enable="")]` attribute, and adding `target_feature = ""` to
RELEASES.md:6292:  disable this feature ahead of time by setting any of the following to false:
RELEASES.md:7055:- [Using required dependencies as a feature is now deprecated and emits
RELEASES.md:7317:- [Added `target-feature=+crt-static` option][37406] [RFC 1721] Which allows
RELEASES.md:7362:- [The `--features` option now accepts multiple comma or space
RELEASES.md:7719:* [Add `required_features`][cargo/3667]
RELEASES.md:7728:* [The "Unstable Book" documents nightly-only features][ubook]
RELEASES.md:7779:* [rustdoc: fix doctests with non-feature crate attributes][38161]
RELEASES.md:8173:* [Mix feature flags into fingerprint/metadata shorthash][cargo/3102]
RELEASES.md:8393:* [Fix passing --features when testing multiple packages][cargo/3280]
RELEASES.md:8633:* [Add --all-features flag to cargo][cargo/3038]
RELEASES.md:8842:* [The `rustc` arguments, `--print target-cpus`, `--print target-features`,
RELEASES.md:8844:  options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and
RELEASES.md:8943:* [Allow enabling features for dependencies with `--features`](https://github.com/rust-lang/cargo/pull/2876)
RELEASES.md:9033:* [Disallow specifying features of transitive deps](https://github.com/rust-lang/cargo/pull/2821)
RELEASES.md:9268:* [Update i686-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33651).
RELEASES.md:9269:* [Update aarch64-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33500).
RELEASES.md:9295:* [Feature-gated attributes on macro-generated macro invocations are
RELEASES.md:9709:  features though, these options have been accessible on the stable
RELEASES.md:10092:  feature for integrating with the package manager that was
RELEASES.md:10222:  `#[omit_gdb_pretty_printer_section]` [are feature gated][1.5fg].
RELEASES.md:10224:  several releases, [is now behind a feature gate and will
RELEASES.md:10229:  features][1.5use].
RELEASES.md:10470:* The compiler [no longer uses the 'morestack' feature to prevent
RELEASES.md:10580:  behind the `prelude_import` feature gate][pi]. This change is
RELEASES.md:10797:  `associated_type_defaults` feature gate][ad]. In 1.1 associated type
RELEASES.md:10829:  feature was actually introduced prior to 1.0 with little
RELEASES.md:11035:  no longer possible to use unstable features with a stable build of
RELEASES.md:11076:* The `unsafe_destructor` feature is now deprecated in favor of the
RELEASES.md:11197:    * The standard library now [participates in feature gating][feat],
RELEASES.md:11198:      so use of unstable libraries now requires a `#![feature(...)]`
RELEASES.md:11251:      'on_unimplemented' feature, lets rustc [display custom error
RELEASES.md:11267:[feat-forum]: https://users.rust-lang.org/t/psa-important-info-about-rustcs-new-feature-staging/82/5
RELEASES.md:11292:    * The language itself is considered feature complete for 1.0,
RELEASES.md:11356:    * `if let` and `while let` are no longer feature-gated.
RELEASES.md:11371:    * [Struct variants][structvars] are no longer feature-gated.
RELEASES.md:11388:    * Glob imports are no longer feature-gated.
RELEASES.md:11389:    * The `box` operator and `box` patterns have been feature-gated
RELEASES.md:11499:      matches, currently behind the 'if_let' feature gate.
RELEASES.md:11506:      the 'slicing_syntax' feature gate, and can be overloaded with
RELEASES.md:11516:      c]`) has been put behind the 'advanced_slice_patterns' feature
RELEASES.md:11520:      feature gate.
RELEASES.md:11530:      been added under a feature gate, 'unboxed_closures'. These will
RELEASES.md:11629:    * The #[unsafe_destructor] attribute is now behind a feature gate.
RELEASES.md:11632:    * Declaration of lang items and intrinsics are now feature-gated by
RELEASES.md:11748:    * Cross-crate syntax extensions are now possible, but feature gated. See
RELEASES.md:11760:    * Various obscure macros such as `log_syntax!` are now behind feature gates.
RELEASES.md:11761:    * The `#[simd]` attribute is now behind a feature gate.
RELEASES.md:11766:    * Default type parameters have been implemented, but are feature gated.
RELEASES.md:11902:      * A new facility for enabling experimental features (feature gating) has
RELEASES.md:11903:        been added, using the crate-level `#[feature(foo)]` attribute.
RELEASES.md:11904:      * Managed boxes (@) are now behind a feature gate
RELEASES.md:11905:        (`#[feature(managed_boxes)]`) in preparation for future removal. Use the
RELEASES.md:11938:      * The `asm!` macro is feature-gated (`#[feature(asm)]`).
RELEASES.md:11952:      * Non-ascii identifiers are feature-gated (`#[feature(non_ascii_idents)]`).
RELEASES.md:11964:      * The `unknown_features` lint (default: warn) warns about unknown
RELEASES.md:11965:        feature gates.
RELEASES.md:11968:      * `#[link_args]` is behind the `link_args` feature gate.
RELEASES.md:11975:        variables. Currently behind the `thread_local` feature gate.
RELEASES.md:12469:   * Improved support for language features
RELEASES.md:12573:   * Experimental new language features
RELEASES.md:12583:   * Removal of various obsolete features
RELEASES.md:12628:   * Experimental new language features
RELEASES.md:12653:   * Most language features work, including:
compiler/rustc_errors/Cargo.toml:26:serde = { version = "1.0.125", features = [ "derive" ] }
compiler/rustc_errors/Cargo.toml:31:features = [
compiler/rustc_errors/Cargo.toml:37:[features]
compiler/rustc_errors/src/lib.rs:6:#![feature(array_windows)]
compiler/rustc_errors/src/lib.rs:7:#![feature(extract_if)]
compiler/rustc_errors/src/lib.rs:8:#![feature(if_let_guard)]
compiler/rustc_errors/src/lib.rs:9:#![feature(let_chains)]
compiler/rustc_errors/src/lib.rs:10:#![feature(never_type)]
compiler/rustc_errors/src/lib.rs:11:#![feature(result_option_inspect)]
compiler/rustc_errors/src/lib.rs:12:#![feature(rustc_attrs)]
compiler/rustc_errors/src/lib.rs:13:#![feature(yeet_expr)]
compiler/rustc_errors/src/lib.rs:14:#![feature(try_blocks)]
compiler/rustc_errors/src/lib.rs:15:#![feature(box_patterns)]
compiler/rustc_errors/src/lib.rs:16:#![feature(error_reporter)]
compiler/rustc_errors/src/lib.rs:17:#![allow(incomplete_features)]
compiler/rustc_codegen_cranelift/Cargo.toml:11:cranelift-codegen = {  version = "0.96.1", features = ["unwind", "all-arch"] }
compiler/rustc_codegen_cranelift/Cargo.toml:18:gimli = { version = "0.27.2", default-features = false, features = ["write"]}
compiler/rustc_codegen_cranelift/Cargo.toml:19:object = { version = "0.30.3", default-features = false, features = ["std", "read_core", "write", "archive", "coff", "elf", "macho", "pe"] }
compiler/rustc_codegen_cranelift/Cargo.toml:36:[features]
compiler/rustc_codegen_cranelift/Cargo.toml:37:# Enable features not ready to be enabled when compiling as part of rustc
compiler/rustc_codegen_cranelift/Cargo.toml:38:unstable-features = ["jit", "inline_asm"]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:19: #[stable(feature = "integer_atomics_stable", since = "1.34.0")]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:22:-#[unstable(feature = "integer_atomics", issue = "99069")]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:26: #[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:29: #[stable(feature = "integer_atomics_stable", since = "1.34.0")]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:32:-#[unstable(feature = "integer_atomics", issue = "99069")]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:36: #[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:49:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:50:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:51:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:52:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:53:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:54:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:55:-    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:56:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:59:-    "#![feature(integer_atomics)]\n\n",
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:69:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:70:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:71:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:72:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:73:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:74:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:75:-    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:76:-    unstable(feature = "integer_atomics", issue = "99069"),
compiler/rustc_codegen_cranelift/patches/0027-stdlib-128bit-atomic-operations.patch:79:-    "#![feature(integer_atomics)]\n\n",
compiler/rustc_codegen_cranelift/patches/0022-coretests-Disable-not-compiling-tests.patch:32:+rand = { version = "0.8.5", default-features = false }
compiler/rustc_codegen_cranelift/patches/0022-coretests-Disable-not-compiling-tests.patch:33:+rand_xorshift = { version = "0.3.0", default-features = false }
compiler/rustc_codegen_cranelift/patches/0022-coretests-Disable-not-compiling-tests.patch:40: #![feature(alloc_layout_extra)]
compiler/rustc_codegen_cranelift/patches/0022-coretests-Disable-not-compiling-tests.patch:41: #![feature(array_chunks)]
compiler/rustc_codegen_cranelift/patches/0022-coretests-Disable-not-compiling-tests.patch:42: #![feature(array_methods)]
compiler/rustc_codegen_cranelift/example/std_example.rs:1:#![feature(core_intrinsics, generators, generator_trait, is_sorted, repr_simd)]
compiler/rustc_codegen_cranelift/example/std_example.rs:171:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:173:    assert!(is_x86_feature_detected!("sse2"));
compiler/rustc_codegen_cranelift/example/std_example.rs:211:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:238:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:252:#[target_feature(enable = "avx2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:261:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:277:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:293:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:301:#[target_feature(enable = "avx")]
compiler/rustc_codegen_cranelift/example/std_example.rs:307:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:314:#[target_feature(enable = "sse4.1")]
compiler/rustc_codegen_cranelift/example/std_example.rs:327:#[target_feature(enable = "sse4.1")]
compiler/rustc_codegen_cranelift/example/std_example.rs:341:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:350:#[target_feature(enable = "ssse3")]
compiler/rustc_codegen_cranelift/example/std_example.rs:370:#[target_feature(enable = "avx2")]
compiler/rustc_codegen_cranelift/example/std_example.rs:398:#[target_feature(enable = "avx2")]
compiler/rustc_codegen_cranelift/example/issue-91827-extern-types.rs:8:#![feature(extern_types)]
compiler/rustc_codegen_cranelift/example/mod_bench.rs:1:#![feature(start, core_intrinsics, lang_items)]
compiler/rustc_codegen_cranelift/example/issue-72793.rs:3:#![feature(type_alias_impl_trait)]
compiler/rustc_codegen_cranelift/example/alloc_example.rs:1:#![feature(start, core_intrinsics, alloc_error_handler, lang_items)]
compiler/rustc_codegen_cranelift/example/float-minmax-pass.rs:7:#![feature(repr_simd, platform_intrinsics)]
compiler/rustc_codegen_cranelift/example/mini_core.rs:1:#![feature(
compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs:1:#![feature(no_core, lang_items, never_type, linkage, extern_types, thread_local, repr_simd)]
compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs:327:        not(no_unstable_features),
compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs:360:    not(no_unstable_features),
compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs:368:#[cfg(all(not(jit), not(no_unstable_features), target_arch = "x86_64", target_os = "linux"))]
compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs:378:#[cfg(all(not(jit), not(no_unstable_features), target_arch = "x86_64", target_os = "macos"))]
compiler/rustc_codegen_cranelift/example/arbitrary_self_types_pointers_and_wrappers.rs:3:#![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]
compiler/rustc_codegen_cranelift/example/example.rs:1:#![feature(no_core, unboxed_closures)]
compiler/rustc_codegen_cranelift/build_system/build_backend.rs:14:    use_unstable_features: bool,
compiler/rustc_codegen_cranelift/build_system/build_backend.rs:31:    if use_unstable_features {
compiler/rustc_codegen_cranelift/build_system/build_backend.rs:32:        cmd.arg("--features").arg("unstable-features");
compiler/rustc_codegen_cranelift/build_system/Cargo.toml:10:[features]
compiler/rustc_codegen_cranelift/build_system/Cargo.toml:11:unstable-features = [] # for rust-analyzer
compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs:262:    build_cmd.arg("--features").arg("compiler-builtins-no-asm backtrace panic-unwind");
compiler/rustc_codegen_cranelift/build_system/main.rs:91:    let mut use_unstable_features = true;
compiler/rustc_codegen_cranelift/build_system/main.rs:117:            "--no-unstable-features" => use_unstable_features = false,
compiler/rustc_codegen_cranelift/build_system/main.rs:214:            use_unstable_features,
compiler/rustc_codegen_cranelift/build_system/main.rs:226:                use_unstable_features,
compiler/rustc_codegen_cranelift/build_system/tests.rs:249:    use_unstable_features: bool,
compiler/rustc_codegen_cranelift/build_system/tests.rs:274:            use_unstable_features,
compiler/rustc_codegen_cranelift/build_system/tests.rs:308:            use_unstable_features,
compiler/rustc_codegen_cranelift/build_system/tests.rs:331:    use_unstable_features: bool,
compiler/rustc_codegen_cranelift/build_system/tests.rs:342:        use_unstable_features: bool,
compiler/rustc_codegen_cranelift/build_system/tests.rs:361:        let jit_supported = use_unstable_features
compiler/rustc_codegen_cranelift/build_system/tests.rs:369:            use_unstable_features,
compiler/rustc_codegen_cranelift/build_system/tests.rs:396:                    if self.use_unstable_features {
compiler/rustc_codegen_cranelift/build_system/tests.rs:404:                            "no_unstable_features",
compiler/rustc_codegen_cranelift/build_system/tests.rs:409:                    if self.use_unstable_features {
compiler/rustc_codegen_cranelift/build_system/tests.rs:412:                        self.run_rustc([source, "--cfg", "no_unstable_features"]);
compiler/rustc_codegen_cranelift/build_system/usage.txt:5:    ./y.sh build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]
compiler/rustc_codegen_cranelift/build_system/usage.txt:6:    ./y.sh test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen] [--skip-test TESTNAME]
compiler/rustc_codegen_cranelift/build_system/usage.txt:7:    ./y.sh abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]
compiler/rustc_codegen_cranelift/build_system/usage.txt:8:    ./y.sh bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]
compiler/rustc_codegen_cranelift/build_system/usage.txt:28:    --no-unstable-features
compiler/rustc_codegen_cranelift/build_system/usage.txt:29:            Some features are not yet ready for production usage. This option will disable these
compiler/rustc_codegen_cranelift/build_system/usage.txt:30:            features. This includes the JIT mode and inline assembly support.
compiler/rustc_codegen_cranelift/docs/usage.md:41:$ $cg_clif_dir/dist/rustc-clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs
compiler/rustc_codegen_cranelift/docs/usage.md:57:    echo "$@" | $cg_clif_dir/dist/rustc-clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic
compiler/rustc_codegen_cranelift/docs/dwarf.md:133:(16:05:51) tromey: bjorn3: the problem is that this CU claims to be DWARF 3 but is using a DWARF 4 feature
compiler/rustc_codegen_cranelift/docs/dwarf.md:143:(16:06:48) tromey: I think there are some DWARF 5 features still in the works but DWARF 4 should be solid AFAIK
compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh:32:# missing features
compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh:66:rm tests/ui/target-feature/missing-plusminus.rs # error not implemented
compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh:4:./y.sh build --no-unstable-features
compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh:24:-compiler_builtins = { version = "0.1.40", features = ['rustc-dep-of-std'] }
compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh:25:+compiler_builtins = { version = "0.1.66", features = ['rustc-dep-of-std', 'no-asm'] }
compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh:28: rand = { version = "0.8.5", default-features = false, features = ["alloc"] }
compiler/rustc_codegen_cranelift/.github/workflows/main.yml:114:      run: ./y.sh test --sysroot llvm --no-unstable-features
compiler/rustc_codegen_cranelift/.vscode/settings.json:9:    "rust-analyzer.cargo.features": ["unstable-features"],
compiler/rustc_codegen_cranelift/src/compiler_builtins.rs:1:#[cfg(all(unix, feature = "jit"))]
compiler/rustc_codegen_cranelift/src/compiler_builtins.rs:3:#[cfg(feature = "jit")]
compiler/rustc_codegen_cranelift/src/compiler_builtins.rs:8:#[cfg(feature = "jit")]
compiler/rustc_codegen_cranelift/src/compiler_builtins.rs:19:        #[cfg(feature = "jit")]
compiler/rustc_codegen_cranelift/src/compiler_builtins.rs:28:        #[cfg(feature = "jit")]
compiler/rustc_codegen_cranelift/src/driver/mod.rs:13:#[cfg(feature = "jit")]
compiler/rustc_codegen_cranelift/src/lib.rs:1:#![feature(rustc_private)]
compiler/rustc_codegen_cranelift/src/lib.rs:2:// Note: please avoid adding other feature gates where possible
compiler/rustc_codegen_cranelift/src/lib.rs:193:    fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<rustc_span::Symbol> {
compiler/rustc_codegen_cranelift/src/lib.rs:212:                #[cfg(feature = "jit")]
compiler/rustc_codegen_cranelift/src/lib.rs:215:                #[cfg(not(feature = "jit"))]
compiler/rustc_codegen_cranelift/src/debuginfo/emit.rs:70:    #[cfg(all(feature = "jit", not(windows)))]
compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs:81:    #[cfg(all(feature = "jit", windows))]
compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs:84:    #[cfg(all(feature = "jit", not(windows)))]
compiler/rustc_codegen_cranelift/src/intrinsics/cpuid.rs:44:    let ecx_features = fx.bcx.ins().iconst(types::I32, 0);
compiler/rustc_codegen_cranelift/src/intrinsics/cpuid.rs:45:    let edx_features = fx.bcx.ins().iconst(types::I32, 1 << 25 /* sse */ | 1 << 26 /* sse2 */);
compiler/rustc_codegen_cranelift/src/intrinsics/cpuid.rs:46:    fx.bcx.ins().jump(dest, &[cpu_signature, additional_information, ecx_features, edx_features]);
compiler/rustc_codegen_cranelift/src/inline_asm.rs:383:            self.tcx.asm_target_features(self.enclosing_def_id),
compiler/rustc_codegen_cranelift/src/global_asm.rs:83:        let asm_enabled = cfg!(feature = "inline_asm") && !tcx.sess.target.is_like_windows;
compiler/rustc_codegen_cranelift/src/global_asm.rs:107:        if cfg!(not(feature = "inline_asm")) {
compiler/rustc_codegen_gcc/Cargo.toml:20:[features]
compiler/rustc_codegen_gcc/Cargo.toml:30:smallvec = { version = "1.6.1", features = ["union", "may_dangle"] }
compiler/rustc_codegen_gcc/crate_patches/0002-rand-Disable-failing-test.patch:21:     #[cfg(feature = "serde1")]
compiler/rustc_codegen_gcc/patches/0022-core-Disable-not-compiling-tests.patch:32:+rand = { version = "0.8.5", default-features = false }
compiler/rustc_codegen_gcc/patches/0022-core-Disable-not-compiling-tests.patch:33:+rand_xorshift = { version = "0.3.0", default-features = false }
compiler/rustc_codegen_gcc/patches/0022-core-Disable-not-compiling-tests.patch:40: #![feature(alloc_layout_extra)]
compiler/rustc_codegen_gcc/patches/0022-core-Disable-not-compiling-tests.patch:41: #![feature(array_chunks)]
compiler/rustc_codegen_gcc/patches/0022-core-Disable-not-compiling-tests.patch:42: #![feature(array_methods)]
compiler/rustc_codegen_gcc/example/std_example.rs:1:#![feature(core_intrinsics, generators, generator_trait, is_sorted)]
compiler/rustc_codegen_gcc/example/std_example.rs:3:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:98:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:110:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:111:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:138:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:139:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:166:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:167:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:180:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:181:#[target_feature(enable = "avx2")]
compiler/rustc_codegen_gcc/example/std_example.rs:189:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:190:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:205:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:206:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:214:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:221:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:222:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:229:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:230:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/std_example.rs:236:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:237:#[target_feature(enable = "sse4.1")]
compiler/rustc_codegen_gcc/example/std_example.rs:249:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/example/std_example.rs:250:#[target_feature(enable = "sse4.1")]
compiler/rustc_codegen_gcc/example/std_example.rs:263:#[cfg(all(feature="master", target_arch = "x86_64"))]
compiler/rustc_codegen_gcc/example/std_example.rs:264:#[target_feature(enable = "sse2")]
compiler/rustc_codegen_gcc/example/mod_bench.rs:1:#![feature(start, core_intrinsics, lang_items)]
compiler/rustc_codegen_gcc/example/alloc_system.rs:5:#![feature(allocator_api, rustc_private)]
compiler/rustc_codegen_gcc/example/alloc_system.rs:6:#![cfg_attr(any(unix, target_os = "redox"), feature(libc))]
compiler/rustc_codegen_gcc/example/alloc_example.rs:1:#![feature(start, core_intrinsics, alloc_error_handler, lang_items)]
compiler/rustc_codegen_gcc/example/mini_core.rs:1:#![feature(
compiler/rustc_codegen_gcc/example/mini_core_hello_world.rs:3:#![feature(
compiler/rustc_codegen_gcc/example/arbitrary_self_types_pointers_and_wrappers.rs:3:#![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]
compiler/rustc_codegen_gcc/example/arbitrary_self_types_pointers_and_wrappers.rs:4:#![feature(rustc_attrs)]
compiler/rustc_codegen_gcc/example/example.rs:1:#![feature(no_core, unboxed_closures)]
compiler/rustc_codegen_gcc/tests/run/ptr_cast.rs:7:#![feature(arbitrary_self_types, auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/abort1.rs:6:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/fun_ptr.rs:7:#![feature(arbitrary_self_types, auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/slice.rs:7:#![feature(arbitrary_self_types, auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/tuple.rs:7:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/exit_code.rs:6:#![feature(auto_traits, lang_items, no_core, start)]
compiler/rustc_codegen_gcc/tests/run/mut_ref.rs:11:#![feature(auto_traits, lang_items, no_core, start, intrinsics, track_caller)]
compiler/rustc_codegen_gcc/tests/run/empty_main.rs:6:#![feature(auto_traits, lang_items, no_core, start)]
compiler/rustc_codegen_gcc/tests/run/int.rs:6:#![feature(const_black_box)]
compiler/rustc_codegen_gcc/tests/run/closure.rs:11:#![feature(arbitrary_self_types, auto_traits, lang_items, no_core, start, intrinsics,
compiler/rustc_codegen_gcc/tests/run/return-tuple.rs:9:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/int_overflow.rs:8:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/array.rs:10:#![feature(arbitrary_self_types, auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/exit.rs:6:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/assign.rs:9:#![feature(auto_traits, lang_items, no_core, start, intrinsics, track_caller)]
compiler/rustc_codegen_gcc/tests/run/abort2.rs:6:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/static.rs:12:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/structs.rs:8:#![feature(auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/tests/run/operations.rs:9:#![feature(auto_traits, lang_items, no_core, start, intrinsics, arbitrary_self_types)]
compiler/rustc_codegen_gcc/tests/run/asm.rs:6:#![feature(asm_const)]
compiler/rustc_codegen_gcc/tests/run/condition.rs:8:#![feature(arbitrary_self_types, auto_traits, lang_items, no_core, start, intrinsics)]
compiler/rustc_codegen_gcc/messages.ftl:64:codegen_gcc_tied_target_features = the target features {$features} must all be either enabled or disabled together
compiler/rustc_codegen_gcc/messages.ftl:65:    .help = add the missing features in a `target_feature` attribute
compiler/rustc_codegen_gcc/build.sh:21:        --no-default-features)
compiler/rustc_codegen_gcc/build.sh:22:            flags="$flags --no-default-features"
compiler/rustc_codegen_gcc/build.sh:25:        --features)
compiler/rustc_codegen_gcc/build.sh:27:            flags="$flags --features $1"
compiler/rustc_codegen_gcc/failing-ui-tests.txt:25:tests/ui/target-feature/missing-plusminus.rs
compiler/rustc_codegen_gcc/.github/workflows/ci.yml:24:          - { gcc: "libgccjit12.so", extra: "--no-default-features", env_extra: "TEST_FLAGS='-Cpanic=abort -Zpanic-abort-tests'", artifacts_branch: "gcc12" }
compiler/rustc_codegen_gcc/build_sysroot/Cargo.toml:10:std = { path = "./sysroot_src/library/std", features = ["panic_unwind", "backtrace"] }
compiler/rustc_codegen_gcc/build_sysroot/build_sysroot.sh:25:    cargo build --target $TARGET_TRIPLE --features compiler_builtins/c
compiler/rustc_codegen_gcc/test.sh:36:        --no-default-features)
compiler/rustc_codegen_gcc/test.sh:38:            flags="$flags --no-default-features"
compiler/rustc_codegen_gcc/test.sh:41:        --features)
compiler/rustc_codegen_gcc/test.sh:43:            flags="$flags --features $1"
compiler/rustc_codegen_gcc/test.sh:186:    std_flags="--cfg feature=\"master\""
compiler/rustc_codegen_gcc/src/callee.rs:1:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/callee.rs:121:                            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/callee.rs:136:                                #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/callee.rs:144:                    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/callee.rs:156:                            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/callee.rs:162:                        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/consts.rs:1:#[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/consts.rs:50:        #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/consts.rs:94:                #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/consts.rs:169:    #[cfg_attr(not(feature="master"), allow(unused_variables))]
compiler/rustc_codegen_gcc/src/consts.rs:171:        #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/consts.rs:237:                #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/lib.rs:9:#![feature(
compiler/rustc_codegen_gcc/src/lib.rs:76:use rustc_codegen_ssa::target_features::supported_target_features;
compiler/rustc_codegen_gcc/src/lib.rs:114:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/lib.rs:131:        // FIXME(antoyo) compute list of enabled features from cli flags
compiler/rustc_codegen_gcc/src/lib.rs:132:        providers.global_backend_features = |_tcx, ()| vec![];
compiler/rustc_codegen_gcc/src/lib.rs:162:    fn target_features(&self, sess: &Session, allow_unstable: bool) -> Vec<Symbol> {
compiler/rustc_codegen_gcc/src/lib.rs:163:        target_features(sess, allow_unstable)
compiler/rustc_codegen_gcc/src/lib.rs:180:    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel, _features: &[String]) -> TargetMachineFactoryFn<Self> {
compiler/rustc_codegen_gcc/src/lib.rs:311:pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {
compiler/rustc_codegen_gcc/src/lib.rs:312:    supported_target_features(sess)
compiler/rustc_codegen_gcc/src/lib.rs:315:            |&(feature, gate)| {
compiler/rustc_codegen_gcc/src/lib.rs:316:                if sess.is_nightly_build() || allow_unstable || gate.is_none() { Some(feature) } else { None }
compiler/rustc_codegen_gcc/src/lib.rs:319:        .filter(|_feature| {
compiler/rustc_codegen_gcc/src/lib.rs:320:            // TODO(antoyo): implement a way to get enabled feature in libgccjit.
compiler/rustc_codegen_gcc/src/lib.rs:324:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/lib.rs:327:                (_feature.contains("sse") || _feature.contains("avx")) && !_feature.contains("avx512") && !_feature.contains("sse4a")
compiler/rustc_codegen_gcc/src/lib.rs:329:            #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/lib.rs:341:        .map(|feature| Symbol::intern(feature))
compiler/rustc_codegen_gcc/src/attributes.rs:1:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/attributes.rs:5:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/attributes.rs:7:use rustc_codegen_ssa::target_features::tied_target_features;
compiler/rustc_codegen_gcc/src/attributes.rs:10:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/attributes.rs:16:use crate::{context::CodegenCx, errors::TiedTargetFeatures};
compiler/rustc_codegen_gcc/src/attributes.rs:18:// Given a map from target_features to whether they are enabled or disabled,
compiler/rustc_codegen_gcc/src/attributes.rs:20:pub fn check_tied_features(sess: &Session, features: &FxHashMap<&str, bool>) -> Option<&'static [&'static str]> {
compiler/rustc_codegen_gcc/src/attributes.rs:21:    for tied in tied_target_features(sess) {
compiler/rustc_codegen_gcc/src/attributes.rs:22:        // Tied features must be set to the same value, or not set at all
compiler/rustc_codegen_gcc/src/attributes.rs:24:        let enabled = features.get(tied_iter.next().unwrap());
compiler/rustc_codegen_gcc/src/attributes.rs:25:        if tied_iter.any(|feature| enabled != features.get(feature)) {
compiler/rustc_codegen_gcc/src/attributes.rs:34:fn to_gcc_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]> {
compiler/rustc_codegen_gcc/src/attributes.rs:58:        // but we manually enable neon when a feature only implicitly enables fp
compiler/rustc_codegen_gcc/src/attributes.rs:75:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/attributes.rs:96:    #[cfg_attr(not(feature="master"), allow(unused_variables))]
compiler/rustc_codegen_gcc/src/attributes.rs:102:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/attributes.rs:119:    let function_features =
compiler/rustc_codegen_gcc/src/attributes.rs:120:        codegen_fn_attrs.target_features.iter().map(|features| features.as_str()).collect::<Vec<&str>>();
compiler/rustc_codegen_gcc/src/attributes.rs:122:    if let Some(features) = check_tied_features(cx.tcx.sess, &function_features.iter().map(|features| (*features, true)).collect()) {
compiler/rustc_codegen_gcc/src/attributes.rs:124:            .get_attr(instance.def_id(), sym::target_feature)
compiler/rustc_codegen_gcc/src/attributes.rs:126:        cx.tcx.sess.create_err(TiedTargetFeatures {
compiler/rustc_codegen_gcc/src/attributes.rs:127:            features: features.join(", "),
compiler/rustc_codegen_gcc/src/attributes.rs:134:    let mut function_features = function_features
compiler/rustc_codegen_gcc/src/attributes.rs:136:        .flat_map(|feat| to_gcc_features(cx.tcx.sess, feat).into_iter())
compiler/rustc_codegen_gcc/src/attributes.rs:138:            InstructionSetAttr::ArmA32 => "-thumb-mode", // TODO(antoyo): support removing feature.
compiler/rustc_codegen_gcc/src/attributes.rs:143:    // TODO(antoyo): check if we really need global backend features. (Maybe they could be applied
compiler/rustc_codegen_gcc/src/attributes.rs:145:    let mut global_features = cx.tcx.global_backend_features(()).iter().map(|s| s.as_str());
compiler/rustc_codegen_gcc/src/attributes.rs:146:    function_features.extend(&mut global_features);
compiler/rustc_codegen_gcc/src/attributes.rs:147:    let target_features = function_features.join(",");
compiler/rustc_codegen_gcc/src/attributes.rs:148:    if !target_features.is_empty() {
compiler/rustc_codegen_gcc/src/attributes.rs:149:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/attributes.rs:150:        func.add_attribute(FnAttribute::Target(&target_features));
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:1:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:8:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:22:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:24:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:222:    #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:239:    #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:265:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:503:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:515:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:560:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:668:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/simd.rs:827:    #[cfg(feature = "master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:4:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:14:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:19:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:25:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:29:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:1059:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:1061:        #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:1077:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:1142:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/mod.rs:1182:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/llvm.rs:333:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/intrinsic/llvm.rs:414:#[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/intrinsic/llvm.rs:427:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/base.rs:11:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/base.rs:25:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/base.rs:96:        // TODO(antoyo): only add the following cli argument if the feature is supported.
compiler/rustc_codegen_gcc/src/allocator.rs:1:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/allocator.rs:58:                #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/allocator.rs:70:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/allocator.rs:102:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/allocator.rs:111:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/mono_item.rs:1:#[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/mono_item.rs:16:    #[cfg_attr(not(feature="master"), allow(unused_variables))]
compiler/rustc_codegen_gcc/src/mono_item.rs:25:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/mono_item.rs:32:    #[cfg_attr(not(feature="master"), allow(unused_variables))]
compiler/rustc_codegen_gcc/src/mono_item.rs:51:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/mono_item.rs:55:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/type_.rs:126:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/type_.rs:234:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/errors.rs:232:#[diag(codegen_gcc_tied_target_features)]
compiler/rustc_codegen_gcc/src/errors.rs:234:pub(crate) struct TiedTargetFeatures {
compiler/rustc_codegen_gcc/src/errors.rs:237:    pub features: String,
compiler/rustc_codegen_gcc/src/asm.rs:174:                                .any(|&(_, feature)| {
compiler/rustc_codegen_gcc/src/asm.rs:175:                                    if let Some(feature) = feature {
compiler/rustc_codegen_gcc/src/asm.rs:176:                                        self.tcx.sess.target_features.contains(&feature)
compiler/rustc_codegen_gcc/src/builder.rs:327:            #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:335:            #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:475:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:503:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1131:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1136:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1224:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1231:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1251:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1264:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1273:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1620:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1636:                #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1640:                #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1694:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1699:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1728:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1743:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1754:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1763:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1774:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1823:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1838:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1847:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/builder.rs:1862:    #[cfg(not(feature="master"))]
compiler/rustc_codegen_gcc/src/builder.rs:1873:        #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/type_of.rs:28:    #[cfg(feature="master")]
compiler/rustc_codegen_gcc/src/type_of.rs:40:    #[cfg(feature="master")]
compiler/rustc_parse_format/src/lib.rs:15:// `#![feature]` attributes should be added.
compiler/rustc_resolve/Cargo.toml:10:pulldown-cmark = { version = "0.9.3", default-features = false }
compiler/rustc_resolve/Cargo.toml:18:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_resolve/Cargo.toml:28:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_resolve/messages.ftl:199:    use `#![feature(generic_const_exprs)]` to allow generic const expressions
compiler/rustc_resolve/src/diagnostics.rs:12:use rustc_feature::BUILTIN_ATTRIBUTES;
compiler/rustc_resolve/src/diagnostics.rs:2281:                && let MetaItemKind::NameValue(feature_name) = &meta_item.kind
compiler/rustc_resolve/src/diagnostics.rs:2283:                err.note(format!("the item is gated behind the `{}` feature", feature_name.symbol));
compiler/rustc_resolve/src/late.rs:132:    /// - `feature(generic_const_exprs)` is enabled
compiler/rustc_resolve/src/late.rs:1799:                    // deprecated impl elision in new features like impl elision and `async fn`,
compiler/rustc_resolve/src/late.rs:2572:                    if self.r.tcx.sess.features_untracked().non_lifetime_binders {
compiler/rustc_resolve/src/late.rs:4052:                if self.r.tcx.features().generic_const_exprs || is_trivial_const_arg {
compiler/rustc_resolve/src/lib.rs:10:#![feature(assert_matches)]
compiler/rustc_resolve/src/lib.rs:11:#![feature(box_patterns)]
compiler/rustc_resolve/src/lib.rs:12:#![feature(extract_if)]
compiler/rustc_resolve/src/lib.rs:13:#![feature(if_let_guard)]
compiler/rustc_resolve/src/lib.rs:14:#![feature(iter_intersperse)]
compiler/rustc_resolve/src/lib.rs:15:#![feature(let_chains)]
compiler/rustc_resolve/src/lib.rs:16:#![feature(never_type)]
compiler/rustc_resolve/src/lib.rs:17:#![feature(rustc_attrs)]
compiler/rustc_resolve/src/lib.rs:1040:    /// Features enabled for this crate.
compiler/rustc_resolve/src/lib.rs:1041:    active_features: FxHashSet<Symbol>,
compiler/rustc_resolve/src/lib.rs:1274:        let features = tcx.sess.features_untracked();
compiler/rustc_resolve/src/lib.rs:1356:            active_features: features
compiler/rustc_resolve/src/lib.rs:1357:                .declared_lib_features
compiler/rustc_resolve/src/lib.rs:1360:                .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
compiler/rustc_resolve/src/late/diagnostics.rs:1429:                    let msg = "you might have meant to use `#![feature(trait_alias)]` instead of a \
compiler/rustc_resolve/src/late/diagnostics.rs:2450:                assert!(!self.r.tcx.features().generic_const_exprs);
compiler/rustc_resolve/src/macros.rs:30:use rustc_session::parse::feature_err;
compiler/rustc_resolve/src/macros.rs:150:// Some feature gates for inner attributes are reported as lints for backward compatibility.
compiler/rustc_resolve/src/macros.rs:218:        features: &[Symbol],
compiler/rustc_resolve/src/macros.rs:228:                features.into(),
compiler/rustc_resolve/src/macros.rs:581:            && !self.tcx.sess.features_untracked().custom_inner_attributes
compiler/rustc_resolve/src/macros.rs:591:                feature_err(
compiler/rustc_resolve/src/macros.rs:834:                let feature = stability.feature;
compiler/rustc_resolve/src/macros.rs:836:                let is_allowed = |feature| {
compiler/rustc_resolve/src/macros.rs:837:                    self.active_features.contains(&feature) || span.allows_unstable(feature)
compiler/rustc_resolve/src/macros.rs:839:                let allowed_by_implication = implied_by.is_some_and(|feature| is_allowed(feature));
compiler/rustc_resolve/src/macros.rs:840:                if !is_allowed(feature) && !allowed_by_implication {
compiler/rustc_resolve/src/macros.rs:846:                        feature,
compiler/rustc_resolve/src/ident.rs:2:use rustc_feature::is_builtin_attr_name;
compiler/rustc_symbol_mangling/src/test.rs:17:    // if the `rustc_attrs` feature is not enabled, then the
compiler/rustc_symbol_mangling/src/test.rs:20:    if !tcx.features().rustc_attrs {
compiler/rustc_symbol_mangling/src/lib.rs:91:#![feature(never_type)]
compiler/rustc_symbol_mangling/src/lib.rs:200:    // * On the wasm32 targets there is a bug (or feature) in LLD [1] where the
compiler/rustc_privacy/src/lib.rs:2:#![feature(associated_type_defaults)]
compiler/rustc_privacy/src/lib.rs:3:#![feature(rustc_private)]
compiler/rustc_privacy/src/lib.rs:4:#![feature(try_blocks)]
compiler/rustc_privacy/src/lib.rs:5:#![feature(let_chains)]
compiler/rustc_query_system/Cargo.toml:13:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_query_system/Cargo.toml:24:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_query_system/Cargo.toml:28:[features]
compiler/rustc_query_system/src/lib.rs:1:#![feature(assert_matches)]
compiler/rustc_query_system/src/lib.rs:2:#![feature(core_intrinsics)]
compiler/rustc_query_system/src/lib.rs:3:#![feature(hash_raw_entry)]
compiler/rustc_query_system/src/lib.rs:4:#![feature(min_specialization)]
compiler/rustc_query_system/src/lib.rs:5:#![feature(extern_types)]
compiler/rustc_query_system/src/lib.rs:6:#![feature(let_chains)]
compiler/rustc_query_system/src/ich/impls_syntax.rs:138:impl<'tcx> HashStable<StableHashingContext<'tcx>> for rustc_feature::Features {
compiler/rustc_query_system/src/ich/impls_syntax.rs:142:        self.declared_lang_features.hash_stable(hcx, hasher);
compiler/rustc_query_system/src/ich/impls_syntax.rs:143:        self.declared_lib_features.hash_stable(hcx, hasher);
compiler/rustc_query_system/src/ich/impls_syntax.rs:145:        self.walk_feature_fields(|feature_name, value| {
compiler/rustc_query_system/src/ich/impls_syntax.rs:146:            feature_name.hash_stable(hcx, hasher);
compiler/rustc_fluent_macro/Cargo.toml:13:syn = { version = "2", features = ["full"] }
compiler/rustc_fluent_macro/Cargo.toml:16:unic-langid = { version = "0.9.0", features = ["macros"] }
compiler/rustc_fluent_macro/src/lib.rs:2:#![feature(proc_macro_diagnostic)]
compiler/rustc_fluent_macro/src/lib.rs:3:#![feature(proc_macro_span)]
compiler/rustc_index/Cargo.toml:9:arrayvec = { version = "0.7", default-features = false }
compiler/rustc_index/Cargo.toml:14:[features]
compiler/rustc_index/src/lib.rs:4:    feature = "nightly",
compiler/rustc_index/src/lib.rs:5:    feature(
compiler/rustc_index/src/lib.rs:16:#[cfg(feature = "nightly")]
compiler/rustc_index/src/lib.rs:18:#[cfg(feature = "nightly")]
compiler/rustc_index/src/lib.rs:27:#[cfg(feature = "rustc_macros")]
compiler/rustc_index/src/vec.rs:1:#[cfg(feature = "rustc_serialize")]
compiler/rustc_index/src/vec.rs:234:    #[cfg(feature = "nightly")]
compiler/rustc_index/src/vec.rs:240:    #[cfg(feature = "nightly")]
compiler/rustc_index/src/vec.rs:300:#[cfg(feature = "rustc_serialize")]
compiler/rustc_index/src/vec.rs:307:#[cfg(feature = "rustc_serialize")]
compiler/rustc_infer/Cargo.toml:21:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_infer/src/lib.rs:16:#![feature(associated_type_bounds)]
compiler/rustc_infer/src/lib.rs:17:#![feature(box_patterns)]
compiler/rustc_infer/src/lib.rs:18:#![feature(control_flow_enum)]
compiler/rustc_infer/src/lib.rs:19:#![feature(extend_one)]
compiler/rustc_infer/src/lib.rs:20:#![feature(let_chains)]
compiler/rustc_infer/src/lib.rs:21:#![feature(if_let_guard)]
compiler/rustc_infer/src/lib.rs:22:#![feature(min_specialization)]
compiler/rustc_infer/src/lib.rs:23:#![feature(never_type)]
compiler/rustc_infer/src/lib.rs:24:#![feature(try_blocks)]
compiler/rustc_infer/src/infer/opaque_types.rs:304:    /// # #![feature(type_alias_impl_trait)]
compiler/rustc_infer/src/infer/opaque_types.rs:658:/// # #![feature(type_alias_impl_trait)]
compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs:298:            TargetFeatureCast(def_id) => {
compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs:299:                let target_spans = tcx.get_attrs(def_id, sym::target_feature).map(|attr| attr.span);
compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs:301:                    "functions with `#[target_feature]` can only be coerced to `unsafe` function pointers"
compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs:303:                diag.span_labels(target_spans, "`#[target_feature]` added here");
compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs:591:                // FIXME: account for `#![feature(specialization)]`
compiler/rustc_infer/src/infer/combine.rs:227:                if self.tcx.features().generic_const_exprs || self.next_trait_solver() =>
compiler/rustc_infer/src/infer/combine.rs:262:    /// #![feature(generic_const_exprs)]
compiler/rustc_query_impl/Cargo.toml:27:# Not used directly, but included to enable the unstable_offset_of feature
compiler/rustc_query_impl/Cargo.toml:28:memoffset = { version = "0.9.0", features = ["unstable_offset_of"] }
compiler/rustc_query_impl/Cargo.toml:30:[features]
compiler/rustc_query_impl/src/lib.rs:5:#![feature(const_mut_refs)]
compiler/rustc_query_impl/src/lib.rs:6:#![feature(const_refs_to_cell)]
compiler/rustc_query_impl/src/lib.rs:7:#![feature(min_specialization)]
compiler/rustc_query_impl/src/lib.rs:8:#![feature(never_type)]
compiler/rustc_query_impl/src/lib.rs:9:#![feature(rustc_attrs)]
compiler/rustc_hir/Cargo.toml:19:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_hir/Cargo.toml:20:odht = { version = "0.3.1", features = ["nightly"] }
compiler/rustc_hir/src/def.rs:379:        // FIXME(generic_const_exprs): Remove this bodge once that feature is stable.
compiler/rustc_hir/src/lib.rs:5:#![feature(associated_type_defaults)]
compiler/rustc_hir/src/lib.rs:6:#![feature(closure_track_caller)]
compiler/rustc_hir/src/lib.rs:7:#![feature(const_btree_len)]
compiler/rustc_hir/src/lib.rs:8:#![feature(let_chains)]
compiler/rustc_hir/src/lib.rs:9:#![feature(min_specialization)]
compiler/rustc_hir/src/lib.rs:10:#![feature(never_type)]
compiler/rustc_hir/src/lib.rs:11:#![feature(rustc_attrs)]
compiler/rustc_hir/src/lib.rs:12:#![feature(variant_count)]
compiler/rustc_hir/src/hir.rs:426:    /// Bounds for `feature(return_type_notation)`, like `T: Trait<method(..): Send>`,
compiler/rustc_hir/src/hir.rs:2954:    /// unstable feature gating. May be removed in the future.
compiler/rustc_trait_selection/Cargo.toml:26:rustc_transmute = { path = "../rustc_transmute", features = ["rustc"] }
compiler/rustc_trait_selection/Cargo.toml:27:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs:198:            if ecx.tcx().features().generator_clone {
compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs:232:                && tcx.codegen_fn_attrs(def_id).target_features.is_empty()
compiler/rustc_trait_selection/src/solve/mod.rs:195:            // - `Expr` is part of `feature(generic_const_exprs)` and is not implemented yet
compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs:367:            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |cfg| {
compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs:497:                Some(tcx.features()),
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:497:        // FIXME: once `#![feature(associated_type_bounds)]` is stabilized, we should suggest
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:2895:                if !self.tcx.features().unsized_locals {
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:2896:                    err.help("unsized locals are gated as an unstable feature");
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:2930:                if tcx.sess.opts.unstable_features.is_nightly_build()
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:2931:                    && !self.tcx.features().unsized_fn_params
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:2933:                    err.help("unsized fn params are gated as an unstable feature");
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:3361:                if tcx.sess.opts.unstable_features.is_nightly_build() {
compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs:3362:                    err.help("add `#![feature(trivial_bounds)]` to the crate attributes to enable");
compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:938:                        let is_target_feature_fn = if let ty::FnDef(def_id, _) =
compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:941:                            !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()
compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:945:                        if is_fn_trait && is_target_feature_fn {
compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:947:                                "`#[target_feature]` functions do not implement the `Fn` traits",
compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:3361:        if !self.tcx.features().generic_const_exprs {
compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:3370:            // Note that with `feature(generic_const_exprs)` this case should not
compiler/rustc_trait_selection/src/traits/specialize/mod.rs:143:    // The feature gate should prevent introducing new specializations, but not
compiler/rustc_trait_selection/src/traits/specialize/mod.rs:145:    let features = tcx.features();
compiler/rustc_trait_selection/src/traits/specialize/mod.rs:146:    let specialization_enabled = features.specialization || features.min_specialization;
compiler/rustc_trait_selection/src/traits/fulfill.rs:518:                        tcx.features().generic_const_exprs,
compiler/rustc_trait_selection/src/traits/fulfill.rs:519:                        "`ConstEquate` without a feature gate: {c1:?} {c2:?}",
compiler/rustc_trait_selection/src/traits/const_evaluatable.rs:43:    if tcx.features().generic_const_exprs {
compiler/rustc_trait_selection/src/traits/const_evaluatable.rs:92:                bug!("`ConstKind::Expr` without `feature(generic_const_exprs)` enabled")
compiler/rustc_trait_selection/src/traits/const_evaluatable.rs:108:            // the current crate does not enable `feature(generic_const_exprs)`, abort
compiler/rustc_trait_selection/src/traits/const_evaluatable.rs:125:                    .note("the crate this constant originates from uses `#![feature(generic_const_exprs)]`")
compiler/rustc_trait_selection/src/traits/const_evaluatable.rs:128:                        "consider enabling this feature",
compiler/rustc_trait_selection/src/traits/const_evaluatable.rs:129:                        "#![feature(generic_const_exprs)]\n",
compiler/rustc_trait_selection/src/traits/wf.rs:776:                    let defer_to_coercion = self.tcx().features().object_safe_for_dispatch;
compiler/rustc_trait_selection/src/traits/mod.rs:275:            if tcx.features().generic_const_exprs {
compiler/rustc_trait_selection/src/traits/mod.rs:288:                    // should actually be okay since without `feature(generic_const_exprs)` the only
compiler/rustc_trait_selection/src/traits/project.rs:258:                    && selcx.tcx().features().generic_associated_types_extended =>
compiler/rustc_trait_selection/src/traits/project.rs:260:                // If the `generic_associated_types_extended` feature is active, then we ignore any
compiler/rustc_trait_selection/src/traits/project.rs:266:                // however, this allows experimenting potential GAT features without running into
compiler/rustc_trait_selection/src/traits/project.rs:733:        if tcx.features().generic_const_exprs
compiler/rustc_trait_selection/src/traits/select/mod.rs:876:                        tcx.features().generic_const_exprs,
compiler/rustc_trait_selection/src/traits/select/mod.rs:877:                        "`ConstEquate` without a feature gate: {c1:?} {c2:?}",
compiler/rustc_trait_selection/src/traits/select/mod.rs:1414:                    // or ignore error with const_async_blocks feature
compiler/rustc_trait_selection/src/traits/select/mod.rs:2194:                if self.tcx().features().generator_clone {
compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:319:            // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).
compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:322:                    && self.tcx().codegen_fn_attrs(def_id).target_features.is_empty()
compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:577:                        if !self.infcx.tcx.features().object_safe_for_dispatch {
compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:634:        if tcx.features().trait_upcasting {
compiler/rustc_trait_selection/src/traits/select/confirmation.rs:561:            if !defs.params.is_empty() && !tcx.features().generic_associated_types_extended {
compiler/rustc_trait_selection/src/traits/object_safety.rs:323:    if !tcx.features().non_lifetime_binders {
compiler/rustc_trait_selection/src/traits/object_safety.rs:394:            if !tcx.features().generic_associated_types_extended
compiler/rustc_trait_selection/src/lib.rs:14:#![feature(associated_type_bounds)]
compiler/rustc_trait_selection/src/lib.rs:15:#![feature(box_patterns)]
compiler/rustc_trait_selection/src/lib.rs:16:#![feature(control_flow_enum)]
compiler/rustc_trait_selection/src/lib.rs:17:#![feature(extract_if)]
compiler/rustc_trait_selection/src/lib.rs:18:#![feature(let_chains)]
compiler/rustc_trait_selection/src/lib.rs:19:#![feature(if_let_guard)]
compiler/rustc_trait_selection/src/lib.rs:20:#![feature(never_type)]
compiler/rustc_trait_selection/src/lib.rs:21:#![feature(result_option_inspect)]
compiler/rustc_trait_selection/src/lib.rs:22:#![feature(type_alias_impl_trait)]
compiler/rustc_trait_selection/src/lib.rs:23:#![feature(min_specialization)]
compiler/rustc_mir_transform/Cargo.toml:10:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_mir_transform/messages.ftl:47:mir_transform_target_feature_call_label = call to function with `#[target_feature]`
compiler/rustc_mir_transform/messages.ftl:48:mir_transform_target_feature_call_note = can only be called if the required target features are available
compiler/rustc_mir_transform/src/const_prop_lint.rs:69:        // However, it's possible to `#!feature(trivial_bounds)]` to write
compiler/rustc_mir_transform/src/lib.rs:4:#![feature(box_patterns)]
compiler/rustc_mir_transform/src/lib.rs:5:#![feature(is_sorted)]
compiler/rustc_mir_transform/src/lib.rs:6:#![feature(let_chains)]
compiler/rustc_mir_transform/src/lib.rs:7:#![feature(map_try_insert)]
compiler/rustc_mir_transform/src/lib.rs:8:#![feature(min_specialization)]
compiler/rustc_mir_transform/src/lib.rs:9:#![feature(never_type)]
compiler/rustc_mir_transform/src/lib.rs:10:#![feature(option_get_or_insert_default)]
compiler/rustc_mir_transform/src/lib.rs:11:#![feature(trusted_step)]
compiler/rustc_mir_transform/src/lib.rs:12:#![feature(try_blocks)]
compiler/rustc_mir_transform/src/lib.rs:13:#![feature(yeet_expr)]
compiler/rustc_mir_transform/src/lib.rs:14:#![feature(if_let_guard)]
compiler/rustc_mir_transform/src/lib.rs:407:    // However, it's possible to `#!feature(trivial_bounds)]` to write
compiler/rustc_mir_transform/src/inline.rs:398:        for feature in &callee_attrs.target_features {
compiler/rustc_mir_transform/src/inline.rs:399:            if !self.codegen_fn_attrs.target_features.contains(feature) {
compiler/rustc_mir_transform/src/inline.rs:400:                return Err("incompatible target feature");
compiler/rustc_mir_transform/src/check_unsafety.rs:82:                    self.check_target_features(*func_id);
compiler/rustc_mir_transform/src/check_unsafety.rs:356:    /// the called function has target features the calling function hasn't.
compiler/rustc_mir_transform/src/check_unsafety.rs:357:    fn check_target_features(&mut self, func_did: DefId) {
compiler/rustc_mir_transform/src/check_unsafety.rs:364:        let callee_features = &self.tcx.codegen_fn_attrs(func_did).target_features;
compiler/rustc_mir_transform/src/check_unsafety.rs:366:        let self_features = &self.tcx.body_codegen_attrs(self.body_did.to_def_id()).target_features;
compiler/rustc_mir_transform/src/check_unsafety.rs:368:        // Is `callee_features` a subset of `calling_features`?
compiler/rustc_mir_transform/src/check_unsafety.rs:369:        if !callee_features.iter().all(|feature| self_features.contains(feature)) {
compiler/rustc_mir_transform/src/errors.rs:104:            CallToFunctionWith => crate::fluent_generated::mir_transform_target_feature_call_note,
compiler/rustc_mir_transform/src/errors.rs:127:            CallToFunctionWith => crate::fluent_generated::mir_transform_target_feature_call_label,
compiler/rustc_mir_transform/src/coverage/counters.rs:35:    /// features when formatting `CoverageKind` (counter) values.
compiler/rustc_mir_transform/src/coverage/tests.rs:21://! Also note, some basic features of `Span` also rely on the `Span`s own "session globals", which
compiler/rustc_mir_transform/src/coverage/tests.rs:23://! basic, coverage-specific features would be impossible to test, but thankfully initializing these
compiler/rustc_error_messages/Cargo.toml:19:unic-langid = { version = "0.9.0", features = ["macros"] }
compiler/rustc_error_messages/Cargo.toml:24:[features]
compiler/rustc_error_messages/src/lib.rs:1:#![feature(let_chains)]
compiler/rustc_error_messages/src/lib.rs:2:#![feature(lazy_cell)]
compiler/rustc_error_messages/src/lib.rs:3:#![feature(rustc_attrs)]
compiler/rustc_error_messages/src/lib.rs:4:#![feature(type_alias_impl_trait)]
compiler/rustc_plugin_impl/src/lib.rs:6://! feature](https://doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html)
compiler/rustc_data_structures/Cargo.toml:9:arrayvec = { version = "0.7", default-features = false }
compiler/rustc_data_structures/Cargo.toml:25:smallvec = { version = "1.8.1", features = [
compiler/rustc_data_structures/Cargo.toml:42:features = [
compiler/rustc_data_structures/Cargo.toml:53:[features]
compiler/rustc_data_structures/src/lib.rs:10:#![feature(array_windows)]
compiler/rustc_data_structures/src/lib.rs:11:#![feature(associated_type_bounds)]
compiler/rustc_data_structures/src/lib.rs:12:#![feature(auto_traits)]
compiler/rustc_data_structures/src/lib.rs:13:#![feature(cell_leak)]
compiler/rustc_data_structures/src/lib.rs:14:#![feature(core_intrinsics)]
compiler/rustc_data_structures/src/lib.rs:15:#![feature(extend_one)]
compiler/rustc_data_structures/src/lib.rs:16:#![feature(hash_raw_entry)]
compiler/rustc_data_structures/src/lib.rs:17:#![feature(hasher_prefixfree_extras)]
compiler/rustc_data_structures/src/lib.rs:18:#![feature(maybe_uninit_uninit_array)]
compiler/rustc_data_structures/src/lib.rs:19:#![feature(min_specialization)]
compiler/rustc_data_structures/src/lib.rs:20:#![feature(never_type)]
compiler/rustc_data_structures/src/lib.rs:21:#![feature(type_alias_impl_trait)]
compiler/rustc_data_structures/src/lib.rs:22:#![feature(new_uninit)]
compiler/rustc_data_structures/src/lib.rs:23:#![feature(lazy_cell)]
compiler/rustc_data_structures/src/lib.rs:24:#![feature(rustc_attrs)]
compiler/rustc_data_structures/src/lib.rs:25:#![feature(negative_impls)]
compiler/rustc_data_structures/src/lib.rs:26:#![feature(test)]
compiler/rustc_data_structures/src/lib.rs:27:#![feature(thread_id_value)]
compiler/rustc_data_structures/src/lib.rs:28:#![feature(vec_into_raw_parts)]
compiler/rustc_data_structures/src/lib.rs:29:#![feature(allocator_api)]
compiler/rustc_data_structures/src/lib.rs:30:#![feature(get_mut_unchecked)]
compiler/rustc_data_structures/src/lib.rs:31:#![feature(lint_reasons)]
compiler/rustc_data_structures/src/lib.rs:32:#![feature(unwrap_infallible)]
compiler/rustc_data_structures/src/lib.rs:33:#![feature(strict_provenance)]
compiler/rustc_data_structures/src/lib.rs:34:#![feature(ptr_alignment_type)]
compiler/rustc_data_structures/src/lib.rs:35:#![feature(macro_metavar_expr)]
compiler/rustc_data_structures/src/profiling.rs:44://! efficient `measureme` has two features:
compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs:14:/// #![feature(macro_metavar_expr)]
compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs:54:/// #![feature(macro_metavar_expr)]
compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs:71:/// #![feature(macro_metavar_expr)]
compiler/rustc_ast_pretty/src/lib.rs:3:#![feature(associated_type_bounds)]
compiler/rustc_ast_pretty/src/lib.rs:4:#![feature(box_patterns)]
compiler/rustc_ast_pretty/src/lib.rs:5:#![feature(with_negative_coherence)]
compiler/rustc_ast_pretty/src/pprust/state.rs:116:        // We need to print `#![no_std]` (and its feature gate) so that
compiler/rustc_ast_pretty/src/pprust/state.rs:119:        // of the feature gate, so we fake them up here.
compiler/rustc_ast_pretty/src/pprust/state.rs:121:        // `#![feature(prelude_import)]`
compiler/rustc_ast_pretty/src/pprust/state.rs:125:            sym::feature,
compiler/rustc_fs_util/src/lib.rs:1:#![feature(absolute_path)]
compiler/rustc_apfloat/Cargo.toml:8:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_apfloat/src/lib.rs:207:/// Some features that may or may not be worth adding:
compiler/rustc_hir_typeck/Cargo.toml:9:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_hir_typeck/src/callee.rs:758:        if !tcx.features().effects || tcx.sess.opts.unstable_opts.unleash_the_miri_inside_of_you {
compiler/rustc_hir_typeck/src/upvar.rs:230:        let after_feature_tys = self.final_upvar_tys(closure_def_id);
compiler/rustc_hir_typeck/src/upvar.rs:258:        let before_feature_tys = self.final_upvar_tys(closure_def_id);
compiler/rustc_hir_typeck/src/upvar.rs:318:                    before_feature_tys: Ty::new_tup(self.tcx, &before_feature_tys),
compiler/rustc_hir_typeck/src/upvar.rs:319:                    after_feature_tys: Ty::new_tup(self.tcx, &after_feature_tys),
compiler/rustc_hir_typeck/src/lib.rs:1:#![feature(if_let_guard)]
compiler/rustc_hir_typeck/src/lib.rs:2:#![feature(let_chains)]
compiler/rustc_hir_typeck/src/lib.rs:3:#![feature(try_blocks)]
compiler/rustc_hir_typeck/src/lib.rs:4:#![feature(never_type)]
compiler/rustc_hir_typeck/src/lib.rs:5:#![feature(box_patterns)]
compiler/rustc_hir_typeck/src/lib.rs:6:#![feature(min_specialization)]
compiler/rustc_hir_typeck/src/lib.rs:7:#![feature(control_flow_enum)]
compiler/rustc_hir_typeck/src/lib.rs:8:#![feature(option_as_slice)]
compiler/rustc_hir_typeck/src/lib.rs:206:        check_fn(&mut fcx, fn_sig, decl, def_id, body, None, tcx.features().unsized_fn_params);
compiler/rustc_hir_typeck/src/lib.rs:437:    handler.note_without_error("the compiler expectedly panicked. this is a feature.");
compiler/rustc_hir_typeck/src/pat.rs:409:        if self.tcx.features().string_deref_patterns && let hir::ExprKind::Lit(Spanned { node: ast::LitKind::Str(..), .. }) = lt.kind {
compiler/rustc_hir_typeck/src/cast.rs:862:                if fcx.tcx.features().dyn_star {
compiler/rustc_hir_typeck/src/fallback.rs:76:    //   (and the setting of `#![feature(never_type_fallback)]`).
compiler/rustc_hir_typeck/src/expr.rs:50:use rustc_session::parse::feature_err;
compiler/rustc_hir_typeck/src/expr.rs:553:            if !tcx.features().unsized_fn_params {
compiler/rustc_hir_typeck/src/expr.rs:1721:            let fru_tys = if self.tcx.features().type_changing_struct_update {
compiler/rustc_hir_typeck/src/expr.rs:1804:                        feature_err(
compiler/rustc_hir_typeck/src/gather_locals.rs:125:                if !self.fcx.tcx.features().unsized_fn_params {
compiler/rustc_hir_typeck/src/gather_locals.rs:143:                if !self.fcx.tcx.features().unsized_locals {
compiler/rustc_hir_typeck/src/coercion.rs:57:use rustc_session::parse::feature_err;
compiler/rustc_hir_typeck/src/coercion.rs:234:            ty::Dynamic(predicates, region, ty::DynStar) if self.tcx.features().dyn_star => {
compiler/rustc_hir_typeck/src/coercion.rs:708:        if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {
compiler/rustc_hir_typeck/src/coercion.rs:709:            feature_err(
compiler/rustc_hir_typeck/src/coercion.rs:719:            && !self.tcx().features().trait_upcasting
compiler/rustc_hir_typeck/src/coercion.rs:723:            let mut err = feature_err(
compiler/rustc_hir_typeck/src/coercion.rs:743:        if !self.tcx.features().dyn_star {
compiler/rustc_hir_typeck/src/coercion.rs:875:                    // Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396).
compiler/rustc_hir_typeck/src/coercion.rs:878:                        && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()
compiler/rustc_hir_typeck/src/coercion.rs:880:                        return Err(TypeError::TargetFeatureCast(def_id));
compiler/rustc_hir_typeck/src/coercion.rs:1605:                        if !fcx.tcx.features().unsized_locals {
compiler/rustc_hir_typeck/src/coercion.rs:1624:                        if !fcx.tcx.features().unsized_locals {
compiler/rustc_hir_typeck/src/method/confirm.rs:513:                // to the feature, like the self type can't reference method args.
compiler/rustc_hir_typeck/src/method/confirm.rs:514:                if self.tcx.features().arbitrary_self_types {
compiler/rustc_hir_typeck/src/method/probe.rs:436:            } else if bad_ty.reached_raw_pointer && !self.tcx.features().arbitrary_self_types {
compiler/rustc_hir_typeck/src/method/probe.rs:1321:                if let stability::EvalResult::Deny { feature, .. } =
compiler/rustc_hir_typeck/src/method/probe.rs:1324:                    uc.push((candidate.clone(), feature));
compiler/rustc_hir_typeck/src/method/probe.rs:1423:                    for (candidate, feature) in &self.unstable_candidates {
compiler/rustc_hir_typeck/src/method/probe.rs:1425:                            "add `#![feature({})]` to the crate attributes to enable `{}`",
compiler/rustc_hir_typeck/src/method/probe.rs:1426:                            feature,
compiler/rustc_transmute/Cargo.toml:18:[features]
compiler/rustc_transmute/src/layout/tree.rs:170:#[cfg(feature = "rustc")]
compiler/rustc_transmute/src/layout/mod.rs:49:#[cfg(feature = "rustc")]
compiler/rustc_transmute/src/lib.rs:1:#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type)]
compiler/rustc_transmute/src/lib.rs:69:#[cfg(feature = "rustc")]
compiler/rustc_transmute/src/lib.rs:184:#[cfg(feature = "rustc")]
compiler/rustc_transmute/src/maybe_transmutable/query_context.rs:44:#[cfg(feature = "rustc")]
compiler/rustc_transmute/src/maybe_transmutable/mod.rs:58:#[cfg(feature = "rustc")]
compiler/rustc_transmute/src/maybe_transmutable/tests.rs:52:            #[cfg(feature = "rustc")]
compiler/rustc_transmute/src/maybe_transmutable/tests.rs:54:            #[cfg(not(feature = "rustc"))]
compiler/rustc_error_codes/src/error_codes.rs:642://  E0629, // missing 'feature' (rustc_const_unstable)
compiler/rustc_error_codes/src/error_codes.rs:651://  E0723, // unstable feature in `const` context
compiler/rustc_error_codes/src/error_codes/E0374.md:7:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0374.md:35:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0498.md:6:#![feature(plugin)]
compiler/rustc_error_codes/src/error_codes/E0498.md:16:#![feature(plugin)]
compiler/rustc_error_codes/src/error_codes/E0498.md:20:See the [`plugin` feature] section of the Unstable book for more details.
compiler/rustc_error_codes/src/error_codes/E0498.md:22:[`plugin` feature]: https://doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html
compiler/rustc_error_codes/src/error_codes/E0719.md:6:#![feature(associated_type_bounds)]
compiler/rustc_error_codes/src/error_codes/E0719.md:22:#![feature(associated_type_bounds)]
compiler/rustc_error_codes/src/error_codes/E0077.md:7:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0077.md:19:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0137.md:8:#![feature(main)]
compiler/rustc_error_codes/src/error_codes/E0137.md:22:#![feature(main)]
compiler/rustc_error_codes/src/error_codes/E0230.md:7:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0321.md:7:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0152.md:6:#![feature(lang_items)]
compiler/rustc_error_codes/src/error_codes/E0152.md:25:[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib
compiler/rustc_error_codes/src/error_codes/E0628.md:6:#![feature(generators, generator_trait)]
compiler/rustc_error_codes/src/error_codes/E0628.md:23:#![feature(generators, generator_trait)]
compiler/rustc_error_codes/src/error_codes/E0778.md:6:#![feature(isa_attribute)]
compiler/rustc_error_codes/src/error_codes/E0778.md:17:#![feature(isa_attribute)]
compiler/rustc_error_codes/src/error_codes/E0778.md:26:#![feature(isa_attribute)]
compiler/rustc_error_codes/src/error_codes/E0669.md:8:#![feature(llvm_asm)]
compiler/rustc_error_codes/src/error_codes/E0094.md:6:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0094.md:20:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0076.md:7:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0076.md:20:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0231.md:7:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0779.md:6:#![feature(isa_attribute)]
compiler/rustc_error_codes/src/error_codes/E0779.md:22:#![feature(isa_attribute)]
compiler/rustc_error_codes/src/error_codes/E0668.md:8:#![feature(llvm_asm)]
compiler/rustc_error_codes/src/error_codes/E0184.md:16:disallowed. This feature can make some sense in theory, but the current
compiler/rustc_error_codes/src/error_codes/E0264.md:6:#![feature(lang_items)]
compiler/rustc_error_codes/src/error_codes/E0264.md:18:#![feature(lang_items)]
compiler/rustc_error_codes/src/error_codes/E0375.md:7:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0375.md:39:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0132.md:6:#![feature(start)]
compiler/rustc_error_codes/src/error_codes/E0132.md:16:[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib
compiler/rustc_error_codes/src/error_codes/E0132.md:26:#![feature(start)]
compiler/rustc_error_codes/src/error_codes/E0708.md:6:#![feature(async_closure)]
compiler/rustc_error_codes/src/error_codes/E0708.md:19:#![feature(async_closure)]
compiler/rustc_error_codes/src/error_codes/E0749.md:6:# #![feature(negative_impls)]
compiler/rustc_error_codes/src/error_codes/E0749.md:23:# #![feature(negative_impls)]
compiler/rustc_error_codes/src/error_codes/E0718.md:6:#![feature(lang_items)]
compiler/rustc_error_codes/src/error_codes/E0658.md:1:An unstable feature was used.
compiler/rustc_error_codes/src/error_codes/E0658.md:6:#[repr(u128)] // error: use of unstable library feature 'repr128'
compiler/rustc_error_codes/src/error_codes/E0658.md:13:any unstable features. In order to do so, please switch to a nightly version of
compiler/rustc_error_codes/src/error_codes/E0658.md:16:If you're using a nightly version of rustc, just add the corresponding feature
compiler/rustc_error_codes/src/error_codes/E0658.md:20:#![feature(repr128)]
compiler/rustc_error_codes/src/error_codes/E0211.md:7:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0211.md:43:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0007.md:12:#![feature(bindings_after_at)]
compiler/rustc_error_codes/src/error_codes/E0404.md:50:instead of a type alias, you should use `#![feature(trait_alias)]`:
compiler/rustc_error_codes/src/error_codes/E0404.md:53:#![feature(trait_alias)]
compiler/rustc_error_codes/src/error_codes/E0544.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0544.md:7:#![stable(since = "1.0.0", feature = "rust1")]
compiler/rustc_error_codes/src/error_codes/E0544.md:9:#[stable(feature = "rust1", since = "1.0.0")]
compiler/rustc_error_codes/src/error_codes/E0544.md:10:#[stable(feature = "test", since = "2.0.0")] // invalid
compiler/rustc_error_codes/src/error_codes/E0544.md:17:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0544.md:18:#![stable(since = "1.0.0", feature = "rust1")]
compiler/rustc_error_codes/src/error_codes/E0544.md:20:#[stable(feature = "test", since = "2.0.0")] // ok!
compiler/rustc_error_codes/src/error_codes/E0626.md:7:# #![feature(generators, generator_trait, pin)]
compiler/rustc_error_codes/src/error_codes/E0626.md:26:# #![feature(generators, generator_trait, pin)]
compiler/rustc_error_codes/src/error_codes/E0626.md:44:# #![feature(generators, generator_trait, pin)]
compiler/rustc_error_codes/src/error_codes/E0626.md:60:# #![feature(generators, generator_trait, pin)]
compiler/rustc_error_codes/src/error_codes/E0626.md:75:# #![feature(generators, generator_trait, pin)]
compiler/rustc_error_codes/src/error_codes/E0482.md:25:The [`impl Trait`] feature in this example uses an implicit `'static` lifetime
compiler/rustc_error_codes/src/error_codes/E0727.md:6:#![feature(generators)]
compiler/rustc_error_codes/src/error_codes/E0727.md:23:#![feature(generators)]
compiler/rustc_error_codes/src/error_codes/E0636.md:1:A `#![feature]` attribute was declared multiple times.
compiler/rustc_error_codes/src/error_codes/E0636.md:6:#![allow(stable_features)]
compiler/rustc_error_codes/src/error_codes/E0636.md:7:#![feature(rust1)]
compiler/rustc_error_codes/src/error_codes/E0636.md:8:#![feature(rust1)] // error: the feature `rust1` has already been declared
compiler/rustc_error_codes/src/error_codes/E0776.md:6:#![feature(cmse_nonsecure_entry)]
compiler/rustc_error_codes/src/error_codes/E0554.md:1:Feature attributes are only allowed on the nightly release channel. Stable or
compiler/rustc_error_codes/src/error_codes/E0554.md:7:#![feature(lang_items)] // error: `#![feature]` may not be used on the
compiler/rustc_error_codes/src/error_codes/E0554.md:11:If you need the feature, make sure to use a nightly release of the compiler
compiler/rustc_error_codes/src/error_codes/E0554.md:12:(but be warned that the feature may be removed or altered in the future).
compiler/rustc_error_codes/src/error_codes/E0785.md:6:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0785.md:23:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0756.md:7:#![feature(ffi_const)]
compiler/rustc_error_codes/src/error_codes/E0756.md:18:#![feature(ffi_const)]
compiler/rustc_error_codes/src/error_codes/E0756.md:29:[unstable Rust Book]: https://doc.rust-lang.org/nightly/unstable-book/language-features/ffi-const.html
compiler/rustc_error_codes/src/error_codes/E0647.md:6:#![feature(start)]
compiler/rustc_error_codes/src/error_codes/E0791.md:18:#![feature(linkage)]
compiler/rustc_error_codes/src/error_codes/E0791.md:29:#![feature(linkage)]
compiler/rustc_error_codes/src/error_codes/E0511.md:6:#![feature(platform_intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0511.md:21:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0511.md:22:#![feature(platform_intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0622.md:6:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0622.md:19:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0399.md:9:#![feature(associated_type_defaults)]
compiler/rustc_error_codes/src/error_codes/E0399.md:26:#![feature(associated_type_defaults)]
compiler/rustc_error_codes/src/error_codes/E0059.md:11:#![feature(unboxed_closures)]
compiler/rustc_error_codes/src/error_codes/E0059.md:19:#![feature(unboxed_closures)]
compiler/rustc_error_codes/src/error_codes/E0781.md:6:#![feature(abi_c_cmse_nonsecure_call)]
compiler/rustc_error_codes/src/error_codes/E0757.md:6:#![feature(ffi_const, ffi_pure)]
compiler/rustc_error_codes/src/error_codes/E0757.md:19:#![feature(ffi_const)]
compiler/rustc_error_codes/src/error_codes/E0757.md:32:[`ffi_const`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/ffi-const.html
compiler/rustc_error_codes/src/error_codes/E0757.md:33:[`ffi_pure`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/ffi-pure.html
compiler/rustc_error_codes/src/error_codes/E0009.md:12:#![feature(move_ref_pattern)]
compiler/rustc_error_codes/src/error_codes/E0633.md:8:#![feature(unwind_attributes)]
compiler/rustc_error_codes/src/error_codes/E0773.md:6:#![feature(decl_macro)]
compiler/rustc_error_codes/src/error_codes/E0773.md:7:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0773.md:25:#![feature(decl_macro)]
compiler/rustc_error_codes/src/error_codes/E0773.md:26:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0722.md:6:#![feature(optimize_attribute)]
compiler/rustc_error_codes/src/error_codes/E0722.md:23:#![feature(optimize_attribute)]
compiler/rustc_error_codes/src/error_codes/E0691.md:7:#![feature(repr_align)]
compiler/rustc_error_codes/src/error_codes/E0691.md:34:#![feature(repr_align)]
compiler/rustc_error_codes/src/error_codes/E0545.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0545.md:7:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0545.md:9:#[unstable(feature = "_unstable_fn", issue = "0")] // invalid
compiler/rustc_error_codes/src/error_codes/E0545.md:12:#[rustc_const_unstable(feature = "_unstable_const_fn", issue = "0")] // invalid
compiler/rustc_error_codes/src/error_codes/E0545.md:20:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0545.md:21:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0545.md:23:#[unstable(feature = "_unstable_fn", issue = "none")] // ok!
compiler/rustc_error_codes/src/error_codes/E0545.md:26:#[rustc_const_unstable(feature = "_unstable_const_fn", issue = "1")] // ok!
compiler/rustc_error_codes/src/error_codes/E0627.md:6:#![feature(generators, generator_trait)]
compiler/rustc_error_codes/src/error_codes/E0627.md:22:#![feature(generators, generator_trait)]
compiler/rustc_error_codes/src/error_codes/E0520.md:7:#![feature(specialization)]
compiler/rustc_error_codes/src/error_codes/E0520.md:40:#![feature(specialization)]
compiler/rustc_error_codes/src/error_codes/E0138.md:6:#![feature(start)]
compiler/rustc_error_codes/src/error_codes/E0138.md:21:#![feature(start)]
compiler/rustc_error_codes/src/error_codes/E0712.md:7:#![feature(thread_local)]
compiler/rustc_error_codes/src/error_codes/E0705.md:1:A `#![feature]` attribute was declared for a feature that is stable in the
compiler/rustc_error_codes/src/error_codes/E0705.md:7:#![feature(rust_2018_preview)]
compiler/rustc_error_codes/src/error_codes/E0705.md:8:#![feature(test_2018_feature)] // error: the feature
compiler/rustc_error_codes/src/error_codes/E0705.md:9:                               // `test_2018_feature` is
compiler/rustc_error_codes/src/error_codes/E0542.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0542.md:7:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0542.md:9:#[stable(feature = "_stable_fn")] // invalid
compiler/rustc_error_codes/src/error_codes/E0542.md:12:#[rustc_const_stable(feature = "_stable_const_fn")] // invalid
compiler/rustc_error_codes/src/error_codes/E0542.md:15:#[stable(feature = "_deprecated_fn", since = "0.1.0")]
compiler/rustc_error_codes/src/error_codes/E0542.md:25:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0542.md:26:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0542.md:28:#[stable(feature = "_stable_fn", since = "1.0.0")] // ok!
compiler/rustc_error_codes/src/error_codes/E0542.md:31:#[rustc_const_stable(feature = "_stable_const_fn", since = "1.0.0")] // ok!
compiler/rustc_error_codes/src/error_codes/E0542.md:34:#[stable(feature = "_deprecated_fn", since = "0.1.0")]
compiler/rustc_error_codes/src/error_codes/E0378.md:7:#![feature(dispatch_from_dyn)]
compiler/rustc_error_codes/src/error_codes/E0378.md:27:#![feature(dispatch_from_dyn, unsize)]
compiler/rustc_error_codes/src/error_codes/E0378.md:44:#![feature(dispatch_from_dyn)]
compiler/rustc_error_codes/src/error_codes/E0715.md:6:#![feature(marker_trait_attr)]
compiler/rustc_error_codes/src/error_codes/E0764.md:6:#![feature(const_mut_refs)]
compiler/rustc_error_codes/src/error_codes/E0764.md:29:#![feature(const_mut_refs)]
compiler/rustc_error_codes/src/error_codes/E0546.md:1:The `feature` value is missing in a stability attribute.
compiler/rustc_error_codes/src/error_codes/E0546.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0546.md:7:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0546.md:16:To fix this issue, you need to provide the `feature` field. Example:
compiler/rustc_error_codes/src/error_codes/E0546.md:19:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0546.md:20:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0546.md:22:#[unstable(feature = "unstable_fn", issue = "none")] // ok!
compiler/rustc_error_codes/src/error_codes/E0546.md:25:#[stable(feature = "stable_fn", since = "1.0.0")] // ok!
compiler/rustc_error_codes/src/error_codes/E0457.md:8:#![feature(rustc_private)]
compiler/rustc_error_codes/src/error_codes/E0457.md:21:#![feature(plugin)]
compiler/rustc_error_codes/src/error_codes/E0750.md:6:# #![feature(negative_impls)]
compiler/rustc_error_codes/src/error_codes/E0750.md:7:# #![feature(specialization)]
compiler/rustc_error_codes/src/error_codes/E0463.md:6:#![feature(plugin)]
compiler/rustc_error_codes/src/error_codes/E0208.md:9:// NOTE: this feature is perma-unstable and should *only* be used for
compiler/rustc_error_codes/src/error_codes/E0208.md:11:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0208.md:33:(`#![feature(rustc_attrs)]` must be enabled) and helps to show you the variance
compiler/rustc_error_codes/src/error_codes/E0711.md:3:Feature declared with conflicting stability requirements.
compiler/rustc_error_codes/src/error_codes/E0711.md:8:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0711.md:10:#![stable(feature = "...", since = "1.0.0")]
compiler/rustc_error_codes/src/error_codes/E0711.md:12:#[stable(feature = "foo", since = "1.0.0")]
compiler/rustc_error_codes/src/error_codes/E0711.md:15:// error: feature `foo` is declared stable since 1.29.0
compiler/rustc_error_codes/src/error_codes/E0711.md:16:#[stable(feature = "foo", since = "1.29.0")]
compiler/rustc_error_codes/src/error_codes/E0711.md:19:// error: feature `foo` is declared unstable
compiler/rustc_error_codes/src/error_codes/E0711.md:20:#[unstable(feature = "foo", issue = "none")]
compiler/rustc_error_codes/src/error_codes/E0711.md:24:In the above example, the `foo` feature is first defined to be stable since
compiler/rustc_error_codes/src/error_codes/E0711.md:29:This error can be fixed by splitting the feature, this allows any
compiler/rustc_error_codes/src/error_codes/E0556.md:1:The `feature` attribute was badly formed.
compiler/rustc_error_codes/src/error_codes/E0556.md:6:#![feature(foo_bar_baz, foo(bar), foo = "baz", foo)] // error!
compiler/rustc_error_codes/src/error_codes/E0556.md:7:#![feature] // error!
compiler/rustc_error_codes/src/error_codes/E0556.md:8:#![feature = "foo"] // error!
compiler/rustc_error_codes/src/error_codes/E0556.md:11:The `feature` attribute only accept a "feature flag" and can only be used on
compiler/rustc_error_codes/src/error_codes/E0556.md:15:#![feature(flag)]
compiler/rustc_error_codes/src/error_codes/E0787.md:6:#![feature(naked_functions)]
compiler/rustc_error_codes/src/error_codes/E0725.md:1:A feature attribute named a feature that was disallowed in the compiler
compiler/rustc_error_codes/src/error_codes/E0725.md:7:#![feature(never_type)] // error: the feature `never_type` is not in
compiler/rustc_error_codes/src/error_codes/E0725.md:8:                        // the list of allowed features
compiler/rustc_error_codes/src/error_codes/E0725.md:11:Delete the offending feature attribute, or add it to the list of allowed
compiler/rustc_error_codes/src/error_codes/E0725.md:12:features in the `-Z allow_features` flag.
compiler/rustc_error_codes/src/error_codes/E0734.md:6:#[stable(feature = "a", since = "b")] // invalid
compiler/rustc_error_codes/src/error_codes/E0734.md:7:#[unstable(feature = "b", issue = "none")] // invalid
compiler/rustc_error_codes/src/error_codes/E0625.md:6:#![feature(thread_local)]
compiler/rustc_error_codes/src/error_codes/E0625.md:20:#![feature(thread_local)]
compiler/rustc_error_codes/src/error_codes/E0547.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0547.md:7:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0547.md:9:#[unstable(feature = "_unstable_fn")] // invalid
compiler/rustc_error_codes/src/error_codes/E0547.md:12:#[rustc_const_unstable(feature = "_unstable_const_fn")] // invalid
compiler/rustc_error_codes/src/error_codes/E0547.md:19:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0547.md:20:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0547.md:22:#[unstable(feature = "_unstable_fn", issue = "none")] // ok!
compiler/rustc_error_codes/src/error_codes/E0547.md:26:    feature = "_unstable_const_fn",
compiler/rustc_error_codes/src/error_codes/E0687.md:7:```ignore (feature got removed)
compiler/rustc_error_codes/src/error_codes/E0687.md:8:#![feature(in_band_lifetimes)]
compiler/rustc_error_codes/src/error_codes/E0522.md:6:#![feature(lang_items)]
compiler/rustc_error_codes/src/error_codes/E0198.md:19:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0741.md:6:#![feature(adt_const_params)]
compiler/rustc_error_codes/src/error_codes/E0741.md:21:#![feature(adt_const_params)]
compiler/rustc_error_codes/src/error_codes/E0557.md:1:A feature attribute named a feature that has been removed.
compiler/rustc_error_codes/src/error_codes/E0557.md:6:#![feature(managed_boxes)] // error: feature has been removed
compiler/rustc_error_codes/src/error_codes/E0557.md:9:Delete the offending feature attribute.
compiler/rustc_error_codes/src/error_codes/E0635.md:1:The `#![feature]` attribute specified an unknown feature.
compiler/rustc_error_codes/src/error_codes/E0635.md:6:#![feature(nonexistent_rust_feature)] // error: unknown feature
compiler/rustc_error_codes/src/error_codes/E0775.md:7:#![feature(cmse_nonsecure_entry)]
compiler/rustc_error_codes/src/error_codes/E0724.md:7:#![feature(ffi_returns_twice)]
compiler/rustc_error_codes/src/error_codes/E0724.md:19:#![feature(ffi_returns_twice)]
compiler/rustc_error_codes/src/error_codes/E0755.md:6:#![feature(ffi_pure)]
compiler/rustc_error_codes/src/error_codes/E0755.md:17:#![feature(ffi_pure)]
compiler/rustc_error_codes/src/error_codes/E0755.md:28:[unstable Rust Book]: https://doc.rust-lang.org/unstable-book/language-features/ffi-pure.html
compiler/rustc_error_codes/src/error_codes/E0792.md:6:#![feature(type_alias_impl_trait)]
compiler/rustc_error_codes/src/error_codes/E0792.md:18:#![feature(type_alias_impl_trait)]
compiler/rustc_error_codes/src/error_codes/E0792.md:35:#![feature(type_alias_impl_trait)]
compiler/rustc_error_codes/src/error_codes/E0792.md:51:#![feature(type_alias_impl_trait)]
compiler/rustc_error_codes/src/error_codes/E0543.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0543.md:7:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0543.md:9:#[stable(since = "0.1.0", feature = "_deprecated_fn")]
compiler/rustc_error_codes/src/error_codes/E0543.md:19:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0543.md:20:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0543.md:22:#[stable(since = "0.1.0", feature = "_deprecated_fn")]
compiler/rustc_error_codes/src/error_codes/E0328.md:7:#![feature(unsize)]
compiler/rustc_error_codes/src/error_codes/E0328.md:21:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0771.md:9:#![feature(adt_const_params)]
compiler/rustc_error_codes/src/error_codes/E0771.md:18:#![feature(adt_const_params)]
compiler/rustc_error_codes/src/error_codes/E0476.md:6:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0476.md:7:#![feature(unsize)]
compiler/rustc_error_codes/src/error_codes/E0567.md:6:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0567.md:19:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0745.md:6:# #![feature(raw_ref_op)]
compiler/rustc_error_codes/src/error_codes/E0745.md:18:# #![feature(raw_ref_op)]
compiler/rustc_error_codes/src/error_codes/E0714.md:6:#![feature(marker_trait_attr)]
compiler/rustc_error_codes/src/error_codes/E0714.md:7:#![feature(associated_type_defaults)]
compiler/rustc_error_codes/src/error_codes/E0075.md:6:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0075.md:19:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0232.md:7:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0688.md:7:```ignore (feature got removed)
compiler/rustc_error_codes/src/error_codes/E0688.md:8:#![feature(in_band_lifetimes)]
compiler/rustc_error_codes/src/error_codes/E0789.md:11:#![feature(rustc_attrs)]
compiler/rustc_error_codes/src/error_codes/E0789.md:12:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0789.md:14:#![unstable(feature = "foo_module", reason = "...", issue = "123")]
compiler/rustc_error_codes/src/error_codes/E0789.md:17:// #[stable(feature = "foo", since = "1.0")]
compiler/rustc_error_codes/src/error_codes/E0307.md:67:The nightly feature [Arbitrary self types][AST] extends the accepted
compiler/rustc_error_codes/src/error_codes/E0307.md:72:#![feature(arbitrary_self_types)]
compiler/rustc_error_codes/src/error_codes/E0307.md:92:[AST]: https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html
compiler/rustc_error_codes/src/error_codes/E0376.md:6:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0376.md:33:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0568.md:6:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0568.md:21:#![feature(auto_traits)]
compiler/rustc_error_codes/src/error_codes/E0539.md:6:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0539.md:7:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0539.md:10:#[unstable(feature = "deprecated_fn", issue = "123")]
compiler/rustc_error_codes/src/error_codes/E0539.md:13:#[unstable(feature = "unstable_struct", issue)] // error!
compiler/rustc_error_codes/src/error_codes/E0539.md:16:#[rustc_const_unstable(feature)] // error!
compiler/rustc_error_codes/src/error_codes/E0539.md:19:#[stable(feature = "stable_struct", since)] // error!
compiler/rustc_error_codes/src/error_codes/E0539.md:22:#[rustc_const_stable(feature)] // error!
compiler/rustc_error_codes/src/error_codes/E0539.md:30:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0539.md:31:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0539.md:34:#[unstable(feature = "deprecated_fn", issue = "123")]
compiler/rustc_error_codes/src/error_codes/E0539.md:37:#[unstable(feature = "unstable_struct", issue = "123")] // ok!
compiler/rustc_error_codes/src/error_codes/E0539.md:40:#[rustc_const_unstable(feature = "unstable_fn", issue = "124")] // ok!
compiler/rustc_error_codes/src/error_codes/E0539.md:43:#[stable(feature = "stable_struct", since = "1.39.0")] // ok!
compiler/rustc_error_codes/src/error_codes/E0539.md:46:#[rustc_const_stable(feature = "stable_fn", since = "1.39.0")] // ok!
compiler/rustc_error_codes/src/error_codes/E0183.md:19:and requires `#![feature(fn_traits, unboxed_closures)]`.
compiler/rustc_error_codes/src/error_codes/E0183.md:22:#![feature(fn_traits, unboxed_closures)]
compiler/rustc_error_codes/src/error_codes/E0303.md:4:`#![feature(bindings_after_at)]` and checked to make sure that
compiler/rustc_error_codes/src/error_codes/E0092.md:6:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0092.md:19:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0377.md:7:#![feature(coerce_unsized)]
compiler/rustc_error_codes/src/error_codes/E0579.md:6:#![feature(exclusive_range_pattern)]
compiler/rustc_error_codes/src/error_codes/E0439.md:8:#![feature(platform_intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0439.md:20:#![feature(platform_intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0569.md:7:#![feature(dropck_eyepatch)]
compiler/rustc_error_codes/src/error_codes/E0093.md:6:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0093.md:24:#![feature(intrinsics)]
compiler/rustc_error_codes/src/error_codes/E0074.md:11:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0074.md:20:#![feature(repr_simd)]
compiler/rustc_error_codes/src/error_codes/E0549.md:2:`#![feature(staged_api)]` enabled.
compiler/rustc_error_codes/src/error_codes/E0549.md:7:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0549.md:8:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0549.md:21:#![feature(staged_api)]
compiler/rustc_error_codes/src/error_codes/E0549.md:22:#![stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0549.md:24:#[stable(since = "1.0.0", feature = "test")]
compiler/rustc_error_codes/src/error_codes/E0699.md:30:arbitrary_self_types feature flag).
compiler/rustc_error_codes/src/error_codes/E0699.md:34:```ignore (cannot-doctest-feature-doesnt-exist-yet)
compiler/rustc_arena/Cargo.toml:7:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_arena/src/lib.rs:14:#![feature(dropck_eyepatch)]
compiler/rustc_arena/src/lib.rs:15:#![feature(new_uninit)]
compiler/rustc_arena/src/lib.rs:16:#![feature(maybe_uninit_slice)]
compiler/rustc_arena/src/lib.rs:17:#![feature(min_specialization)]
compiler/rustc_arena/src/lib.rs:18:#![feature(decl_macro)]
compiler/rustc_arena/src/lib.rs:19:#![feature(pointer_byte_offsets)]
compiler/rustc_arena/src/lib.rs:20:#![feature(rustc_attrs)]
compiler/rustc_arena/src/lib.rs:21:#![cfg_attr(test, feature(test))]
compiler/rustc_arena/src/lib.rs:22:#![feature(strict_provenance)]
compiler/rustc_macros/Cargo.toml:12:syn = { version = "=2.0.8", features = ["full"] }
compiler/rustc_macros/src/lib.rs:1:#![feature(allow_internal_unstable)]
compiler/rustc_macros/src/lib.rs:2:#![feature(if_let_guard)]
compiler/rustc_macros/src/lib.rs:3:#![feature(let_chains)]
compiler/rustc_macros/src/lib.rs:4:#![feature(never_type)]
compiler/rustc_macros/src/lib.rs:5:#![feature(proc_macro_diagnostic)]
compiler/rustc_macros/src/lib.rs:6:#![feature(proc_macro_span)]
compiler/rustc_lint_defs/Cargo.toml:7:serde = { version = "1.0.125", features = ["derive"] }
compiler/rustc_lint_defs/src/lib.rs:1:#![feature(min_specialization)]
compiler/rustc_lint_defs/src/lib.rs:325:    /// `Some` if this lint is feature gated, otherwise `None`.
compiler/rustc_lint_defs/src/lib.rs:326:    pub feature_gate: Option<Symbol>,
compiler/rustc_lint_defs/src/lib.rs:398:            feature_gate: None,
compiler/rustc_lint_defs/src/lib.rs:697:     $(@feature_gate = $gate:expr;)?
compiler/rustc_lint_defs/src/lib.rs:708:            $(feature_gate: Some($gate),)*
compiler/rustc_lint_defs/src/lib.rs:735:        $(, @feature_gate = $gate:expr;)?
compiler/rustc_lint_defs/src/lib.rs:737:        $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false $(, @feature_gate = $gate;)?}
compiler/rustc_lint_defs/src/lib.rs:742:        $(, @feature_gate = $gate:expr;)?
compiler/rustc_lint_defs/src/lib.rs:744:         $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep $(, @feature_gate = $gate;)?}
compiler/rustc_lint_defs/src/lib.rs:749:        $(, @feature_gate = $gate:expr;)?
compiler/rustc_lint_defs/src/lib.rs:760:            $(feature_gate: Some($gate),)?
compiler/rustc_lint_defs/src/builtin.rs:295:    /// #![feature(must_not_suspend)]
compiler/rustc_lint_defs/src/builtin.rs:325:    @feature_gate = rustc_span::symbol::sym::must_not_suspend;
compiler/rustc_lint_defs/src/builtin.rs:476:    /// #![feature(lint_reasons)]
compiler/rustc_lint_defs/src/builtin.rs:504:    @feature_gate = rustc_span::sym::lint_reasons;
compiler/rustc_lint_defs/src/builtin.rs:849:    /// The `unused_features` lint detects unused or unknown features found in
compiler/rustc_lint_defs/src/builtin.rs:850:    /// crate-level [`feature` attributes].
compiler/rustc_lint_defs/src/builtin.rs:852:    /// [`feature` attributes]: https://doc.rust-lang.org/nightly/unstable-book/
compiler/rustc_lint_defs/src/builtin.rs:858:    pub UNUSED_FEATURES,
compiler/rustc_lint_defs/src/builtin.rs:860:    "unused features found in crate-level `#[feature]` directives"
compiler/rustc_lint_defs/src/builtin.rs:864:    /// The `stable_features` lint detects a [`feature` attribute] that
compiler/rustc_lint_defs/src/builtin.rs:867:    /// [`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/
compiler/rustc_lint_defs/src/builtin.rs:872:    /// #![feature(test_accepted_feature)]
compiler/rustc_lint_defs/src/builtin.rs:880:    /// When a feature is stabilized, it is no longer necessary to include a
compiler/rustc_lint_defs/src/builtin.rs:881:    /// `#![feature]` attribute for it. To fix, simply remove the
compiler/rustc_lint_defs/src/builtin.rs:882:    /// `#![feature]` attribute.
compiler/rustc_lint_defs/src/builtin.rs:883:    pub STABLE_FEATURES,
compiler/rustc_lint_defs/src/builtin.rs:885:    "stable features found in `#[feature]` directive"
compiler/rustc_lint_defs/src/builtin.rs:1030:    /// #![feature(const_mut_refs)]
compiler/rustc_lint_defs/src/builtin.rs:1858:    /// [nightly channel] with a [`feature` attribute]. If there is any
compiler/rustc_lint_defs/src/builtin.rs:1868:    /// [`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/
compiler/rustc_lint_defs/src/builtin.rs:2394:    /// The `soft_unstable` lint detects unstable features that were
compiler/rustc_lint_defs/src/builtin.rs:2422:    /// [`bench` attribute]: https://doc.rust-lang.org/nightly/unstable-book/library-features/test.html
compiler/rustc_lint_defs/src/builtin.rs:2428:    "a feature gate that doesn't break dependent crates",
compiler/rustc_lint_defs/src/builtin.rs:2439:    /// [no_sanitize]: https://doc.rust-lang.org/nightly/unstable-book/language-features/no-sanitize.html
compiler/rustc_lint_defs/src/builtin.rs:2444:    /// #![feature(no_sanitize)]
compiler/rustc_lint_defs/src/builtin.rs:2669:    /// #![feature(strict_provenance)]
compiler/rustc_lint_defs/src/builtin.rs:2703:    @feature_gate = sym::strict_provenance;
compiler/rustc_lint_defs/src/builtin.rs:2713:    /// #![feature(strict_provenance)]
compiler/rustc_lint_defs/src/builtin.rs:2749:    @feature_gate = sym::strict_provenance;
compiler/rustc_lint_defs/src/builtin.rs:2882:    /// #![feature(asm_experimental_arch, naked_functions)]
compiler/rustc_lint_defs/src/builtin.rs:2914:    /// #![feature(staged_api)]
compiler/rustc_lint_defs/src/builtin.rs:2917:    /// #[stable(feature = "x", since = "1")]
compiler/rustc_lint_defs/src/builtin.rs:2920:    /// #[unstable(feature = "y", issue = "none")]
compiler/rustc_lint_defs/src/builtin.rs:3203:    /// gated the use of unstable syntax features after resolving `#[cfg]` gates
compiler/rustc_lint_defs/src/builtin.rs:3390:        STABLE_FEATURES,
compiler/rustc_lint_defs/src/builtin.rs:3416:        UNUSED_FEATURES,
compiler/rustc_lint_defs/src/builtin.rs:3925:    /// #![feature(non_exhaustive_omitted_patterns_lint)]
compiler/rustc_lint_defs/src/builtin.rs:3963:    @feature_gate = sym::non_exhaustive_omitted_patterns_lint;
compiler/rustc_lint_defs/src/builtin.rs:4117:    @feature_gate = sym::test_unstable_lint;
compiler/rustc_lint_defs/src/builtin.rs:4294:    /// # #![feature(type_privacy_lints)]
compiler/rustc_lint_defs/src/builtin.rs:4319:    @feature_gate = sym::type_privacy_lints;
compiler/rustc_lint_defs/src/builtin.rs:4330:    /// # #![feature(type_privacy_lints)]
compiler/rustc_lint_defs/src/builtin.rs:4351:    @feature_gate = sym::type_privacy_lints;
compiler/rustc_lint_defs/src/builtin.rs:4361:    /// # #![feature(type_privacy_lints)]
compiler/rustc_lint_defs/src/builtin.rs:4381:    @feature_gate = sym::type_privacy_lints;
compiler/rustc_attr/Cargo.toml:15:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_attr/messages.ftl:6:    .help = add `#![feature(deprecated_suggestion)]` to the crate root
compiler/rustc_attr/messages.ftl:18:attr_expects_feature_list =
compiler/rustc_attr/messages.ftl:19:    `{$name}` expects a list of feature names
compiler/rustc_attr/messages.ftl:21:attr_expects_features =
compiler/rustc_attr/messages.ftl:22:    `{$name}` expects feature names
compiler/rustc_attr/messages.ftl:61:attr_missing_feature =
compiler/rustc_attr/messages.ftl:62:    missing 'feature'
compiler/rustc_attr/messages.ftl:79:attr_non_ident_feature =
compiler/rustc_attr/messages.ftl:80:    'feature' is not an identifier
compiler/rustc_attr/src/session_diagnostics.rs:148:#[diag(attr_missing_feature, code = "E0546")]
compiler/rustc_attr/src/session_diagnostics.rs:149:pub(crate) struct MissingFeature {
compiler/rustc_attr/src/session_diagnostics.rs:155:#[diag(attr_non_ident_feature, code = "E0546")]
compiler/rustc_attr/src/session_diagnostics.rs:156:pub(crate) struct NonIdentFeature {
compiler/rustc_attr/src/session_diagnostics.rs:365:#[diag(attr_expects_feature_list)]
compiler/rustc_attr/src/session_diagnostics.rs:366:pub(crate) struct ExpectsFeatureList {
compiler/rustc_attr/src/session_diagnostics.rs:374:#[diag(attr_expects_features)]
compiler/rustc_attr/src/session_diagnostics.rs:375:pub(crate) struct ExpectsFeatures {
compiler/rustc_attr/src/lib.rs:7:#![feature(let_chains)]
compiler/rustc_attr/src/builtin.rs:6:use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};
compiler/rustc_attr/src/builtin.rs:11:use rustc_session::parse::{feature_err, ParseSess};
compiler/rustc_attr/src/builtin.rs:19:/// The version placeholder that recently stabilized features contain inside the
compiler/rustc_attr/src/builtin.rs:38:    NonIdentFeature,
compiler/rustc_attr/src/builtin.rs:39:    MissingFeature,
compiler/rustc_attr/src/builtin.rs:62:        AttrError::NonIdentFeature => {
compiler/rustc_attr/src/builtin.rs:63:            sess.emit_err(session_diagnostics::NonIdentFeature { span });
compiler/rustc_attr/src/builtin.rs:65:        AttrError::MissingFeature => {
compiler/rustc_attr/src/builtin.rs:66:            sess.emit_err(session_diagnostics::MissingFeature { span });
compiler/rustc_attr/src/builtin.rs:111:    pub feature: Symbol,
compiler/rustc_attr/src/builtin.rs:129:    pub feature: Symbol,
compiler/rustc_attr/src/builtin.rs:149:    pub feature: Symbol,
compiler/rustc_attr/src/builtin.rs:163:        /// If part of a feature is stabilized and a new feature is added for the remaining parts,
compiler/rustc_attr/src/builtin.rs:164:        /// then the `implied_by` attribute is used to indicate which now-stable feature previously
compiler/rustc_attr/src/builtin.rs:168:        /// #[unstable(feature = "foo", issue = "...")]
compiler/rustc_attr/src/builtin.rs:170:        /// #[unstable(feature = "foo", issue = "...")]
compiler/rustc_attr/src/builtin.rs:177:        /// #[stable(feature = "foo", since = "1.XX.X")]
compiler/rustc_attr/src/builtin.rs:179:        /// #[unstable(feature = "foobar", issue = "...", implied_by = "foo")]
compiler/rustc_attr/src/builtin.rs:186:        /// Rust release which stabilized this feature.
compiler/rustc_attr/src/builtin.rs:248:                if let Some((feature, level)) = parse_unstability(sess, attr) {
compiler/rustc_attr/src/builtin.rs:249:                    stab = Some((Stability { level, feature }, attr.span));
compiler/rustc_attr/src/builtin.rs:257:                if let Some((feature, level)) = parse_stability(sess, attr) {
compiler/rustc_attr/src/builtin.rs:258:                    stab = Some((Stability { level, feature }, attr.span));
compiler/rustc_attr/src/builtin.rs:302:                if let Some((feature, level)) = parse_unstability(sess, attr) {
compiler/rustc_attr/src/builtin.rs:304:                        Some((ConstStability { level, feature, promotable: false }, attr.span));
compiler/rustc_attr/src/builtin.rs:312:                if let Some((feature, level)) = parse_stability(sess, attr) {
compiler/rustc_attr/src/builtin.rs:314:                        Some((ConstStability { level, feature, promotable: false }, attr.span));
compiler/rustc_attr/src/builtin.rs:347:            if let Some((feature, level)) = parse_unstability(sess, attr) {
compiler/rustc_attr/src/builtin.rs:348:                body_stab = Some((DefaultBodyStability { level, feature }, attr.span));
compiler/rustc_attr/src/builtin.rs:356:/// Read the content of a `stable`/`rustc_const_stable` attribute, and return the feature name and
compiler/rustc_attr/src/builtin.rs:379:    let mut feature = None;
compiler/rustc_attr/src/builtin.rs:392:            sym::feature => {
compiler/rustc_attr/src/builtin.rs:393:                if !insert_or_error(mi, &mut feature) {
compiler/rustc_attr/src/builtin.rs:408:                        &["feature", "since"],
compiler/rustc_attr/src/builtin.rs:420:    match (feature, since) {
compiler/rustc_attr/src/builtin.rs:421:        (Some(feature), Some(since)) => {
compiler/rustc_attr/src/builtin.rs:423:            Some((feature, level))
compiler/rustc_attr/src/builtin.rs:426:            handle_errors(&sess.parse_sess, attr.span, AttrError::MissingFeature);
compiler/rustc_attr/src/builtin.rs:437:/// attribute, and return the feature name and its stability information.
compiler/rustc_attr/src/builtin.rs:459:    let mut feature = None;
compiler/rustc_attr/src/builtin.rs:476:            sym::feature => {
compiler/rustc_attr/src/builtin.rs:477:                if !insert_or_error(mi, &mut feature) {
compiler/rustc_attr/src/builtin.rs:529:                        &["feature", "reason", "issue", "soft", "implied_by"],
compiler/rustc_attr/src/builtin.rs:537:    match (feature, reason, issue) {
compiler/rustc_attr/src/builtin.rs:538:        (Some(feature), reason, Some(_)) => {
compiler/rustc_attr/src/builtin.rs:539:            if !rustc_lexer::is_ident(feature.as_str()) {
compiler/rustc_attr/src/builtin.rs:540:                handle_errors(&sess.parse_sess, attr.span, AttrError::NonIdentFeature);
compiler/rustc_attr/src/builtin.rs:549:            Some((feature, level))
compiler/rustc_attr/src/builtin.rs:552:            handle_errors(&sess.parse_sess, attr.span, AttrError::MissingFeature);
compiler/rustc_attr/src/builtin.rs:580:    features: Option<&Features>,
compiler/rustc_attr/src/builtin.rs:582:    eval_condition(cfg, sess, features, &mut |cfg| {
compiler/rustc_attr/src/builtin.rs:583:        try_gate_cfg(cfg.name, cfg.span, sess, features);
compiler/rustc_attr/src/builtin.rs:615:fn try_gate_cfg(name: Symbol, span: Span, sess: &ParseSess, features: Option<&Features>) {
compiler/rustc_attr/src/builtin.rs:617:    if let (Some(feats), Some(gated_cfg)) = (features, gate) {
compiler/rustc_attr/src/builtin.rs:622:fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {
compiler/rustc_attr/src/builtin.rs:623:    let (cfg, feature, has_feature) = gated_cfg;
compiler/rustc_attr/src/builtin.rs:624:    if !has_feature(features) && !cfg_span.allows_unstable(*feature) {
compiler/rustc_attr/src/builtin.rs:626:        feature_err(sess, *feature, cfg_span, explain).emit();
compiler/rustc_attr/src/builtin.rs:655:    features: Option<&Features>,
compiler/rustc_attr/src/builtin.rs:660:            try_gate_cfg(sym::version, cfg.span, sess, features);
compiler/rustc_attr/src/builtin.rs:712:                        res | eval_condition(mi.meta_item().unwrap(), sess, features, eval)
compiler/rustc_attr/src/builtin.rs:719:                        res & eval_condition(mi.meta_item().unwrap(), sess, features, eval)
compiler/rustc_attr/src/builtin.rs:729:                    !eval_condition(mis[0].meta_item().unwrap(), sess, features, eval)
compiler/rustc_attr/src/builtin.rs:732:                    if let Some(features) = features && !features.cfg_target_compact {
compiler/rustc_attr/src/builtin.rs:733:                        feature_err(
compiler/rustc_attr/src/builtin.rs:747:                        res & eval_condition(&mi, sess, features, eval)
compiler/rustc_attr/src/builtin.rs:812:    let is_rustc = sess.features_untracked().staged_api;
compiler/rustc_attr/src/builtin.rs:875:                                if !sess.features_untracked().deprecated_suggestion {
compiler/rustc_attr/src/builtin.rs:893:                                        if sess.features_untracked().deprecated_suggestion {
compiler/rustc_attr/src/builtin.rs:1187:                sess.emit_err(session_diagnostics::ExpectsFeatureList {
compiler/rustc_attr/src/builtin.rs:1199:            sess.emit_err(session_diagnostics::ExpectsFeatures {
compiler/rustc_span/src/analyze_source_file.rs:50:            if is_x86_feature_detected!("sse2") {
compiler/rustc_span/src/analyze_source_file.rs:73:        #[target_feature(enable = "sse2")]
compiler/rustc_span/src/symbol.rs:320:        aarch64_target_feature,
compiler/rustc_span/src/symbol.rs:321:        aarch64_ver_target_feature,
compiler/rustc_span/src/symbol.rs:341:        adx_target_feature,
compiler/rustc_span/src/symbol.rs:372:        arm_target_feature,
compiler/rustc_span/src/symbol.rs:413:        avx512_target_feature,
compiler/rustc_span/src/symbol.rs:438:        bpf_target_feature,
compiler/rustc_span/src/symbol.rs:471:        cfg_target_feature,
compiler/rustc_span/src/symbol.rs:493:        cmpxchg16b_target_feature,
compiler/rustc_span/src/symbol.rs:675:        ermsb_target_feature,
compiler/rustc_span/src/symbol.rs:703:        f16c_target_feature,
compiler/rustc_span/src/symbol.rs:713:        feature,
compiler/rustc_span/src/symbol.rs:793:        hexagon_target_feature,
compiler/rustc_span/src/symbol.rs:963:        mips_target_feature,
compiler/rustc_span/src/symbol.rs:972:        movbe_target_feature,
compiler/rustc_span/src/symbol.rs:1120:        powerpc_target_feature,
compiler/rustc_span/src/symbol.rs:1232:        riscv_target_feature,
compiler/rustc_span/src/symbol.rs:1241:        rtm_target_feature,
compiler/rustc_span/src/symbol.rs:1451:        sse4a_target_feature,
compiler/rustc_span/src/symbol.rs:1500:        target_feature,
compiler/rustc_span/src/symbol.rs:1501:        target_feature_11,
compiler/rustc_span/src/symbol.rs:1509:        tbm_target_feature,
compiler/rustc_span/src/symbol.rs:1514:        test_2018_feature,
compiler/rustc_span/src/symbol.rs:1515:        test_accepted_feature,
compiler/rustc_span/src/symbol.rs:1517:        test_removed_feature,
compiler/rustc_span/src/symbol.rs:1658:        wasm_target_feature,
compiler/rustc_span/src/symbol.rs:2054:    // Used from a macro in `librustc_feature/accepted.rs`
compiler/rustc_span/src/lib.rs:17:#![feature(array_windows)]
compiler/rustc_span/src/lib.rs:18:#![feature(if_let_guard)]
compiler/rustc_span/src/lib.rs:19:#![feature(negative_impls)]
compiler/rustc_span/src/lib.rs:20:#![feature(min_specialization)]
compiler/rustc_span/src/lib.rs:21:#![feature(rustc_attrs)]
compiler/rustc_span/src/lib.rs:22:#![feature(let_chains)]
compiler/rustc_span/src/lib.rs:23:#![feature(round_char_boundary)]
compiler/rustc_span/src/lib.rs:716:    /// Are we allowed to use features from the Rust 2018 edition?
compiler/rustc_span/src/lib.rs:722:    /// Are we allowed to use features from the Rust 2021 edition?
compiler/rustc_span/src/lib.rs:728:    /// Are we allowed to use features from the Rust 2024 edition?
compiler/rustc_span/src/lib.rs:754:    pub fn allows_unstable(self, feature: Symbol) -> bool {
compiler/rustc_span/src/lib.rs:758:            .is_some_and(|features| features.iter().any(|&f| f == feature))
compiler/rustc_span/src/hygiene.rs:721:    /// #![feature(decl_macro)]
compiler/rustc_span/src/hygiene.rs:759:    /// #![feature(decl_macro)]
compiler/rustc_span/src/hygiene.rs:881:    /// other compiler-generated code to set per-span properties like allowed unstable features.
compiler/rustc_span/src/hygiene.rs:894:    /// Reuses the span but adds information like the kind of the desugaring and features that are
compiler/rustc_span/src/hygiene.rs:950:    /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
compiler/rustc_span/src/edition.rs:61:    pub fn feature_name(self) -> Symbol {
compiler/rustc_span/src/edition.rs:84:    /// Are we allowed to use features from the Rust 2018 edition?
compiler/rustc_span/src/edition.rs:89:    /// Are we allowed to use features from the Rust 2021 edition?
compiler/rustc_span/src/edition.rs:94:    /// Are we allowed to use features from the Rust 2024 edition?
compiler/rustc/Cargo.toml:20:features = ['unprefixed_malloc_on_supported_platforms']
compiler/rustc/Cargo.toml:22:[features]
compiler/rustc/src/main.rs:1:#![feature(unix_sigpipe)]
compiler/rustc/src/main.rs:40:    #[cfg(feature = "jemalloc-sys")]
compiler/rustc_smir/Cargo.toml:15:[features]
compiler/rustc_smir/README.md:17:cargo build --no-default-features -Zavoid-dev-deps
compiler/rustc_smir/README.md:29:git subtree push --prefix=compiler/rustc_smir url_to_your_fork_of_project_stable_mir some_feature_branch
compiler/rustc_smir/README.md:32:and then open a PR of your `some_feature_branch` against https://github.com/rust-lang/project-stable-mir
compiler/rustc_smir/src/lib.rs:13:#![cfg_attr(not(feature = "default"), feature(rustc_private))]
compiler/rustc_smir/src/lib.rs:14:#![feature(local_key_cell_methods)]
compiler/rustc_smir/src/lib.rs:15:#![feature(ptr_metadata)]
compiler/rustc_smir/src/lib.rs:16:#![feature(type_alias_impl_trait)] // Used to define opaque types.
compiler/rustc_smir/src/lib.rs:17:#![feature(intra_doc_pointers)]
compiler/rustc_smir/src/lib.rs:20:#[cfg(not(feature = "default"))]
compiler/rustc_smir/src/lib.rs:22:#[cfg(not(feature = "default"))]
compiler/rustc_smir/src/lib.rs:24:#[cfg(not(feature = "default"))]
compiler/rustc_smir/src/lib.rs:26:#[cfg(not(feature = "default"))]
compiler/rustc_incremental/src/assert_module_sources.rs:8://! # #![feature(rustc_attrs)]
compiler/rustc_incremental/src/lib.rs:5:#![feature(never_type)]
compiler/rustc_incremental/src/assert_dep_graph.rs:67:        // if the `rustc_attrs` feature is not enabled, then the
compiler/rustc_incremental/src/assert_dep_graph.rs:70:        if !tcx.features().rustc_attrs {
compiler/rustc_incremental/src/persist/dirty_clean.rs:143:    // can't add `#[rustc_clean]` etc without opting into this feature
compiler/rustc_incremental/src/persist/dirty_clean.rs:144:    if !tcx.features().rustc_attrs {
compiler/rustc_incremental/src/persist/dirty_clean.rs:174:        // all codegen-specific attributes are `AssumedUsed` in rustc_ast::feature_gate.
compiler/rustc_incremental/src/persist/fs.rs:94://! This system relies on two features being available in the file system in
compiler/rustc_passes/Cargo.toml:25:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_passes/messages.ftl:239:passes_duplicate_feature_err =
compiler/rustc_passes/messages.ftl:240:    the feature `{$feature}` has already been declared
compiler/rustc_passes/messages.ftl:285:passes_feature_only_on_nightly =
compiler/rustc_passes/messages.ftl:286:    `#![feature]` may not be used on the {$release_channel} release channel
compiler/rustc_passes/messages.ftl:288:passes_feature_previously_declared =
compiler/rustc_passes/messages.ftl:289:    feature `{$feature}` is declared {$declared}, but was previously declared {$prev_declared}
compiler/rustc_passes/messages.ftl:291:passes_feature_stable_twice =
compiler/rustc_passes/messages.ftl:292:    feature `{$feature}` is declared stable since {$since}, but was previously declared stable since {$prev_since}
compiler/rustc_passes/messages.ftl:329:passes_implied_feature_not_exist =
compiler/rustc_passes/messages.ftl:330:    feature `{$implied_by}` implying `{$feature}` does not exist
compiler/rustc_passes/messages.ftl:657:passes_target_feature_on_statement =
compiler/rustc_passes/messages.ftl:678:passes_unknown_feature =
compiler/rustc_passes/messages.ftl:679:    unknown feature `{$feature}`
compiler/rustc_passes/messages.ftl:693:passes_unnecessary_partial_stable_feature = the feature `{$feature}` has been partially stabilized since {$since} and is succeeded by the feature `{$implies}`
compiler/rustc_passes/messages.ftl:694:    .suggestion = if you are using features which are still unstable, change to using `{$implies}`
compiler/rustc_passes/messages.ftl:695:    .suggestion_remove = if you are using features which are now stable, remove this line
compiler/rustc_passes/messages.ftl:697:passes_unnecessary_stable_feature = the feature `{$feature}` has been stable since {$since} and no longer requires an attribute to enable
compiler/rustc_passes/src/lib_features.rs:1://! Detecting lib features (i.e., features that are not lang features).
compiler/rustc_passes/src/lib_features.rs:4://! but are not declared in one single location (unlike lang features), which means we need to
compiler/rustc_passes/src/lib_features.rs:11:use rustc_middle::middle::lib_features::LibFeatures;
compiler/rustc_passes/src/lib_features.rs:17:use crate::errors::{FeaturePreviouslyDeclared, FeatureStableTwice};
compiler/rustc_passes/src/lib_features.rs:19:fn new_lib_features() -> LibFeatures {
compiler/rustc_passes/src/lib_features.rs:20:    LibFeatures { stable: Default::default(), unstable: Default::default() }
compiler/rustc_passes/src/lib_features.rs:23:pub struct LibFeatureCollector<'tcx> {
compiler/rustc_passes/src/lib_features.rs:25:    lib_features: LibFeatures,
compiler/rustc_passes/src/lib_features.rs:28:impl<'tcx> LibFeatureCollector<'tcx> {
compiler/rustc_passes/src/lib_features.rs:29:    fn new(tcx: TyCtxt<'tcx>) -> LibFeatureCollector<'tcx> {
compiler/rustc_passes/src/lib_features.rs:30:        LibFeatureCollector { tcx, lib_features: new_lib_features() }
compiler/rustc_passes/src/lib_features.rs:46:                let mut feature = None;
compiler/rustc_passes/src/lib_features.rs:50:                        // Find the `feature = ".."` meta-item.
compiler/rustc_passes/src/lib_features.rs:52:                            (sym::feature, val) => feature = val,
compiler/rustc_passes/src/lib_features.rs:63:                if let Some(feature) = feature {
compiler/rustc_passes/src/lib_features.rs:74:                        return Some((feature, since, attr.span));
compiler/rustc_passes/src/lib_features.rs:87:    fn collect_feature(&mut self, feature: Symbol, since: Option<Symbol>, span: Span) {
compiler/rustc_passes/src/lib_features.rs:88:        let already_in_stable = self.lib_features.stable.contains_key(&feature);
compiler/rustc_passes/src/lib_features.rs:89:        let already_in_unstable = self.lib_features.unstable.contains_key(&feature);
compiler/rustc_passes/src/lib_features.rs:93:                if let Some((prev_since, _)) = self.lib_features.stable.get(&feature) {
compiler/rustc_passes/src/lib_features.rs:95:                        self.tcx.sess.emit_err(FeatureStableTwice {
compiler/rustc_passes/src/lib_features.rs:97:                            feature,
compiler/rustc_passes/src/lib_features.rs:105:                self.lib_features.stable.insert(feature, (since, span));
compiler/rustc_passes/src/lib_features.rs:108:                self.lib_features.unstable.insert(feature, span);
compiler/rustc_passes/src/lib_features.rs:113:                self.tcx.sess.emit_err(FeaturePreviouslyDeclared {
compiler/rustc_passes/src/lib_features.rs:115:                    feature,
compiler/rustc_passes/src/lib_features.rs:124:impl<'tcx> Visitor<'tcx> for LibFeatureCollector<'tcx> {
compiler/rustc_passes/src/lib_features.rs:132:        if let Some((feature, stable, span)) = self.extract(attr) {
compiler/rustc_passes/src/lib_features.rs:133:            self.collect_feature(feature, stable, span);
compiler/rustc_passes/src/lib_features.rs:138:fn lib_features(tcx: TyCtxt<'_>, (): ()) -> LibFeatures {
compiler/rustc_passes/src/lib_features.rs:140:    // features; there is no point collecting them.
compiler/rustc_passes/src/lib_features.rs:141:    if !tcx.features().staged_api {
compiler/rustc_passes/src/lib_features.rs:142:        return new_lib_features();
compiler/rustc_passes/src/lib_features.rs:145:    let mut collector = LibFeatureCollector::new(tcx);
compiler/rustc_passes/src/lib_features.rs:147:    collector.lib_features
compiler/rustc_passes/src/lib_features.rs:151:    providers.lib_features = lib_features;
compiler/rustc_passes/src/lib.rs:9:#![feature(iter_intersperse)]
compiler/rustc_passes/src/lib.rs:10:#![feature(let_chains)]
compiler/rustc_passes/src/lib.rs:11:#![feature(map_try_insert)]
compiler/rustc_passes/src/lib.rs:12:#![feature(min_specialization)]
compiler/rustc_passes/src/lib.rs:13:#![feature(try_blocks)]
compiler/rustc_passes/src/lib.rs:38:mod lib_features;
compiler/rustc_passes/src/lib.rs:57:    lib_features::provide(providers);
compiler/rustc_passes/src/stability.rs:144:        if !self.tcx.features().staged_api {
compiler/rustc_passes/src/stability.rs:264:            if let Stability { level: Unstable { implied_by: Some(implied_by), .. }, feature } =
compiler/rustc_passes/src/stability.rs:267:                self.index.implications.insert(implied_by, feature);
compiler/rustc_passes/src/stability.rs:272:                feature,
compiler/rustc_passes/src/stability.rs:276:                self.index.implications.insert(implied_by, feature);
compiler/rustc_passes/src/stability.rs:543:        if !self.tcx.features().staged_api {
compiler/rustc_passes/src/stability.rs:549:        // We gate usages of it using `feature(const_trait_impl)` anyways
compiler/rustc_passes/src/stability.rs:652:        // with the `rustc_private` feature. This is intended for use when
compiler/rustc_passes/src/stability.rs:664:                feature: sym::rustc_private,
compiler/rustc_passes/src/stability.rs:683:/// Cross-references the feature names of unstable APIs with enabled
compiler/rustc_passes/src/stability.rs:684:/// features and possibly prints errors.
compiler/rustc_passes/src/stability.rs:720:                // `std` is still checked for the `restricted-std` feature.
compiler/rustc_passes/src/stability.rs:742:                let features = self.tcx.features();
compiler/rustc_passes/src/stability.rs:743:                if features.staged_api {
compiler/rustc_passes/src/stability.rs:769:                    // `#![feature(const_trait_impl)]` is unstable, so any impl declared stable
compiler/rustc_passes/src/stability.rs:771:                    if features.const_trait_impl
compiler/rustc_passes/src/stability.rs:822:                // both the segments and the item are unstable behind the same feature flag.
compiler/rustc_passes/src/stability.rs:930:/// Given the list of enabled features that were not language features (i.e., that
compiler/rustc_passes/src/stability.rs:931:/// were expected to be library features), and the list of features used from
compiler/rustc_passes/src/stability.rs:932:/// libraries, identify activated features that don't exist and error about them.
compiler/rustc_passes/src/stability.rs:933:pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {
compiler/rustc_passes/src/stability.rs:935:        tcx.sess.opts.unstable_opts.force_unstable_if_unmarked || tcx.features().staged_api;
compiler/rustc_passes/src/stability.rs:944:    let declared_lang_features = &tcx.features().declared_lang_features;
compiler/rustc_passes/src/stability.rs:945:    let mut lang_features = FxHashSet::default();
compiler/rustc_passes/src/stability.rs:946:    for &(feature, span, since) in declared_lang_features {
compiler/rustc_passes/src/stability.rs:948:            // Warn if the user has enabled an already-stable lang feature.
compiler/rustc_passes/src/stability.rs:949:            unnecessary_stable_feature_lint(tcx, span, feature, since);
compiler/rustc_passes/src/stability.rs:951:        if !lang_features.insert(feature) {
compiler/rustc_passes/src/stability.rs:952:            // Warn if the user enables a lang feature multiple times.
compiler/rustc_passes/src/stability.rs:953:            tcx.sess.emit_err(errors::DuplicateFeatureErr { span, feature });
compiler/rustc_passes/src/stability.rs:957:    let declared_lib_features = &tcx.features().declared_lib_features;
compiler/rustc_passes/src/stability.rs:958:    let mut remaining_lib_features = FxIndexMap::default();
compiler/rustc_passes/src/stability.rs:959:    for (feature, span) in declared_lib_features {
compiler/rustc_passes/src/stability.rs:960:        if !tcx.sess.opts.unstable_features.is_nightly_build() {
compiler/rustc_passes/src/stability.rs:961:            tcx.sess.emit_err(errors::FeatureOnlyOnNightly {
compiler/rustc_passes/src/stability.rs:966:        if remaining_lib_features.contains_key(&feature) {
compiler/rustc_passes/src/stability.rs:967:            // Warn if the user enables a lib feature multiple times.
compiler/rustc_passes/src/stability.rs:968:            tcx.sess.emit_err(errors::DuplicateFeatureErr { span: *span, feature: *feature });
compiler/rustc_passes/src/stability.rs:970:        remaining_lib_features.insert(feature, *span);
compiler/rustc_passes/src/stability.rs:973:    // recognise the feature when building std.
compiler/rustc_passes/src/stability.rs:978:    remaining_lib_features.remove(&sym::libc);
compiler/rustc_passes/src/stability.rs:979:    remaining_lib_features.remove(&sym::test);
compiler/rustc_passes/src/stability.rs:981:    /// For each feature in `defined_features`..
compiler/rustc_passes/src/stability.rs:983:    /// - If it is in `remaining_lib_features` (those features with `#![feature(..)]` attributes in
compiler/rustc_passes/src/stability.rs:986:    /// - If it is in `remaining_implications` (a feature that is referenced by an `implied_by`
compiler/rustc_passes/src/stability.rs:989:    /// Once this function has been invoked for every feature (local crate and all extern crates),
compiler/rustc_passes/src/stability.rs:992:    /// - If features remain in `remaining_lib_features`, then the user has enabled a feature that
compiler/rustc_passes/src/stability.rs:994:    /// - If features remain in `remaining_implications`, the `implied_by` refers to a feature that
compiler/rustc_passes/src/stability.rs:997:    /// By structuring the code in this way: checking the features defined from each crate one at a
compiler/rustc_passes/src/stability.rs:999:    fn check_features<'tcx>(
compiler/rustc_passes/src/stability.rs:1001:        remaining_lib_features: &mut FxIndexMap<&Symbol, Span>,
compiler/rustc_passes/src/stability.rs:1003:        defined_features: &[(Symbol, Option<Symbol>)],
compiler/rustc_passes/src/stability.rs:1006:        for (feature, since) in defined_features {
compiler/rustc_passes/src/stability.rs:1007:            if let Some(since) = since && let Some(span) = remaining_lib_features.get(&feature) {
compiler/rustc_passes/src/stability.rs:1008:                // Warn if the user has enabled an already-stable lib feature.
compiler/rustc_passes/src/stability.rs:1009:                if let Some(implies) = all_implications.get(&feature) {
compiler/rustc_passes/src/stability.rs:1010:                    unnecessary_partially_stable_feature_lint(tcx, *span, *feature, *implies, *since);
compiler/rustc_passes/src/stability.rs:1012:                    unnecessary_stable_feature_lint(tcx, *span, *feature, *since);
compiler/rustc_passes/src/stability.rs:1016:            remaining_lib_features.remove(feature);
compiler/rustc_passes/src/stability.rs:1018:            // `feature` is the feature doing the implying, but `implied_by` is the feature with
compiler/rustc_passes/src/stability.rs:1020:            // feature defined in the local crate because `remaining_implications` is only the
compiler/rustc_passes/src/stability.rs:1022:            remaining_implications.remove(feature);
compiler/rustc_passes/src/stability.rs:1024:            if remaining_lib_features.is_empty() && remaining_implications.is_empty() {
compiler/rustc_passes/src/stability.rs:1030:    // All local crate implications need to have the feature that implies it confirmed to exist.
compiler/rustc_passes/src/stability.rs:1034:    // We always collect the lib features declared in the current crate, even if there are
compiler/rustc_passes/src/stability.rs:1035:    // no unknown features, because the collection also does feature attribute validation.
compiler/rustc_passes/src/stability.rs:1036:    let local_defined_features = tcx.lib_features(()).to_vec();
compiler/rustc_passes/src/stability.rs:1037:    if !remaining_lib_features.is_empty() || !remaining_implications.is_empty() {
compiler/rustc_passes/src/stability.rs:1040:        // `remaining_lib_features`.
compiler/rustc_passes/src/stability.rs:1046:        check_features(
compiler/rustc_passes/src/stability.rs:1048:            &mut remaining_lib_features,
compiler/rustc_passes/src/stability.rs:1050:            local_defined_features.as_slice(),
compiler/rustc_passes/src/stability.rs:1055:            if remaining_lib_features.is_empty() && remaining_implications.is_empty() {
compiler/rustc_passes/src/stability.rs:1058:            check_features(
compiler/rustc_passes/src/stability.rs:1060:                &mut remaining_lib_features,
compiler/rustc_passes/src/stability.rs:1062:                tcx.defined_lib_features(cnum).to_vec().as_slice(),
compiler/rustc_passes/src/stability.rs:1068:    for (feature, span) in remaining_lib_features {
compiler/rustc_passes/src/stability.rs:1069:        tcx.sess.emit_err(errors::UnknownFeature { span, feature: *feature });
compiler/rustc_passes/src/stability.rs:1072:    for (implied_by, feature) in remaining_implications {
compiler/rustc_passes/src/stability.rs:1073:        let local_defined_features = tcx.lib_features(());
compiler/rustc_passes/src/stability.rs:1074:        let span = *local_defined_features
compiler/rustc_passes/src/stability.rs:1076:            .get(&feature)
compiler/rustc_passes/src/stability.rs:1078:            .or_else(|| local_defined_features.unstable.get(&feature))
compiler/rustc_passes/src/stability.rs:1079:            .expect("feature that implied another does not exist");
compiler/rustc_passes/src/stability.rs:1080:        tcx.sess.emit_err(errors::ImpliedFeatureNotExist { span, feature, implied_by });
compiler/rustc_passes/src/stability.rs:1083:    // FIXME(#44232): the `used_features` table no longer exists, so we
compiler/rustc_passes/src/stability.rs:1084:    // don't lint about unused features. We should re-enable this one day!
compiler/rustc_passes/src/stability.rs:1087:fn unnecessary_partially_stable_feature_lint(
compiler/rustc_passes/src/stability.rs:1090:    feature: Symbol,
compiler/rustc_passes/src/stability.rs:1095:        lint::builtin::STABLE_FEATURES,
compiler/rustc_passes/src/stability.rs:1098:        errors::UnnecessaryPartialStableFeature {
compiler/rustc_passes/src/stability.rs:1101:            feature,
compiler/rustc_passes/src/stability.rs:1108:fn unnecessary_stable_feature_lint(
compiler/rustc_passes/src/stability.rs:1111:    feature: Symbol,
compiler/rustc_passes/src/stability.rs:1118:        lint::builtin::STABLE_FEATURES,
compiler/rustc_passes/src/stability.rs:1121:        errors::UnnecessaryStableFeature { feature, since },
compiler/rustc_passes/src/errors.rs:133:#[diag(passes_target_feature_on_statement)]
compiler/rustc_passes/src/errors.rs:134:pub struct TargetFeatureOnStatement;
compiler/rustc_passes/src/errors.rs:902:#[diag(passes_feature_stable_twice, code = "E0711")]
compiler/rustc_passes/src/errors.rs:903:pub struct FeatureStableTwice {
compiler/rustc_passes/src/errors.rs:906:    pub feature: Symbol,
compiler/rustc_passes/src/errors.rs:912:#[diag(passes_feature_previously_declared, code = "E0711")]
compiler/rustc_passes/src/errors.rs:913:pub struct FeaturePreviouslyDeclared<'a, 'b> {
compiler/rustc_passes/src/errors.rs:916:    pub feature: Symbol,
compiler/rustc_passes/src/errors.rs:1469:#[diag(passes_feature_only_on_nightly, code = "E0554")]
compiler/rustc_passes/src/errors.rs:1470:pub struct FeatureOnlyOnNightly {
compiler/rustc_passes/src/errors.rs:1477:#[diag(passes_unknown_feature, code = "E0635")]
compiler/rustc_passes/src/errors.rs:1478:pub struct UnknownFeature {
compiler/rustc_passes/src/errors.rs:1481:    pub feature: Symbol,
compiler/rustc_passes/src/errors.rs:1485:#[diag(passes_implied_feature_not_exist)]
compiler/rustc_passes/src/errors.rs:1486:pub struct ImpliedFeatureNotExist {
compiler/rustc_passes/src/errors.rs:1489:    pub feature: Symbol,
compiler/rustc_passes/src/errors.rs:1494:#[diag(passes_duplicate_feature_err, code = "E0636")]
compiler/rustc_passes/src/errors.rs:1495:pub struct DuplicateFeatureErr {
compiler/rustc_passes/src/errors.rs:1498:    pub feature: Symbol,
compiler/rustc_passes/src/errors.rs:1633:#[diag(passes_unnecessary_stable_feature)]
compiler/rustc_passes/src/errors.rs:1634:pub struct UnnecessaryStableFeature {
compiler/rustc_passes/src/errors.rs:1635:    pub feature: Symbol,
compiler/rustc_passes/src/errors.rs:1640:#[diag(passes_unnecessary_partial_stable_feature)]
compiler/rustc_passes/src/errors.rs:1641:pub struct UnnecessaryPartialStableFeature {
compiler/rustc_passes/src/errors.rs:1646:    pub feature: Symbol,
compiler/rustc_passes/src/check_const.rs:17:use rustc_session::parse::feature_err;
compiler/rustc_passes/src/check_const.rs:37:    fn required_feature_gates(self) -> Option<&'static [Symbol]> {
compiler/rustc_passes/src/check_const.rs:83:        let features = tcx.features();
compiler/rustc_passes/src/check_const.rs:84:        let required_gates = expr.required_feature_gates();
compiler/rustc_passes/src/check_const.rs:86:        let is_feature_allowed = |feature_gate| {
compiler/rustc_passes/src/check_const.rs:87:            // All features require that the corresponding gate be enabled,
compiler/rustc_passes/src/check_const.rs:89:            if !tcx.features().enabled(feature_gate) {
compiler/rustc_passes/src/check_const.rs:100:            // feature to use that trait function (with a const default body).
compiler/rustc_passes/src/check_const.rs:107:            if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {
compiler/rustc_passes/src/check_const.rs:111:            // However, we cannot allow stable `const fn`s to use unstable features without an explicit
compiler/rustc_passes/src/check_const.rs:114:            attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs).any(|name| name == feature_gate)
compiler/rustc_passes/src/check_const.rs:118:            // Don't emit an error if the user has enabled the requisite feature gates.
compiler/rustc_passes/src/check_const.rs:119:            Some(gates) if gates.iter().copied().all(is_feature_allowed) => return,
compiler/rustc_passes/src/check_const.rs:122:            // corresponding feature gate. This encourages nightly users to use feature gates when
compiler/rustc_passes/src/check_const.rs:137:            required_gates.iter().copied().filter(|&g| !features.enabled(g)).collect();
compiler/rustc_passes/src/check_const.rs:151:                let mut err = feature_err(&tcx.sess.parse_sess, *missing_primary, span, msg);
compiler/rustc_passes/src/check_const.rs:153:                // If multiple feature gates would be required to enable this expression, include
compiler/rustc_passes/src/check_const.rs:154:                // them as help messages. Don't emit a separate error for each missing feature gate.
compiler/rustc_passes/src/check_const.rs:156:                // FIXME(ecstaticmorse): Maybe this could be incorporated into `feature_err`? This
compiler/rustc_passes/src/check_const.rs:161:                            "add `#![feature({})]` to the crate attributes to enable",
compiler/rustc_passes/src/entry.rs:10:use rustc_session::parse::feature_err;
compiler/rustc_passes/src/entry.rs:150:            if main_def.is_import && !tcx.features().imported_main {
compiler/rustc_passes/src/entry.rs:152:                feature_err(
compiler/rustc_passes/src/check_attr.rs:11:use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};
compiler/rustc_passes/src/check_attr.rs:29:use rustc_session::parse::feature_err;
compiler/rustc_passes/src/check_attr.rs:113:                sym::target_feature => self.check_target_feature(hir_id, attr, span, target),
compiler/rustc_passes/src/check_attr.rs:570:    /// Checks if the `#[target_feature]` attribute on `item` is valid. Returns `true` if valid.
compiler/rustc_passes/src/check_attr.rs:571:    fn check_target_feature(
compiler/rustc_passes/src/check_attr.rs:581:            // FIXME: #[target_feature] was previously erroneously allowed on statements and some
compiler/rustc_passes/src/check_attr.rs:588:                    errors::TargetFeatureOnStatement,
compiler/rustc_passes/src/check_attr.rs:593:            // `#[target_feature]` attribute with just a lint, because we previously
compiler/rustc_passes/src/check_attr.rs:597:                self.inline_attr_str_error_with_macro_def(hir_id, attr, "target_feature");
compiler/rustc_passes/src/check_attr.rs:1700:                        (target, self.tcx.features().fn_align)
compiler/rustc_passes/src/check_attr.rs:1702:                        feature_err(
compiler/rustc_passes/src/check_attr.rs:2111:                | sym::feature
compiler/rustc_passes/src/check_attr.rs:2113:                | sym::target_feature
compiler/rustc_passes/src/layout_test.rs:14:    if tcx.features().rustc_attrs {
compiler/rustc_passes/src/layout_test.rs:15:        // if the `rustc_attrs` feature is not enabled, don't bother testing layout
compiler/rustc_serialize/Cargo.toml:8:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_serialize/tests/leb128.rs:1:#![feature(maybe_uninit_slice)]
compiler/rustc_serialize/tests/leb128.rs:2:#![feature(maybe_uninit_uninit_array)]
compiler/rustc_serialize/src/lib.rs:12:#![feature(never_type)]
compiler/rustc_serialize/src/lib.rs:13:#![feature(associated_type_bounds)]
compiler/rustc_serialize/src/lib.rs:14:#![feature(min_specialization)]
compiler/rustc_serialize/src/lib.rs:15:#![feature(core_intrinsics)]
compiler/rustc_serialize/src/lib.rs:16:#![feature(maybe_uninit_slice)]
compiler/rustc_serialize/src/lib.rs:17:#![feature(new_uninit)]
compiler/rustc_serialize/src/lib.rs:18:#![feature(allocator_api)]
compiler/rustc_serialize/src/lib.rs:19:#![feature(ptr_sub_ptr)]
compiler/rustc_serialize/src/lib.rs:20:#![cfg_attr(test, feature(test))]
compiler/rustc_llvm/Cargo.toml:6:[features]
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:172:  extern const SubtargetFeatureKV x##FeatureKV[];                              \
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:173:  extern const SubtargetFeatureKV x##SubTypeKV[];                              \
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:179:extern "C" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:180:                                   const char *Feature) {
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:183:  return MCInfo->checkFeatures(std::string("+") + Feature);
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:349:extern "C" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef TM) {
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:353:  const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:360:extern "C" void LLVMRustGetTargetFeature(LLVMTargetMachineRef TM, size_t Index,
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:361:                                         const char** Feature, const char** Desc) {
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:365:  const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:366:  const SubtargetFeatureKV Feat = FeatTable[Index];
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:367:  *Feature = Feat.Key;
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:379:    const char *TripleStr, const char *CPU, const char *Feature,
compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp:449:      Trip.getTriple(), CPU, Feature, Options, RM, CM, OptLevel);
compiler/rustc_target/Cargo.toml:13:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_target/Cargo.toml:20:default-features = false
compiler/rustc_target/Cargo.toml:21:features = ["elf"]
compiler/rustc_target/src/asm/riscv.rs:58:    target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/riscv.rs:62:    if target_features.contains(&sym::e) {
compiler/rustc_target/src/asm/riscv.rs:63:        Err("register can't be used with the `e` target feature")
compiler/rustc_target/src/asm/mod.rs:98:                _target_features: &rustc_data_structures::fx::FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/mod.rs:108:                                _target_features,
compiler/rustc_target/src/asm/mod.rs:122:            _target_features: &rustc_data_structures::fx::FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/mod.rs:132:                if $($filter(_arch, _reloc_model, _target_features, _target, false).is_ok() &&)? true {
compiler/rustc_target/src/asm/mod.rs:150:        $($feature:ident: $($ty2:expr),+;)*
compiler/rustc_target/src/asm/mod.rs:159:                    ($ty2, Some(rustc_span::sym::$feature)),
compiler/rustc_target/src/asm/mod.rs:320:        // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.
compiler/rustc_target/src/asm/mod.rs:354:        target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/mod.rs:359:            Self::X86(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:360:            Self::Arm(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:361:            Self::AArch64(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:362:            Self::RiscV(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:363:            Self::PowerPC(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:364:            Self::Hexagon(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:366:                r.validate(arch, reloc_model, target_features, target, is_clobber)
compiler/rustc_target/src/asm/mod.rs:368:            Self::Mips(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:369:            Self::S390x(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:370:            Self::Bpf(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:371:            Self::Avr(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:372:            Self::Msp430(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:373:            Self::M68k(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),
compiler/rustc_target/src/asm/mod.rs:556:    /// options target feature required to use this type.
compiler/rustc_target/src/asm/mod.rs:745:    target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/mod.rs:751:            x86::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:756:            arm::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:761:            aarch64::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:766:            riscv::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:771:            nvptx::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:776:            powerpc::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:781:            hexagon::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:786:            loongarch::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:791:            mips::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:796:            s390x::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:801:            spirv::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:806:            wasm::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:811:            bpf::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:816:            avr::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:821:            msp430::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/mod.rs:826:            m68k::fill_reg_map(arch, reloc_model, target_features, target, &mut map);
compiler/rustc_target/src/asm/x86.rs:150:    _target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/x86.rs:164:    _target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/x86.rs:177:    _target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/x86.rs:193:    _target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/arm.rs:67:fn frame_pointer_is_r7(target_features: &FxIndexSet<Symbol>, target: &Target) -> bool {
compiler/rustc_target/src/asm/arm.rs:68:    target.is_like_osx || (!target.is_like_windows && target_features.contains(&sym::thumb_mode))
compiler/rustc_target/src/asm/arm.rs:74:    target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/arm.rs:78:    not_thumb1(arch, reloc_model, target_features, target, is_clobber)?;
compiler/rustc_target/src/asm/arm.rs:80:    if !frame_pointer_is_r7(target_features, target) {
compiler/rustc_target/src/asm/arm.rs:90:    target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/arm.rs:94:    if frame_pointer_is_r7(target_features, target) {
compiler/rustc_target/src/asm/arm.rs:104:    target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/arm.rs:109:        && target_features.contains(&sym::thumb_mode)
compiler/rustc_target/src/asm/arm.rs:110:        && !target_features.contains(&sym::thumb2)
compiler/rustc_target/src/asm/arm.rs:121:    target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/asm/arm.rs:125:    not_thumb1(arch, reloc_model, target_features, target, is_clobber)?;
compiler/rustc_target/src/asm/aarch64.rs:83:    _target_features: &FxIndexSet<Symbol>,
compiler/rustc_target/src/lib.rs:11:#![feature(assert_matches)]
compiler/rustc_target/src/lib.rs:12:#![feature(associated_type_bounds)]
compiler/rustc_target/src/lib.rs:13:#![feature(exhaustive_patterns)]
compiler/rustc_target/src/lib.rs:14:#![feature(iter_intersperse)]
compiler/rustc_target/src/lib.rs:15:#![feature(let_chains)]
compiler/rustc_target/src/lib.rs:16:#![feature(min_specialization)]
compiler/rustc_target/src/lib.rs:17:#![feature(never_type)]
compiler/rustc_target/src/lib.rs:18:#![feature(rustc_attrs)]
compiler/rustc_target/src/lib.rs:19:#![feature(step_trait)]
compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs:15:            // Info about features at https://wiki.debian.org/ArmHardFloatPort
compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs:16:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/loongarch64_unknown_none_softfloat.rs:12:            features: "-f,-d".into(),
compiler/rustc_target/src/spec/aarch64_unknown_linux_ohos.rs:16:            features: "+reserve-x18".into(),
compiler/rustc_target/src/spec/armv7a_none_eabihf.rs:15:        features: "+v7,+vfp3,-d32,+thumb2,-neon,+strict-align".into(),
compiler/rustc_target/src/spec/mipsel_unknown_linux_uclibc.rs:12:            features: "+mips32r2,+soft-float".into(),
compiler/rustc_target/src/spec/riscv32gc_unknown_linux_gnu.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/thumbv7em_none_eabihf.rs:9:// To opt into double precision hardware support, use the `-C target-feature=+fp64` flag.
compiler/rustc_target/src/spec/thumbv7em_none_eabihf.rs:31:            features: "+vfp4,-d32,-fp64".into(),
compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs:11:            // Info about features at https://wiki.debian.org/ArmHardFloatPort
compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs:12:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs:11:            features: "+v8a,+outline-atomics".into(),
compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs:11:            features: "+soft-float,+strict-align".into(),
compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs:16:            features: "+strict-align,+v6".into(),
compiler/rustc_target/src/spec/riscv64gc_unknown_openbsd.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/wasm_base.rs:114:        // When the atomics feature is activated then these two keys matter,
compiler/rustc_target/src/spec/thumbv8m_main_none_eabihf.rs:19:            // These parameters map to the following LLVM features.
compiler/rustc_target/src/spec/thumbv8m_main_none_eabihf.rs:20:            features: "+fp-armv8,-fp64,-d32".into(),
compiler/rustc_target/src/spec/armv7a_kmc_solid_asp3_eabi.rs:12:            features: "+v7,+soft-float,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/aarch64_unknown_nto_qnx_710.rs:20:            features: "+v8a".into(),
compiler/rustc_target/src/spec/aarch64_wrs_vxworks.rs:10:            features: "+v8a".into(),
compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabi.rs:15:            features: "+v7,+thumb2,+soft-float,-neon".into(),
compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs:13:            features: "+v6,+vfp2,-d32".into(),
compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs:6:    base.features = "+mips64r2".into();
compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs:8:    base.features = "+rdrnd,+rdseed".into();
compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs:10:            features: "+v8a".into(),
compiler/rustc_target/src/spec/aarch64_unknown_openbsd.rs:10:            features: "+v8a".into(),
compiler/rustc_target/src/spec/arm_linux_androideabi.rs:12:            features: "+strict-align,+v5te".into(),
compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs:6:    base.features = "+v8a,+strict-align,+neon,+fp-armv8".into();
compiler/rustc_target/src/spec/powerpc_unknown_freebsd.rs:21:            features: "+secure-plt".into(),
compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs:15:            features: "+mips64r2,+xgot".into(),
compiler/rustc_target/src/spec/armv7_linux_androideabi.rs:21:            features: "+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon".into(),
compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs:9:    base.features = "+mips64r2,+soft-float".into();
compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs:15:            features: "+soft-float,+strict-align".into(),
compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs:10:            features: "+vfp3,+neon".into(),
compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs:17:            features: "+neon,+fp-armv8,+apple-a12".into(),
compiler/rustc_target/src/spec/wasm32_wasi.rs:27://! that (ab)uses the `crt-static` target feature to indicate which one you're
compiler/rustc_target/src/spec/wasm32_wasi.rs:32://! By default the `crt-static` target feature is enabled, and when enabled
compiler/rustc_target/src/spec/wasm32_wasi.rs:47://! For the second goal we repurpose the `target-feature` flag, meaning that
compiler/rustc_target/src/spec/wasm32_wasi.rs:50://! 1. All Rust code needs to be compiled with `-C target-feature=-crt-static`,
compiler/rustc_target/src/spec/wasm32_wasi.rs:61://!    compiling with `-C target-feature=-crt-static` is all you need to do.
compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs:6:    base.features = "+v8a".into();
compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs:12:            features: "+v8a,+neon,+fp-armv8,+apple-a7".into(),
compiler/rustc_target/src/spec/armv7_sony_vita_newlibeabihf.rs:33:            features: "+v7,+neon,+vfp3,+thumb2,+thumb-mode".into(),
compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs:36:    // features since they were all merged into the official spec by the time
compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs:38:    options.features = "+bulk-memory,+mutable-globals,+sign-ext,+nontrapping-fptoint".into();
compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs:15:            features: "+m,+a,+c".into(),
compiler/rustc_target/src/spec/aarch64_apple_tvos.rs:12:            features: "+neon,+fp-armv8,+apple-a7".into(),
compiler/rustc_target/src/spec/loongarch64_unknown_linux_gnu.rs:11:            features: "+f,+d".into(),
compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs:67:        features: "+rdrnd,+rdseed,+lvi-cfi,+lvi-load-hardening".into(),
compiler/rustc_target/src/spec/riscv32im_unknown_none_elf.rs:16:            features: "+m".into(),
compiler/rustc_target/src/spec/thumbv5te_none_eabi.rs:28:            // minimum extra features, these cannot be disabled via -C
compiler/rustc_target/src/spec/thumbv5te_none_eabi.rs:31:            features: "+soft-float,+strict-align,+atomics-32".into(),
compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs:20:            features: "+v7,+thumb2,+soft-float,-neon".into(),
compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs:11:            features: "+v8a,+outline-atomics".into(),
compiler/rustc_target/src/spec/riscv32imac_unknown_xous_elf.rs:16:            features: "+m,+a,+c".into(),
compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs:23:            features: "+v7,+thumb-mode,+thumb2,+vfp3,+neon".into(),
compiler/rustc_target/src/spec/aarch64_unknown_fuchsia.rs:10:            features: "+v8a".into(),
compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs:11:            features: "+strict-align,+v6".into(),
compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs:13:            features: "+mips32r2,+fpxx,+nooddspreg".into(),
compiler/rustc_target/src/spec/x86_64h_apple_darwin.rs:15:    // x86_64h is core2-avx without a few of the features which would otherwise
compiler/rustc_target/src/spec/x86_64h_apple_darwin.rs:25:    base.features = "-rdrnd,-aes,-pclmul,-rtm,-fsgsbase".into();
compiler/rustc_target/src/spec/x86_64h_apple_darwin.rs:30:        "you need to adjust the feature list in x86_64h-apple-darwin if you change this",
compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs:19:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs:16:            features: "+strict-align,+v6,+vfp2,-d32".into(),
compiler/rustc_target/src/spec/riscv32gc_unknown_linux_musl.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/mipsel_sony_psx.rs:22:            features: "+soft-float".into(),
compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs:20:            features: "+vfp3,+neon".into(),
compiler/rustc_target/src/spec/x86_64_linux_android.rs:8:    base.features = "+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt".into();
compiler/rustc_target/src/spec/riscv64gc_unknown_freebsd.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/riscv32imac_esp_espidf.rs:23:            features: "+m,+a,+c".into(),
compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs:3:// Can be used in conjunction with the `target-feature` and
compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs:5:// features.
compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs:16:        features: "+v8a,+strict-align,-neon,-fp-armv8".into(),
compiler/rustc_target/src/spec/armv7s_apple_ios.rs:12:            features: "+v7,+vfp4,+neon".into(),
compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs:13:            features: "+mips64r2,+xgot".into(),
compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs:15:            features: "+mips64r6".into(),
compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs:10:            features: "+v8a".into(),
compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs:19:            features: "+vfp3,-d32,-fp16".into(),
compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs:28:            features: "+vfp2".into(),
compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs:19:            features: "+neon,+fp-armv8,+apple-a7".into(),
compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs:13:            features: "+mips32r6".into(),
compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs:39:            // minimum extra features, these cannot be disabled via -C
compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs:42:            features: "+soft-float,+strict-align,+atomics-32".into(),
compiler/rustc_target/src/spec/riscv64gc_unknown_fuchsia.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs:16:            features: "+neon,+fp-armv8,+apple-a7".into(),
compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs:16:            features: "+m,+c".into(),
compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs:13:            features: "+mips64r6".into(),
compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs:14:            features: "+v7,+thumb2,+soft-float,-neon".into(),
compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs:13:            features: "+v6,+vfp2,-d32".into(),
compiler/rustc_target/src/spec/mipsel_unknown_none.rs:17:            features: "+mips32r2,+soft-float,+noabicalls".into(),
compiler/rustc_target/src/spec/mod.rs:34://! the target's settings, though `target-feature` and `link-args` will *add*
compiler/rustc_target/src/spec/mod.rs:1701:    /// Default target features to pass to LLVM. These features will *always* be
compiler/rustc_target/src/spec/mod.rs:1703:    /// -mattr=$features`.
compiler/rustc_target/src/spec/mod.rs:1704:    pub features: StaticCow<str>,
compiler/rustc_target/src/spec/mod.rs:1893:    /// target features. This is `true` by default, and `false` for targets like
compiler/rustc_target/src/spec/mod.rs:2096:            features: "".into(),
compiler/rustc_target/src/spec/mod.rs:2770:        key!(features);
compiler/rustc_target/src/spec/mod.rs:3025:        target_option_val!(features);
compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs:19:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs:18:            // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2
compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs:19:            features: "+secure-plt,+msync".into(),
compiler/rustc_target/src/spec/armv5te_unknown_linux_uclibceabi.rs:11:            features: "+soft-float,+strict-align".into(),
compiler/rustc_target/src/spec/armv5te_none_eabi.rs:28:            // minimum extra features, these cannot be disabled via -C
compiler/rustc_target/src/spec/armv5te_none_eabi.rs:31:            features: "+soft-float,+strict-align,+atomics-32".into(),
compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs:10:    // ABI. Pass the -vector feature string to LLVM to respect this assumption. On LLVM < 16, we
compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs:12:    base.features = "-vector".into();
compiler/rustc_target/src/spec/apple_base.rs:73:            // comments (and disabled features) in `x86_64h_apple_darwin` for
compiler/rustc_target/src/spec/i686_unknown_uefi.rs:6:// "i686-unknown-windows" is used to get the minimal subset of windows-specific features.
compiler/rustc_target/src/spec/i686_unknown_uefi.rs:16:    // enable these CPU features explicitly before their first use, otherwise their instructions
compiler/rustc_target/src/spec/i686_unknown_uefi.rs:24:    base.features = "-mmx,-sse,+soft-float".into();
compiler/rustc_target/src/spec/thumbv6m_none_eabi.rs:18:            features: "+strict-align,+atomics-32".into(),
compiler/rustc_target/src/spec/armv7a_kmc_solid_asp3_eabihf.rs:12:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/armv7a_none_eabi.rs:7:// - `TargetOptions.features`: added `+strict-align`. rationale: unaligned
compiler/rustc_target/src/spec/armv7a_none_eabi.rs:24:        features: "+v7,+thumb2,+soft-float,-neon,+strict-align".into(),
compiler/rustc_target/src/spec/aarch64_linux_android.rs:14:            // As documented in https://developer.android.com/ndk/guides/cpu-features.html
compiler/rustc_target/src/spec/aarch64_linux_android.rs:16:            features: "+v8a,+neon,+fp-armv8".into(),
compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs:7:    base.features = "+mips32r2,+soft-float".into();
compiler/rustc_target/src/spec/mipsel_unknown_linux_gnu.rs:12:            features: "+mips32r2,+fpxx,+nooddspreg".into(),
compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs:10:    // ABI. Pass the -vector feature string to LLVM to respect this assumption. On LLVM < 16, we
compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs:12:    base.features = "-vector".into();
compiler/rustc_target/src/spec/riscv64gc_unknown_netbsd.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs:7:    base.features = "+v8a".into();
compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs:7:    base.features = "+mips64r2".into();
compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs:16:            features: "+m,+a,+c".into(),
compiler/rustc_target/src/spec/aarch64_unknown_redox.rs:6:    base.features = "+v8a".into();
compiler/rustc_target/src/spec/thumbv7em_none_eabi.rs:10:// `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.
compiler/rustc_target/src/spec/armv7_unknown_linux_ohos.rs:18:            features: "+v7,+thumb2,+soft-float,-neon".into(),
compiler/rustc_target/src/spec/aarch64_unknown_none.rs:3:// Can be used in conjunction with the `target-feature` and
compiler/rustc_target/src/spec/aarch64_unknown_none.rs:5:// features.
compiler/rustc_target/src/spec/aarch64_unknown_none.rs:17:        features: "+v8a,+strict-align,+neon,+fp-armv8".into(),
compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs:11:            features: "+strict-align,+v6,+vfp2,-d32".into(),
compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs:21:            features: "+v7,+thumb-mode,+thumb2,+vfp3,+neon".into(),
compiler/rustc_target/src/spec/mipsel_unknown_linux_musl.rs:6:    base.features = "+mips32r2,+soft-float".into();
compiler/rustc_target/src/spec/mipsel_sony_psp.rs:27:            features: "+single-float".into(),
compiler/rustc_target/src/spec/thumbv8m_base_none_eabi.rs:16:            features: "+strict-align".into(),
compiler/rustc_target/src/spec/aarch64_unknown_uefi.rs:12:    base.features = "+v8a".into();
compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs:13:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs:8:    base.features = "-small-data,+hvx-length128b".into();
compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs:13:            features: "+mips32r2,+soft-float".into(),
compiler/rustc_target/src/spec/loongarch64_unknown_none.rs:12:            features: "+f,+d".into(),
compiler/rustc_target/src/spec/riscv64gc_unknown_linux_musl.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/mipsisa32r6el_unknown_linux_gnu.rs:12:            features: "+mips32r6".into(),
compiler/rustc_target/src/spec/x86_64_unknown_none.rs:3:// Can be used in conjunction with the `target-feature` and
compiler/rustc_target/src/spec/x86_64_unknown_none.rs:5:// features.
compiler/rustc_target/src/spec/x86_64_unknown_none.rs:21:        features:
compiler/rustc_target/src/spec/abi.rs:121:pub fn enabled_names(features: &rustc_feature::Features, span: Span) -> Vec<&'static str> {
compiler/rustc_target/src/spec/abi.rs:125:        .filter(|name| is_enabled(features, span, name).is_ok())
compiler/rustc_target/src/spec/abi.rs:130:    Unstable { feature: Symbol, explain: &'static str },
compiler/rustc_target/src/spec/abi.rs:135:    features: &rustc_feature::Features,
compiler/rustc_target/src/spec/abi.rs:140:    if let Err(AbiDisabled::Unstable { feature, .. }) = s {
compiler/rustc_target/src/spec/abi.rs:141:        if features.enabled(feature) || span.allows_unstable(feature) {
compiler/rustc_target/src/spec/abi.rs:155:            feature: sym::intrinsics,
compiler/rustc_target/src/spec/abi.rs:159:            feature: sym::platform_intrinsics,
compiler/rustc_target/src/spec/abi.rs:163:            feature: sym::abi_vectorcall,
compiler/rustc_target/src/spec/abi.rs:167:            feature: sym::abi_vectorcall,
compiler/rustc_target/src/spec/abi.rs:171:            feature: sym::abi_thiscall,
compiler/rustc_target/src/spec/abi.rs:175:            feature: sym::abi_thiscall,
compiler/rustc_target/src/spec/abi.rs:179:            feature: sym::unboxed_closures,
compiler/rustc_target/src/spec/abi.rs:183:            feature: sym::rust_cold_cc,
compiler/rustc_target/src/spec/abi.rs:187:            feature: sym::abi_ptx,
compiler/rustc_target/src/spec/abi.rs:191:            feature: sym::abi_unadjusted,
compiler/rustc_target/src/spec/abi.rs:195:            feature: sym::abi_msp430_interrupt,
compiler/rustc_target/src/spec/abi.rs:199:            feature: sym::abi_x86_interrupt,
compiler/rustc_target/src/spec/abi.rs:203:            feature: sym::abi_amdgpu_kernel,
compiler/rustc_target/src/spec/abi.rs:207:            feature: sym::abi_avr_interrupt,
compiler/rustc_target/src/spec/abi.rs:211:            feature: sym::abi_c_cmse_nonsecure_call,
compiler/rustc_target/src/spec/abi.rs:215:            feature: sym::wasm_abi,
compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs:6:    base.features = "+v8a,+neon,+fp-armv8".into();
compiler/rustc_target/src/spec/aarch64_kmc_solid_asp3.rs:12:            features: "+v8a,+neon,+fp-armv8".into(),
compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs:15:        options: TargetOptions { endian: Endian::Big, features: "+secure-plt".into(), ..base },
compiler/rustc_target/src/spec/armv7k_apple_watchos.rs:12:            features: "+v7,+vfp4,+neon".into(),
compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding.rs:13:            features: "+v8a".into(),
compiler/rustc_target/src/spec/x86_64_unknown_uefi.rs:6:// LLVM. "x86_64-unknown-windows" is used to get the minimal subset of windows-specific features.
compiler/rustc_target/src/spec/x86_64_unknown_uefi.rs:17:    // enable these CPU features explicitly before their first use, otherwise their instructions
compiler/rustc_target/src/spec/x86_64_unknown_uefi.rs:26:    base.features = "-mmx,-sse,+soft-float".into();
compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs:13:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs:11:            features: "+soft-float,+strict-align".into(),
compiler/rustc_target/src/spec/i686_linux_android.rs:13:    base.features = "+mmx,+sse,+sse2,+sse3,+ssse3".into();
compiler/rustc_target/src/spec/aarch64_apple_ios.rs:19:            features: "+neon,+fp-armv8,+apple-a7".into(),
compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs:26:            features: "+m,+c".into(),
compiler/rustc_target/src/spec/armv7r_none_eabihf.rs:18:            features: "+vfp3,-d32,-fp16".into(),
compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs:15:            features: "+v8a,+outline-atomics".into(),
compiler/rustc_target/src/spec/riscv64gc_unknown_linux_gnu.rs:12:            features: "+m,+a,+f,+d,+c".into(),
compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs:14:            // Info about features at https://wiki.debian.org/ArmHardFloatPort
compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs:15:            features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
compiler/rustc_target/src/spec/armv4t_none_eabi.rs:36:            features: "+soft-float,+strict-align,+atomics-32".into(),
compiler/rustc_target/src/spec/armeb_unknown_linux_gnueabi.rs:12:            features: "+strict-align,+v8,+crc".into(),
compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs:10:            features: "+v8a,+outline-atomics".into(),
compiler/rustc_target/src/spec/armv7_apple_ios.rs:16:            features: "+v7,+vfp3,+neon".into(),
compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs:17:            // Info about features at https://wiki.debian.org/ArmHardFloatPort
compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs:18:            features: "+v7,+thumb-mode,+thumb2,+vfp3,+neon".into(),
compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs:6:    base.features = "+v8a,+neon,+fp-armv8".into();
compiler/rustc_abi/Cargo.toml:9:rand = { version = "0.8.4", default-features = false, optional = true }
compiler/rustc_abi/Cargo.toml:12:rustc_index = { path = "../rustc_index", default-features = false }
compiler/rustc_abi/Cargo.toml:16:[features]
compiler/rustc_abi/src/layout.rs:5:#[cfg(feature = "randomize")]
compiler/rustc_abi/src/layout.rs:7:#[cfg(feature = "randomize")]
compiler/rustc_abi/src/layout.rs:869:        if repr.can_randomize_type_layout() && cfg!(feature = "randomize") {
compiler/rustc_abi/src/layout.rs:870:            #[cfg(feature = "randomize")]
compiler/rustc_abi/src/lib.rs:1:#![cfg_attr(feature = "nightly", feature(step_trait, rustc_attrs, min_specialization))]
compiler/rustc_abi/src/lib.rs:4:#[cfg(feature = "nightly")]
compiler/rustc_abi/src/lib.rs:13:#[cfg(feature = "nightly")]
compiler/rustc_abi/src/lib.rs:16:#[cfg(feature = "nightly")]
compiler/rustc_abi/src/lib.rs:18:#[cfg(feature = "nightly")]
compiler/rustc_abi/src/lib.rs:35:    #[cfg_attr(feature = "nightly", derive(Encodable, Decodable, HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:53:#[cfg_attr(feature = "nightly", derive(Encodable, Decodable, HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:73:#[cfg_attr(feature = "nightly", derive(Encodable, Decodable, HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:409:#[cfg_attr(feature = "nightly", derive(Encodable, Decodable, HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:416:#[cfg(feature = "nightly")]
compiler/rustc_abi/src/lib.rs:593:#[cfg(feature = "nightly")]
compiler/rustc_abi/src/lib.rs:633:#[cfg_attr(feature = "nightly", derive(Encodable, Decodable, HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:748:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:774:#[cfg_attr(feature = "nightly", derive(Encodable, Decodable, HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:893:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:949:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1006:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1123:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1247:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1258:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1359:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1379:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1403:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_abi/src/lib.rs:1505:#[cfg_attr(feature = "nightly", derive(HashStable_Generic))]
compiler/rustc_mir_build/Cargo.toml:27:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_mir_build/messages.ftl:32:    call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe block
compiler/rustc_mir_build/messages.ftl:33:    .note = can only be called if the required target features are available
compiler/rustc_mir_build/messages.ftl:34:    .label = call to function with `#[target_feature]`
compiler/rustc_mir_build/messages.ftl:37:    call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe function or block
compiler/rustc_mir_build/messages.ftl:38:    .note = can only be called if the required target features are available
compiler/rustc_mir_build/messages.ftl:39:    .label = call to function with `#[target_feature]`
compiler/rustc_mir_build/messages.ftl:323:    call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe block (error E0133)
compiler/rustc_mir_build/messages.ftl:324:    .note = can only be called if the required target features are available
compiler/rustc_mir_build/messages.ftl:325:    .label = call to function with `#[target_feature]`
compiler/rustc_mir_build/src/lib.rs:5:#![feature(assert_matches)]
compiler/rustc_mir_build/src/lib.rs:6:#![feature(associated_type_bounds)]
compiler/rustc_mir_build/src/lib.rs:7:#![feature(box_patterns)]
compiler/rustc_mir_build/src/lib.rs:8:#![feature(if_let_guard)]
compiler/rustc_mir_build/src/lib.rs:9:#![feature(let_chains)]
compiler/rustc_mir_build/src/lib.rs:10:#![feature(min_specialization)]
compiler/rustc_mir_build/src/lib.rs:11:#![feature(try_blocks)]
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:670:    /// This means that the variant has a stdlib unstable feature marking it.
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:674:            // Filter variants that depend on a disabled unstable feature.
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:905:        // If the `exhaustive_patterns` feature is enabled, we make sure to omit constructors that
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:944:                let is_exhaustive_pat_feature = cx.tcx.features().exhaustive_patterns;
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:951:                    def.variants().is_empty() && !is_exhaustive_pat_feature && !pcx.is_top_level;
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:959:                            !is_exhaustive_pat_feature
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:981:                    && !cx.tcx.features().precise_pointer_size_matching =>
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:984:                // `precise_pointer_size_matching` feature is enabled. So we treat those types like
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:1002:            ty::Never if !cx.tcx.features().exhaustive_patterns && !pcx.is_top_level => {
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:1434:                    // of `std`). So this branch is only reachable when the feature is enabled and
compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:1619:                    // of `std`). So this branch is only reachable when the feature is enabled and
compiler/rustc_mir_build/src/thir/pattern/check_match.rs:502:            if cx.tcx.features().exhaustive_patterns
compiler/rustc_mir_build/src/thir/pattern/check_match.rs:730:                "add `#![feature(precise_pointer_size_matching)]` to the crate attributes to \
compiler/rustc_mir_build/src/thir/pattern/usefulness.rs:11://! reason not to, for example if they depend on a particular feature like `or_patterns`.
compiler/rustc_mir_build/src/thir/pattern/usefulness.rs:343:        if self.tcx.features().exhaustive_patterns {
compiler/rustc_mir_build/src/thir/pattern/usefulness.rs:630:                        // `doc(hidden)` or they are unstable feature gate (only stdlib types).
compiler/rustc_mir_build/src/thir/pattern/usefulness.rs:908:                        // variants. Also remove any unstable feature gated variants.
compiler/rustc_mir_build/src/check_unsafety.rs:28:    /// The `#[target_feature]` attributes of the body. Used for checking
compiler/rustc_mir_build/src/check_unsafety.rs:29:    /// calls to functions with `#[target_feature]` (RFC 2396).
compiler/rustc_mir_build/src/check_unsafety.rs:30:    body_target_features: &'tcx [Symbol],
compiler/rustc_mir_build/src/check_unsafety.rs:358:                    // If the called function has target features the calling function hasn't,
compiler/rustc_mir_build/src/check_unsafety.rs:366:                            .target_features
compiler/rustc_mir_build/src/check_unsafety.rs:368:                            .all(|feature| self.body_target_features.contains(feature))
compiler/rustc_mir_build/src/check_unsafety.rs:801:    let body_target_features = &tcx.body_codegen_attrs(def.to_def_id()).target_features;
compiler/rustc_mir_build/src/check_unsafety.rs:810:        body_target_features,
compiler/rustc_mir_build/src/build/expr/as_operand.rs:46:    /// #![feature(unsized_locals, unsized_fn_params)]
compiler/rustc_mir_build/src/build/expr/as_operand.rs:162:        if tcx.features().unsized_fn_params {
compiler/rustc_mir_build/src/build/matches/test.rs:245:                    if !tcx.features().string_deref_patterns {
compiler/rustc_mir_build/src/build/matches/simplify.rs:265:                        self.tcx.features().exhaustive_patterns
compiler/rustc_codegen_llvm/Cargo.toml:14:object = { version = "0.31.1", default-features = false, features = [
compiler/rustc_codegen_llvm/Cargo.toml:36:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_codegen_llvm/Cargo.toml:39:serde = { version = "1", features = [ "derive" ]}
compiler/rustc_codegen_llvm/messages.ftl:40:codegen_llvm_missing_features =
compiler/rustc_codegen_llvm/messages.ftl:41:    add the missing features in a `target_feature` attribute
compiler/rustc_codegen_llvm/messages.ftl:62:    `-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`
compiler/rustc_codegen_llvm/messages.ftl:70:codegen_llvm_target_feature_disable_or_enable =
compiler/rustc_codegen_llvm/messages.ftl:71:    the target features {$features} must all be either enabled or disabled together
compiler/rustc_codegen_llvm/messages.ftl:76:codegen_llvm_unknown_ctarget_feature =
compiler/rustc_codegen_llvm/messages.ftl:77:    unknown feature specified for `-Ctarget-feature`: `{$feature}`
compiler/rustc_codegen_llvm/messages.ftl:79:    .possible_feature = you might have meant: `{$rust_feature}`
compiler/rustc_codegen_llvm/messages.ftl:80:    .consider_filing_feature_request = consider filing a feature request
compiler/rustc_codegen_llvm/messages.ftl:82:codegen_llvm_unknown_ctarget_feature_prefix =
compiler/rustc_codegen_llvm/messages.ftl:83:    unknown feature specified for `-Ctarget-feature`: `{$feature}`
compiler/rustc_codegen_llvm/messages.ftl:84:    .note = features must begin with a `+` to enable or `-` to disable it
compiler/rustc_codegen_llvm/src/back/write.rs:102:    let features = llvm_util::global_llvm_features(sess, false);
compiler/rustc_codegen_llvm/src/back/write.rs:103:    target_machine_factory(sess, config::OptLevel::No, &features)(config)
compiler/rustc_codegen_llvm/src/back/write.rs:121:        tcx.global_backend_features(()),
compiler/rustc_codegen_llvm/src/back/write.rs:178:    target_features: &[String],
compiler/rustc_codegen_llvm/src/back/write.rs:194:    // On the wasm target once the `atomics` feature is enabled that means that
compiler/rustc_codegen_llvm/src/back/write.rs:197:    if singlethread && sess.target.is_like_wasm && sess.target_features.contains(&sym::atomics) {
compiler/rustc_codegen_llvm/src/back/write.rs:203:    let features = CString::new(target_features.join(",")).unwrap();
compiler/rustc_codegen_llvm/src/back/write.rs:229:                features.as_ptr(),
compiler/rustc_codegen_llvm/src/back/archive.rs:182:            // --no-leading-underscore: For the `import_name_type` feature to work, we need to be
compiler/rustc_codegen_llvm/src/llvm_util.rs:3:    PossibleFeature, TargetFeatureDisableOrEnable, UnknownCTargetFeature,
compiler/rustc_codegen_llvm/src/llvm_util.rs:4:    UnknownCTargetFeaturePrefix,
compiler/rustc_codegen_llvm/src/llvm_util.rs:8:use rustc_codegen_ssa::target_features::{
compiler/rustc_codegen_llvm/src/llvm_util.rs:9:    supported_target_features, tied_target_features, RUSTC_SPECIFIC_FEATURES,
compiler/rustc_codegen_llvm/src/llvm_util.rs:134:pub enum TargetFeatureFoldStrength<'a> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:135:    // The feature is only tied when enabling the feature, disabling
compiler/rustc_codegen_llvm/src/llvm_util.rs:136:    // this feature shouldn't disable the tied feature.
compiler/rustc_codegen_llvm/src/llvm_util.rs:138:    // The feature is tied for both enabling and disabling this feature.
compiler/rustc_codegen_llvm/src/llvm_util.rs:142:impl<'a> TargetFeatureFoldStrength<'a> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:145:            TargetFeatureFoldStrength::EnableOnly(feat) => feat,
compiler/rustc_codegen_llvm/src/llvm_util.rs:146:            TargetFeatureFoldStrength::Both(feat) => feat,
compiler/rustc_codegen_llvm/src/llvm_util.rs:151:pub struct LLVMFeature<'a> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:152:    pub llvm_feature_name: &'a str,
compiler/rustc_codegen_llvm/src/llvm_util.rs:153:    pub dependency: Option<TargetFeatureFoldStrength<'a>>,
compiler/rustc_codegen_llvm/src/llvm_util.rs:156:impl<'a> LLVMFeature<'a> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:157:    pub fn new(llvm_feature_name: &'a str) -> Self {
compiler/rustc_codegen_llvm/src/llvm_util.rs:158:        Self { llvm_feature_name, dependency: None }
compiler/rustc_codegen_llvm/src/llvm_util.rs:162:        llvm_feature_name: &'a str,
compiler/rustc_codegen_llvm/src/llvm_util.rs:163:        dependency: TargetFeatureFoldStrength<'a>,
compiler/rustc_codegen_llvm/src/llvm_util.rs:165:        Self { llvm_feature_name, dependency: Some(dependency) }
compiler/rustc_codegen_llvm/src/llvm_util.rs:174:        std::iter::once(self.llvm_feature_name).chain(dependencies)
compiler/rustc_codegen_llvm/src/llvm_util.rs:178:impl<'a> IntoIterator for LLVMFeature<'a> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:184:        std::iter::once(self.llvm_feature_name).chain(dependencies)
compiler/rustc_codegen_llvm/src/llvm_util.rs:188:// WARNING: the features after applying `to_llvm_features` must be known
compiler/rustc_codegen_llvm/src/llvm_util.rs:189:// to LLVM or the feature detection code will walk past the end of the feature
compiler/rustc_codegen_llvm/src/llvm_util.rs:196:// where `{ARCH}` is the architecture name. Look for instances of `SubtargetFeature`.
compiler/rustc_codegen_llvm/src/llvm_util.rs:203:pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> LLVMFeature<'a> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:207:            LLVMFeature::with_dependency("sse4.2", TargetFeatureFoldStrength::EnableOnly("crc32"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:209:        ("x86", "pclmulqdq") => LLVMFeature::new("pclmul"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:210:        ("x86", "rdrand") => LLVMFeature::new("rdrnd"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:211:        ("x86", "bmi1") => LLVMFeature::new("bmi"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:212:        ("x86", "cmpxchg16b") => LLVMFeature::new("cx16"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:213:        ("aarch64", "rcpc2") => LLVMFeature::new("rcpc-immo"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:214:        ("aarch64", "dpb") => LLVMFeature::new("ccpp"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:215:        ("aarch64", "dpb2") => LLVMFeature::new("ccdp"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:216:        ("aarch64", "frintts") => LLVMFeature::new("fptoint"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:217:        ("aarch64", "fcma") => LLVMFeature::new("complxnum"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:218:        ("aarch64", "pmuv3") => LLVMFeature::new("perfmon"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:219:        ("aarch64", "paca") => LLVMFeature::new("pauth"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:220:        ("aarch64", "pacg") => LLVMFeature::new("pauth"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:223:            LLVMFeature::with_dependency("neon", TargetFeatureFoldStrength::Both("fp-armv8"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:226:        // neon when a feature only implicitly enables fp
compiler/rustc_codegen_llvm/src/llvm_util.rs:228:            LLVMFeature::with_dependency("f32mm", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:231:            LLVMFeature::with_dependency("f64mm", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:234:            LLVMFeature::with_dependency("fp16fml", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:237:            LLVMFeature::with_dependency("fullfp16", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:240:            LLVMFeature::with_dependency("jsconv", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:243:            LLVMFeature::with_dependency("sve", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:246:            LLVMFeature::with_dependency("sve2", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:249:            LLVMFeature::with_dependency("sve2-aes", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:252:            LLVMFeature::with_dependency("sve2-sm4", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:255:            LLVMFeature::with_dependency("sve2-sha3", TargetFeatureFoldStrength::EnableOnly("neon"))
compiler/rustc_codegen_llvm/src/llvm_util.rs:257:        ("aarch64", "sve2-bitperm") => LLVMFeature::with_dependency(
compiler/rustc_codegen_llvm/src/llvm_util.rs:259:            TargetFeatureFoldStrength::EnableOnly("neon"),
compiler/rustc_codegen_llvm/src/llvm_util.rs:261:        (_, s) => LLVMFeature::new(s),
compiler/rustc_codegen_llvm/src/llvm_util.rs:265:/// Given a map from target_features to whether they are enabled or disabled,
compiler/rustc_codegen_llvm/src/llvm_util.rs:267:pub fn check_tied_features(
compiler/rustc_codegen_llvm/src/llvm_util.rs:269:    features: &FxHashMap<&str, bool>,
compiler/rustc_codegen_llvm/src/llvm_util.rs:271:    if !features.is_empty() {
compiler/rustc_codegen_llvm/src/llvm_util.rs:272:        for tied in tied_target_features(sess) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:273:            // Tied features must be set to the same value, or not set at all
compiler/rustc_codegen_llvm/src/llvm_util.rs:275:            let enabled = features.get(tied_iter.next().unwrap());
compiler/rustc_codegen_llvm/src/llvm_util.rs:276:            if tied_iter.any(|f| enabled != features.get(f)) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:284:/// Used to generate cfg variables and apply features
compiler/rustc_codegen_llvm/src/llvm_util.rs:285:/// Must express features in the way Rust understands them
compiler/rustc_codegen_llvm/src/llvm_util.rs:286:pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:288:    supported_target_features(sess)
compiler/rustc_codegen_llvm/src/llvm_util.rs:290:        .filter_map(|&(feature, gate)| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:292:                Some(feature)
compiler/rustc_codegen_llvm/src/llvm_util.rs:297:        .filter(|feature| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:298:            // check that all features in a given smallvec are enabled
compiler/rustc_codegen_llvm/src/llvm_util.rs:299:            for llvm_feature in to_llvm_features(sess, feature) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:300:                let cstr = SmallCStr::new(llvm_feature);
compiler/rustc_codegen_llvm/src/llvm_util.rs:301:                if !unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {
compiler/rustc_codegen_llvm/src/llvm_util.rs:307:        .map(|feature| Symbol::intern(feature))
compiler/rustc_codegen_llvm/src/llvm_util.rs:330:fn llvm_target_features(tm: &llvm::TargetMachine) -> Vec<(&str, &str)> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:331:    let len = unsafe { llvm::LLVMRustGetTargetFeaturesCount(tm) };
compiler/rustc_codegen_llvm/src/llvm_util.rs:335:            let mut feature = ptr::null();
compiler/rustc_codegen_llvm/src/llvm_util.rs:337:            llvm::LLVMRustGetTargetFeature(tm, i, &mut feature, &mut desc);
compiler/rustc_codegen_llvm/src/llvm_util.rs:338:            if feature.is_null() || desc.is_null() {
compiler/rustc_codegen_llvm/src/llvm_util.rs:339:                bug!("LLVM returned a `null` target feature string");
compiler/rustc_codegen_llvm/src/llvm_util.rs:341:            let feature = CStr::from_ptr(feature).to_str().unwrap_or_else(|e| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:342:                bug!("LLVM returned a non-utf8 feature string: {}", e);
compiler/rustc_codegen_llvm/src/llvm_util.rs:345:                bug!("LLVM returned a non-utf8 feature string: {}", e);
compiler/rustc_codegen_llvm/src/llvm_util.rs:347:            ret.push((feature, desc));
compiler/rustc_codegen_llvm/src/llvm_util.rs:353:fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:354:    let mut llvm_target_features = llvm_target_features(tm);
compiler/rustc_codegen_llvm/src/llvm_util.rs:355:    let mut known_llvm_target_features = FxHashSet::<&'static str>::default();
compiler/rustc_codegen_llvm/src/llvm_util.rs:356:    let mut rustc_target_features = supported_target_features(sess)
compiler/rustc_codegen_llvm/src/llvm_util.rs:358:        .map(|(feature, _gate)| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:360:            let llvm_feature = to_llvm_features(sess, *feature).llvm_feature_name;
compiler/rustc_codegen_llvm/src/llvm_util.rs:362:                match llvm_target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok() {
compiler/rustc_codegen_llvm/src/llvm_util.rs:364:                        known_llvm_target_features.insert(llvm_feature);
compiler/rustc_codegen_llvm/src/llvm_util.rs:365:                        llvm_target_features[index].1
compiler/rustc_codegen_llvm/src/llvm_util.rs:370:            (*feature, desc)
compiler/rustc_codegen_llvm/src/llvm_util.rs:373:    rustc_target_features.extend_from_slice(&[(
compiler/rustc_codegen_llvm/src/llvm_util.rs:377:    llvm_target_features.retain(|(f, _d)| !known_llvm_target_features.contains(f));
compiler/rustc_codegen_llvm/src/llvm_util.rs:379:    let max_feature_len = llvm_target_features
compiler/rustc_codegen_llvm/src/llvm_util.rs:381:        .chain(rustc_target_features.iter())
compiler/rustc_codegen_llvm/src/llvm_util.rs:382:        .map(|(feature, _desc)| feature.len())
compiler/rustc_codegen_llvm/src/llvm_util.rs:386:    println!("Features supported by rustc for this target:");
compiler/rustc_codegen_llvm/src/llvm_util.rs:387:    for (feature, desc) in &rustc_target_features {
compiler/rustc_codegen_llvm/src/llvm_util.rs:388:        println!("    {1:0$} - {2}.", max_feature_len, feature, desc);
compiler/rustc_codegen_llvm/src/llvm_util.rs:390:    println!("\nCode-generation features supported by LLVM for this target:");
compiler/rustc_codegen_llvm/src/llvm_util.rs:391:    for (feature, desc) in &llvm_target_features {
compiler/rustc_codegen_llvm/src/llvm_util.rs:392:        println!("    {1:0$} - {2}.", max_feature_len, feature, desc);
compiler/rustc_codegen_llvm/src/llvm_util.rs:394:    if llvm_target_features.is_empty() {
compiler/rustc_codegen_llvm/src/llvm_util.rs:395:        println!("    Target features listing is not supported by this LLVM version.");
compiler/rustc_codegen_llvm/src/llvm_util.rs:397:    println!("\nUse +feature to enable a feature, or -feature to disable it.");
compiler/rustc_codegen_llvm/src/llvm_util.rs:398:    println!("For example, rustc -C target-cpu=mycpu -C target-feature=+feature1,-feature2\n");
compiler/rustc_codegen_llvm/src/llvm_util.rs:399:    println!("Code-generation features cannot be used in cfg or #[target_feature],");
compiler/rustc_codegen_llvm/src/llvm_util.rs:415:        PrintRequest::TargetFeatures => print_target_features(sess, tm),
compiler/rustc_codegen_llvm/src/llvm_util.rs:439:/// The list of LLVM features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,
compiler/rustc_codegen_llvm/src/llvm_util.rs:441:pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<String> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:442:    // Features that come earlier are overridden by conflicting features later in the string.
compiler/rustc_codegen_llvm/src/llvm_util.rs:445:    // * Features from -Ctarget-cpu=*; are overridden by [^1]
compiler/rustc_codegen_llvm/src/llvm_util.rs:446:    // * Features implied by --target; are overridden by
compiler/rustc_codegen_llvm/src/llvm_util.rs:447:    // * Features from -Ctarget-feature; are overridden by
compiler/rustc_codegen_llvm/src/llvm_util.rs:448:    // * function specific features.
compiler/rustc_codegen_llvm/src/llvm_util.rs:453:    // FIXME(nagisa): it isn't clear what's the best interaction between features implied by
compiler/rustc_codegen_llvm/src/llvm_util.rs:455:    // override anything that's implicit, so e.g. when there's no `--target` flag, features implied
compiler/rustc_codegen_llvm/src/llvm_util.rs:457:    // `--target` and `-Ctarget-cpu=*` are specified? Both then imply some target features and both
compiler/rustc_codegen_llvm/src/llvm_util.rs:460:    let mut features = vec![];
compiler/rustc_codegen_llvm/src/llvm_util.rs:465:            let features_string = unsafe {
compiler/rustc_codegen_llvm/src/llvm_util.rs:466:                let ptr = llvm::LLVMGetHostCPUFeatures();
compiler/rustc_codegen_llvm/src/llvm_util.rs:467:                let features_string = if !ptr.is_null() {
compiler/rustc_codegen_llvm/src/llvm_util.rs:471:                            bug!("LLVM returned a non-utf8 features string: {}", e);
compiler/rustc_codegen_llvm/src/llvm_util.rs:475:                    bug!("could not allocate host CPU features, LLVM returned a `null` string");
compiler/rustc_codegen_llvm/src/llvm_util.rs:480:                features_string
compiler/rustc_codegen_llvm/src/llvm_util.rs:482:            features.extend(features_string.split(',').map(String::from));
compiler/rustc_codegen_llvm/src/llvm_util.rs:487:    // Features implied by an implicit or explicit `--target`.
compiler/rustc_codegen_llvm/src/llvm_util.rs:488:    features.extend(
compiler/rustc_codegen_llvm/src/llvm_util.rs:490:            .features
compiler/rustc_codegen_llvm/src/llvm_util.rs:492:            .filter(|v| !v.is_empty() && backend_feature_name(v).is_some())
compiler/rustc_codegen_llvm/src/llvm_util.rs:493:            // Drop +atomics-32 feature introduced in LLVM 15.
compiler/rustc_codegen_llvm/src/llvm_util.rs:498:    // -Ctarget-features
compiler/rustc_codegen_llvm/src/llvm_util.rs:499:    let supported_features = supported_target_features(sess);
compiler/rustc_codegen_llvm/src/llvm_util.rs:504:        .target_feature
compiler/rustc_codegen_llvm/src/llvm_util.rs:512:                        sess.emit_warning(UnknownCTargetFeaturePrefix { feature: s });
compiler/rustc_codegen_llvm/src/llvm_util.rs:518:            let feature = backend_feature_name(s)?;
compiler/rustc_codegen_llvm/src/llvm_util.rs:519:            // Warn against use of LLVM specific feature names on the CLI.
compiler/rustc_codegen_llvm/src/llvm_util.rs:520:            if diagnostics && !supported_features.iter().any(|&(v, _)| v == feature) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:521:                let rust_feature = supported_features.iter().find_map(|&(rust_feature, _)| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:522:                    let llvm_features = to_llvm_features(sess, rust_feature);
compiler/rustc_codegen_llvm/src/llvm_util.rs:523:                    if llvm_features.contains(&feature) && !llvm_features.contains(&rust_feature) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:524:                        Some(rust_feature)
compiler/rustc_codegen_llvm/src/llvm_util.rs:529:                let unknown_feature = if let Some(rust_feature) = rust_feature {
compiler/rustc_codegen_llvm/src/llvm_util.rs:530:                    UnknownCTargetFeature {
compiler/rustc_codegen_llvm/src/llvm_util.rs:531:                        feature,
compiler/rustc_codegen_llvm/src/llvm_util.rs:532:                        rust_feature: PossibleFeature::Some { rust_feature },
compiler/rustc_codegen_llvm/src/llvm_util.rs:535:                    UnknownCTargetFeature { feature, rust_feature: PossibleFeature::None }
compiler/rustc_codegen_llvm/src/llvm_util.rs:537:                sess.emit_warning(unknown_feature);
compiler/rustc_codegen_llvm/src/llvm_util.rs:542:                featsmap.insert(feature, enable_disable == '+');
compiler/rustc_codegen_llvm/src/llvm_util.rs:545:            // rustc-specific features do not get passed down to LLVM…
compiler/rustc_codegen_llvm/src/llvm_util.rs:546:            if RUSTC_SPECIFIC_FEATURES.contains(&feature) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:549:            // ... otherwise though we run through `to_llvm_features` when
compiler/rustc_codegen_llvm/src/llvm_util.rs:551:            // features also work on the command line instead of having two
compiler/rustc_codegen_llvm/src/llvm_util.rs:553:            let llvm_feature = to_llvm_features(sess, feature);
compiler/rustc_codegen_llvm/src/llvm_util.rs:556:                std::iter::once(format!("{}{}", enable_disable, llvm_feature.llvm_feature_name))
compiler/rustc_codegen_llvm/src/llvm_util.rs:557:                    .chain(llvm_feature.dependency.into_iter().filter_map(move |feat| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:559:                            ('-' | '+', TargetFeatureFoldStrength::Both(f))
compiler/rustc_codegen_llvm/src/llvm_util.rs:560:                            | ('+', TargetFeatureFoldStrength::EnableOnly(f)) => {
compiler/rustc_codegen_llvm/src/llvm_util.rs:569:    features.extend(feats);
compiler/rustc_codegen_llvm/src/llvm_util.rs:571:    if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:572:        sess.emit_err(TargetFeatureDisableOrEnable {
compiler/rustc_codegen_llvm/src/llvm_util.rs:573:            features: f,
compiler/rustc_codegen_llvm/src/llvm_util.rs:575:            missing_features: None,
compiler/rustc_codegen_llvm/src/llvm_util.rs:579:    features
compiler/rustc_codegen_llvm/src/llvm_util.rs:582:/// Returns a feature name for the given `+feature` or `-feature` string.
compiler/rustc_codegen_llvm/src/llvm_util.rs:584:/// Only allows features that are backend specific (i.e. not [`RUSTC_SPECIFIC_FEATURES`].)
compiler/rustc_codegen_llvm/src/llvm_util.rs:585:fn backend_feature_name(s: &str) -> Option<&str> {
compiler/rustc_codegen_llvm/src/llvm_util.rs:586:    // features must start with a `+` or `-`.
compiler/rustc_codegen_llvm/src/llvm_util.rs:587:    let feature = s.strip_prefix(&['+', '-'][..]).unwrap_or_else(|| {
compiler/rustc_codegen_llvm/src/llvm_util.rs:588:        bug!("target feature `{}` must begin with a `+` or `-`", s);
compiler/rustc_codegen_llvm/src/llvm_util.rs:590:    // Rustc-specific feature requests like `+crt-static` or `-crt-static`
compiler/rustc_codegen_llvm/src/llvm_util.rs:592:    if RUSTC_SPECIFIC_FEATURES.contains(&feature) {
compiler/rustc_codegen_llvm/src/llvm_util.rs:595:    Some(feature)
compiler/rustc_codegen_llvm/src/lib.rs:8:#![feature(extern_types)]
compiler/rustc_codegen_llvm/src/lib.rs:9:#![feature(hash_raw_entry)]
compiler/rustc_codegen_llvm/src/lib.rs:10:#![feature(iter_intersperse)]
compiler/rustc_codegen_llvm/src/lib.rs:11:#![feature(let_chains)]
compiler/rustc_codegen_llvm/src/lib.rs:12:#![feature(never_type)]
compiler/rustc_codegen_llvm/src/lib.rs:13:#![feature(impl_trait_in_assoc_type)]
compiler/rustc_codegen_llvm/src/lib.rs:27:pub use llvm_util::target_features;
compiler/rustc_codegen_llvm/src/lib.rs:138:        target_features: &[String],
compiler/rustc_codegen_llvm/src/lib.rs:140:        back::write::target_machine_factory(sess, optlvl, target_features)
compiler/rustc_codegen_llvm/src/lib.rs:261:        providers.global_backend_features =
compiler/rustc_codegen_llvm/src/lib.rs:262:            |tcx, ()| llvm_util::global_llvm_features(tcx.sess, true)
compiler/rustc_codegen_llvm/src/lib.rs:334:    fn target_features(&self, sess: &Session, allow_unstable: bool) -> Vec<Symbol> {
compiler/rustc_codegen_llvm/src/lib.rs:335:        target_features(sess, allow_unstable)
compiler/rustc_codegen_llvm/src/attributes.rs:14:use crate::errors::{MissingFeatures, SanitizerMemtagRequiresMte, TargetFeatureDisableOrEnable};
compiler/rustc_codegen_llvm/src/attributes.rs:80:        // Check to make sure the mte target feature is actually enabled.
compiler/rustc_codegen_llvm/src/attributes.rs:81:        let features = cx.tcx.global_backend_features(());
compiler/rustc_codegen_llvm/src/attributes.rs:82:        let mte_feature =
compiler/rustc_codegen_llvm/src/attributes.rs:83:            features.iter().map(|s| &s[..]).rfind(|n| ["+mte", "-mte"].contains(&&n[..]));
compiler/rustc_codegen_llvm/src/attributes.rs:84:        if let None | Some("-mte") = mte_feature {
compiler/rustc_codegen_llvm/src/attributes.rs:427:    let function_features =
compiler/rustc_codegen_llvm/src/attributes.rs:428:        codegen_fn_attrs.target_features.iter().map(|f| f.as_str()).collect::<Vec<&str>>();
compiler/rustc_codegen_llvm/src/attributes.rs:430:    if let Some(f) = llvm_util::check_tied_features(
compiler/rustc_codegen_llvm/src/attributes.rs:432:        &function_features.iter().map(|f| (*f, true)).collect(),
compiler/rustc_codegen_llvm/src/attributes.rs:436:            .get_attrs(instance.def_id(), sym::target_feature)
compiler/rustc_codegen_llvm/src/attributes.rs:441:            .create_err(TargetFeatureDisableOrEnable {
compiler/rustc_codegen_llvm/src/attributes.rs:442:                features: f,
compiler/rustc_codegen_llvm/src/attributes.rs:444:                missing_features: Some(MissingFeatures),
compiler/rustc_codegen_llvm/src/attributes.rs:450:    let mut function_features = function_features
compiler/rustc_codegen_llvm/src/attributes.rs:453:            llvm_util::to_llvm_features(cx.tcx.sess, feat).into_iter().map(|f| format!("+{}", f))
compiler/rustc_codegen_llvm/src/attributes.rs:474:        // `+multivalue` feature because the purpose of the wasm abi is to match
compiler/rustc_codegen_llvm/src/attributes.rs:475:        // the WebAssembly specification, which has this feature. This won't be
compiler/rustc_codegen_llvm/src/attributes.rs:476:        // needed when LLVM enables this `multivalue` feature by default.
compiler/rustc_codegen_llvm/src/attributes.rs:480:                function_features.push("+multivalue".to_string());
compiler/rustc_codegen_llvm/src/attributes.rs:485:    let global_features = cx.tcx.global_backend_features(()).iter().map(|s| s.as_str());
compiler/rustc_codegen_llvm/src/attributes.rs:486:    let function_features = function_features.iter().map(|s| s.as_str());
compiler/rustc_codegen_llvm/src/attributes.rs:487:    let target_features: String =
compiler/rustc_codegen_llvm/src/attributes.rs:488:        global_features.chain(function_features).intersperse(",").collect();
compiler/rustc_codegen_llvm/src/attributes.rs:489:    if !target_features.is_empty() {
compiler/rustc_codegen_llvm/src/attributes.rs:490:        to_add.push(llvm::CreateAttrStringValue(cx.llcx, "target-features", &target_features));
compiler/rustc_codegen_llvm/src/llvm/ffi.rs:1861:    pub fn LLVMGetHostCPUFeatures() -> *mut c_char;
compiler/rustc_codegen_llvm/src/llvm/ffi.rs:2281:    pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;
compiler/rustc_codegen_llvm/src/llvm/ffi.rs:2284:    pub fn LLVMRustGetTargetFeaturesCount(T: &TargetMachine) -> size_t;
compiler/rustc_codegen_llvm/src/llvm/ffi.rs:2285:    pub fn LLVMRustGetTargetFeature(
compiler/rustc_codegen_llvm/src/llvm/ffi.rs:2288:        Feature: &mut *const c_char,
compiler/rustc_codegen_llvm/src/llvm/ffi.rs:2296:        Features: *const c_char,
compiler/rustc_codegen_llvm/src/debuginfo/doc.md:5:features for generating the debug information. The general principle is
compiler/rustc_codegen_llvm/src/errors.rs:14:#[diag(codegen_llvm_unknown_ctarget_feature_prefix)]
compiler/rustc_codegen_llvm/src/errors.rs:16:pub(crate) struct UnknownCTargetFeaturePrefix<'a> {
compiler/rustc_codegen_llvm/src/errors.rs:17:    pub feature: &'a str,
compiler/rustc_codegen_llvm/src/errors.rs:21:#[diag(codegen_llvm_unknown_ctarget_feature)]
compiler/rustc_codegen_llvm/src/errors.rs:23:pub(crate) struct UnknownCTargetFeature<'a> {
compiler/rustc_codegen_llvm/src/errors.rs:24:    pub feature: &'a str,
compiler/rustc_codegen_llvm/src/errors.rs:26:    pub rust_feature: PossibleFeature<'a>,
compiler/rustc_codegen_llvm/src/errors.rs:30:pub(crate) enum PossibleFeature<'a> {
compiler/rustc_codegen_llvm/src/errors.rs:31:    #[help(codegen_llvm_possible_feature)]
compiler/rustc_codegen_llvm/src/errors.rs:32:    Some { rust_feature: &'a str },
compiler/rustc_codegen_llvm/src/errors.rs:33:    #[help(codegen_llvm_consider_filing_feature_request)]
compiler/rustc_codegen_llvm/src/errors.rs:109:pub(crate) struct TargetFeatureDisableOrEnable<'a> {
compiler/rustc_codegen_llvm/src/errors.rs:110:    pub features: &'a [&'a str],
compiler/rustc_codegen_llvm/src/errors.rs:112:    pub missing_features: Option<MissingFeatures>,
compiler/rustc_codegen_llvm/src/errors.rs:116:#[help(codegen_llvm_missing_features)]
compiler/rustc_codegen_llvm/src/errors.rs:117:pub(crate) struct MissingFeatures;
compiler/rustc_codegen_llvm/src/errors.rs:119:impl IntoDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {
compiler/rustc_codegen_llvm/src/errors.rs:121:        let mut diag = sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable);
compiler/rustc_codegen_llvm/src/errors.rs:125:        if let Some(missing_features) = self.missing_features {
compiler/rustc_codegen_llvm/src/errors.rs:126:            diag.subdiagnostic(missing_features);
compiler/rustc_codegen_llvm/src/errors.rs:128:        diag.set_arg("features", self.features.join(", "));
compiler/rustc_codegen_llvm/src/asm.rs:45:                        for &(_, feature) in reg_class.supported_types(asm_arch) {
compiler/rustc_codegen_llvm/src/asm.rs:46:                            if let Some(feature) = feature {
compiler/rustc_codegen_llvm/src/asm.rs:48:                                if self.tcx.sess.target_features.contains(&feature)
compiler/rustc_codegen_llvm/src/asm.rs:49:                                    || codegen_fn_attrs.target_features.contains(&feature)
compiler/rustc_codegen_llvm/src/asm.rs:87:                        // if the target feature needed by the register class is
compiler/rustc_codegen_llvm/src/context.rs:411:        // require adding a few attributes to Rust itself (feature gated at the
compiler/rustc_log/Cargo.toml:8:tracing-subscriber = { version = "0.3.3", default-features = false, features = ["fmt", "env-filter", "smallvec", "parking_lot", "ansi"] }
compiler/rustc_log/Cargo.toml:15:[features]
compiler/rustc_type_ir/Cargo.toml:14:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_type_ir/src/sty.rs:160:    /// #![feature(generators)]
compiler/rustc_type_ir/src/sty.rs:186:    /// #![feature(generators)]
compiler/rustc_type_ir/src/sty.rs:918:    /// Unevaluated non-const-item, used by `feature(generic_const_exprs)` to represent
compiler/rustc_type_ir/src/lib.rs:1:#![feature(associated_type_defaults)]
compiler/rustc_type_ir/src/lib.rs:2:#![feature(fmt_helpers_for_derive)]
compiler/rustc_type_ir/src/lib.rs:3:#![feature(min_specialization)]
compiler/rustc_type_ir/src/lib.rs:4:#![feature(never_type)]
compiler/rustc_type_ir/src/lib.rs:5:#![feature(rustc_attrs)]
compiler/rustc_type_ir/src/lib.rs:6:#![feature(unwrap_infallible)]
compiler/rustc_const_eval/messages.ftl:402:const_eval_unavailable_target_features_for_fn =
compiler/rustc_const_eval/messages.ftl:403:    calling a function that requires unavailable target features: {$unavailable_feats}
compiler/rustc_const_eval/messages.ftl:439:    const-stable function cannot use `#[feature({$gate})]`
compiler/rustc_const_eval/src/const_eval/fn_queries.rs:9:/// Whether the `def_id` is an unstable const fn and what feature gate(s) are necessary to enable
compiler/rustc_const_eval/src/const_eval/fn_queries.rs:16:                Some((const_stab.feature, implied_by))
compiler/rustc_const_eval/src/lib.rs:8:#![feature(assert_matches)]
compiler/rustc_const_eval/src/lib.rs:9:#![feature(box_patterns)]
compiler/rustc_const_eval/src/lib.rs:10:#![feature(decl_macro)]
compiler/rustc_const_eval/src/lib.rs:11:#![feature(exact_size_is_empty)]
compiler/rustc_const_eval/src/lib.rs:12:#![feature(let_chains)]
compiler/rustc_const_eval/src/lib.rs:13:#![feature(map_try_insert)]
compiler/rustc_const_eval/src/lib.rs:14:#![feature(min_specialization)]
compiler/rustc_const_eval/src/lib.rs:15:#![feature(slice_ptr_get)]
compiler/rustc_const_eval/src/lib.rs:16:#![feature(option_get_or_insert_default)]
compiler/rustc_const_eval/src/lib.rs:17:#![feature(never_type)]
compiler/rustc_const_eval/src/lib.rs:18:#![feature(trait_alias)]
compiler/rustc_const_eval/src/lib.rs:19:#![feature(trusted_len)]
compiler/rustc_const_eval/src/lib.rs:20:#![feature(trusted_step)]
compiler/rustc_const_eval/src/lib.rs:21:#![feature(try_blocks)]
compiler/rustc_const_eval/src/lib.rs:22:#![feature(yeet_expr)]
compiler/rustc_const_eval/src/lib.rs:23:#![feature(if_let_guard)]
compiler/rustc_const_eval/src/errors.rs:31:        code = "#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n",
compiler/rustc_const_eval/src/interpret/terminator.rs:506:                // Check that all target features required by the callee (i.e., from
compiler/rustc_const_eval/src/interpret/terminator.rs:507:                // the attribute `#[target_feature(enable = ...)]`) are enabled at
compiler/rustc_const_eval/src/interpret/terminator.rs:509:                self.check_fn_target_features(instance)?;
compiler/rustc_const_eval/src/interpret/terminator.rs:794:    fn check_fn_target_features(&self, instance: ty::Instance<'tcx>) -> InterpResult<'tcx, ()> {
compiler/rustc_const_eval/src/interpret/terminator.rs:797:            .target_features
compiler/rustc_const_eval/src/interpret/terminator.rs:799:            .any(|feature| !self.tcx.sess.target_features.contains(feature))
compiler/rustc_const_eval/src/interpret/terminator.rs:802:                fluent::const_eval_unavailable_target_features_for_fn,
compiler/rustc_const_eval/src/interpret/terminator.rs:804:                    .target_features
compiler/rustc_const_eval/src/interpret/terminator.rs:806:                    .filter(|&feature| !self.tcx.sess.target_features.contains(feature))
compiler/rustc_const_eval/src/interpret/terminator.rs:807:                    .fold(String::new(), |mut s, feature| {
compiler/rustc_const_eval/src/interpret/terminator.rs:811:                        s.push_str(feature.as_str());
compiler/rustc_const_eval/src/interpret/machine.rs:2://! This separation exists to ensure that no fancy miri features like
compiler/rustc_const_eval/src/transform/check_consts/check.rs:301:            Status::Unstable(gate) if self.tcx.features().enabled(gate) => {
compiler/rustc_const_eval/src/transform/check_consts/check.rs:316:            self.tcx.sess.miri_unleashed_feature(span, gate);
compiler/rustc_const_eval/src/transform/check_consts/check.rs:745:                    if !self.tcx.features().const_trait_impl {
compiler/rustc_const_eval/src/transform/check_consts/check.rs:752:                            feature: Some(sym::const_trait_impl),
compiler/rustc_const_eval/src/transform/check_consts/check.rs:792:                                    feature: None,
compiler/rustc_const_eval/src/transform/check_consts/check.rs:818:                                    feature: None,
compiler/rustc_const_eval/src/transform/check_consts/check.rs:861:                                    feature: None,
compiler/rustc_const_eval/src/transform/check_consts/check.rs:921:                            feature: None,
compiler/rustc_const_eval/src/transform/check_consts/check.rs:928:                // the proper feature gate enabled.
compiler/rustc_const_eval/src/transform/check_consts/check.rs:942:                        tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate)
compiler/rustc_const_eval/src/transform/check_consts/check.rs:944:                    let feature_gate_declared = gate_declared(gate);
compiler/rustc_const_eval/src/transform/check_consts/check.rs:946:                    if !feature_gate_declared && !implied_gate_declared {
compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs:19:    ccx.tcx.features().const_precise_live_drops
compiler/rustc_const_eval/src/transform/check_consts/mod.rs:60:            && self.tcx.features().staged_api
compiler/rustc_const_eval/src/transform/check_consts/mod.rs:83:    feature_gate: Symbol,
compiler/rustc_const_eval/src/transform/check_consts/mod.rs:86:    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs).any(|name| name == feature_gate)
compiler/rustc_const_eval/src/transform/check_consts/mod.rs:96:/// cannot use unstable features and can only call other "const-stable" functions.
compiler/rustc_const_eval/src/transform/check_consts/mod.rs:113:            // Remove this when `#![feature(const_trait_impl)]` is stabilized,
compiler/rustc_const_eval/src/transform/check_consts/resolver.rs:71:            // get this feature.
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:16:use rustc_session::parse::feature_err;
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:74:        feature_err(
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:104:    pub feature: Option<Symbol>,
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:113:        let FnCallNonConst { caller, callee, args, span, call_source, feature } = *self;
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:311:        if let Some(feature) = feature && ccx.tcx.sess.is_nightly_build() {
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:313:                "add `#![feature({})]` to the crate attributes to enable",
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:314:                feature,
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:328:/// Contains the name of the feature that would allow the use of this function.
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:338:        let FnCallUnstable(def_id, feature) = *self;
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:348:            if let Some(feature) = feature {
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:350:                    "add `#![feature({})]` to the crate attributes to enable",
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:351:                    feature
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:378:            ccx.tcx.sess.create_feature_err(
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:446:        // not additionally emit a feature gate error if activating the feature gate won't work.
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:456:            .create_feature_err(errors::InteriorMutabilityBorrow { span }, sym::const_refs_to_cell)
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:542:            hir::BorrowKind::Raw => ccx.tcx.sess.create_feature_err(
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:546:            hir::BorrowKind::Ref => ccx.tcx.sess.create_feature_err(
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:571:        ccx.tcx.sess.create_feature_err(
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:592:/// Not currently intended to ever be allowed, even behind a feature gate: operation depends on
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:619:        feature_err(
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:629:/// Not currently intended to ever be allowed, even behind a feature gate: operation depends on
compiler/rustc_const_eval/src/transform/check_consts/ops.rs:706:            feature_err(
compiler/rustc_ast/Cargo.toml:17:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_ast/src/lib.rs:11:#![feature(associated_type_bounds)]
compiler/rustc_ast/src/lib.rs:12:#![feature(box_patterns)]
compiler/rustc_ast/src/lib.rs:13:#![feature(const_trait_impl)]
compiler/rustc_ast/src/lib.rs:14:#![feature(if_let_guard)]
compiler/rustc_ast/src/lib.rs:15:#![feature(let_chains)]
compiler/rustc_ast/src/lib.rs:16:#![feature(min_specialization)]
compiler/rustc_ast/src/lib.rs:17:#![feature(negative_impls)]
compiler/rustc_ast/src/lib.rs:18:#![feature(stmt_expr_attributes)]
compiler/rustc_ast/src/visit.rs:144:    /// It can be removed once that feature is stabilized.
compiler/rustc_ast/src/ptr.rs:17://!   case with arenas or a GADT AST using type parameters to toggle features).
compiler/rustc_ast/src/ast.rs:501:/// E.g., `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = "foo"]`.
compiler/rustc_ast/src/ast.rs:524:    /// E.g., `#[feature = "foo"]`, where the field represents the `"foo"`.
compiler/rustc_ast/src/mut_visit.rs:156:    /// It can be removed once that feature is stabilized.
compiler/rustc_ast_passes/Cargo.toml:13:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_ast_passes/messages.ftl:75:ast_passes_feature_on_non_nightly = `#![feature]` may not be used on the {$channel} release channel
compiler/rustc_ast_passes/messages.ftl:77:    .stable_since = the feature `{$name}` has been stable since `{$since}` and no longer requires an attribute to enable
compiler/rustc_ast_passes/messages.ftl:154:ast_passes_incompatible_features = `{$f1}` and `{$f2}` are incompatible, using them at the same time is not allowed
compiler/rustc_ast_passes/messages.ftl:155:    .help = remove one of these features
compiler/rustc_ast_passes/src/ast_validation.rs:132:        if sess.opts.unstable_features.is_nightly_build() {
compiler/rustc_ast_passes/src/lib.rs:7:#![feature(box_patterns)]
compiler/rustc_ast_passes/src/lib.rs:8:#![feature(if_let_guard)]
compiler/rustc_ast_passes/src/lib.rs:9:#![feature(iter_is_partitioned)]
compiler/rustc_ast_passes/src/lib.rs:10:#![feature(let_chains)]
compiler/rustc_ast_passes/src/lib.rs:20:pub mod feature_gate;
compiler/rustc_ast_passes/src/errors.rs:643:#[diag(ast_passes_feature_on_non_nightly, code = "E0554")]
compiler/rustc_ast_passes/src/errors.rs:644:pub struct FeatureOnNonNightly {
compiler/rustc_ast_passes/src/errors.rs:649:    pub stable_features: Vec<StableFeature>,
compiler/rustc_ast_passes/src/errors.rs:654:pub struct StableFeature {
compiler/rustc_ast_passes/src/errors.rs:659:impl AddToDiagnostic for StableFeature {
compiler/rustc_ast_passes/src/errors.rs:674:#[diag(ast_passes_incompatible_features)]
compiler/rustc_ast_passes/src/errors.rs:676:pub struct IncompatibleFeatures {
compiler/rustc_ast_passes/src/feature_gate.rs:5:use rustc_feature::{AttributeGate, BuiltinAttribute, Features, GateIssue, BUILTIN_ATTRIBUTE_MAP};
compiler/rustc_ast_passes/src/feature_gate.rs:6:use rustc_session::parse::{feature_err, feature_err_issue, feature_warn};
compiler/rustc_ast_passes/src/feature_gate.rs:17:macro_rules! gate_feature_fn {
compiler/rustc_ast_passes/src/feature_gate.rs:18:    ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $help: expr) => {{
compiler/rustc_ast_passes/src/feature_gate.rs:19:        let (visitor, has_feature, span, name, explain, help) =
compiler/rustc_ast_passes/src/feature_gate.rs:20:            (&*$visitor, $has_feature, $span, $name, $explain, $help);
compiler/rustc_ast_passes/src/feature_gate.rs:21:        let has_feature: bool = has_feature(visitor.features);
compiler/rustc_ast_passes/src/feature_gate.rs:22:        debug!("gate_feature(feature = {:?}, span = {:?}); has? {}", name, span, has_feature);
compiler/rustc_ast_passes/src/feature_gate.rs:23:        if !has_feature && !span.allows_unstable($name) {
compiler/rustc_ast_passes/src/feature_gate.rs:24:            feature_err(&visitor.sess.parse_sess, name, span, explain).help(help).emit();
compiler/rustc_ast_passes/src/feature_gate.rs:27:    ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{
compiler/rustc_ast_passes/src/feature_gate.rs:28:        let (visitor, has_feature, span, name, explain) =
compiler/rustc_ast_passes/src/feature_gate.rs:29:            (&*$visitor, $has_feature, $span, $name, $explain);
compiler/rustc_ast_passes/src/feature_gate.rs:30:        let has_feature: bool = has_feature(visitor.features);
compiler/rustc_ast_passes/src/feature_gate.rs:31:        debug!("gate_feature(feature = {:?}, span = {:?}); has? {}", name, span, has_feature);
compiler/rustc_ast_passes/src/feature_gate.rs:32:        if !has_feature && !span.allows_unstable($name) {
compiler/rustc_ast_passes/src/feature_gate.rs:33:            feature_err(&visitor.sess.parse_sess, name, span, explain).emit();
compiler/rustc_ast_passes/src/feature_gate.rs:36:    (future_incompatible; $visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{
compiler/rustc_ast_passes/src/feature_gate.rs:37:        let (visitor, has_feature, span, name, explain) =
compiler/rustc_ast_passes/src/feature_gate.rs:38:            (&*$visitor, $has_feature, $span, $name, $explain);
compiler/rustc_ast_passes/src/feature_gate.rs:39:        let has_feature: bool = has_feature(visitor.features);
compiler/rustc_ast_passes/src/feature_gate.rs:41:            "gate_feature(feature = {:?}, span = {:?}); has? {} (future_incompatible)",
compiler/rustc_ast_passes/src/feature_gate.rs:42:            name, span, has_feature
compiler/rustc_ast_passes/src/feature_gate.rs:44:        if !has_feature && !span.allows_unstable($name) {
compiler/rustc_ast_passes/src/feature_gate.rs:45:            feature_warn(&visitor.sess.parse_sess, name, span, explain);
compiler/rustc_ast_passes/src/feature_gate.rs:50:macro_rules! gate_feature_post {
compiler/rustc_ast_passes/src/feature_gate.rs:51:    ($visitor: expr, $feature: ident, $span: expr, $explain: expr, $help: expr) => {
compiler/rustc_ast_passes/src/feature_gate.rs:52:        gate_feature_fn!($visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain, $help)
compiler/rustc_ast_passes/src/feature_gate.rs:54:    ($visitor: expr, $feature: ident, $span: expr, $explain: expr) => {
compiler/rustc_ast_passes/src/feature_gate.rs:55:        gate_feature_fn!($visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)
compiler/rustc_ast_passes/src/feature_gate.rs:57:    (future_incompatible; $visitor: expr, $feature: ident, $span: expr, $explain: expr) => {
compiler/rustc_ast_passes/src/feature_gate.rs:58:        gate_feature_fn!(future_incompatible; $visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)
compiler/rustc_ast_passes/src/feature_gate.rs:62:pub fn check_attribute(attr: &ast::Attribute, sess: &Session, features: &Features) {
compiler/rustc_ast_passes/src/feature_gate.rs:63:    PostExpansionVisitor { sess, features }.visit_attribute(attr)
compiler/rustc_ast_passes/src/feature_gate.rs:69:    // `sess` contains a `Features`, but this might not be that one.
compiler/rustc_ast_passes/src/feature_gate.rs:70:    features: &'a Features,
compiler/rustc_ast_passes/src/feature_gate.rs:81:                abi => gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:90:        match abi::is_enabled(&self.features, span, symbol_unescaped.as_str()) {
compiler/rustc_ast_passes/src/feature_gate.rs:92:            Err(abi::AbiDisabled::Unstable { feature, explain }) => {
compiler/rustc_ast_passes/src/feature_gate.rs:93:                feature_err_issue(
compiler/rustc_ast_passes/src/feature_gate.rs:95:                    feature,
compiler/rustc_ast_passes/src/feature_gate.rs:122:    /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.
compiler/rustc_ast_passes/src/feature_gate.rs:132:                        gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:139:                        gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:163:        // FIXME: gate_feature_post doesn't really handle multispans...
compiler/rustc_ast_passes/src/feature_gate.rs:164:        if !non_lt_param_spans.is_empty() && !self.features.non_lifetime_binders {
compiler/rustc_ast_passes/src/feature_gate.rs:165:            feature_err(
compiler/rustc_ast_passes/src/feature_gate.rs:185:        // Check feature gates for built-in attributes.
compiler/rustc_ast_passes/src/feature_gate.rs:187:            gate: AttributeGate::Gated(_, name, descr, has_feature),
compiler/rustc_ast_passes/src/feature_gate.rs:191:            gate_feature_fn!(self, has_feature, attr.span, *name, *descr);
compiler/rustc_ast_passes/src/feature_gate.rs:196:                macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {
compiler/rustc_ast_passes/src/feature_gate.rs:199:                        gate_feature_post!(self, $feature, attr.span, msg);
compiler/rustc_ast_passes/src/feature_gate.rs:212:                    gate_feature_post!(self, rustdoc_internals, attr.span, msg);
compiler/rustc_ast_passes/src/feature_gate.rs:217:                    gate_feature_post!(self, rustdoc_internals, attr.span, msg);
compiler/rustc_ast_passes/src/feature_gate.rs:223:        if !self.features.staged_api {
compiler/rustc_ast_passes/src/feature_gate.rs:245:                    gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:260:                            gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:273:                    gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:283:                    gate_feature_post!(&self, specialization, i.span, "specialization is unstable");
compiler/rustc_ast_passes/src/feature_gate.rs:288:                gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:297:                gate_feature_post!(&self, trait_alias, i.span, "trait aliases are experimental");
compiler/rustc_ast_passes/src/feature_gate.rs:302:                gate_feature_post!(&self, decl_macro, i.span, msg);
compiler/rustc_ast_passes/src/feature_gate.rs:321:                    gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:330:                gate_feature_post!(&self, extern_types, i.span, "extern types are experimental");
compiler/rustc_ast_passes/src/feature_gate.rs:346:                gate_feature_post!(&self, never_type, ty.span, "the `!` type is experimental");
compiler/rustc_ast_passes/src/feature_gate.rs:379:                gate_feature_post!(&self, try_blocks, e.span, "`try` expression is experimental");
compiler/rustc_ast_passes/src/feature_gate.rs:395:                        gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:405:                gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:413:                gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:441:            gate_feature_post!(&self, c_variadic, span, "C-variadic functions are unstable");
compiler/rustc_ast_passes/src/feature_gate.rs:453:                gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:460:                gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:476:                    gate_feature_post!(
compiler/rustc_ast_passes/src/feature_gate.rs:492:            gate_feature_fn!(
compiler/rustc_ast_passes/src/feature_gate.rs:494:                |x: &Features| x.specialization || (is_fn && x.min_specialization),
compiler/rustc_ast_passes/src/feature_gate.rs:505:    maybe_stage_features(sess, krate);
compiler/rustc_ast_passes/src/feature_gate.rs:506:    check_incompatible_features(sess);
compiler/rustc_ast_passes/src/feature_gate.rs:507:    let mut visitor = PostExpansionVisitor { sess, features: &sess.features_untracked() };
compiler/rustc_ast_passes/src/feature_gate.rs:514:                    gate_feature_post!(&visitor, $gate, *span, $msg, $help);
compiler/rustc_ast_passes/src/feature_gate.rs:521:                    gate_feature_post!(&visitor, $gate, *span, $msg);
compiler/rustc_ast_passes/src/feature_gate.rs:560:    if !visitor.features.negative_bounds {
compiler/rustc_ast_passes/src/feature_gate.rs:573:                gate_feature_post!(future_incompatible; &visitor, $gate, *span, $msg);
compiler/rustc_ast_passes/src/feature_gate.rs:589:fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {
compiler/rustc_ast_passes/src/feature_gate.rs:590:    // checks if `#![feature]` has been used to enable any lang feature
compiler/rustc_ast_passes/src/feature_gate.rs:591:    // does not check the same for lib features unless there's at least one
compiler/rustc_ast_passes/src/feature_gate.rs:592:    // declared lang feature
compiler/rustc_ast_passes/src/feature_gate.rs:593:    if !sess.opts.unstable_features.is_nightly_build() {
compiler/rustc_ast_passes/src/feature_gate.rs:594:        let lang_features = &sess.features_untracked().declared_lang_features;
compiler/rustc_ast_passes/src/feature_gate.rs:595:        if lang_features.len() == 0 {
compiler/rustc_ast_passes/src/feature_gate.rs:598:        for attr in krate.attrs.iter().filter(|attr| attr.has_name(sym::feature)) {
compiler/rustc_ast_passes/src/feature_gate.rs:599:            let mut err = errors::FeatureOnNonNightly {
compiler/rustc_ast_passes/src/feature_gate.rs:602:                stable_features: vec![],
compiler/rustc_ast_passes/src/feature_gate.rs:611:                let stable_since = lang_features
compiler/rustc_ast_passes/src/feature_gate.rs:613:                    .flat_map(|&(feature, _, since)| if feature == name { since } else { None })
compiler/rustc_ast_passes/src/feature_gate.rs:616:                    err.stable_features.push(errors::StableFeature { name, since });
compiler/rustc_ast_passes/src/feature_gate.rs:629:fn check_incompatible_features(sess: &Session) {
compiler/rustc_ast_passes/src/feature_gate.rs:630:    let features = sess.features_untracked();
compiler/rustc_ast_passes/src/feature_gate.rs:632:    let declared_features = features
compiler/rustc_ast_passes/src/feature_gate.rs:633:        .declared_lang_features
compiler/rustc_ast_passes/src/feature_gate.rs:637:        .chain(features.declared_lib_features.iter().copied());
compiler/rustc_ast_passes/src/feature_gate.rs:639:    for (f1, f2) in rustc_feature::INCOMPATIBLE_FEATURES
compiler/rustc_ast_passes/src/feature_gate.rs:641:        .filter(|&&(f1, f2)| features.enabled(f1) && features.enabled(f2))
compiler/rustc_ast_passes/src/feature_gate.rs:643:        if let Some((f1_name, f1_span)) = declared_features.clone().find(|(name, _)| name == f1) {
compiler/rustc_ast_passes/src/feature_gate.rs:644:            if let Some((f2_name, f2_span)) = declared_features.clone().find(|(name, _)| name == f2)
compiler/rustc_ast_passes/src/feature_gate.rs:647:                sess.emit_err(errors::IncompatibleFeatures { spans, f1: f1_name, f2: f2_name });
compiler/rustc_baked_icu_data/Cargo.toml:13:[features]
compiler/rustc_metadata/Cargo.toml:11:odht = { version = "0.3.1", features = ["nightly"] }
compiler/rustc_metadata/Cargo.toml:19:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_metadata/src/lib.rs:2:#![feature(decl_macro)]
compiler/rustc_metadata/src/lib.rs:3:#![feature(extract_if)]
compiler/rustc_metadata/src/lib.rs:4:#![feature(generators)]
compiler/rustc_metadata/src/lib.rs:5:#![feature(iter_from_generator)]
compiler/rustc_metadata/src/lib.rs:6:#![feature(let_chains)]
compiler/rustc_metadata/src/lib.rs:7:#![feature(proc_macro_internals)]
compiler/rustc_metadata/src/lib.rs:8:#![feature(macro_metavar_expr)]
compiler/rustc_metadata/src/lib.rs:9:#![feature(min_specialization)]
compiler/rustc_metadata/src/lib.rs:10:#![feature(slice_as_chunks)]
compiler/rustc_metadata/src/lib.rs:11:#![feature(trusted_len)]
compiler/rustc_metadata/src/lib.rs:12:#![feature(try_blocks)]
compiler/rustc_metadata/src/lib.rs:13:#![feature(never_type)]
compiler/rustc_metadata/src/native_libs.rs:10:use rustc_session::parse::feature_err;
compiler/rustc_metadata/src/native_libs.rs:106:        let features = self.tcx.features();
compiler/rustc_metadata/src/native_libs.rs:193:                        if !features.link_cfg {
compiler/rustc_metadata/src/native_libs.rs:194:                            feature_err(
compiler/rustc_metadata/src/native_libs.rs:261:                    macro report_unstable_modifier($feature: ident) {
compiler/rustc_metadata/src/native_libs.rs:262:                        if !features.$feature {
compiler/rustc_metadata/src/native_libs.rs:263:                            feature_err(
compiler/rustc_metadata/src/native_libs.rs:265:                                sym::$feature,
compiler/rustc_metadata/src/rmeta/encoder.rs:51:    feat: &'tcx rustc_feature::Features,
compiler/rustc_metadata/src/rmeta/encoder.rs:579:        let lib_features = stat!("lib-features", || self.encode_lib_features());
compiler/rustc_metadata/src/rmeta/encoder.rs:693:                lib_features,
compiler/rustc_metadata/src/rmeta/encoder.rs:784:    if rustc_feature::is_builtin_only_local(attr.name_or_empty()) {
compiler/rustc_metadata/src/rmeta/encoder.rs:1871:    fn encode_lib_features(&mut self) -> LazyArray<(Symbol, Option<Symbol>)> {
compiler/rustc_metadata/src/rmeta/encoder.rs:1874:        let lib_features = tcx.lib_features(());
compiler/rustc_metadata/src/rmeta/encoder.rs:1875:        self.lazy_array(lib_features.to_vec())
compiler/rustc_metadata/src/rmeta/encoder.rs:2195:        feat: tcx.features(),
compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs:345:    defined_lib_features => { cdata.get_lib_features(tcx) }
compiler/rustc_metadata/src/rmeta/decoder.rs:1000:    fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
compiler/rustc_metadata/src/rmeta/decoder.rs:1001:        tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
compiler/rustc_metadata/src/rmeta/decoder.rs:1005:    /// has an `implied_by` meta item, then the mapping from the implied feature to the actual
compiler/rustc_metadata/src/rmeta/decoder.rs:1006:    /// feature is a stability implication).
compiler/rustc_metadata/src/rmeta/mod.rs:262:    lib_features: LazyArray<(Symbol, Option<Symbol>)>,
compiler/rustc_middle/Cargo.toml:24:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_middle/Cargo.toml:38:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_middle/Cargo.toml:42:[features]
compiler/rustc_middle/messages.ftl:73:    to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled
compiler/rustc_middle/src/middle/codegen_fn_attrs.rs:26:    /// The `#[target_feature(enable = "...")]` attribute and the enabled
compiler/rustc_middle/src/middle/codegen_fn_attrs.rs:27:    /// features (only enabled features are supported right now).
compiler/rustc_middle/src/middle/codegen_fn_attrs.rs:28:    pub target_features: Vec<Symbol>,
compiler/rustc_middle/src/middle/codegen_fn_attrs.rs:119:            target_features: vec![],
compiler/rustc_middle/src/middle/stability.rs:11:use rustc_feature::GateIssue;
compiler/rustc_middle/src/middle/stability.rs:18:use rustc_session::parse::feature_err_issue;
compiler/rustc_middle/src/middle/stability.rs:66:    /// Mapping from feature name to feature name based on the `implied_by` field of `#[unstable]`
compiler/rustc_middle/src/middle/stability.rs:67:    /// attributes. If a `#[unstable(feature = "implier", implied_by = "impliee")]` attribute
compiler/rustc_middle/src/middle/stability.rs:73:    /// mapping is necessary for diagnostics. When a "unnecessary feature attribute" error is
compiler/rustc_middle/src/middle/stability.rs:75:    /// to know that the feature implies another feature. If it were reversed, and the `#[stable]`
compiler/rustc_middle/src/middle/stability.rs:77:    /// unstable feature" error for a feature that was implied.
compiler/rustc_middle/src/middle/stability.rs:101:    feature: Symbol,
compiler/rustc_middle/src/middle/stability.rs:110:        Some(r) => format!("use of unstable library feature '{}': {}", feature, r),
compiler/rustc_middle/src/middle/stability.rs:111:        None => format!("use of unstable library feature '{}'", &feature),
compiler/rustc_middle/src/middle/stability.rs:118:            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), msg);
compiler/rustc_middle/src/middle/stability.rs:268:    /// corresponding feature gate.
compiler/rustc_middle/src/middle/stability.rs:271:    /// corresponding feature gate.
compiler/rustc_middle/src/middle/stability.rs:273:        feature: Symbol,
compiler/rustc_middle/src/middle/stability.rs:304:    feature: Symbol,
compiler/rustc_middle/src/middle/stability.rs:306:    if feature == sym::allocator_api {
compiler/rustc_middle/src/middle/stability.rs:337:    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending
compiler/rustc_middle/src/middle/stability.rs:338:    /// unstable feature otherwise.
compiler/rustc_middle/src/middle/stability.rs:356:    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending
compiler/rustc_middle/src/middle/stability.rs:357:    /// unstable feature otherwise.
compiler/rustc_middle/src/middle/stability.rs:444:                feature,
compiler/rustc_middle/src/middle/stability.rs:447:                if span.allows_unstable(feature) {
compiler/rustc_middle/src/middle/stability.rs:451:                if self.features().active(feature) {
compiler/rustc_middle/src/middle/stability.rs:455:                // If this item was previously part of a now-stabilized feature which is still
compiler/rustc_middle/src/middle/stability.rs:456:                // active (i.e. the user hasn't removed the attribute for the stabilized feature
compiler/rustc_middle/src/middle/stability.rs:458:                if let Some(implied_by) = implied_by && self.features().active(implied_by) {
compiler/rustc_middle/src/middle/stability.rs:469:                // compiling a compiler crate), then let this missing feature
compiler/rustc_middle/src/middle/stability.rs:471:                if feature == sym::rustc_private && issue == NonZeroU32::new(27812) {
compiler/rustc_middle/src/middle/stability.rs:481:                let suggestion = suggestion_for_allocator_api(self, def_id, span, feature);
compiler/rustc_middle/src/middle/stability.rs:483:                    feature,
compiler/rustc_middle/src/middle/stability.rs:502:    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending
compiler/rustc_middle/src/middle/stability.rs:503:    /// unstable feature otherwise.
compiler/rustc_middle/src/middle/stability.rs:529:                feature,
compiler/rustc_middle/src/middle/stability.rs:531:                if span.allows_unstable(feature) {
compiler/rustc_middle/src/middle/stability.rs:535:                if self.features().active(feature) {
compiler/rustc_middle/src/middle/stability.rs:540:                    feature,
compiler/rustc_middle/src/middle/stability.rs:557:    /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not
compiler/rustc_middle/src/middle/stability.rs:563:    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.
compiler/rustc_middle/src/middle/stability.rs:576:    /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not
compiler/rustc_middle/src/middle/stability.rs:584:    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.
compiler/rustc_middle/src/middle/stability.rs:612:    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.
compiler/rustc_middle/src/middle/stability.rs:630:            EvalResult::Deny { feature, reason, issue, suggestion, is_soft } => report_unstable(
compiler/rustc_middle/src/middle/stability.rs:632:                feature,
compiler/rustc_middle/src/middle/mod.rs:6:pub mod lib_features {
compiler/rustc_middle/src/middle/mod.rs:11:    pub struct LibFeatures {
compiler/rustc_middle/src/middle/mod.rs:12:        /// A map from feature to stabilisation version.
compiler/rustc_middle/src/middle/mod.rs:17:    impl LibFeatures {
compiler/rustc_middle/src/middle/mod.rs:19:            let mut all_features: Vec<_> = self
compiler/rustc_middle/src/middle/mod.rs:25:            all_features.sort_unstable_by(|a, b| a.0.as_str().partial_cmp(b.0.as_str()).unwrap());
compiler/rustc_middle/src/middle/mod.rs:26:            all_features
compiler/rustc_middle/src/traits/specialization_graph.rs:50:/// What kind of overlap check are we doing -- this exists just for testing and feature-gating
compiler/rustc_middle/src/traits/specialization_graph.rs:56:    /// Feature-gated test: Stable, *or* there is an explicit negative impl that rules out one of the where-clauses.
compiler/rustc_middle/src/traits/specialization_graph.rs:64:        let with_negative_coherence = tcx.features().with_negative_coherence;
compiler/rustc_middle/src/traits/specialization_graph.rs:193:    /// #![feature(specialization)]
compiler/rustc_middle/src/traits/mod.rs:49:    /// #![feature(specialization)]
compiler/rustc_middle/src/traits/mod.rs:407:    /// #[feature(trivial_bounds)] is not enabled
compiler/rustc_middle/src/traits/mod.rs:955:    /// but was included during typeck due to the trivial_bounds feature.
compiler/rustc_middle/src/lib.rs:26:#![feature(allocator_api)]
compiler/rustc_middle/src/lib.rs:27:#![feature(array_windows)]
compiler/rustc_middle/src/lib.rs:28:#![feature(assert_matches)]
compiler/rustc_middle/src/lib.rs:29:#![feature(box_patterns)]
compiler/rustc_middle/src/lib.rs:30:#![feature(core_intrinsics)]
compiler/rustc_middle/src/lib.rs:31:#![feature(discriminant_kind)]
compiler/rustc_middle/src/lib.rs:32:#![feature(exhaustive_patterns)]
compiler/rustc_middle/src/lib.rs:33:#![feature(generators)]
compiler/rustc_middle/src/lib.rs:34:#![feature(get_mut_unchecked)]
compiler/rustc_middle/src/lib.rs:35:#![feature(if_let_guard)]
compiler/rustc_middle/src/lib.rs:36:#![feature(inline_const)]
compiler/rustc_middle/src/lib.rs:37:#![feature(iter_from_generator)]
compiler/rustc_middle/src/lib.rs:38:#![feature(local_key_cell_methods)]
compiler/rustc_middle/src/lib.rs:39:#![feature(negative_impls)]
compiler/rustc_middle/src/lib.rs:40:#![feature(never_type)]
compiler/rustc_middle/src/lib.rs:41:#![feature(extern_types)]
compiler/rustc_middle/src/lib.rs:42:#![feature(new_uninit)]
compiler/rustc_middle/src/lib.rs:43:#![feature(let_chains)]
compiler/rustc_middle/src/lib.rs:44:#![feature(min_specialization)]
compiler/rustc_middle/src/lib.rs:45:#![feature(trusted_len)]
compiler/rustc_middle/src/lib.rs:46:#![feature(type_alias_impl_trait)]
compiler/rustc_middle/src/lib.rs:47:#![feature(strict_provenance)]
compiler/rustc_middle/src/lib.rs:48:#![feature(associated_type_bounds)]
compiler/rustc_middle/src/lib.rs:49:#![feature(rustc_attrs)]
compiler/rustc_middle/src/lib.rs:50:#![feature(control_flow_enum)]
compiler/rustc_middle/src/lib.rs:51:#![feature(trait_upcasting)]
compiler/rustc_middle/src/lib.rs:52:#![feature(trusted_step)]
compiler/rustc_middle/src/lib.rs:53:#![feature(try_blocks)]
compiler/rustc_middle/src/lib.rs:54:#![feature(try_reserve_kind)]
compiler/rustc_middle/src/lib.rs:55:#![feature(nonzero_ops)]
compiler/rustc_middle/src/lib.rs:56:#![feature(decl_macro)]
compiler/rustc_middle/src/lib.rs:57:#![feature(extract_if)]
compiler/rustc_middle/src/lib.rs:58:#![feature(intra_doc_pointers)]
compiler/rustc_middle/src/lib.rs:59:#![feature(yeet_expr)]
compiler/rustc_middle/src/lib.rs:60:#![feature(result_option_inspect)]
compiler/rustc_middle/src/lib.rs:61:#![feature(const_option)]
compiler/rustc_middle/src/lib.rs:62:#![feature(trait_alias)]
compiler/rustc_middle/src/lib.rs:63:#![feature(ptr_alignment_type)]
compiler/rustc_middle/src/lib.rs:64:#![feature(macro_metavar_expr)]
compiler/rustc_middle/src/ty/sty.rs:2201:        if tcx.features().never_type_fallback { tcx.types.never } else { tcx.types.unit }
compiler/rustc_middle/src/ty/layout.rs:346:                if len.ty() == tcx.types.usize && tcx.features().transmute_generic_consts =>
compiler/rustc_middle/src/ty/layout.rs:1202:    // `#![feature(c_unwind)]` feature gate is active.
compiler/rustc_middle/src/ty/layout.rs:1228:                || (!tcx.features().c_unwind && tcx.sess.panic_strategy() == PanicStrategy::Unwind)
compiler/rustc_middle/src/ty/util.rs:1240:    /// This is mainly used to require the arbitrary_self_types feature
compiler/rustc_middle/src/ty/error.rs:67:    /// Safe `#[target_feature]` functions are not assignable to safe function pointers.
compiler/rustc_middle/src/ty/error.rs:68:    TargetFeatureCast(DefId),
compiler/rustc_middle/src/ty/error.rs:196:            TargetFeatureCast(_) => {
compiler/rustc_middle/src/ty/error.rs:197:                "cannot coerce functions with `#[target_feature]` to safe function pointers".into()
compiler/rustc_middle/src/ty/error.rs:210:            | VariadicMismatch(_) | TargetFeatureCast(_) => false,
compiler/rustc_middle/src/ty/typeck_results.rs:207:    /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
compiler/rustc_middle/src/ty/instance.rs:47:    /// `unsized_locals` feature).
compiler/rustc_middle/src/ty/inhabitedness/mod.rs:8://! #![feature(never_type)]
compiler/rustc_middle/src/ty/inhabitedness/mod.rs:134:    /// #![feature(never_type)]
compiler/rustc_middle/src/ty/print/pretty.rs:2819:        if let ty::BoundConstness::ConstIfConst = self.constness && cx.tcx().features().const_trait_impl {
compiler/rustc_middle/src/ty/mod.rs:259:    /// This is a "stability hack", not a real Rust feature.
compiler/rustc_middle/src/ty/mod.rs:328:    /// Tuple containing the types of closure captures before the feature `capture_disjoint_fields`
compiler/rustc_middle/src/ty/mod.rs:329:    pub before_feature_tys: Ty<'tcx>,
compiler/rustc_middle/src/ty/mod.rs:330:    /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
compiler/rustc_middle/src/ty/mod.rs:331:    pub after_feature_tys: Ty<'tcx>,
compiler/rustc_middle/src/ty/mod.rs:2207:    /// future-compatibility warning. To avoid accidentally "stabilizing" this feature,
compiler/rustc_middle/src/ty/mod.rs:2512:        } else if cfg!(debug_assertions) && rustc_feature::is_builtin_only_local(attr) {
compiler/rustc_middle/src/ty/mod.rs:2520:        if cfg!(debug_assertions) && !rustc_feature::is_valid_for_get_attr(attr) {
compiler/rustc_middle/src/ty/mod.rs:2531:        if cfg!(debug_assertions) && !did.is_local() && rustc_feature::is_builtin_only_local(attr) {
compiler/rustc_middle/src/ty/mod.rs:2658:    /// - If the `collapse_debuginfo` feature is enabled then debuginfo is not collapsed by default
compiler/rustc_middle/src/ty/mod.rs:2665:            && if self.features().collapse_debuginfo {
compiler/rustc_middle/src/ty/closure.rs:316:    /// If the user doesn't enable feature `capture_disjoint_fields` (RFC 2229) then, it is
compiler/rustc_middle/src/ty/relate.rs:592:    if tcx.features().generic_const_exprs {
compiler/rustc_middle/src/ty/context.rs:763:    pub fn features(self) -> &'tcx rustc_feature::Features {
compiler/rustc_middle/src/ty/context.rs:764:        self.features_query(())
compiler/rustc_middle/src/ty/context.rs:1958:    /// feature gates
compiler/rustc_middle/src/ty/context.rs:1964:                    // corresponding feature gate.
compiler/rustc_middle/src/ty/context.rs:1965:                    self.features()
compiler/rustc_middle/src/ty/context.rs:1966:                        .declared_lib_features
compiler/rustc_middle/src/ty/context.rs:1968:                        .any(|&(sym, _)| sym == stability.feature)
compiler/rustc_middle/src/ty/context.rs:1971:                // const fn or the user is using feature gates and we thus don't
compiler/rustc_middle/src/ty/context.rs:1980:    /// Whether the trait impl is marked const. This does not consider stability or feature gates.
compiler/rustc_middle/src/query/mod.rs:17:use crate::middle::lib_features::LibFeatures;
compiler/rustc_middle/src/query/mod.rs:721:    /// not have the feature gate active).
compiler/rustc_middle/src/query/mod.rs:1226:    query asm_target_features(def_id: DefId) -> &'tcx FxIndexSet<Symbol> {
compiler/rustc_middle/src/query/mod.rs:1227:        desc { |tcx| "computing target features for inline asm of `{}`", tcx.def_path_str(def_id) }
compiler/rustc_middle/src/query/mod.rs:1727:    query lib_features(_: ()) -> &'tcx LibFeatures {
compiler/rustc_middle/src/query/mod.rs:1729:        desc { "calculating the lib features map" }
compiler/rustc_middle/src/query/mod.rs:1731:    query defined_lib_features(_: CrateNum) -> &'tcx [(Symbol, Option<Symbol>)] {
compiler/rustc_middle/src/query/mod.rs:1732:        desc { "calculating the lib features defined in a crate" }
compiler/rustc_middle/src/query/mod.rs:1737:        desc { "calculating the implications between `#[unstable]` features defined in a crate" }
compiler/rustc_middle/src/query/mod.rs:2077:    query supported_target_features(_: CrateNum) -> &'tcx FxHashMap<String, Option<Symbol>> {
compiler/rustc_middle/src/query/mod.rs:2080:        desc { "looking up supported target features" }
compiler/rustc_middle/src/query/mod.rs:2083:    query features_query(_: ()) -> &'tcx rustc_feature::Features {
compiler/rustc_middle/src/query/mod.rs:2085:        desc { "looking up enabled feature gates" }
compiler/rustc_middle/src/query/mod.rs:2140:    /// The list of backend features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,
compiler/rustc_middle/src/query/mod.rs:2142:    query global_backend_features(_: ()) -> &'tcx Vec<String> {
compiler/rustc_middle/src/query/mod.rs:2145:        desc { "computing the backend features for CLI flags" }
compiler/rustc_middle/src/mir/query.rs:96:                "call to function with `#[target_feature]`",
compiler/rustc_middle/src/mir/query.rs:97:                "can only be called if the required target features are available",
compiler/rustc_middle/src/mir/mod.rs:1037:    /// the underlying debuginfo feature this relies on.
compiler/rustc_middle/src/mir/mod.rs:1072:    // more advanced control-flow features (unsupported by LLVM?)
compiler/rustc_middle/src/mir/interpret/queries.rs:97:                    if !self.features().generic_const_exprs && ct.args.has_non_region_param() {
compiler/rustc_middle/src/mir/syntax.rs:897:/// `#![feature(unsized_locals)]` in Rust. Besides just putting "unsized locals are special and
compiler/rustc_session/Cargo.toml:13:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_session/Cargo.toml:31:features = [
compiler/rustc_session/messages.ftl:4:session_cannot_enable_crt_static_linux = sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`
compiler/rustc_session/messages.ftl:19:session_feature_diagnostic_for_issue =
compiler/rustc_session/messages.ftl:22:session_feature_diagnostic_help =
compiler/rustc_session/messages.ftl:23:    add `#![feature({$feature})]` to the crate attributes to enable
compiler/rustc_session/messages.ftl:25:session_feature_gate_error = {$explain}
compiler/rustc_session/messages.ftl:70:session_not_circumvent_feature = `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine
compiler/rustc_session/messages.ftl:104:session_unleashed_feature_help_named = skipping check for `{$gate}` feature
compiler/rustc_session/messages.ftl:105:session_unleashed_feature_help_unnamed = skipping check that does not even have a feature gate
compiler/rustc_session/src/session.rs:9:use crate::parse::{add_feature_diagnostics, ParseSess};
compiler/rustc_session/src/session.rs:163:    features: OnceCell<rustc_feature::Features>,
compiler/rustc_session/src/session.rs:201:    /// const check, optionally with the relevant feature gate. We use this to
compiler/rustc_session/src/session.rs:204:    miri_unleashed_features: Lock<Vec<(Span, Option<Symbol>)>>,
compiler/rustc_session/src/session.rs:209:    /// Set of enabled features for the current target.
compiler/rustc_session/src/session.rs:210:    pub target_features: FxIndexSet<Symbol>,
compiler/rustc_session/src/session.rs:212:    /// Set of enabled features for the current target, including unstable ones.
compiler/rustc_session/src/session.rs:213:    pub unstable_target_features: FxIndexSet<Symbol>,
compiler/rustc_session/src/session.rs:259:    pub fn miri_unleashed_feature(&self, span: Span, feature_gate: Option<Symbol>) {
compiler/rustc_session/src/session.rs:260:        self.miri_unleashed_features.lock().push((span, feature_gate));
compiler/rustc_session/src/session.rs:268:    fn check_miri_unleashed_features(&self) {
compiler/rustc_session/src/session.rs:269:        let unleashed_features = self.miri_unleashed_features.lock();
compiler/rustc_session/src/session.rs:270:        if !unleashed_features.is_empty() {
compiler/rustc_session/src/session.rs:274:                unleashed_features: unleashed_features
compiler/rustc_session/src/session.rs:279:                            errors::UnleashedFeatureHelp::Named { span: *span, gate }
compiler/rustc_session/src/session.rs:281:                        .unwrap_or(errors::UnleashedFeatureHelp::Unnamed { span: *span })
compiler/rustc_session/src/session.rs:288:                // We have skipped a feature gate, and not run into other errors... reject.
compiler/rustc_session/src/session.rs:289:                self.emit_err(errors::NotCircumventFeature);
compiler/rustc_session/src/session.rs:296:        self.check_miri_unleashed_features();
compiler/rustc_session/src/session.rs:547:    pub fn create_feature_err<'a>(
compiler/rustc_session/src/session.rs:550:        feature: Symbol,
compiler/rustc_session/src/session.rs:556:        add_feature_diagnostics(&mut err, &self.parse_sess, feature);
compiler/rustc_session/src/session.rs:760:    /// Gets the features enabled for the current compilation session.
compiler/rustc_session/src/session.rs:762:    /// dependency tracking. Use tcx.features() instead.
compiler/rustc_session/src/session.rs:764:    pub fn features_untracked(&self) -> &rustc_feature::Features {
compiler/rustc_session/src/session.rs:765:        self.features.get().unwrap()
compiler/rustc_session/src/session.rs:768:    pub fn init_features(&self, features: rustc_feature::Features) {
compiler/rustc_session/src/session.rs:769:        match self.features.set(features) {
compiler/rustc_session/src/session.rs:771:            Err(_) => panic!("`features` was initialized twice"),
compiler/rustc_session/src/session.rs:810:        let requested_features = self.opts.cg.target_feature.split(',');
compiler/rustc_session/src/session.rs:811:        let found_negative = requested_features.clone().any(|r| r == "-crt-static");
compiler/rustc_session/src/session.rs:812:        let found_positive = requested_features.clone().any(|r| r == "+crt-static");
compiler/rustc_session/src/session.rs:997:    /// Are we allowed to use features from the Rust 2018 edition?
compiler/rustc_session/src/session.rs:1002:    /// Are we allowed to use features from the Rust 2021 edition?
compiler/rustc_session/src/session.rs:1007:    /// Are we allowed to use features from the Rust 2024 edition?
compiler/rustc_session/src/session.rs:1163:        self.opts.unstable_features.is_nightly_build()
compiler/rustc_session/src/session.rs:1326:                    if sopts.unstable_features.is_nightly_build() =>
compiler/rustc_session/src/session.rs:1518:        features: OnceCell::new(),
compiler/rustc_session/src/session.rs:1534:        miri_unleashed_features: Lock::new(Default::default()),
compiler/rustc_session/src/session.rs:1536:        target_features: Default::default(),
compiler/rustc_session/src/session.rs:1537:        unstable_target_features: Default::default(),
compiler/rustc_session/src/config.rs:18:use rustc_feature::UnstableFeatures;
compiler/rustc_session/src/config.rs:723:    TargetFeatures,
compiler/rustc_session/src/config.rs:1015:            unstable_features: UnstableFeatures::Disallow,
compiler/rustc_session/src/config.rs:1071:            || (self.unstable_features.is_nightly_build() && self.incremental.is_some())
compiler/rustc_session/src/config.rs:1399:        //  - `feature`
compiler/rustc_session/src/config.rs:1400:        //  - `target_feature`
compiler/rustc_session/src/config.rs:1401:        for name in [sym::feature, sym::target_feature] {
compiler/rustc_session/src/config.rs:1681:             target-list|target-cpus|target-features|relocation-models|code-models|\
compiler/rustc_session/src/config.rs:2097:    if cg.target_feature == "help" {
compiler/rustc_session/src/config.rs:2098:        prints.push(PrintRequest::TargetFeatures);
compiler/rustc_session/src/config.rs:2099:        cg.target_feature = String::new();
compiler/rustc_session/src/config.rs:2111:        ("target-features", PrintRequest::TargetFeatures),
compiler/rustc_session/src/config.rs:2796:        unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),
compiler/rustc_session/src/config.rs:2884:    use rustc_feature::UnstableFeatures;
compiler/rustc_session/src/config.rs:2896:        UnstableFeatures::from_environment(krate).is_nightly_build()
compiler/rustc_session/src/config.rs:2935:                    handler.early_note("for more information about Rust's stability policy, see <https://doc.rust-lang.org/book/appendix-07-nightly-rust.html#unstable-features>");
compiler/rustc_session/src/config.rs:3076:    use rustc_feature::UnstableFeatures;
compiler/rustc_session/src/config.rs:3148:        UnstableFeatures,
compiler/rustc_session/src/lib.rs:1:#![feature(if_let_guard)]
compiler/rustc_session/src/lib.rs:2:#![feature(let_chains)]
compiler/rustc_session/src/lib.rs:3:#![feature(min_specialization)]
compiler/rustc_session/src/lib.rs:4:#![feature(never_type)]
compiler/rustc_session/src/lib.rs:5:#![feature(lazy_cell)]
compiler/rustc_session/src/lib.rs:6:#![feature(option_get_or_insert_default)]
compiler/rustc_session/src/lib.rs:7:#![feature(rustc_attrs)]
compiler/rustc_session/src/lib.rs:8:#![feature(map_many_mut)]
compiler/rustc_session/src/options.rs:14:use rustc_feature::UnstableFeatures;
compiler/rustc_session/src/options.rs:166:        /// Indicates how the compiler should treat unstable features.
compiler/rustc_session/src/options.rs:167:        unstable_features: UnstableFeatures [TRACKED],
compiler/rustc_session/src/options.rs:406:    pub const parse_target_feature: &str = parse_string;
compiler/rustc_session/src/options.rs:1116:    pub(crate) fn parse_target_feature(slot: &mut String, v: Option<&str>) -> bool {
compiler/rustc_session/src/options.rs:1379:    target_feature: String = (String::new(), parse_target_feature, [TRACKED],
compiler/rustc_session/src/options.rs:1380:        "target specific attributes. (`rustc --print target-features` for details). \
compiler/rustc_session/src/options.rs:1381:        This feature is unsafe."),
compiler/rustc_session/src/options.rs:1397:    allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],
compiler/rustc_session/src/options.rs:1398:        "only allow the listed language features to be enabled in code (comma separated)"),
compiler/rustc_session/src/options.rs:1859:    /// this just allows "normal" options to be feature-gated.
compiler/rustc_session/src/parse.rs:5:use crate::errors::{FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError};
compiler/rustc_session/src/parse.rs:17:use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};
compiler/rustc_session/src/parse.rs:31:/// Collected spans during parsing for places where a certain feature was
compiler/rustc_session/src/parse.rs:32:/// used and should be feature gated accordingly in `check_crate`.
compiler/rustc_session/src/parse.rs:39:    /// Feature gate the given `span` under the given `feature`
compiler/rustc_session/src/parse.rs:41:    pub fn gate(&self, feature: Symbol, span: Span) {
compiler/rustc_session/src/parse.rs:42:        self.spans.borrow_mut().entry(feature).or_default().push(span);
compiler/rustc_session/src/parse.rs:45:    /// Ungate the last span under the given `feature`.
compiler/rustc_session/src/parse.rs:49:    pub fn ungate_last(&self, feature: Symbol, span: Span) {
compiler/rustc_session/src/parse.rs:50:        let removed_span = self.spans.borrow_mut().entry(feature).or_default().pop().unwrap();
compiler/rustc_session/src/parse.rs:78:/// Construct a diagnostic for a language feature error due to the given `span`.
compiler/rustc_session/src/parse.rs:79:/// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.
compiler/rustc_session/src/parse.rs:81:pub fn feature_err(
compiler/rustc_session/src/parse.rs:83:    feature: Symbol,
compiler/rustc_session/src/parse.rs:87:    feature_err_issue(sess, feature, span, GateIssue::Language, explain)
compiler/rustc_session/src/parse.rs:90:/// Construct a diagnostic for a feature gate error.
compiler/rustc_session/src/parse.rs:92:/// This variant allows you to control whether it is a library or language feature.
compiler/rustc_session/src/parse.rs:93:/// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.
compiler/rustc_session/src/parse.rs:95:pub fn feature_err_issue(
compiler/rustc_session/src/parse.rs:97:    feature: Symbol,
compiler/rustc_session/src/parse.rs:112:    let mut err = sess.create_err(FeatureGateError { span, explain: explain.into() });
compiler/rustc_session/src/parse.rs:113:    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);
compiler/rustc_session/src/parse.rs:117:/// Construct a future incompatibility diagnostic for a feature gate.
compiler/rustc_session/src/parse.rs:121:pub fn feature_warn(sess: &ParseSess, feature: Symbol, span: Span, explain: &'static str) {
compiler/rustc_session/src/parse.rs:122:    feature_warn_issue(sess, feature, span, GateIssue::Language, explain);
compiler/rustc_session/src/parse.rs:125:/// Construct a future incompatibility diagnostic for a feature gate.
compiler/rustc_session/src/parse.rs:129:/// This variant allows you to control whether it is a library or language feature.
compiler/rustc_session/src/parse.rs:130:/// Almost always, you want to use this for a language feature. If so, prefer `feature_warn`.
compiler/rustc_session/src/parse.rs:134:pub fn feature_warn_issue(
compiler/rustc_session/src/parse.rs:136:    feature: Symbol,
compiler/rustc_session/src/parse.rs:142:    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);
compiler/rustc_session/src/parse.rs:155:    // A later feature_err call can steal and cancel this warning.
compiler/rustc_session/src/parse.rs:159:/// Adds the diagnostics for a feature to an existing error.
compiler/rustc_session/src/parse.rs:160:pub fn add_feature_diagnostics(err: &mut Diagnostic, sess: &ParseSess, feature: Symbol) {
compiler/rustc_session/src/parse.rs:161:    add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);
compiler/rustc_session/src/parse.rs:164:/// Adds the diagnostics for a feature to an existing error.
compiler/rustc_session/src/parse.rs:166:/// This variant allows you to control whether it is a library or language feature.
compiler/rustc_session/src/parse.rs:167:/// Almost always, you want to use this for a language feature. If so, prefer
compiler/rustc_session/src/parse.rs:168:/// `add_feature_diagnostics`.
compiler/rustc_session/src/parse.rs:169:pub fn add_feature_diagnostics_for_issue(
compiler/rustc_session/src/parse.rs:172:    feature: Symbol,
compiler/rustc_session/src/parse.rs:175:    if let Some(n) = find_feature_issue(feature, issue) {
compiler/rustc_session/src/parse.rs:176:        err.subdiagnostic(FeatureDiagnosticForIssue { n });
compiler/rustc_session/src/parse.rs:179:    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable
compiler/rustc_session/src/parse.rs:180:    if sess.unstable_features.is_nightly_build() {
compiler/rustc_session/src/parse.rs:181:        err.subdiagnostic(FeatureDiagnosticHelp { feature });
compiler/rustc_session/src/parse.rs:188:    pub unstable_features: UnstableFeatures,
compiler/rustc_session/src/parse.rs:241:            unstable_features: UnstableFeatures::from_environment(None),
compiler/rustc_session/src/errors.rs:30:pub struct FeatureGateError {
compiler/rustc_session/src/errors.rs:35:impl<'a, T: EmissionGuarantee> IntoDiagnostic<'a, T> for FeatureGateError {
compiler/rustc_session/src/errors.rs:49:#[note(session_feature_diagnostic_for_issue)]
compiler/rustc_session/src/errors.rs:50:pub struct FeatureDiagnosticForIssue {
compiler/rustc_session/src/errors.rs:55:#[help(session_feature_diagnostic_help)]
compiler/rustc_session/src/errors.rs:56:pub struct FeatureDiagnosticHelp {
compiler/rustc_session/src/errors.rs:57:    pub feature: Symbol,
compiler/rustc_session/src/errors.rs:61:#[diag(session_not_circumvent_feature)]
compiler/rustc_session/src/errors.rs:62:pub struct NotCircumventFeature;
compiler/rustc_session/src/errors.rs:216:    pub unleashed_features: Vec<UnleashedFeatureHelp>,
compiler/rustc_session/src/errors.rs:220:pub enum UnleashedFeatureHelp {
compiler/rustc_session/src/errors.rs:221:    #[help(session_unleashed_feature_help_named)]
compiler/rustc_session/src/errors.rs:227:    #[help(session_unleashed_feature_help_unnamed)]
compiler/rustc_expand/Cargo.toml:18:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_expand/Cargo.toml:27:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_expand/messages.ftl:38:expand_feature_included_in_edition =
compiler/rustc_expand/messages.ftl:39:    the feature `{$feature}` is included in the Rust {$edition} edition
compiler/rustc_expand/messages.ftl:41:expand_feature_not_allowed =
compiler/rustc_expand/messages.ftl:42:    the feature `{$name}` is not in the list of allowed features
compiler/rustc_expand/messages.ftl:44:expand_feature_removed =
compiler/rustc_expand/messages.ftl:45:    feature has been removed
compiler/rustc_expand/messages.ftl:46:    .label = feature has been removed
compiler/rustc_expand/messages.ftl:74:expand_malformed_feature_attribute =
compiler/rustc_expand/messages.ftl:75:    malformed `feature` attribute input
compiler/rustc_expand/src/config.rs:4:    FeatureIncludedInEdition, FeatureNotAllowed, FeatureRemoved, FeatureRemovedReason, InvalidCfg,
compiler/rustc_expand/src/config.rs:5:    MalformedFeatureAttribute, MalformedFeatureAttributeHelp, RemoveExprNotSupported,
compiler/rustc_expand/src/config.rs:17:use rustc_feature::{Feature, Features, State as FeatureState};
compiler/rustc_expand/src/config.rs:18:use rustc_feature::{
compiler/rustc_expand/src/config.rs:19:    ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,
compiler/rustc_expand/src/config.rs:22:use rustc_session::parse::feature_err;
compiler/rustc_expand/src/config.rs:31:    pub features: Option<&'a Features>,
compiler/rustc_expand/src/config.rs:39:pub fn features(sess: &Session, krate_attrs: &[Attribute]) -> Features {
compiler/rustc_expand/src/config.rs:40:    fn feature_removed(sess: &Session, span: Span, reason: Option<&str>) {
compiler/rustc_expand/src/config.rs:41:        sess.emit_err(FeatureRemoved {
compiler/rustc_expand/src/config.rs:43:            reason: reason.map(|reason| FeatureRemovedReason { reason }),
compiler/rustc_expand/src/config.rs:47:    fn active_features_up_to(edition: Edition) -> impl Iterator<Item = &'static Feature> {
compiler/rustc_expand/src/config.rs:48:        ACTIVE_FEATURES.iter().filter(move |feature| {
compiler/rustc_expand/src/config.rs:49:            if let Some(feature_edition) = feature.edition {
compiler/rustc_expand/src/config.rs:50:                feature_edition <= edition
compiler/rustc_expand/src/config.rs:57:    let mut features = Features::default();
compiler/rustc_expand/src/config.rs:58:    let mut edition_enabled_features = FxHashMap::default();
compiler/rustc_expand/src/config.rs:63:            // The `crate_edition` implies its respective umbrella feature-gate
compiler/rustc_expand/src/config.rs:64:            // (i.e., `#![feature(rust_20XX_preview)]` isn't needed on edition 20XX).
compiler/rustc_expand/src/config.rs:65:            edition_enabled_features.insert(edition.feature_name(), edition);
compiler/rustc_expand/src/config.rs:69:    for feature in active_features_up_to(crate_edition) {
compiler/rustc_expand/src/config.rs:70:        feature.set(&mut features, DUMMY_SP);
compiler/rustc_expand/src/config.rs:71:        edition_enabled_features.insert(feature.name, crate_edition);
compiler/rustc_expand/src/config.rs:74:    // Process the edition umbrella feature-gates first, to ensure
compiler/rustc_expand/src/config.rs:75:    // `edition_enabled_features` is completed before it's queried.
compiler/rustc_expand/src/config.rs:77:        if !attr.has_name(sym::feature) {
compiler/rustc_expand/src/config.rs:92:            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();
compiler/rustc_expand/src/config.rs:98:                for feature in active_features_up_to(edition) {
compiler/rustc_expand/src/config.rs:100:                    // lib features by edition
compiler/rustc_expand/src/config.rs:101:                    feature.set(&mut features, DUMMY_SP);
compiler/rustc_expand/src/config.rs:102:                    edition_enabled_features.insert(feature.name, edition);
compiler/rustc_expand/src/config.rs:109:        if !attr.has_name(sym::feature) {
compiler/rustc_expand/src/config.rs:121:                    sess.emit_err(MalformedFeatureAttribute {
compiler/rustc_expand/src/config.rs:123:                        help: MalformedFeatureAttributeHelp::Suggestion {
compiler/rustc_expand/src/config.rs:131:                    sess.emit_err(MalformedFeatureAttribute {
compiler/rustc_expand/src/config.rs:133:                        help: MalformedFeatureAttributeHelp::Label { span: mi.span() },
compiler/rustc_expand/src/config.rs:139:            if let Some(&edition) = edition_enabled_features.get(&name) {
compiler/rustc_expand/src/config.rs:140:                sess.emit_warning(FeatureIncludedInEdition {
compiler/rustc_expand/src/config.rs:142:                    feature: name,
compiler/rustc_expand/src/config.rs:148:            if ALL_EDITIONS.iter().any(|e| name == e.feature_name()) {
compiler/rustc_expand/src/config.rs:153:            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);
compiler/rustc_expand/src/config.rs:154:            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);
compiler/rustc_expand/src/config.rs:155:            if let Some(Feature { state, .. }) = removed.or(stable_removed) {
compiler/rustc_expand/src/config.rs:156:                if let FeatureState::Removed { reason } | FeatureState::Stabilized { reason } =
compiler/rustc_expand/src/config.rs:159:                    feature_removed(sess, mi.span(), *reason);
compiler/rustc_expand/src/config.rs:164:            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {
compiler/rustc_expand/src/config.rs:166:                features.declared_lang_features.push((name, mi.span(), since));
compiler/rustc_expand/src/config.rs:167:                features.active_features.insert(name);
compiler/rustc_expand/src/config.rs:171:            if let Some(allowed) = sess.opts.unstable_opts.allow_features.as_ref() {
compiler/rustc_expand/src/config.rs:173:                    sess.emit_err(FeatureNotAllowed { span: mi.span(), name });
compiler/rustc_expand/src/config.rs:178:            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {
compiler/rustc_expand/src/config.rs:179:                f.set(&mut features, mi.span());
compiler/rustc_expand/src/config.rs:180:                features.declared_lang_features.push((name, mi.span(), None));
compiler/rustc_expand/src/config.rs:181:                features.active_features.insert(name);
compiler/rustc_expand/src/config.rs:185:            features.declared_lib_features.push((name, mi.span()));
compiler/rustc_expand/src/config.rs:186:            features.active_features.insert(name);
compiler/rustc_expand/src/config.rs:190:    features
compiler/rustc_expand/src/config.rs:196:        features: None,
compiler/rustc_expand/src/config.rs:335:            self.features,
compiler/rustc_expand/src/config.rs:443:                    self.features,
compiler/rustc_expand/src/config.rs:453:        if self.features.is_some_and(|features| !features.stmt_expr_attributes) {
compiler/rustc_expand/src/config.rs:454:            let mut err = feature_err(
compiler/rustc_expand/src/lib.rs:1:#![feature(array_windows)]
compiler/rustc_expand/src/lib.rs:2:#![feature(associated_type_bounds)]
compiler/rustc_expand/src/lib.rs:3:#![feature(associated_type_defaults)]
compiler/rustc_expand/src/lib.rs:4:#![feature(if_let_guard)]
compiler/rustc_expand/src/lib.rs:5:#![feature(let_chains)]
compiler/rustc_expand/src/lib.rs:6:#![feature(macro_metavar_expr)]
compiler/rustc_expand/src/lib.rs:7:#![feature(proc_macro_diagnostic)]
compiler/rustc_expand/src/lib.rs:8:#![feature(proc_macro_internals)]
compiler/rustc_expand/src/lib.rs:9:#![feature(proc_macro_span)]
compiler/rustc_expand/src/lib.rs:10:#![feature(rustc_attrs)]
compiler/rustc_expand/src/lib.rs:11:#![feature(try_blocks)]
compiler/rustc_expand/src/expand.rs:26:use rustc_feature::Features;
compiler/rustc_expand/src/expand.rs:33:use rustc_session::parse::{feature_err, ParseSess};
compiler/rustc_expand/src/expand.rs:802:        feature_err(
compiler/rustc_expand/src/expand.rs:822:                        feature_err(
compiler/rustc_expand/src/expand.rs:1538:/// It can be removed once that feature is stabilized.
compiler/rustc_expand/src/expand.rs:1583:            features: self.cx.ecfg.features,
compiler/rustc_expand/src/expand.rs:1641:                    && !name.is_some_and(rustc_feature::is_builtin_attr_name)
compiler/rustc_expand/src/expand.rs:1676:    // Detect use of feature-gated or invalid attributes on macro invocations
compiler/rustc_expand/src/expand.rs:1679:        let features = self.cx.ecfg.features.unwrap();
compiler/rustc_expand/src/expand.rs:1683:            rustc_ast_passes::feature_gate::check_attribute(attr, self.cx.sess, features);
compiler/rustc_expand/src/expand.rs:1940:        // FIXME: Feature gating is performed inconsistently between `Expr` and `OptExpr`.
compiler/rustc_expand/src/expand.rs:1979:    pub features: Option<&'feat Features>,
compiler/rustc_expand/src/expand.rs:1994:            features: None,
compiler/rustc_expand/src/expand.rs:2004:        self.features.is_some_and(|features| features.proc_macro_hygiene)
compiler/rustc_expand/src/base.rs:713:    /// List of unstable features that are treated as stable inside this macro.
compiler/rustc_expand/src/base.rs:901:        features: &[Symbol],
compiler/rustc_expand/src/mbe/macro_rules.rs:507:                        sess.features_untracked(),
compiler/rustc_expand/src/mbe/macro_rules.rs:531:                        sess.features_untracked(),
compiler/rustc_expand/src/mbe/quoted.rs:7:use rustc_feature::Features;
compiler/rustc_expand/src/mbe/quoted.rs:8:use rustc_session::parse::{feature_err, ParseSess};
compiler/rustc_expand/src/mbe/quoted.rs:33:/// - `features`: language features so we can do feature gating.
compiler/rustc_expand/src/mbe/quoted.rs:43:    features: &Features,
compiler/rustc_expand/src/mbe/quoted.rs:55:        let tree = parse_tree(tree, &mut trees, parsing_patterns, sess, node_id, features, edition);
compiler/rustc_expand/src/mbe/quoted.rs:115:/// Asks for the `macro_metavar_expr` feature if it is not already declared
compiler/rustc_expand/src/mbe/quoted.rs:116:fn maybe_emit_macro_metavar_expr_feature(features: &Features, sess: &ParseSess, span: Span) {
compiler/rustc_expand/src/mbe/quoted.rs:117:    if !features.macro_metavar_expr {
compiler/rustc_expand/src/mbe/quoted.rs:119:        feature_err(&sess, sym::macro_metavar_expr, span, msg).emit();
compiler/rustc_expand/src/mbe/quoted.rs:136:/// - `features`: language features so we can do feature gating.
compiler/rustc_expand/src/mbe/quoted.rs:143:    features: &Features,
compiler/rustc_expand/src/mbe/quoted.rs:185:                                        maybe_emit_macro_metavar_expr_feature(
compiler/rustc_expand/src/mbe/quoted.rs:186:                                            features,
compiler/rustc_expand/src/mbe/quoted.rs:205:                    let sequence = parse(tts, parsing_patterns, sess, node_id, features, edition);
compiler/rustc_expand/src/mbe/quoted.rs:238:                        maybe_emit_macro_metavar_expr_feature(features, sess, span);
compiler/rustc_expand/src/mbe/quoted.rs:267:                tts: parse(tts, parsing_patterns, sess, node_id, features, edition),
compiler/rustc_expand/src/mbe/macro_parser.rs:12://! The macro parser restricts itself to the features of finite state automata. Earley parsers
compiler/rustc_expand/src/errors.rs:172:#[diag(expand_feature_included_in_edition, code = "E0705")]
compiler/rustc_expand/src/errors.rs:173:pub(crate) struct FeatureIncludedInEdition {
compiler/rustc_expand/src/errors.rs:176:    pub feature: Symbol,
compiler/rustc_expand/src/errors.rs:181:#[diag(expand_feature_removed, code = "E0557")]
compiler/rustc_expand/src/errors.rs:182:pub(crate) struct FeatureRemoved<'a> {
compiler/rustc_expand/src/errors.rs:187:    pub reason: Option<FeatureRemovedReason<'a>>,
compiler/rustc_expand/src/errors.rs:192:pub(crate) struct FeatureRemovedReason<'a> {
compiler/rustc_expand/src/errors.rs:197:#[diag(expand_feature_not_allowed, code = "E0725")]
compiler/rustc_expand/src/errors.rs:198:pub(crate) struct FeatureNotAllowed {
compiler/rustc_expand/src/errors.rs:216:#[diag(expand_malformed_feature_attribute, code = "E0556")]
compiler/rustc_expand/src/errors.rs:217:pub(crate) struct MalformedFeatureAttribute {
compiler/rustc_expand/src/errors.rs:221:    pub help: MalformedFeatureAttributeHelp,
compiler/rustc_expand/src/errors.rs:225:pub(crate) enum MalformedFeatureAttributeHelp {
compiler/rustc_monomorphize/src/util.rs:26:        let ClosureSizeProfileData { before_feature_tys, after_feature_tys } =
compiler/rustc_monomorphize/src/util.rs:29:        let before_feature_tys = tcx.subst_and_normalize_erasing_regions(
compiler/rustc_monomorphize/src/util.rs:32:            ty::EarlyBinder::bind(before_feature_tys),
compiler/rustc_monomorphize/src/util.rs:34:        let after_feature_tys = tcx.subst_and_normalize_erasing_regions(
compiler/rustc_monomorphize/src/util.rs:37:            ty::EarlyBinder::bind(after_feature_tys),
compiler/rustc_monomorphize/src/util.rs:41:            .layout_of(param_env.and(after_feature_tys))
compiler/rustc_monomorphize/src/util.rs:46:            .layout_of(param_env.and(before_feature_tys))
compiler/rustc_monomorphize/src/lib.rs:1:#![feature(array_windows)]
compiler/rustc_monomorphize/src/lib.rs:2:#![feature(is_sorted)]
compiler/rustc_parse/Cargo.toml:14:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_parse/src/lib.rs:3:#![feature(array_windows)]
compiler/rustc_parse/src/lib.rs:4:#![feature(box_patterns)]
compiler/rustc_parse/src/lib.rs:5:#![feature(if_let_guard)]
compiler/rustc_parse/src/lib.rs:6:#![feature(iter_intersperse)]
compiler/rustc_parse/src/lib.rs:7:#![feature(let_chains)]
compiler/rustc_parse/src/lib.rs:8:#![feature(never_type)]
compiler/rustc_parse/src/lib.rs:9:#![feature(rustc_attrs)]
compiler/rustc_parse/src/parser/diagnostics.rs:1647:                type_ascription: self.sess.unstable_features.is_nightly_build().then_some(()),
compiler/rustc_parse/src/parser/stmt.rs:579:                        if self.sess.unstable_features.is_nightly_build() {
compiler/rustc_parse/src/parser/pat.rs:854:            // Feature gate the use of qualified paths in patterns
compiler/rustc_parse/src/parser/attr.rs:430:                ident.name != sym::cfg_attr && rustc_feature::is_builtin_attr_name(ident.name)
compiler/rustc_parse/src/parser/path.rs:253:                                .unstable_features
compiler/rustc_parse/src/parser/path.rs:325:                                    .unstable_features
compiler/rustc_parse/src/parser/mod.rs:1201:    /// Parses constness for closures (case sensitive, feature-gated)
compiler/rustc_parse/src/parser/expr.rs:2255:            // Feature-gate `async ||` closures.
compiler/rustc_parse/src/parser/expr.rs:2453:            // Remove the last feature gating of a `let` expression since it's stable.
compiler/rustc_parse/src/parser/expr.rs:2820:        // Used to check the `let_chains` and `if_let_guard` features mostly by scanning
compiler/rustc_parse/src/parser/expr.rs:2848:                        // Remove the last feature gating of a `let` expression since it's stable.
compiler/rustc_parse/src/parser/ty.rs:534:            // feature gating for `#![feature(const_extern_fn)]` to
compiler/rustc_parse/src/validate_attr.rs:10:use rustc_feature::{AttributeTemplate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};
compiler/rustc_hir_analysis/Cargo.toml:21:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_hir_analysis/Cargo.toml:29:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_hir_analysis/messages.ftl:132:    .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable
compiler/rustc_hir_analysis/messages.ftl:149:    .some_note = use of unstable library feature '{$feature}': {$reason}
compiler/rustc_hir_analysis/messages.ftl:150:    .none_note = use of unstable library feature '{$feature}'
compiler/rustc_hir_analysis/messages.ftl:188:    .help = add `#![feature(unboxed_closures)]` to the crate attributes to use it
compiler/rustc_hir_analysis/messages.ftl:227:    .help = add `#![feature(simd_ffi)]` to the crate attributes to enable
compiler/rustc_hir_analysis/messages.ftl:230:    .help = add `#![feature(min_specialization)]` to the crate attributes to enable
compiler/rustc_hir_analysis/messages.ftl:241:hir_analysis_start_not_target_feature = `start` is not allowed to have `#[target_feature]`
compiler/rustc_hir_analysis/messages.ftl:242:    .label = `start` is not allowed to have `#[target_feature]`
compiler/rustc_hir_analysis/messages.ftl:254:hir_analysis_target_feature_on_main = `main` function is not allowed to have `#[target_feature]`
compiler/rustc_hir_analysis/src/collect/predicates_of.rs:327:    if tcx.features().generic_const_exprs {
compiler/rustc_hir_analysis/src/collect/predicates_of.rs:544:        if matches!(def_kind, DefKind::AnonConst) && tcx.features().generic_const_exprs {
compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs:186:    /// are nested (under the `associated_type_bounds` feature). The binders of
compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs:1247:                        && !self.tcx.features().anonymous_lifetime_in_impl_trait
compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs:1249:                        let mut diag =  rustc_session::parse::feature_err(
compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs:1688:            // If the binding is parenthesized, then this must be `feature(return_type_notation)`.
compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs:2138:        let guar = if tcx.features().non_lifetime_binders && first {
compiler/rustc_hir_analysis/src/collect/generics_of.rs:30:        // stable enough and does not need a feature gate anymore.
compiler/rustc_hir_analysis/src/collect/generics_of.rs:53:            } else if tcx.features().generic_const_exprs {
compiler/rustc_hir_analysis/src/collect/generics_of.rs:108:                    // `feature(generic_const_expressions)` is enabled, so that const expressions
compiler/rustc_hir_analysis/src/collect/generics_of.rs:274:                        if tcx.features().default_type_parameter_fallback => {}
compiler/rustc_hir_analysis/src/collect/type_of.rs:384:                    check_feature_inherent_assoc_ty(tcx, item.span);
compiler/rustc_hir_analysis/src/collect/type_of.rs:591:fn check_feature_inherent_assoc_ty(tcx: TyCtxt<'_>, span: Span) {
compiler/rustc_hir_analysis/src/collect/type_of.rs:592:    if !tcx.features().inherent_associated_types {
compiler/rustc_hir_analysis/src/collect/type_of.rs:593:        use rustc_session::parse::feature_err;
compiler/rustc_hir_analysis/src/collect/type_of.rs:595:        feature_err(
compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs:4://! `min_specialization` feature is enabled. This requires that the impl is
compiler/rustc_hir_analysis/src/lib.rs:60:#![feature(box_patterns)]
compiler/rustc_hir_analysis/src/lib.rs:61:#![feature(control_flow_enum)]
compiler/rustc_hir_analysis/src/lib.rs:62:#![feature(if_let_guard)]
compiler/rustc_hir_analysis/src/lib.rs:63:#![feature(is_sorted)]
compiler/rustc_hir_analysis/src/lib.rs:64:#![feature(iter_intersperse)]
compiler/rustc_hir_analysis/src/lib.rs:65:#![feature(let_chains)]
compiler/rustc_hir_analysis/src/lib.rs:66:#![feature(min_specialization)]
compiler/rustc_hir_analysis/src/lib.rs:67:#![feature(never_type)]
compiler/rustc_hir_analysis/src/lib.rs:68:#![feature(lazy_cell)]
compiler/rustc_hir_analysis/src/lib.rs:69:#![feature(slice_partition_dedup)]
compiler/rustc_hir_analysis/src/lib.rs:70:#![feature(try_blocks)]
compiler/rustc_hir_analysis/src/lib.rs:71:#![feature(type_alias_impl_trait)]
compiler/rustc_hir_analysis/src/lib.rs:107:use rustc_session::parse::feature_err;
compiler/rustc_hir_analysis/src/lib.rs:129:    let extended_abi_support = tcx.features().extended_varargs_abi_support;
compiler/rustc_hir_analysis/src/lib.rs:134:        // Using this ABI would be ok, if the feature for additional ABI support was enabled.
compiler/rustc_hir_analysis/src/lib.rs:137:            feature_err(
compiler/rustc_hir_analysis/src/lib.rs:198:    if tcx.features().rustc_attrs {
compiler/rustc_hir_analysis/src/lib.rs:222:    if tcx.features().rustc_attrs {
compiler/rustc_hir_analysis/src/collect.rs:905:    if paren_sugar && !tcx.features().unboxed_closures {
compiler/rustc_hir_analysis/src/collect.rs:1496:    // Feature gate SIMD types in FFI, since I am not sure that the
compiler/rustc_hir_analysis/src/collect.rs:1500:        && !tcx.features().simd_ffi
compiler/rustc_hir_analysis/src/coherence/mod.rs:69:        if !tcx.features().specialization && !tcx.features().min_specialization {
compiler/rustc_hir_analysis/src/coherence/mod.rs:167:                // Without the 'object_safe_for_dispatch' feature this is an error
compiler/rustc_hir_analysis/src/coherence/mod.rs:170:                // With the feature enabled, the trait is not implemented automatically,
compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs:67:        if self.tcx.features().rustc_attrs {
compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs:123:            if self.tcx.features().rustc_attrs {
compiler/rustc_hir_analysis/src/errors.rs:349:#[diag(hir_analysis_target_feature_on_main)]
compiler/rustc_hir_analysis/src/errors.rs:350:pub(crate) struct TargetFeatureOnMain {
compiler/rustc_hir_analysis/src/errors.rs:352:    #[label(hir_analysis_target_feature_on_main)]
compiler/rustc_hir_analysis/src/errors.rs:366:#[diag(hir_analysis_start_not_target_feature)]
compiler/rustc_hir_analysis/src/errors.rs:367:pub(crate) struct StartTargetFeature {
compiler/rustc_hir_analysis/src/errors.rs:761:    pub feature: Symbol,
compiler/rustc_hir_analysis/src/astconv/generics.rs:43:                err.help("add `#![feature(generic_arg_infer)]` to the crate attributes to enable");
compiler/rustc_hir_analysis/src/astconv/bounds.rs:521:                          && tcx.features().associated_const_equality {
compiler/rustc_hir_analysis/src/astconv/mod.rs:914:            && (ty.skip_binder().has_opaque_types() || self.tcx().features().lazy_type_alias)
compiler/rustc_hir_analysis/src/astconv/mod.rs:1534:        // Don't attempt to look up inherent associated types when the feature is not enabled.
compiler/rustc_hir_analysis/src/astconv/mod.rs:1535:        // Theoretically it'd be fine to do so since we feature-gate their definition site.
compiler/rustc_hir_analysis/src/astconv/mod.rs:1538:        // feature-gate error, needlessly confusing users that use IATs by accident (#113265).
compiler/rustc_hir_analysis/src/astconv/mod.rs:1539:        if !tcx.features().inherent_associated_types {
compiler/rustc_hir_analysis/src/astconv/errors.rs:13:use rustc_session::parse::feature_err;
compiler/rustc_hir_analysis/src/astconv/errors.rs:52:        if self.tcx().features().unboxed_closures {
compiler/rustc_hir_analysis/src/astconv/errors.rs:60:                let mut err = feature_err(
compiler/rustc_hir_analysis/src/astconv/errors.rs:76:            let mut err = feature_err(
compiler/rustc_hir_analysis/src/outlives/mod.rs:24:        && tcx.features().generic_const_exprs
compiler/rustc_hir_analysis/src/check/wfcheck.rs:22:use rustc_session::parse::feature_err;
compiler/rustc_hir_analysis/src/check/wfcheck.rs:103:    if !tcx.features().trivial_bounds {
compiler/rustc_hir_analysis/src/check/wfcheck.rs:841:            if tcx.features().adt_const_params {
compiler/rustc_hir_analysis/src/check/wfcheck.rs:889:                            "more complex types are supported with `#![feature(adt_const_params)]`",
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1624:    if tcx.features().arbitrary_self_types {
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1633:                feature_err(
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1639:                         the `arbitrary_self_types` feature",
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1666:/// through a `*const/mut T` raw pointer. If the feature is not enabled, the requirements are more
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1697:    // The `arbitrary_self_types` feature allows raw pointer receivers like `self: *const Self`.
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1727:                // Without `feature(arbitrary_self_types)`, we require that each step in the
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1748:    // Without `feature(arbitrary_self_types)`, we require that `receiver_ty` implements `Receiver`.
compiler/rustc_hir_analysis/src/check/wfcheck.rs:1874:    /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that
compiler/rustc_hir_analysis/src/check/check.rs:218:    if !tcx.features().impl_trait_projections {
compiler/rustc_hir_analysis/src/check/check.rs:331:            let mut err = feature_err(
compiler/rustc_hir_analysis/src/check/check.rs:813:                    EvalResult::Deny { feature, reason, issue, .. } => default_body_is_unstable(
compiler/rustc_hir_analysis/src/check/check.rs:817:                        feature,
compiler/rustc_hir_analysis/src/check/check.rs:843:                let (msg, feature) = if tcx.asyncness(def_id).is_async() {
compiler/rustc_hir_analysis/src/check/check.rs:860:                        surprising ways with `#![feature({feature})]`, \
compiler/rustc_hir_analysis/src/check/check.rs:1056:    if adt.is_union() && !tcx.features().transparent_unions {
compiler/rustc_hir_analysis/src/check/check.rs:1057:        feature_err(
compiler/rustc_hir_analysis/src/check/check.rs:1185:        if !tcx.features().repr128 {
compiler/rustc_hir_analysis/src/check/check.rs:1186:            feature_err(
compiler/rustc_hir_analysis/src/check/compare_impl_item.rs:589:/// #![feature(return_position_impl_trait_in_trait)]
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:55:        target_features: &FxIndexSet<Symbol>,
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:186:        let Some((_, feature)) = supported_tys.iter().find(|&&(t, _)| t == asm_ty) else {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:202:        // Check whether the selected type requires a target feature. Note that
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:203:        // this is different from the feature check we did earlier. While the
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:205:        // with the currently enabled features, some types may only be usable
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:206:        // with a register class when a certain feature is enabled. We check
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:212:        if let Some(feature) = feature {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:213:            if !target_features.contains(feature) {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:214:                let msg = format!("`{}` target feature is not enabled", feature);
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:267:        let target_features = self.tcx.asm_target_features(enclosing_id.to_def_id());
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:274:            // features. We check that at least one type is available for
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:275:            // the enabled features.
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:277:            // We ignore target feature requirements for clobbers: if the
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:278:            // feature is disabled then the compiler doesn't care what we
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:295:                        &target_features,
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:306:                    let mut missing_required_features = vec![];
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:311:                    for &(_, feature) in reg_class.supported_types(asm_arch) {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:312:                        match feature {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:313:                            Some(feature) => {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:314:                                if target_features.contains(&feature) {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:315:                                    missing_required_features.clear();
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:318:                                    missing_required_features.push(feature);
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:322:                                missing_required_features.clear();
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:329:                    missing_required_features.sort_unstable();
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:330:                    missing_required_features.dedup();
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:331:                    match &missing_required_features[..] {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:333:                        [feature] => {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:335:                                "register class `{}` requires the `{}` target feature",
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:337:                                feature
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:343:                        features => {
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:345:                                "register class `{}` requires at least one of the following target features: {}",
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:347:                                features
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:370:                        &target_features,
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:382:                            &target_features,
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:394:                        &target_features,
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:405:                        &target_features,
compiler/rustc_hir_analysis/src/check/intrinsicck.rs:415:                            &target_features,
compiler/rustc_hir_analysis/src/check/mod.rs:85:use rustc_session::parse::feature_err;
compiler/rustc_hir_analysis/src/check/mod.rs:264:    feature: Symbol,
compiler/rustc_hir_analysis/src/check/mod.rs:283:        feature,
compiler/rustc_hir_analysis/src/check/mod.rs:287:    rustc_session::parse::add_feature_diagnostics_for_issue(
compiler/rustc_hir_analysis/src/check/mod.rs:290:        feature,
compiler/rustc_hir_analysis/src/check/mod.rs:291:        rustc_feature::GateIssue::Library(issue),
compiler/rustc_hir_analysis/src/check/entry.rs:126:    if !tcx.codegen_fn_attrs(main_def_id).target_features.is_empty()
compiler/rustc_hir_analysis/src/check/entry.rs:127:        // Calling functions with `#[target_feature]` is not unsafe on WASM, see #84988
compiler/rustc_hir_analysis/src/check/entry.rs:131:        tcx.sess.emit_err(errors::TargetFeatureOnMain { main: main_span });
compiler/rustc_hir_analysis/src/check/entry.rs:230:                        if attr.has_name(sym::target_feature)
compiler/rustc_hir_analysis/src/check/entry.rs:231:                            // Calling functions with `#[target_feature]` is
compiler/rustc_hir_analysis/src/check/entry.rs:236:                            tcx.sess.emit_err(errors::StartTargetFeature {
compiler/rustc_hir_analysis/src/impl_wf_check.rs:55:    let min_specialization = tcx.features().min_specialization;
compiler/rustc_borrowck/Cargo.toml:13:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_borrowck/src/lib.rs:3:#![feature(associated_type_bounds)]
compiler/rustc_borrowck/src/lib.rs:4:#![feature(box_patterns)]
compiler/rustc_borrowck/src/lib.rs:5:#![feature(let_chains)]
compiler/rustc_borrowck/src/lib.rs:6:#![feature(min_specialization)]
compiler/rustc_borrowck/src/lib.rs:7:#![feature(never_type)]
compiler/rustc_borrowck/src/lib.rs:8:#![feature(lazy_cell)]
compiler/rustc_borrowck/src/lib.rs:9:#![feature(rustc_attrs)]
compiler/rustc_borrowck/src/lib.rs:10:#![feature(stmt_expr_attributes)]
compiler/rustc_borrowck/src/lib.rs:11:#![feature(trusted_step)]
compiler/rustc_borrowck/src/lib.rs:12:#![feature(try_blocks)]
compiler/rustc_borrowck/src/lib.rs:1641:        // to do such a query based on partial-init feature-gate.)
compiler/rustc_borrowck/src/universal_regions.rs:82:/// The "defining type" for this MIR. The key feature of the "defining
compiler/rustc_borrowck/src/type_check/mod.rs:1092:    fn unsized_feature_enabled(&self) -> bool {
compiler/rustc_borrowck/src/type_check/mod.rs:1093:        let features = self.tcx().features();
compiler/rustc_borrowck/src/type_check/mod.rs:1094:        features.unsized_locals || features.unsized_fn_params
compiler/rustc_borrowck/src/type_check/mod.rs:1282:                if !self.unsized_feature_enabled() {
compiler/rustc_borrowck/src/type_check/mod.rs:1550:                if self.unsized_feature_enabled() {
compiler/rustc_borrowck/src/type_check/mod.rs:1733:        if !self.unsized_feature_enabled() {
compiler/rustc_mir_dataflow/Cargo.toml:11:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_mir_dataflow/src/lib.rs:1:#![feature(associated_type_defaults)]
compiler/rustc_mir_dataflow/src/lib.rs:2:#![feature(box_patterns)]
compiler/rustc_mir_dataflow/src/lib.rs:3:#![feature(exact_size_is_empty)]
compiler/rustc_mir_dataflow/src/lib.rs:4:#![feature(let_chains)]
compiler/rustc_mir_dataflow/src/lib.rs:5:#![feature(min_specialization)]
compiler/rustc_mir_dataflow/src/lib.rs:6:#![feature(stmt_expr_attributes)]
compiler/rustc_mir_dataflow/src/lib.rs:7:#![feature(trusted_step)]
compiler/rustc_lexer/src/lib.rs:24:// `#![feature]` attributes should be added.
compiler/rustc_ast_lowering/Cargo.toml:22:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_ast_lowering/src/lib.rs:33:#![feature(box_patterns)]
compiler/rustc_ast_lowering/src/lib.rs:34:#![feature(let_chains)]
compiler/rustc_ast_lowering/src/lib.rs:35:#![feature(never_type)]
compiler/rustc_ast_lowering/src/lib.rs:69:use rustc_session::parse::{add_feature_diagnostics, feature_err};
compiler/rustc_ast_lowering/src/lib.rs:252:    FeatureGated(ImplTraitPosition, Symbol),
compiler/rustc_ast_lowering/src/lib.rs:342:            FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,
compiler/rustc_ast_lowering/src/lib.rs:343:            FnDeclKind::Trait if tcx.features().return_position_impl_trait_in_trait => true,
compiler/rustc_ast_lowering/src/lib.rs:351:            FnDeclKind::Impl if tcx.features().async_fn_in_trait => true,
compiler/rustc_ast_lowering/src/lib.rs:352:            FnDeclKind::Trait if tcx.features().async_fn_in_trait => true,
compiler/rustc_ast_lowering/src/lib.rs:765:    /// Reuses the span but adds information like the kind of the desugaring and features that are
compiler/rustc_ast_lowering/src/lib.rs:990:                        let parenthesized = if self.tcx.features().return_type_notation {
compiler/rustc_ast_lowering/src/lib.rs:1016:                        if !self.tcx.features().return_type_notation
compiler/rustc_ast_lowering/src/lib.rs:1019:                            add_feature_diagnostics(
compiler/rustc_ast_lowering/src/lib.rs:1034:                        // FIXME(return_type_notation): we could issue a feature error
compiler/rustc_ast_lowering/src/lib.rs:1184:                    TyKind::Infer if self.tcx.features().generic_arg_infer => {
compiler/rustc_ast_lowering/src/lib.rs:1450:                    ImplTraitContext::FeatureGated(position, feature) => {
compiler/rustc_ast_lowering/src/lib.rs:1454:                            .create_feature_err(
compiler/rustc_ast_lowering/src/lib.rs:1459:                                *feature,
compiler/rustc_ast_lowering/src/lib.rs:1812:                            .create_feature_err(
compiler/rustc_ast_lowering/src/lib.rs:1851:                            FnDeclKind::Trait | FnDeclKind::Impl => ImplTraitContext::FeatureGated(
compiler/rustc_ast_lowering/src/lib.rs:2051:                    if in_trait && !this.tcx.features().return_position_impl_trait_in_trait {
compiler/rustc_ast_lowering/src/lib.rs:2052:                        ImplTraitContext::FeatureGated(
compiler/rustc_ast_lowering/src/lib.rs:2442:                if self.tcx.features().generic_arg_infer {
compiler/rustc_ast_lowering/src/lib.rs:2445:                    feature_err(
compiler/rustc_ast_lowering/src/lib.rs:2480:                if self.tcx.features().negative_bounds {
compiler/rustc_ast_lowering/src/path.rs:363:                if self.tcx.features().impl_trait_in_fn_trait_return {
compiler/rustc_ast_lowering/src/path.rs:368:                        &ImplTraitContext::FeatureGated(
compiler/rustc_ast_lowering/src/expr.rs:660:    /// `inner_hir_id` in case the `closure_track_caller` feature is enabled.
compiler/rustc_ast_lowering/src/expr.rs:667:        if self.tcx.features().closure_track_caller
compiler/rustc_ast_lowering/src/item.rs:1252:        let abi_names = abi::enabled_names(self.tcx.features(), abi.span)
compiler/rustc_ast_lowering/src/item.rs:1394:        // if the effects feature is enabled.
compiler/rustc_ast_lowering/src/item.rs:1395:        if let Const::Yes(span) = constness && self.tcx.features().effects
compiler/rustc_ast_lowering/src/asm.rs:18:use rustc_session::parse::feature_err;
compiler/rustc_ast_lowering/src/asm.rs:49:            if !is_stable && !self.tcx.features().asm_experimental_arch {
compiler/rustc_ast_lowering/src/asm.rs:50:                feature_err(
compiler/rustc_ast_lowering/src/asm.rs:65:        if asm.options.contains(InlineAsmOptions::MAY_UNWIND) && !self.tcx.features().asm_unwind {
compiler/rustc_ast_lowering/src/asm.rs:66:            feature_err(
compiler/rustc_ast_lowering/src/asm.rs:180:                        if !self.tcx.features().asm_const {
compiler/rustc_ast_lowering/src/asm.rs:181:                            feature_err(
compiler/rustc_lint/Cargo.toml:19:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_lint/messages.ftl:71:lint_builtin_incomplete_features = the feature `{$name}` is incomplete and may not be safe to use and/or cause compiler crashes
compiler/rustc_lint/messages.ftl:148:lint_builtin_unstable_features = unstable feature
compiler/rustc_lint/src/lib.rs:30:#![feature(array_windows)]
compiler/rustc_lint/src/lib.rs:31:#![feature(box_patterns)]
compiler/rustc_lint/src/lib.rs:32:#![feature(control_flow_enum)]
compiler/rustc_lint/src/lib.rs:33:#![feature(if_let_guard)]
compiler/rustc_lint/src/lib.rs:34:#![feature(iter_intersperse)]
compiler/rustc_lint/src/lib.rs:35:#![feature(iter_order_by)]
compiler/rustc_lint/src/lib.rs:36:#![feature(let_chains)]
compiler/rustc_lint/src/lib.rs:37:#![feature(min_specialization)]
compiler/rustc_lint/src/lib.rs:38:#![feature(never_type)]
compiler/rustc_lint/src/lib.rs:39:#![feature(rustc_attrs)]
compiler/rustc_lint/src/lib.rs:176:            IncompleteFeatures: IncompleteFeatures,
compiler/rustc_lint/src/lib.rs:244:            UnstableFeatures: UnstableFeatures,
compiler/rustc_lint/src/lib.rs:312:        UNUSED_FEATURES,
compiler/rustc_lint/src/lib.rs:373:    store.register_removed("unknown_features", "replaced by an error");
compiler/rustc_lint/src/lib.rs:374:    store.register_removed("unsigned_negation", "replaced by negate_unsigned feature gate");
compiler/rustc_lint/src/expect.rs:14:    if !tcx.features().enabled(sym::lint_reasons) {
compiler/rustc_lint/src/deref_into_dyn_supertrait.rs:14:    /// These implementations will become shadowed when the `trait_upcasting` feature is stabilized.
compiler/rustc_lint/src/deref_into_dyn_supertrait.rs:45:    /// The dyn upcasting coercion feature adds new coercion rules, taking priority
compiler/rustc_lint/src/multiple_supertrait_upcastable.rs:31:    @feature_gate = sym::multiple_supertrait_upcastable;
compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs:30:    /// #![feature(type_alias_impl_trait)]
compiler/rustc_lint/src/levels.rs:30:use rustc_session::parse::{add_feature_diagnostics, feature_err};
compiler/rustc_lint/src/levels.rs:708:                                if !self.sess.features_untracked().lint_reasons {
compiler/rustc_lint/src/levels.rs:709:                                    feature_err(
compiler/rustc_lint/src/levels.rs:976:    /// Checks if the lint is gated on a feature that is not enabled.
compiler/rustc_lint/src/levels.rs:978:    /// Returns `true` if the lint's feature is enabled.
compiler/rustc_lint/src/levels.rs:983:        if let Some(feature) = lint_id.lint.feature_gate {
compiler/rustc_lint/src/levels.rs:984:            if !self.sess.features_untracked().enabled(feature) {
compiler/rustc_lint/src/levels.rs:997:                        add_feature_diagnostics(lint, &self.sess.parse_sess, feature);
compiler/rustc_lint/src/builtin.rs:31:        BuiltinExplicitOutlivesSuggestion, BuiltinIncompleteFeatures,
compiler/rustc_lint/src/builtin.rs:32:        BuiltinIncompleteFeaturesHelp, BuiltinIncompleteFeaturesNote, BuiltinKeywordIdents,
compiler/rustc_lint/src/builtin.rs:40:        BuiltinUnstableFeatures, BuiltinUnusedDocComment, BuiltinUnusedDocCommentSub,
compiler/rustc_lint/src/builtin.rs:55:use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};
compiler/rustc_lint/src/builtin.rs:1237:    /// The `unstable_features` is deprecated and should no longer be used.
compiler/rustc_lint/src/builtin.rs:1238:    UNSTABLE_FEATURES,
compiler/rustc_lint/src/builtin.rs:1240:    "enabling unstable features (deprecated. do not use)"
compiler/rustc_lint/src/builtin.rs:1244:    /// Forbids using the `#[feature(...)]` attribute
compiler/rustc_lint/src/builtin.rs:1245:    UnstableFeatures => [UNSTABLE_FEATURES]
compiler/rustc_lint/src/builtin.rs:1248:impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {
compiler/rustc_lint/src/builtin.rs:1250:        if attr.has_name(sym::feature) {
compiler/rustc_lint/src/builtin.rs:1253:                    cx.emit_spanned_lint(UNSTABLE_FEATURES, item.span(), BuiltinUnstableFeatures);
compiler/rustc_lint/src/builtin.rs:1263:    /// closure, without enabling the corresponding unstable feature flag.
compiler/rustc_lint/src/builtin.rs:1277:    /// [`closure_track_caller` feature flag]. Otherwise, the `#[track_caller]`
compiler/rustc_lint/src/builtin.rs:1280:    /// [`closure_track_caller` feature flag]: https://doc.rust-lang.org/beta/unstable-book/language-features/closure-track-caller.html
compiler/rustc_lint/src/builtin.rs:1283:    "enabling track_caller on an async fn is a no-op unless the closure_track_caller feature is enabled"
compiler/rustc_lint/src/builtin.rs:1287:    /// Explains corresponding feature flag must be enabled for the `#[track_caller]` attribute to
compiler/rustc_lint/src/builtin.rs:1303:            && !cx.tcx.features().closure_track_caller
compiler/rustc_lint/src/builtin.rs:1553:    /// #![feature(trivial_bounds)]
compiler/rustc_lint/src/builtin.rs:1566:    /// The `trivial_bounds` feature changes this to be a warning in both
compiler/rustc_lint/src/builtin.rs:1571:    /// See [RFC 2056] for more details. This feature is currently only
compiler/rustc_lint/src/builtin.rs:1591:        if cx.tcx.features().trivial_bounds {
compiler/rustc_lint/src/builtin.rs:1637:        UNSTABLE_FEATURES,
compiler/rustc_lint/src/builtin.rs:2273:    /// The `incomplete_features` lint detects unstable features enabled with
compiler/rustc_lint/src/builtin.rs:2274:    /// the [`feature` attribute] that may function improperly in some or all
compiler/rustc_lint/src/builtin.rs:2277:    /// [`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/
compiler/rustc_lint/src/builtin.rs:2282:    /// #![feature(generic_const_exprs)]
compiler/rustc_lint/src/builtin.rs:2290:    /// features, some of them are known to be incomplete or faulty. This lint
compiler/rustc_lint/src/builtin.rs:2291:    /// is a signal that the feature has not yet been finished, and you may
compiler/rustc_lint/src/builtin.rs:2293:    pub INCOMPLETE_FEATURES,
compiler/rustc_lint/src/builtin.rs:2295:    "incomplete features that may function improperly in some or all cases"
compiler/rustc_lint/src/builtin.rs:2299:    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `rustc_feature/src/active.rs`.
compiler/rustc_lint/src/builtin.rs:2300:    IncompleteFeatures => [INCOMPLETE_FEATURES]
compiler/rustc_lint/src/builtin.rs:2303:impl EarlyLintPass for IncompleteFeatures {
compiler/rustc_lint/src/builtin.rs:2305:        let features = cx.sess().features_untracked();
compiler/rustc_lint/src/builtin.rs:2306:        features
compiler/rustc_lint/src/builtin.rs:2307:            .declared_lang_features
compiler/rustc_lint/src/builtin.rs:2310:            .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))
compiler/rustc_lint/src/builtin.rs:2311:            .filter(|(&name, _)| features.incomplete(name))
compiler/rustc_lint/src/builtin.rs:2313:                let note = rustc_feature::find_feature_issue(name, GateIssue::Language)
compiler/rustc_lint/src/builtin.rs:2314:                    .map(|n| BuiltinIncompleteFeaturesNote { n });
compiler/rustc_lint/src/builtin.rs:2316:                    HAS_MIN_FEATURES.contains(&name).then_some(BuiltinIncompleteFeaturesHelp);
compiler/rustc_lint/src/builtin.rs:2318:                    INCOMPLETE_FEATURES,
compiler/rustc_lint/src/builtin.rs:2320:                    BuiltinIncompleteFeatures { name, note, help },
compiler/rustc_lint/src/builtin.rs:2326:const HAS_MIN_FEATURES: &[Symbol] = &[sym::specialization];
compiler/rustc_lint/src/builtin.rs:3116:    /// # #![feature(asm_experimental_arch)]
compiler/rustc_lint/src/lints.rs:235:#[diag(lint_builtin_unstable_features)]
compiler/rustc_lint/src/lints.rs:236:pub struct BuiltinUnstableFeatures;
compiler/rustc_lint/src/lints.rs:250:        rustc_session::parse::add_feature_diagnostics(
compiler/rustc_lint/src/lints.rs:404:#[diag(lint_builtin_incomplete_features)]
compiler/rustc_lint/src/lints.rs:405:pub struct BuiltinIncompleteFeatures {
compiler/rustc_lint/src/lints.rs:408:    pub note: Option<BuiltinIncompleteFeaturesNote>,
compiler/rustc_lint/src/lints.rs:410:    pub help: Option<BuiltinIncompleteFeaturesHelp>,
compiler/rustc_lint/src/lints.rs:415:pub struct BuiltinIncompleteFeaturesHelp;
compiler/rustc_lint/src/lints.rs:419:pub struct BuiltinIncompleteFeaturesNote {
compiler/rustc_driver_impl/Cargo.toml:40:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_driver_impl/Cargo.toml:61:features = [
compiler/rustc_driver_impl/Cargo.toml:65:[features]
compiler/rustc_driver_impl/src/lib.rs:8:#![feature(lazy_cell)]
compiler/rustc_driver_impl/src/lib.rs:9:#![feature(decl_macro)]
compiler/rustc_driver_impl/src/lib.rs:31:use rustc_feature::find_gated_cfg;
compiler/rustc_driver_impl/src/lib.rs:784:                        // `target_feature` cfg is gated under
compiler/rustc_driver_impl/src/lib.rs:789:                        if (name != sym::target_feature || value != Some(sym::crt_dash_static))
compiler/rustc_driver_impl/src/lib.rs:819:            | TargetFeatures => {
compiler/rustc_driver_impl/src/lib.rs:1143:/// Like unstable library and language features, however, unstable options have
compiler/rustc_driver_impl/src/lib.rs:1160:            rustc_feature::UnstableFeatures::from_environment(None).is_nightly_build();
compiler/rustc_traits/Cargo.toml:14:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_traits/src/lib.rs:5:#![feature(let_chains)]
compiler/rustc_interface/Cargo.toml:55:[features]
compiler/rustc_interface/src/util.rs:35:/// Adds `target_feature = "..."` cfgs for a variety of platform
compiler/rustc_interface/src/util.rs:36:/// specific features (SSE, NEON etc.).
compiler/rustc_interface/src/util.rs:38:/// This is performed by checking whether a set of permitted features
compiler/rustc_interface/src/util.rs:45:    let tf = sym::target_feature;
compiler/rustc_interface/src/util.rs:47:    let unstable_target_features = codegen_backend.target_features(sess, true);
compiler/rustc_interface/src/util.rs:48:    sess.unstable_target_features.extend(unstable_target_features.iter().cloned());
compiler/rustc_interface/src/util.rs:50:    let target_features = codegen_backend.target_features(sess, false);
compiler/rustc_interface/src/util.rs:51:    sess.target_features.extend(target_features.iter().cloned());
compiler/rustc_interface/src/util.rs:53:    cfg.extend(target_features.into_iter().map(|feat| (tf, Some(feat))));
compiler/rustc_interface/src/util.rs:264:            #[cfg(feature = "llvm")]
compiler/rustc_interface/src/lib.rs:1:#![feature(box_patterns)]
compiler/rustc_interface/src/lib.rs:2:#![feature(decl_macro)]
compiler/rustc_interface/src/lib.rs:3:#![feature(internal_output_capture)]
compiler/rustc_interface/src/lib.rs:4:#![feature(thread_spawn_unchecked)]
compiler/rustc_interface/src/lib.rs:5:#![feature(lazy_cell)]
compiler/rustc_interface/src/lib.rs:6:#![feature(try_blocks)]
compiler/rustc_interface/src/passes.rs:83:    let features = rustc_expand::config::features(sess, pre_configured_attrs);
compiler/rustc_interface/src/passes.rs:84:    sess.init_features(features);
compiler/rustc_interface/src/passes.rs:228:        let features = sess.features_untracked();
compiler/rustc_interface/src/passes.rs:231:            features: Some(features),
compiler/rustc_interface/src/passes.rs:329:    sess.time("complete_gated_feature_checking", || {
compiler/rustc_interface/src/passes.rs:330:        rustc_ast_passes::feature_gate::check_crate(&krate, sess);
compiler/rustc_interface/src/passes.rs:772:                sess.time("unused_lib_feature_checking", || {
compiler/rustc_interface/src/passes.rs:773:                    rustc_passes::stability::check_unused_or_stable_features(tcx)
compiler/rustc_interface/src/tests.rs:634:    tracked!(target_feature, String::from("all the features, all of them"));
compiler/rustc_interface/src/tests.rs:754:    tracked!(allow_features, Some(vec![String::from("lang_items")]));
compiler/rustc_interface/src/queries.rs:244:                feed.features_query(tcx.sess.features_untracked());
compiler/rustc_ty_utils/src/opaque_types.rs:71:    /// # #![feature(type_alias_impl_trait)]
compiler/rustc_ty_utils/src/consts.rs:403:    if !tcx.features().generic_const_exprs {
compiler/rustc_ty_utils/src/lib.rs:8:#![feature(assert_matches)]
compiler/rustc_ty_utils/src/lib.rs:9:#![feature(iterator_try_collect)]
compiler/rustc_ty_utils/src/lib.rs:10:#![feature(let_chains)]
compiler/rustc_ty_utils/src/lib.rs:11:#![feature(never_type)]
compiler/rustc_ty_utils/src/lib.rs:12:#![feature(box_patterns)]
compiler/rustc_ty_utils/src/abi.rs:501:                // target feature sets. Some more information about this
compiler/rustc_codegen_ssa/Cargo.toml:21:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_codegen_ssa/Cargo.toml:50:default-features = false
compiler/rustc_codegen_ssa/Cargo.toml:51:features = ["read_core", "elf", "macho", "pe", "xcoff", "unaligned", "archive", "write"]
compiler/rustc_codegen_ssa/Cargo.toml:55:features = ["Win32_Globalization"]
compiler/rustc_codegen_ssa/messages.ftl:205:codegen_ssa_target_feature_safe_trait = `#[target_feature(..)]` cannot be applied to safe trait method
compiler/rustc_codegen_ssa/src/back/metadata.rs:136:        Architecture::X86_64 => object::elf::GNU_PROPERTY_X86_FEATURE_1_AND,
compiler/rustc_codegen_ssa/src/back/metadata.rs:137:        Architecture::Aarch64 => object::elf::GNU_PROPERTY_AARCH64_FEATURE_1_AND,
compiler/rustc_codegen_ssa/src/back/metadata.rs:277:            let features = &sess.target.options.features;
compiler/rustc_codegen_ssa/src/back/metadata.rs:279:            if features.contains("+c") {
compiler/rustc_codegen_ssa/src/back/metadata.rs:284:            if features.contains("+d") {
compiler/rustc_codegen_ssa/src/back/metadata.rs:286:            } else if features.contains("+f") {
compiler/rustc_codegen_ssa/src/back/metadata.rs:296:            let features = &sess.target.options.features;
compiler/rustc_codegen_ssa/src/back/metadata.rs:299:            if features.contains("+d") {
compiler/rustc_codegen_ssa/src/back/metadata.rs:301:            } else if features.contains("+f") {
compiler/rustc_codegen_ssa/src/back/write.rs:1068:    let backend_features = tcx.global_backend_features(());
compiler/rustc_codegen_ssa/src/back/write.rs:1101:        tm_factory: backend.target_machine_factory(tcx.sess, ol, backend_features),
compiler/rustc_codegen_ssa/src/back/link.rs:358:    // #[link(cfg(..))] feature is unstable, though, and only intended to get
compiler/rustc_codegen_ssa/src/back/link.rs:364:    // feature then we'll need to figure out how to record what objects were
compiler/rustc_codegen_ssa/src/back/link.rs:373:            && !codegen_results.crate_info.feature_packed_bundled_libs
compiler/rustc_codegen_ssa/src/back/link.rs:1883:        // Add feature flags to the object file. On MSVC this is optional but LLD will complain if
compiler/rustc_codegen_ssa/src/back/link.rs:1885:        let mut feature = 0;
compiler/rustc_codegen_ssa/src/back/link.rs:1892:            feature |= 1;
compiler/rustc_codegen_ssa/src/back/link.rs:1897:            value: feature,
compiler/rustc_codegen_ssa/src/back/link.rs:2300:        if let Some(feat) = [sess.opts.cg.target_feature.as_str(), &sess.target.options.features]
compiler/rustc_codegen_ssa/src/back/link.rs:2304:            cmd.arg("--cpu-features");
compiler/rustc_codegen_ssa/src/back/link.rs:2994:    // 1. Implement the "self-contained" part of this feature by adding rustc distribution
compiler/rustc_codegen_ssa/src/back/link.rs:3006:    // 2. Implement the "linker flavor" part of this feature by asking `cc` to use some kind of
compiler/rustc_codegen_ssa/src/back/linker.rs:1173:        // If the atomics feature is enabled for wasm then we need a whole bunch
compiler/rustc_codegen_ssa/src/back/linker.rs:1191:        if sess.target_features.contains(&sym::atomics) {
compiler/rustc_codegen_ssa/src/traits/backend.rs:65:    fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<Symbol> {
compiler/rustc_codegen_ssa/src/traits/backend.rs:140:        target_features: &[String],
compiler/rustc_codegen_ssa/src/lib.rs:2:#![feature(associated_type_bounds)]
compiler/rustc_codegen_ssa/src/lib.rs:3:#![feature(box_patterns)]
compiler/rustc_codegen_ssa/src/lib.rs:4:#![feature(if_let_guard)]
compiler/rustc_codegen_ssa/src/lib.rs:5:#![feature(int_roundings)]
compiler/rustc_codegen_ssa/src/lib.rs:6:#![feature(let_chains)]
compiler/rustc_codegen_ssa/src/lib.rs:7:#![feature(negative_impls)]
compiler/rustc_codegen_ssa/src/lib.rs:8:#![feature(never_type)]
compiler/rustc_codegen_ssa/src/lib.rs:9:#![feature(strict_provenance)]
compiler/rustc_codegen_ssa/src/lib.rs:10:#![feature(try_blocks)]
compiler/rustc_codegen_ssa/src/lib.rs:57:pub mod target_features;
compiler/rustc_codegen_ssa/src/lib.rs:167:    pub feature_packed_bundled_libs: bool, // unstable feature flag.
compiler/rustc_codegen_ssa/src/lib.rs:189:    crate::target_features::provide(providers);
compiler/rustc_codegen_ssa/src/base.rs:877:            feature_packed_bundled_libs: tcx.features().packed_bundled_libs,
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:12:use rustc_session::{lint, parse::feature_err};
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:18:use crate::target_features::from_target_feature;
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:19:use crate::{errors::ExpectedUsedSymbol, target_features::check_target_feature_trait_unsafe};
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:71:    let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:139:                        if !tcx.features().used_with_arg {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:140:                            feature_err(
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:151:                        if !tcx.features().used_with_arg {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:152:                            feature_err(
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:225:                if tcx.is_closure(did.to_def_id()) && !tcx.features().closure_track_caller {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:226:                    feature_err(
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:252:            sym::target_feature => {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:258:                        // The `#[target_feature]` attribute is allowed on
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:260:                        // ones. Other targets require that `#[target_feature]` is
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:262:                        // `target_feature_11` feature) because on most targets
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:267:                        // feature was added in some form for this it would be a
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:269:                        // executing WebAssembly so `#[target_feature]` is allowed
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:277:                        // `#[target_feature]` on `main` and `start`.
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:278:                    } else if !tcx.features().target_feature_11 {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:279:                        let mut err = feature_err(
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:281:                            sym::target_feature_11,
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:283:                            "`#[target_feature(..)]` can only be applied to `unsafe` functions",
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:288:                        check_target_feature_trait_unsafe(tcx, did, attr.span);
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:291:                from_target_feature(
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:294:                    supported_target_features,
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:295:                    &mut codegen_fn_attrs.target_features,
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:503:    // #73631: closures inherit `#[target_feature]` annotations
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:504:    if tcx.features().target_feature_11 && tcx.is_closure(did.to_def_id()) {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:508:                .target_features
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:509:                .extend(tcx.codegen_fn_attrs(owner_id).target_features.iter().copied());
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:513:    // If a function uses #[target_feature] it can't be inlined into general
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:514:    // purpose functions as they wouldn't have the right target features
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:517:    if !codegen_fn_attrs.target_features.is_empty() {
compiler/rustc_codegen_ssa/src/codegen_attrs.rs:523:                     `#[target_feature]`",
compiler/rustc_codegen_ssa/src/errors.rs:1018:#[diag(codegen_ssa_target_feature_safe_trait)]
compiler/rustc_codegen_ssa/src/errors.rs:1019:pub struct TargetFeatureSafeTrait {
compiler/rustc_codegen_ssa/src/target_features.rs:13:use rustc_session::parse::feature_err;
compiler/rustc_codegen_ssa/src/target_features.rs:19:/// Features that control behaviour of rustc, rather than the codegen.
compiler/rustc_codegen_ssa/src/target_features.rs:20:pub const RUSTC_SPECIFIC_FEATURES: &[&str] = &["crt-static"];
compiler/rustc_codegen_ssa/src/target_features.rs:22:// When adding features to the below lists
compiler/rustc_codegen_ssa/src/target_features.rs:25:// if it doesn't, to_llvm_feature in llvm_util in rustc_codegen_llvm needs to be adapted
compiler/rustc_codegen_ssa/src/target_features.rs:27:const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:29:    ("aclass", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:30:    ("aes", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:31:    ("crc", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:32:    ("crypto", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:33:    ("d32", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:34:    ("dotprod", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:35:    ("dsp", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:36:    ("fp-armv8", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:37:    ("i8mm", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:38:    ("mclass", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:39:    ("neon", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:40:    ("rclass", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:41:    ("sha2", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:44:    // #[target_feature].
compiler/rustc_codegen_ssa/src/target_features.rs:45:    ("thumb-mode", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:46:    ("thumb2", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:47:    ("trustzone", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:48:    ("v5te", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:49:    ("v6", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:50:    ("v6k", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:51:    ("v6t2", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:52:    ("v7", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:53:    ("v8", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:54:    ("vfp2", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:55:    ("vfp3", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:56:    ("vfp4", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:57:    ("virtualization", Some(sym::arm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:61:const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:149:    ("v8.1a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:150:    ("v8.2a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:151:    ("v8.3a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:152:    ("v8.4a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:153:    ("v8.5a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:154:    ("v8.6a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:155:    ("v8.7a", Some(sym::aarch64_ver_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:161:const AARCH64_TIED_FEATURES: &[&[&str]] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:165:const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:171:    ("avx512bf16", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:172:    ("avx512bitalg", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:173:    ("avx512bw", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:174:    ("avx512cd", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:175:    ("avx512dq", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:176:    ("avx512er", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:177:    ("avx512f", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:178:    ("avx512ifma", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:179:    ("avx512pf", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:180:    ("avx512vbmi", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:181:    ("avx512vbmi2", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:182:    ("avx512vl", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:183:    ("avx512vnni", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:184:    ("avx512vp2intersect", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:185:    ("avx512vpopcntdq", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:189:    ("ermsb", Some(sym::ermsb_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:193:    ("gfni", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:200:    ("rtm", Some(sym::rtm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:207:    ("sse4a", Some(sym::sse4a_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:209:    ("tbm", Some(sym::tbm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:210:    ("vaes", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:211:    ("vpclmulqdq", Some(sym::avx512_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:219:const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:221:    ("hvx", Some(sym::hexagon_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:222:    ("hvx-length128b", Some(sym::hexagon_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:226:const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:228:    ("altivec", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:229:    ("power10-vector", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:230:    ("power8-altivec", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:231:    ("power8-vector", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:232:    ("power9-altivec", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:233:    ("power9-vector", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:234:    ("vsx", Some(sym::powerpc_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:238:const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:240:    ("fp64", Some(sym::mips_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:241:    ("msa", Some(sym::mips_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:242:    ("virt", Some(sym::mips_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:246:const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:248:    ("a", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:249:    ("c", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:250:    ("d", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:251:    ("e", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:252:    ("f", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:253:    ("m", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:254:    ("relax", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:255:    ("unaligned-scalar-mem", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:256:    ("v", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:257:    ("zba", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:258:    ("zbb", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:259:    ("zbc", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:260:    ("zbkb", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:261:    ("zbkc", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:262:    ("zbkx", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:263:    ("zbs", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:264:    ("zdinx", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:265:    ("zfh", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:266:    ("zfhmin", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:267:    ("zfinx", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:268:    ("zhinx", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:269:    ("zhinxmin", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:270:    ("zk", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:271:    ("zkn", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:272:    ("zknd", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:273:    ("zkne", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:274:    ("zknh", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:275:    ("zkr", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:276:    ("zks", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:277:    ("zksed", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:278:    ("zksh", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:279:    ("zkt", Some(sym::riscv_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:283:const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[
compiler/rustc_codegen_ssa/src/target_features.rs:285:    ("atomics", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:286:    ("bulk-memory", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:287:    ("exception-handling", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:288:    ("multivalue", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:289:    ("mutable-globals", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:290:    ("nontrapping-fptoint", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:291:    ("reference-types", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:292:    ("relaxed-simd", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:293:    ("sign-ext", Some(sym::wasm_target_feature)),
compiler/rustc_codegen_ssa/src/target_features.rs:298:const BPF_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[("alu32", Some(sym::bpf_target_feature))];
compiler/rustc_codegen_ssa/src/target_features.rs:300:/// When rustdoc is running, provide a list of all known features so that all their respective
compiler/rustc_codegen_ssa/src/target_features.rs:303:/// IMPORTANT: If you're adding another feature list above, make sure to add it to this iterator!
compiler/rustc_codegen_ssa/src/target_features.rs:304:pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {
compiler/rustc_codegen_ssa/src/target_features.rs:306:        .chain(ARM_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:307:        .chain(AARCH64_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:308:        .chain(X86_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:309:        .chain(HEXAGON_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:310:        .chain(POWERPC_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:311:        .chain(MIPS_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:312:        .chain(RISCV_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:313:        .chain(WASM_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:314:        .chain(BPF_ALLOWED_FEATURES.iter())
compiler/rustc_codegen_ssa/src/target_features.rs:318:pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {
compiler/rustc_codegen_ssa/src/target_features.rs:320:        "arm" => ARM_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:321:        "aarch64" => AARCH64_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:322:        "x86" | "x86_64" => X86_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:323:        "hexagon" => HEXAGON_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:324:        "mips" | "mips32r6" | "mips64" | "mips64r6" => MIPS_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:325:        "powerpc" | "powerpc64" => POWERPC_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:326:        "riscv32" | "riscv64" => RISCV_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:327:        "wasm32" | "wasm64" => WASM_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:328:        "bpf" => BPF_ALLOWED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:333:pub fn tied_target_features(sess: &Session) -> &'static [&'static [&'static str]] {
compiler/rustc_codegen_ssa/src/target_features.rs:335:        "aarch64" => AARCH64_TIED_FEATURES,
compiler/rustc_codegen_ssa/src/target_features.rs:340:pub fn from_target_feature(
compiler/rustc_codegen_ssa/src/target_features.rs:343:    supported_target_features: &FxHashMap<String, Option<Symbol>>,
compiler/rustc_codegen_ssa/src/target_features.rs:344:    target_features: &mut Vec<Symbol>,
compiler/rustc_codegen_ssa/src/target_features.rs:348:        let msg = "malformed `target_feature` attribute input";
compiler/rustc_codegen_ssa/src/target_features.rs:355:    let rust_features = tcx.features();
compiler/rustc_codegen_ssa/src/target_features.rs:369:        // We allow comma separation to enable multiple features.
compiler/rustc_codegen_ssa/src/target_features.rs:370:        target_features.extend(value.as_str().split(',').filter_map(|feature| {
compiler/rustc_codegen_ssa/src/target_features.rs:371:            let Some(feature_gate) = supported_target_features.get(feature) else {
compiler/rustc_codegen_ssa/src/target_features.rs:372:                let msg = format!("the feature named `{}` is not valid for this target", feature);
compiler/rustc_codegen_ssa/src/target_features.rs:374:                err.span_label(item.span(), format!("`{}` is not valid for this target", feature));
compiler/rustc_codegen_ssa/src/target_features.rs:375:                if let Some(stripped) = feature.strip_prefix('+') {
compiler/rustc_codegen_ssa/src/target_features.rs:376:                    let valid = supported_target_features.contains_key(stripped);
compiler/rustc_codegen_ssa/src/target_features.rs:378:                        err.help("consider removing the leading `+` in the feature name");
compiler/rustc_codegen_ssa/src/target_features.rs:385:            // Only allow features whose feature gates have been enabled.
compiler/rustc_codegen_ssa/src/target_features.rs:386:            let allowed = match feature_gate.as_ref().copied() {
compiler/rustc_codegen_ssa/src/target_features.rs:387:                Some(sym::arm_target_feature) => rust_features.arm_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:388:                Some(sym::hexagon_target_feature) => rust_features.hexagon_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:389:                Some(sym::powerpc_target_feature) => rust_features.powerpc_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:390:                Some(sym::mips_target_feature) => rust_features.mips_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:391:                Some(sym::riscv_target_feature) => rust_features.riscv_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:392:                Some(sym::avx512_target_feature) => rust_features.avx512_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:393:                Some(sym::sse4a_target_feature) => rust_features.sse4a_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:394:                Some(sym::tbm_target_feature) => rust_features.tbm_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:395:                Some(sym::wasm_target_feature) => rust_features.wasm_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:396:                Some(sym::rtm_target_feature) => rust_features.rtm_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:397:                Some(sym::ermsb_target_feature) => rust_features.ermsb_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:398:                Some(sym::bpf_target_feature) => rust_features.bpf_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:399:                Some(sym::aarch64_ver_target_feature) => rust_features.aarch64_ver_target_feature,
compiler/rustc_codegen_ssa/src/target_features.rs:400:                Some(name) => bug!("unknown target feature gate {}", name),
compiler/rustc_codegen_ssa/src/target_features.rs:404:                feature_err(
compiler/rustc_codegen_ssa/src/target_features.rs:406:                    feature_gate.unwrap(),
compiler/rustc_codegen_ssa/src/target_features.rs:408:                    format!("the target feature `{}` is currently unstable", feature),
compiler/rustc_codegen_ssa/src/target_features.rs:412:            Some(Symbol::intern(feature))
compiler/rustc_codegen_ssa/src/target_features.rs:417:/// Computes the set of target features used in a function for the purposes of
compiler/rustc_codegen_ssa/src/target_features.rs:419:fn asm_target_features(tcx: TyCtxt<'_>, did: DefId) -> &FxIndexSet<Symbol> {
compiler/rustc_codegen_ssa/src/target_features.rs:420:    let mut target_features = tcx.sess.unstable_target_features.clone();
compiler/rustc_codegen_ssa/src/target_features.rs:423:        target_features.extend(&attrs.target_features);
compiler/rustc_codegen_ssa/src/target_features.rs:427:                target_features.remove(&sym::thumb_mode);
compiler/rustc_codegen_ssa/src/target_features.rs:430:                target_features.insert(sym::thumb_mode);
compiler/rustc_codegen_ssa/src/target_features.rs:435:    tcx.arena.alloc(target_features)
compiler/rustc_codegen_ssa/src/target_features.rs:438:/// Checks the function annotated with `#[target_feature]` is not a safe
compiler/rustc_codegen_ssa/src/target_features.rs:440:pub fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span: Span) {
compiler/rustc_codegen_ssa/src/target_features.rs:444:            tcx.sess.emit_err(errors::TargetFeatureSafeTrait {
compiler/rustc_codegen_ssa/src/target_features.rs:454:        supported_target_features: |tcx, cnum| {
compiler/rustc_codegen_ssa/src/target_features.rs:457:                // rustdoc needs to be able to document functions that use all the features, so
compiler/rustc_codegen_ssa/src/target_features.rs:459:                all_known_features().map(|(a, b)| (a.to_string(), b)).collect()
compiler/rustc_codegen_ssa/src/target_features.rs:461:                supported_target_features(tcx.sess)
compiler/rustc_codegen_ssa/src/target_features.rs:467:        asm_target_features,
compiler/rustc_builtin_macros/Cargo.toml:16:rustc_feature = { path = "../rustc_feature" }
compiler/rustc_builtin_macros/Cargo.toml:27:smallvec = { version = "1.8.1", features = ["union", "may_dangle"] }
compiler/rustc_builtin_macros/src/derive.rs:7:use rustc_feature::AttributeTemplate;
compiler/rustc_builtin_macros/src/derive.rs:31:        let (sess, features) = (ecx.sess, ecx.ecfg.features);
compiler/rustc_builtin_macros/src/derive.rs:73:                            features,
compiler/rustc_builtin_macros/src/assert.rs:71:    else if let Some(features) = cx.ecfg.features && features.generic_assert {
compiler/rustc_builtin_macros/src/util.rs:3:use rustc_feature::AttributeTemplate;
compiler/rustc_builtin_macros/src/lib.rs:5:#![feature(array_windows)]
compiler/rustc_builtin_macros/src/lib.rs:6:#![feature(box_patterns)]
compiler/rustc_builtin_macros/src/lib.rs:7:#![feature(decl_macro)]
compiler/rustc_builtin_macros/src/lib.rs:8:#![feature(if_let_guard)]
compiler/rustc_builtin_macros/src/lib.rs:9:#![feature(is_sorted)]
compiler/rustc_builtin_macros/src/lib.rs:10:#![feature(let_chains)]
compiler/rustc_builtin_macros/src/lib.rs:11:#![feature(lint_reasons)]
compiler/rustc_builtin_macros/src/lib.rs:12:#![feature(proc_macro_internals)]
compiler/rustc_builtin_macros/src/lib.rs:13:#![feature(proc_macro_quote)]
compiler/rustc_builtin_macros/src/test_harness.rs:10:use rustc_feature::Features;
compiler/rustc_builtin_macros/src/test_harness.rs:77:            &sess.features_untracked(),
compiler/rustc_builtin_macros/src/test_harness.rs:220:    features: &Features,
compiler/rustc_builtin_macros/src/test_harness.rs:225:    econfig.features = Some(features);
compiler/rustc_builtin_macros/src/cfg.rs:27:                cx.ecfg.features,
compiler/rustc_builtin_macros/src/assert/context.rs:60:    /// #![feature(generic_assert_internals)]
compiler/rustc_builtin_macros/src/deriving/generic/mod.rs:6://! Supported features (fairly exhaustive):
compiler/rustc_builtin_macros/src/deriving/generic/mod.rs:1108:    /// #![feature(core_intrinsics)]
compiler/rustc_builtin_macros/src/deriving/generic/ty.rs:1://! A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use
compiler/rustc_builtin_macros/src/edition_panic.rs:77:        if let Some(features) = expn.allow_internal_unstable {
compiler/rustc_builtin_macros/src/edition_panic.rs:78:            if features.iter().any(|&f| f == sym::edition_panic) {
compiler/rustc_builtin_macros/src/cfg_eval.rs:14:use rustc_feature::Features;
compiler/rustc_builtin_macros/src/cfg_eval.rs:29:    vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable, ecx.current_expansion.lint_node_id)]
compiler/rustc_builtin_macros/src/cfg_eval.rs:34:    features: Option<&Features>,
compiler/rustc_builtin_macros/src/cfg_eval.rs:38:    CfgEval { cfg: &mut StripUnconfigured { sess, features, config_tokens: true, lint_node_id } }
compiler/rustc_builtin_macros/src/cfg_accessible.rs:6:use rustc_feature::AttributeTemplate;
compiler/rustc_graphviz/src/lib.rs:38://! #![feature(rustc_private)]
compiler/rustc_graphviz/src/lib.rs:143://! #![feature(rustc_private)]
compiler/rustc_graphviz/src/lib.rs:205://! #![feature(rustc_private)]
compiler/rustc_feature/Cargo.toml:2:name = "rustc_feature"
compiler/rustc_feature/src/builtin_attrs.rs:7:use crate::{Features, Stability};
compiler/rustc_feature/src/builtin_attrs.rs:14:type GateFn = fn(&Features) -> bool;
compiler/rustc_feature/src/builtin_attrs.rs:18:        (|features| features.$field) as GateFn
compiler/rustc_feature/src/builtin_attrs.rs:24:/// `cfg(...)`'s that are feature gated.
compiler/rustc_feature/src/builtin_attrs.rs:26:    // (name in cfg, feature, function to check if the feature is enabled)
compiler/rustc_feature/src/builtin_attrs.rs:61:    /// Is gated by a given feature gate, reason
compiler/rustc_feature/src/builtin_attrs.rs:63:    Gated(Stability, Symbol, &'static str, fn(&Features) -> bool),
compiler/rustc_feature/src/builtin_attrs.rs:247:        concat!("the `#[", stringify!($attr), "]` attribute is an experimental feature")
compiler/rustc_feature/src/builtin_attrs.rs:387:        target_feature, Normal, template!(List: r#"enable = "name""#),
compiler/rustc_feature/src/builtin_attrs.rs:440:        "custom test frameworks are an unstable feature",
compiler/rustc_feature/src/builtin_attrs.rs:449:        "`#[thread_local]` is an experimental feature, and does not currently handle destructors",
compiler/rustc_feature/src/builtin_attrs.rs:505:        feature, CrateLevel,
compiler/rustc_feature/src/builtin_attrs.rs:511:        template!(List: r#"feature = "name", since = "version""#), DuplicatesOk, @only_local: true,
compiler/rustc_feature/src/builtin_attrs.rs:515:        template!(List: r#"feature = "name", reason = "...", issue = "N""#), DuplicatesOk,
compiler/rustc_feature/src/builtin_attrs.rs:517:    ungated!(rustc_const_unstable, Normal, template!(List: r#"feature = "name""#), DuplicatesOk),
compiler/rustc_feature/src/builtin_attrs.rs:520:        template!(List: r#"feature = "name""#), DuplicatesOk, @only_local: true,
compiler/rustc_feature/src/builtin_attrs.rs:524:        template!(List: r#"feature = "name", reason = "...", issue = "N""#), DuplicatesOk
compiler/rustc_feature/src/builtin_attrs.rs:528:        "allow_internal_unstable side-steps feature gating and stability checks",
compiler/rustc_feature/src/builtin_attrs.rs:533:        "rustc_allow_const_fn_unstable side-steps feature gating and stability checks"
compiler/rustc_feature/src/lib.rs:1://! # Feature gates
compiler/rustc_feature/src/lib.rs:3://! This crate declares the set of past and present unstable features in the compiler.
compiler/rustc_feature/src/lib.rs:4://! Feature gate checking itself is done in `rustc_ast_passes/src/feature_gate.rs`
compiler/rustc_feature/src/lib.rs:7://! Features are enabled in programs via the crate-level attributes of
compiler/rustc_feature/src/lib.rs:8://! `#![feature(...)]` with a comma-separated list of features.
compiler/rustc_feature/src/lib.rs:10://! For the purpose of future feature-tracking, once a feature gate is added,
compiler/rustc_feature/src/lib.rs:14:#![feature(lazy_cell)]
compiler/rustc_feature/src/lib.rs:33:    Active { set: fn(&mut Features, Span) },
compiler/rustc_feature/src/lib.rs:50:pub struct Feature {
compiler/rustc_feature/src/lib.rs:67:pub enum UnstableFeatures {
compiler/rustc_feature/src/lib.rs:68:    /// Hard errors for unstable features are active, as on beta/stable channels.
compiler/rustc_feature/src/lib.rs:70:    /// Allow features to be activated, as on nightly.
compiler/rustc_feature/src/lib.rs:73:    /// during the build that feature-related lints are set to warn or above
compiler/rustc_feature/src/lib.rs:75:    /// features. As a result, this is always required for building Rust itself.
compiler/rustc_feature/src/lib.rs:79:impl UnstableFeatures {
compiler/rustc_feature/src/lib.rs:82:    /// If `krate` is [`Some`], then setting `RUSTC_BOOTSTRAP=krate` will enable the nightly features.
compiler/rustc_feature/src/lib.rs:85:        // `true` if this is a feature-staged build, i.e., on the beta or stable channel.
compiler/rustc_feature/src/lib.rs:86:        let disable_unstable_features =
compiler/rustc_feature/src/lib.rs:87:            option_env!("CFG_DISABLE_UNSTABLE_FEATURES").is_some_and(|s| s != "0");
compiler/rustc_feature/src/lib.rs:91:        // `true` if we should enable unstable features for bootstrapping.
compiler/rustc_feature/src/lib.rs:94:        match (disable_unstable_features, bootstrap) {
compiler/rustc_feature/src/lib.rs:95:            (_, true) => UnstableFeatures::Cheat,
compiler/rustc_feature/src/lib.rs:96:            (true, _) => UnstableFeatures::Disallow,
compiler/rustc_feature/src/lib.rs:97:            (false, _) => UnstableFeatures::Allow,
compiler/rustc_feature/src/lib.rs:103:            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,
compiler/rustc_feature/src/lib.rs:104:            UnstableFeatures::Disallow => false,
compiler/rustc_feature/src/lib.rs:109:fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {
compiler/rustc_feature/src/lib.rs:110:    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {
compiler/rustc_feature/src/lib.rs:111:        // FIXME (#28244): enforce that active features have issue numbers
compiler/rustc_feature/src/lib.rs:115:        // search in Accepted, Removed, or Stable Removed features
compiler/rustc_feature/src/lib.rs:116:        let found = ACCEPTED_FEATURES
compiler/rustc_feature/src/lib.rs:118:            .chain(REMOVED_FEATURES)
compiler/rustc_feature/src/lib.rs:119:            .chain(STABLE_REMOVED_FEATURES)
compiler/rustc_feature/src/lib.rs:120:            .find(|t| t.name == feature);
compiler/rustc_feature/src/lib.rs:123:            None => panic!("feature `{feature}` is not declared anywhere"),
compiler/rustc_feature/src/lib.rs:142:pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU32> {
compiler/rustc_feature/src/lib.rs:144:        GateIssue::Language => find_lang_feature_issue(feature),
compiler/rustc_feature/src/lib.rs:149:pub use accepted::ACCEPTED_FEATURES;
compiler/rustc_feature/src/lib.rs:150:pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES};
compiler/rustc_feature/src/lib.rs:157:pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};
compiler/rustc_feature/src/active.rs:1://! List of the active feature gates.
compiler/rustc_feature/src/active.rs:3:use super::{to_nonzero, Feature, State};
compiler/rustc_feature/src/active.rs:12:        fn f(features: &mut Features, _: Span) {
compiler/rustc_feature/src/active.rs:13:            features.$field = true;
compiler/rustc_feature/src/active.rs:15:        f as fn(&mut Features, Span)
compiler/rustc_feature/src/active.rs:19:macro_rules! declare_features {
compiler/rustc_feature/src/active.rs:27:        $(#[doc = $doc:tt])* ($status:ident, $feature:ident, $ver:expr, $issue:expr, $edition:expr),
compiler/rustc_feature/src/active.rs:29:        /// Represents active features that are currently being implemented or
compiler/rustc_feature/src/active.rs:31:        pub const ACTIVE_FEATURES:
compiler/rustc_feature/src/active.rs:32:            &[Feature] =
compiler/rustc_feature/src/active.rs:34:                // (sym::$feature, $ver, $issue, $edition, set!($feature))
compiler/rustc_feature/src/active.rs:35:                Feature {
compiler/rustc_feature/src/active.rs:36:                    state: State::Active { set: set!($feature) },
compiler/rustc_feature/src/active.rs:37:                    name: sym::$feature,
compiler/rustc_feature/src/active.rs:44:        /// A set of features to be used by later passes.
compiler/rustc_feature/src/active.rs:46:        pub struct Features {
compiler/rustc_feature/src/active.rs:47:            /// `#![feature]` attrs for language features, for error reporting.
compiler/rustc_feature/src/active.rs:48:            pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,
compiler/rustc_feature/src/active.rs:49:            /// `#![feature]` attrs for non-language (library) features.
compiler/rustc_feature/src/active.rs:50:            pub declared_lib_features: Vec<(Symbol, Span)>,
compiler/rustc_feature/src/active.rs:51:            /// Features enabled for this crate.
compiler/rustc_feature/src/active.rs:52:            pub active_features: FxHashSet<Symbol>,
compiler/rustc_feature/src/active.rs:55:                pub $feature: bool
compiler/rustc_feature/src/active.rs:59:        impl Features {
compiler/rustc_feature/src/active.rs:60:            pub fn walk_feature_fields(&self, mut f: impl FnMut(&str, bool)) {
compiler/rustc_feature/src/active.rs:61:                $(f(stringify!($feature), self.$feature);)+
compiler/rustc_feature/src/active.rs:64:            /// Is the given feature active?
compiler/rustc_feature/src/active.rs:65:            pub fn active(&self, feature: Symbol) -> bool {
compiler/rustc_feature/src/active.rs:66:                self.active_features.contains(&feature)
compiler/rustc_feature/src/active.rs:69:            /// Is the given feature enabled?
compiler/rustc_feature/src/active.rs:71:            /// Panics if the symbol doesn't correspond to a declared feature.
compiler/rustc_feature/src/active.rs:72:            pub fn enabled(&self, feature: Symbol) -> bool {
compiler/rustc_feature/src/active.rs:73:                match feature {
compiler/rustc_feature/src/active.rs:74:                    $( sym::$feature => self.$feature, )*
compiler/rustc_feature/src/active.rs:76:                    _ => panic!("`{}` was not listed in `declare_features`", feature),
compiler/rustc_feature/src/active.rs:80:            /// Some features are known to be incomplete and using them is likely to have
compiler/rustc_feature/src/active.rs:83:            pub fn incomplete(&self, feature: Symbol) -> bool {
compiler/rustc_feature/src/active.rs:84:                match feature {
compiler/rustc_feature/src/active.rs:86:                        sym::$feature => declare_features!(__status_to_bool $status),
compiler/rustc_feature/src/active.rs:88:                    // accepted and removed features aren't in this file but are never incomplete
compiler/rustc_feature/src/active.rs:89:                    _ if self.declared_lang_features.iter().any(|f| f.0 == feature) => false,
compiler/rustc_feature/src/active.rs:90:                    _ if self.declared_lib_features.iter().any(|f| f.0 == feature) => false,
compiler/rustc_feature/src/active.rs:91:                    _ => panic!("`{}` was not listed in `declare_features`", feature),
compiler/rustc_feature/src/active.rs:98:impl Feature {
compiler/rustc_feature/src/active.rs:99:    /// Sets this feature in `Features`. Panics if called on a non-active feature.
compiler/rustc_feature/src/active.rs:100:    pub fn set(&self, features: &mut Features, span: Span) {
compiler/rustc_feature/src/active.rs:102:            State::Active { set } => set(features, span),
compiler/rustc_feature/src/active.rs:103:            _ => panic!("called `set` on feature `{}` which is not `active`", self.name),
compiler/rustc_feature/src/active.rs:108:// See https://rustc-dev-guide.rust-lang.org/feature-gates.html#feature-gates for more
compiler/rustc_feature/src/active.rs:109:// documentation about handling feature gates.
compiler/rustc_feature/src/active.rs:117:// was set. This is most important for knowing when a particular feature became
compiler/rustc_feature/src/active.rs:120:// Note that the features are grouped into internal/user-facing and then
compiler/rustc_feature/src/active.rs:123:// N.B., `tools/tidy/src/features.rs` parses this information directly out of the
compiler/rustc_feature/src/active.rs:127:declare_features! (
compiler/rustc_feature/src/active.rs:129:    // feature-group-start: internal feature gates (no tracking issue)
compiler/rustc_feature/src/active.rs:167:    /// Allow negative trait bounds. This is an internal-only feature for testing the trait solver!
compiler/rustc_feature/src/active.rs:180:    (active, test_2018_feature, "1.31.0", None, Some(Edition::Edition2018)),
compiler/rustc_feature/src/active.rs:190:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/active.rs:195:    // feature-group-end: internal feature gates (no tracking issue)
compiler/rustc_feature/src/active.rs:199:    // feature-group-start: internal feature gates
compiler/rustc_feature/src/active.rs:202:    /// Allows features specific to auto traits.
compiler/rustc_feature/src/active.rs:230:    /// Allows using internal rustdoc features like `doc(keyword)`.
compiler/rustc_feature/src/active.rs:238:    /// feature with the same name exists.
compiler/rustc_feature/src/active.rs:243:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/active.rs:247:    // feature-group-end: internal feature gates
compiler/rustc_feature/src/active.rs:251:    // feature-group-start: actual feature gates (target features)
compiler/rustc_feature/src/active.rs:256:    // Unstable `#[target_feature]` directives.
compiler/rustc_feature/src/active.rs:257:    (active, aarch64_ver_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:258:    (active, arm_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:259:    (active, avx512_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:260:    (active, bpf_target_feature, "1.54.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:261:    (active, ermsb_target_feature, "1.49.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:262:    (active, hexagon_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:263:    (active, mips_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:264:    (active, powerpc_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:265:    (active, riscv_target_feature, "1.45.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:266:    (active, rtm_target_feature, "1.35.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:267:    (active, sse4a_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:268:    (active, tbm_target_feature, "1.27.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:269:    (active, wasm_target_feature, "1.30.0", Some(44839), None),
compiler/rustc_feature/src/active.rs:271:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/active.rs:275:    // feature-group-end: actual feature gates (target features)
compiler/rustc_feature/src/active.rs:279:    // feature-group-start: actual feature gates
compiler/rustc_feature/src/active.rs:421:    /// An extension to the `generic_associated_types` feature, allowing incomplete features.
compiler/rustc_feature/src/active.rs:524:    /// Allows the use of `#[target_feature]` on safe functions.
compiler/rustc_feature/src/active.rs:525:    (active, target_feature_11, "1.45.0", Some(69098), None),
compiler/rustc_feature/src/active.rs:565:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/active.rs:569:    // feature-group-end: actual feature gates
compiler/rustc_feature/src/active.rs:573:/// Some features are not allowed to be used together at the same time, if
compiler/rustc_feature/src/active.rs:578:pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] = &[];
compiler/rustc_feature/src/tests.rs:1:use super::UnstableFeatures;
compiler/rustc_feature/src/tests.rs:7:        matches!(UnstableFeatures::from_environment(krate), UnstableFeatures::Cheat)
compiler/rustc_feature/src/tests.rs:16:    // Crate that aren't specified do not get unstable features
compiler/rustc_feature/src/accepted.rs:1://! List of the accepted feature gates.
compiler/rustc_feature/src/accepted.rs:3:use super::{to_nonzero, Feature, State};
compiler/rustc_feature/src/accepted.rs:6:macro_rules! declare_features {
compiler/rustc_feature/src/accepted.rs:8:        $(#[doc = $doc:tt])* (accepted, $feature:ident, $ver:expr, $issue:expr, None),
compiler/rustc_feature/src/accepted.rs:10:        /// Those language feature has since been Accepted (it was once Active)
compiler/rustc_feature/src/accepted.rs:11:        pub const ACCEPTED_FEATURES: &[Feature] = &[
compiler/rustc_feature/src/accepted.rs:13:                Feature {
compiler/rustc_feature/src/accepted.rs:15:                    name: sym::$feature,
compiler/rustc_feature/src/accepted.rs:26:declare_features! (
compiler/rustc_feature/src/accepted.rs:28:    // feature-group-start: for testing purposes
compiler/rustc_feature/src/accepted.rs:31:    /// A temporary feature gate used to enable parser extensions needed
compiler/rustc_feature/src/accepted.rs:36:    (accepted, test_accepted_feature, "1.0.0", None, None),
compiler/rustc_feature/src/accepted.rs:38:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/accepted.rs:42:    // feature-group-end: for testing purposes
compiler/rustc_feature/src/accepted.rs:46:    // feature-group-start: accepted features
compiler/rustc_feature/src/accepted.rs:49:    /// Allows `#[target_feature(...)]` on aarch64 platforms
compiler/rustc_feature/src/accepted.rs:50:    (accepted, aarch64_target_feature, "1.61.0", Some(44839), None),
compiler/rustc_feature/src/accepted.rs:57:    (accepted, adx_target_feature, "1.61.0", Some(44839), None),
compiler/rustc_feature/src/accepted.rs:85:    /// Allows `cfg(target_feature = "...")`.
compiler/rustc_feature/src/accepted.rs:86:    (accepted, cfg_target_feature, "1.27.0", Some(29717), None),
compiler/rustc_feature/src/accepted.rs:93:    /// Allows using the CMPXCHG16B target feature.
compiler/rustc_feature/src/accepted.rs:94:    (accepted, cmpxchg16b_target_feature, "1.69.0", Some(44839), None),
compiler/rustc_feature/src/accepted.rs:171:    (accepted, f16c_target_feature, "1.68.0", Some(44839), None),
compiler/rustc_feature/src/accepted.rs:243:    /// Allows using the MOVBE target feature.
compiler/rustc_feature/src/accepted.rs:244:    (accepted, movbe_target_feature, "1.70.0", Some(44839), None),
compiler/rustc_feature/src/accepted.rs:321:    /// Allows `#[target_feature(...)]`.
compiler/rustc_feature/src/accepted.rs:322:    (accepted, target_feature, "1.27.0", None, None),
compiler/rustc_feature/src/accepted.rs:368:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/accepted.rs:372:    // feature-group-end: accepted features
compiler/rustc_feature/src/removed.rs:1://! List of the removed feature gates.
compiler/rustc_feature/src/removed.rs:3:use super::{to_nonzero, Feature, State};
compiler/rustc_feature/src/removed.rs:6:macro_rules! declare_features {
compiler/rustc_feature/src/removed.rs:8:        $(#[doc = $doc:tt])* (removed, $feature:ident, $ver:expr, $issue:expr, None, $reason:expr),
compiler/rustc_feature/src/removed.rs:10:        /// Represents unstable features which have since been removed (it was once Active)
compiler/rustc_feature/src/removed.rs:11:        pub const REMOVED_FEATURES: &[Feature] = &[
compiler/rustc_feature/src/removed.rs:13:                Feature {
compiler/rustc_feature/src/removed.rs:15:                    name: sym::$feature,
compiler/rustc_feature/src/removed.rs:25:        $(#[doc = $doc:tt])* (stable_removed, $feature:ident, $ver:expr, $issue:expr, None),
compiler/rustc_feature/src/removed.rs:27:        /// Represents stable features which have since been removed (it was once Accepted)
compiler/rustc_feature/src/removed.rs:28:        pub const STABLE_REMOVED_FEATURES: &[Feature] = &[
compiler/rustc_feature/src/removed.rs:30:                Feature {
compiler/rustc_feature/src/removed.rs:32:                    name: sym::$feature,
compiler/rustc_feature/src/removed.rs:43:declare_features! (
compiler/rustc_feature/src/removed.rs:45:    // feature-group-start: removed features
compiler/rustc_feature/src/removed.rs:49:     Some("merged into `#![feature(slice_patterns)]`")),
compiler/rustc_feature/src/removed.rs:66:    /// Allows the definition of `const` functions with some advanced features.
compiler/rustc_feature/src/removed.rs:68:     Some("split into finer-grained feature gates")),
compiler/rustc_feature/src/removed.rs:71:     Some("removed in favor of `#![feature(adt_const_params)]` and `#![feature(generic_const_exprs)]`")),
compiler/rustc_feature/src/removed.rs:80:     Some("Removed in favor of `~const` bound in #![feature(const_trait_impl)]")),
compiler/rustc_feature/src/removed.rs:91:     Some("merged into `#![feature(rustdoc_internals)]`")),
compiler/rustc_feature/src/removed.rs:94:     Some("merged into `#![feature(rustdoc_internals)]`")),
compiler/rustc_feature/src/removed.rs:97:    /// and the feature to `doc_notable_trait`.
compiler/rustc_feature/src/removed.rs:104:     Some("removed in favor of `#![feature(type_alias_impl_trait)]`")),
compiler/rustc_feature/src/removed.rs:113:     Some("the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done")),
compiler/rustc_feature/src/removed.rs:136:     Some("subsumed by `#![feature(allocator_internals)]`")),
compiler/rustc_feature/src/removed.rs:146:    /// Allows features specific to OIBIT (now called auto traits).
compiler/rustc_feature/src/removed.rs:152:     Some("removed in favor of `#![feature(marker_trait_attr)]`")),
compiler/rustc_feature/src/removed.rs:159:     Some("subsumed by `#![feature(proc_macro_hygiene)]`")),
compiler/rustc_feature/src/removed.rs:161:     Some("subsumed by `#![feature(proc_macro_hygiene)]`")),
compiler/rustc_feature/src/removed.rs:163:     Some("subsumed by `#![feature(proc_macro_hygiene)]`")),
compiler/rustc_feature/src/removed.rs:165:     Some("subsumed by `#![feature(proc_macro_hygiene)]`")),
compiler/rustc_feature/src/removed.rs:188:    (removed, test_removed_feature, "1.0.0", None, None, None),
compiler/rustc_feature/src/removed.rs:201:    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.
compiler/rustc_feature/src/removed.rs:205:    // feature-group-end: removed features
compiler/rustc_feature/src/removed.rs:210:declare_features! (
config.example.toml:367:# schema of the file generated by the build metrics feature is unstable, and
config.example.toml:561:# allow using stable features, whereas the nightly and dev channels allow using
config.example.toml:562:# nightly features
library/alloc/Cargo.toml:13:compiler_builtins = { version = "0.1.40", features = ['rustc-dep-of-std'] }
library/alloc/Cargo.toml:16:rand = { version = "0.8.5", default-features = false, features = ["alloc"] }
library/alloc/Cargo.toml:33:[features]
library/alloc/tests/lib.rs:1:#![feature(allocator_api)]
library/alloc/tests/lib.rs:2:#![feature(alloc_layout_extra)]
library/alloc/tests/lib.rs:3:#![feature(assert_matches)]
library/alloc/tests/lib.rs:4:#![feature(btree_extract_if)]
library/alloc/tests/lib.rs:5:#![feature(cow_is_borrowed)]
library/alloc/tests/lib.rs:6:#![feature(const_cow_is_borrowed)]
library/alloc/tests/lib.rs:7:#![feature(const_heap)]
library/alloc/tests/lib.rs:8:#![feature(const_mut_refs)]
library/alloc/tests/lib.rs:9:#![feature(const_slice_from_raw_parts_mut)]
library/alloc/tests/lib.rs:10:#![feature(const_ptr_write)]
library/alloc/tests/lib.rs:11:#![feature(const_try)]
library/alloc/tests/lib.rs:12:#![feature(core_intrinsics)]
library/alloc/tests/lib.rs:13:#![feature(extract_if)]
library/alloc/tests/lib.rs:14:#![feature(exact_size_is_empty)]
library/alloc/tests/lib.rs:15:#![feature(linked_list_cursors)]
library/alloc/tests/lib.rs:16:#![feature(map_try_insert)]
library/alloc/tests/lib.rs:17:#![feature(new_uninit)]
library/alloc/tests/lib.rs:18:#![feature(pattern)]
library/alloc/tests/lib.rs:19:#![feature(trusted_len)]
library/alloc/tests/lib.rs:20:#![feature(try_reserve_kind)]
library/alloc/tests/lib.rs:21:#![feature(unboxed_closures)]
library/alloc/tests/lib.rs:22:#![feature(associated_type_bounds)]
library/alloc/tests/lib.rs:23:#![feature(binary_heap_into_iter_sorted)]
library/alloc/tests/lib.rs:24:#![feature(binary_heap_drain_sorted)]
library/alloc/tests/lib.rs:25:#![feature(slice_ptr_get)]
library/alloc/tests/lib.rs:26:#![feature(binary_heap_as_slice)]
library/alloc/tests/lib.rs:27:#![feature(inplace_iteration)]
library/alloc/tests/lib.rs:28:#![feature(iter_advance_by)]
library/alloc/tests/lib.rs:29:#![feature(iter_next_chunk)]
library/alloc/tests/lib.rs:30:#![feature(round_char_boundary)]
library/alloc/tests/lib.rs:31:#![feature(slice_group_by)]
library/alloc/tests/lib.rs:32:#![feature(slice_partition_dedup)]
library/alloc/tests/lib.rs:33:#![feature(string_remove_matches)]
library/alloc/tests/lib.rs:34:#![feature(const_btree_len)]
library/alloc/tests/lib.rs:35:#![feature(const_trait_impl)]
library/alloc/tests/lib.rs:36:#![feature(const_str_from_utf8)]
library/alloc/tests/lib.rs:37:#![feature(panic_update_hook)]
library/alloc/tests/lib.rs:38:#![feature(pointer_is_aligned)]
library/alloc/tests/lib.rs:39:#![feature(slice_flatten)]
library/alloc/tests/lib.rs:40:#![feature(thin_box)]
library/alloc/tests/lib.rs:41:#![feature(strict_provenance)]
library/alloc/tests/lib.rs:42:#![feature(drain_keep_rest)]
library/alloc/benches/lib.rs:4:#![feature(btree_extract_if)]
library/alloc/benches/lib.rs:5:#![feature(iter_next_chunk)]
library/alloc/benches/lib.rs:6:#![feature(repr_simd)]
library/alloc/benches/lib.rs:7:#![feature(slice_partition_dedup)]
library/alloc/benches/lib.rs:8:#![feature(strict_provenance)]
library/alloc/benches/lib.rs:9:#![feature(test)]
library/alloc/src/rc.rs:242:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:314:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:318:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/rc.rs:325:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:333:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:336:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/alloc/src/rc.rs:338:#[stable(feature = "rc_ref_unwind_safe", since = "1.58.0")]
library/alloc/src/rc.rs:341:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/alloc/src/rc.rs:344:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/alloc/src/rc.rs:389:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:455:    #[stable(feature = "arc_new_cyclic", since = "1.60.0")]
library/alloc/src/rc.rs:503:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:504:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:518:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:539:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:551:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:568:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:574:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:593:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/rc.rs:594:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:608:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:609:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:629:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/rc.rs:641:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:642:    //#[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:655:    #[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/rc.rs:665:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:674:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:681:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:697:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:698:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:699:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:716:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:717:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:741:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:742:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:755:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:756:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:777:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:784:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:804:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/rc.rs:805:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:822:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:823:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:848:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/rc.rs:861:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:862:    //#[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:880:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:906:    #[stable(feature = "rc_unique", since = "1.4.0")]
library/alloc/src/rc.rs:940:    #[stable(feature = "rc_into_inner", since = "1.70.0")]
library/alloc/src/rc.rs:952:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:953:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:970:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:985:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:997:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:1019:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:1020:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:1021:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:1040:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:1041:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:1056:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:1057:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:1070:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:1071:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:1106:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:1107:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:1120:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:1147:    /// #![feature(new_uninit)]
library/alloc/src/rc.rs:1148:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:1164:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/rc.rs:1216:    #[stable(feature = "rc_raw", since = "1.17.0")]
library/alloc/src/rc.rs:1247:    #[stable(feature = "rc_mutate_strong_count", since = "1.53.0")]
library/alloc/src/rc.rs:1281:    #[stable(feature = "rc_mutate_strong_count", since = "1.53.0")]
library/alloc/src/rc.rs:1302:    #[stable(feature = "rc_raw", since = "1.17.0")]
library/alloc/src/rc.rs:1325:    #[stable(feature = "weak_into_raw", since = "1.45.0")]
library/alloc/src/rc.rs:1358:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:1376:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:1399:    #[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:1423:    #[stable(feature = "rc_counts", since = "1.15.0")]
library/alloc/src/rc.rs:1441:    #[stable(feature = "rc_counts", since = "1.15.0")]
library/alloc/src/rc.rs:1459:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:1475:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:1500:    /// #![feature(allocator_api)]
library/alloc/src/rc.rs:1518:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:1555:    #[stable(feature = "rc_unique", since = "1.4.0")]
library/alloc/src/rc.rs:1578:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:1590:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:1604:    /// #![feature(get_mut_unchecked)]
library/alloc/src/rc.rs:1621:    #[unstable(feature = "get_mut_unchecked", issue = "63292")]
library/alloc/src/rc.rs:1629:    #[stable(feature = "ptr_eq", since = "1.17.0")]
library/alloc/src/rc.rs:1703:    #[stable(feature = "rc_unique", since = "1.4.0")]
library/alloc/src/rc.rs:1745:    /// #![feature(arc_unwrap_or_clone)]
library/alloc/src/rc.rs:1766:    #[unstable(feature = "arc_unwrap_or_clone", issue = "93610")]
library/alloc/src/rc.rs:1792:    #[stable(feature = "rc_downcast", since = "1.29.0")]
library/alloc/src/rc.rs:1813:    /// #![feature(downcast_unchecked)]
library/alloc/src/rc.rs:1833:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/alloc/src/rc.rs:2041:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2051:#[unstable(feature = "receiver_trait", issue = "none")]
library/alloc/src/rc.rs:2054:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2100:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2126:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2144:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2150:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2176:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2189:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2237:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2240:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2334:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2356:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2363:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2370:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2377:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:2385:#[stable(feature = "from_for_ptrs", since = "1.6.0")]
library/alloc/src/rc.rs:2406:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/rc.rs:2425:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/rc.rs:2444:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/rc.rs:2463:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/rc.rs:2482:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/rc.rs:2511:#[stable(feature = "shared_from_cow", since = "1.45.0")]
library/alloc/src/rc.rs:2538:#[stable(feature = "shared_from_str", since = "1.62.0")]
library/alloc/src/rc.rs:2557:#[stable(feature = "boxed_slice_try_from", since = "1.43.0")]
library/alloc/src/rc.rs:2571:#[stable(feature = "shared_from_iter", since = "1.37.0")]
library/alloc/src/rc.rs:2676:#[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:2679:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/rc.rs:2691:#[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:2693:#[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:2696:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/alloc/src/rc.rs:2699:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/alloc/src/rc.rs:2717:    #[stable(feature = "downgraded_weak", since = "1.10.0")]
library/alloc/src/rc.rs:2718:    #[rustc_const_unstable(feature = "const_weak_new", issue = "95091", reason = "recently added")]
library/alloc/src/rc.rs:2744:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:2808:    #[stable(feature = "weak_into_raw", since = "1.45.0")]
library/alloc/src/rc.rs:2841:    #[stable(feature = "rc_as_ptr", since = "1.45.0")]
library/alloc/src/rc.rs:2885:    #[stable(feature = "weak_into_raw", since = "1.45.0")]
library/alloc/src/rc.rs:2920:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:2974:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/rc.rs:3019:    #[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:3040:    #[stable(feature = "weak_counts", since = "1.41.0")]
library/alloc/src/rc.rs:3049:    #[stable(feature = "weak_counts", since = "1.41.0")]
library/alloc/src/rc.rs:3120:    #[stable(feature = "weak_ptr_eq", since = "1.39.0")]
library/alloc/src/rc.rs:3126:#[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:3166:#[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:3188:#[stable(feature = "rc_weak", since = "1.4.0")]
library/alloc/src/rc.rs:3195:#[stable(feature = "downgraded_weak", since = "1.10.0")]
library/alloc/src/rc.rs:3320:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/rc.rs:3327:#[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
library/alloc/src/rc.rs:3334:#[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/rc.rs:3372:/// #![feature(unique_rc_arc)]
library/alloc/src/rc.rs:3395:#[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/rc.rs:3410:    #[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/rc.rs:3429:    #[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/rc.rs:3446:    #[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/rc.rs:3458:#[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/rc.rs:3468:#[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/rc.rs:3478:#[unstable(feature = "unique_rc_arc", issue = "112566")]
library/alloc/src/lib.rs:61:// rustc itself never sets the feature, so this line has no affect there.
library/alloc/src/lib.rs:62:#![cfg(any(not(feature = "miri-test-libstd"), test, doctest))]
library/alloc/src/lib.rs:65:#![stable(feature = "alloc", since = "1.36.0")]
library/alloc/src/lib.rs:74:    any(not(feature = "miri-test-libstd"), test, doctest),
library/alloc/src/lib.rs:92:// Library features:
library/alloc/src/lib.rs:94:#![cfg_attr(not(no_global_oom_handling), feature(const_alloc_error))]
library/alloc/src/lib.rs:95:#![cfg_attr(not(no_global_oom_handling), feature(const_btree_len))]
library/alloc/src/lib.rs:96:#![cfg_attr(test, feature(is_sorted))]
library/alloc/src/lib.rs:97:#![cfg_attr(test, feature(new_uninit))]
library/alloc/src/lib.rs:98:#![feature(alloc_layout_extra)]
library/alloc/src/lib.rs:99:#![feature(allocator_api)]
library/alloc/src/lib.rs:100:#![feature(array_chunks)]
library/alloc/src/lib.rs:101:#![feature(array_into_iter_constructors)]
library/alloc/src/lib.rs:102:#![feature(array_methods)]
library/alloc/src/lib.rs:103:#![feature(array_windows)]
library/alloc/src/lib.rs:104:#![feature(ascii_char)]
library/alloc/src/lib.rs:105:#![feature(assert_matches)]
library/alloc/src/lib.rs:106:#![feature(async_iterator)]
library/alloc/src/lib.rs:107:#![feature(coerce_unsized)]
library/alloc/src/lib.rs:108:#![feature(const_align_of_val)]
library/alloc/src/lib.rs:109:#![feature(const_box)]
library/alloc/src/lib.rs:110:#![feature(const_cow_is_borrowed)]
library/alloc/src/lib.rs:111:#![feature(const_eval_select)]
library/alloc/src/lib.rs:112:#![feature(const_maybe_uninit_as_mut_ptr)]
library/alloc/src/lib.rs:113:#![feature(const_maybe_uninit_write)]
library/alloc/src/lib.rs:114:#![feature(const_maybe_uninit_zeroed)]
library/alloc/src/lib.rs:115:#![feature(const_pin)]
library/alloc/src/lib.rs:116:#![feature(const_refs_to_cell)]
library/alloc/src/lib.rs:117:#![feature(const_size_of_val)]
library/alloc/src/lib.rs:118:#![feature(const_waker)]
library/alloc/src/lib.rs:119:#![feature(core_intrinsics)]
library/alloc/src/lib.rs:120:#![feature(core_panic)]
library/alloc/src/lib.rs:121:#![feature(dispatch_from_dyn)]
library/alloc/src/lib.rs:122:#![feature(error_generic_member_access)]
library/alloc/src/lib.rs:123:#![feature(error_in_core)]
library/alloc/src/lib.rs:124:#![feature(exact_size_is_empty)]
library/alloc/src/lib.rs:125:#![feature(extend_one)]
library/alloc/src/lib.rs:126:#![feature(fmt_internals)]
library/alloc/src/lib.rs:127:#![feature(fn_traits)]
library/alloc/src/lib.rs:128:#![feature(hasher_prefixfree_extras)]
library/alloc/src/lib.rs:129:#![feature(inline_const)]
library/alloc/src/lib.rs:130:#![feature(inplace_iteration)]
library/alloc/src/lib.rs:131:#![feature(iter_advance_by)]
library/alloc/src/lib.rs:132:#![feature(iter_next_chunk)]
library/alloc/src/lib.rs:133:#![feature(iter_repeat_n)]
library/alloc/src/lib.rs:134:#![feature(layout_for_ptr)]
library/alloc/src/lib.rs:135:#![feature(maybe_uninit_slice)]
library/alloc/src/lib.rs:136:#![feature(maybe_uninit_uninit_array)]
library/alloc/src/lib.rs:137:#![feature(maybe_uninit_uninit_array_transpose)]
library/alloc/src/lib.rs:138:#![feature(pattern)]
library/alloc/src/lib.rs:139:#![feature(pointer_byte_offsets)]
library/alloc/src/lib.rs:140:#![feature(provide_any)]
library/alloc/src/lib.rs:141:#![feature(ptr_internals)]
library/alloc/src/lib.rs:142:#![feature(ptr_metadata)]
library/alloc/src/lib.rs:143:#![feature(ptr_sub_ptr)]
library/alloc/src/lib.rs:144:#![feature(receiver_trait)]
library/alloc/src/lib.rs:145:#![feature(saturating_int_impl)]
library/alloc/src/lib.rs:146:#![feature(set_ptr_value)]
library/alloc/src/lib.rs:147:#![feature(sized_type_properties)]
library/alloc/src/lib.rs:148:#![feature(slice_from_ptr_range)]
library/alloc/src/lib.rs:149:#![feature(slice_group_by)]
library/alloc/src/lib.rs:150:#![feature(slice_ptr_get)]
library/alloc/src/lib.rs:151:#![feature(slice_ptr_len)]
library/alloc/src/lib.rs:152:#![feature(slice_range)]
library/alloc/src/lib.rs:153:#![feature(std_internals)]
library/alloc/src/lib.rs:154:#![feature(str_internals)]
library/alloc/src/lib.rs:155:#![feature(strict_provenance)]
library/alloc/src/lib.rs:156:#![feature(trusted_len)]
library/alloc/src/lib.rs:157:#![feature(trusted_random_access)]
library/alloc/src/lib.rs:158:#![feature(try_trait_v2)]
library/alloc/src/lib.rs:159:#![feature(tuple_trait)]
library/alloc/src/lib.rs:160:#![feature(unchecked_math)]
library/alloc/src/lib.rs:161:#![feature(unicode_internals)]
library/alloc/src/lib.rs:162:#![feature(unsize)]
library/alloc/src/lib.rs:163:#![feature(utf8_chunks)]
library/alloc/src/lib.rs:166:// Language features:
library/alloc/src/lib.rs:168:#![cfg_attr(not(test), feature(generator_trait))]
library/alloc/src/lib.rs:169:#![cfg_attr(test, feature(panic_update_hook))]
library/alloc/src/lib.rs:170:#![cfg_attr(test, feature(test))]
library/alloc/src/lib.rs:171:#![feature(allocator_internals)]
library/alloc/src/lib.rs:172:#![feature(allow_internal_unstable)]
library/alloc/src/lib.rs:173:#![feature(associated_type_bounds)]
library/alloc/src/lib.rs:174:#![feature(c_unwind)]
library/alloc/src/lib.rs:175:#![feature(cfg_sanitize)]
library/alloc/src/lib.rs:176:#![feature(const_mut_refs)]
library/alloc/src/lib.rs:177:#![feature(const_precise_live_drops)]
library/alloc/src/lib.rs:178:#![feature(const_ptr_write)]
library/alloc/src/lib.rs:179:#![feature(const_trait_impl)]
library/alloc/src/lib.rs:180:#![feature(const_try)]
library/alloc/src/lib.rs:181:#![feature(dropck_eyepatch)]
library/alloc/src/lib.rs:182:#![feature(exclusive_range_pattern)]
library/alloc/src/lib.rs:183:#![feature(fundamental)]
library/alloc/src/lib.rs:184:#![feature(hashmap_internals)]
library/alloc/src/lib.rs:185:#![feature(lang_items)]
library/alloc/src/lib.rs:186:#![feature(min_specialization)]
library/alloc/src/lib.rs:187:#![feature(multiple_supertrait_upcastable)]
library/alloc/src/lib.rs:188:#![feature(negative_impls)]
library/alloc/src/lib.rs:189:#![feature(never_type)]
library/alloc/src/lib.rs:190:#![feature(pointer_is_aligned)]
library/alloc/src/lib.rs:191:#![feature(rustc_allow_const_fn_unstable)]
library/alloc/src/lib.rs:192:#![feature(rustc_attrs)]
library/alloc/src/lib.rs:193:#![feature(slice_internals)]
library/alloc/src/lib.rs:194:#![feature(staged_api)]
library/alloc/src/lib.rs:195:#![feature(stmt_expr_attributes)]
library/alloc/src/lib.rs:196:#![feature(unboxed_closures)]
library/alloc/src/lib.rs:197:#![feature(unsized_fn_params)]
library/alloc/src/lib.rs:198:#![feature(with_negative_coherence)]
library/alloc/src/lib.rs:201:// Rustdoc features:
library/alloc/src/lib.rs:202:#![feature(doc_cfg)]
library/alloc/src/lib.rs:203:#![feature(doc_cfg_hide)]
library/alloc/src/lib.rs:205:// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad
library/alloc/src/lib.rs:206:// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs
library/alloc/src/lib.rs:208:#![feature(intra_doc_pointers)]
library/alloc/src/lib.rs:259:#[unstable(feature = "liballoc_internals", issue = "none", reason = "implementation detail")]
library/alloc/src/str.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:25:#[stable(feature = "encode_utf16", since = "1.8.0")]
library/alloc/src/str.rs:27:#[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/alloc/src/str.rs:29:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/alloc/src/str.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:33:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:35:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:37:#[stable(feature = "str_escape", since = "1.34.0")]
library/alloc/src/str.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:42:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:46:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:48:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:50:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:52:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:54:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/alloc/src/str.rs:60:#[unstable(feature = "slice_concat_ext", issue = "27747")]
library/alloc/src/str.rs:70:#[unstable(feature = "slice_concat_ext", issue = "27747")]
library/alloc/src/str.rs:187:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:195:#[stable(feature = "string_borrow_mut", since = "1.36.0")]
library/alloc/src/str.rs:204:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:235:    #[stable(feature = "str_box_extras", since = "1.20.0")]
library/alloc/src/str.rs:269:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/str.rs:310:    #[stable(feature = "str_replacen", since = "1.16.0")]
library/alloc/src/str.rs:367:    #[stable(feature = "unicode_case_mapping", since = "1.2.0")]
library/alloc/src/str.rs:458:    #[stable(feature = "unicode_case_mapping", since = "1.2.0")]
library/alloc/src/str.rs:498:    #[stable(feature = "box_str", since = "1.4.0")]
library/alloc/src/str.rs:530:    #[stable(feature = "repeat_str", since = "1.16.0")]
library/alloc/src/str.rs:559:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/alloc/src/str.rs:591:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/alloc/src/str.rs:613:#[stable(feature = "str_box_extras", since = "1.20.0")]
library/alloc/src/slice.rs:10:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:36:#[unstable(feature = "slice_range", issue = "76393")]
library/alloc/src/slice.rs:38:#[unstable(feature = "array_chunks", issue = "74985")]
library/alloc/src/slice.rs:40:#[unstable(feature = "array_chunks", issue = "74985")]
library/alloc/src/slice.rs:42:#[unstable(feature = "array_windows", issue = "75027")]
library/alloc/src/slice.rs:44:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/alloc/src/slice.rs:46:#[stable(feature = "slice_get_slice", since = "1.28.0")]
library/alloc/src/slice.rs:48:#[stable(feature = "from_ref", since = "1.28.0")]
library/alloc/src/slice.rs:50:#[unstable(feature = "slice_from_ptr_range", issue = "89792")]
library/alloc/src/slice.rs:52:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:56:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/alloc/src/slice.rs:58:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:60:#[unstable(feature = "slice_group_by", issue = "80552")]
library/alloc/src/slice.rs:62:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:64:#[stable(feature = "rchunks", since = "1.31.0")]
library/alloc/src/slice.rs:66:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/alloc/src/slice.rs:68:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:70:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/alloc/src/slice.rs:205:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:261:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:303:    #[stable(feature = "slice_sort_by_key", since = "1.7.0")]
library/alloc/src/slice.rs:350:    #[stable(feature = "slice_sort_by_cached_key", since = "1.34.0")]
library/alloc/src/slice.rs:410:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:424:    /// #![feature(allocator_api)]
library/alloc/src/slice.rs:435:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/slice.rs:459:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:488:    #[stable(feature = "repeat_generic_slice", since = "1.40.0")]
library/alloc/src/slice.rs:556:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:575:    #[stable(feature = "rename_connect_to_join", since = "1.3.0")]
library/alloc/src/slice.rs:594:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:619:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/alloc/src/slice.rs:640:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/alloc/src/slice.rs:682:#[unstable(feature = "slice_concat_trait", issue = "27747")]
library/alloc/src/slice.rs:684:    #[unstable(feature = "slice_concat_trait", issue = "27747")]
library/alloc/src/slice.rs:689:    #[unstable(feature = "slice_concat_trait", issue = "27747")]
library/alloc/src/slice.rs:694:#[unstable(feature = "slice_concat_trait", issue = "27747")]
library/alloc/src/slice.rs:696:    #[unstable(feature = "slice_concat_trait", issue = "27747")]
library/alloc/src/slice.rs:701:    #[unstable(feature = "slice_concat_trait", issue = "27747")]
library/alloc/src/slice.rs:706:#[unstable(feature = "slice_concat_ext", issue = "27747")]
library/alloc/src/slice.rs:721:#[unstable(feature = "slice_concat_ext", issue = "27747")]
library/alloc/src/slice.rs:744:#[unstable(feature = "slice_concat_ext", issue = "27747")]
library/alloc/src/slice.rs:771:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:778:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/slice.rs:818:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/raw_vec.rs:1:#![unstable(feature = "raw_vec_internals", reason = "unstable const warnings", issue = "none")]
library/alloc/src/sync.rs:1:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:248:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:251:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/sync.rs:258:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:260:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:263:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/alloc/src/sync.rs:266:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/alloc/src/sync.rs:269:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/alloc/src/sync.rs:314:#[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:317:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/sync.rs:329:#[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:331:#[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:334:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/alloc/src/sync.rs:336:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/alloc/src/sync.rs:339:#[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:385:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:450:    #[stable(feature = "arc_new_cyclic", since = "1.60.0")]
library/alloc/src/sync.rs:510:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:511:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:526:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:547:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:560:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:575:    #[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/sync.rs:582:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:593:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:599:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:618:    /// #![feature(new_uninit, allocator_api)]
library/alloc/src/sync.rs:619:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:633:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:634:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:654:    /// #![feature(new_uninit, allocator_api)]
library/alloc/src/sync.rs:666:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:667:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:682:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:691:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:700:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:721:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:722:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:723:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:740:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:741:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:765:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:766:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:779:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:780:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:798:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:807:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:817:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:826:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:849:    /// #![feature(new_uninit, allocator_api)]
library/alloc/src/sync.rs:850:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:867:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:868:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:893:    /// #![feature(new_uninit, allocator_api)]
library/alloc/src/sync.rs:906:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:907:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:952:    #[stable(feature = "arc_unique", since = "1.4.0")]
library/alloc/src/sync.rs:1063:    #[stable(feature = "arc_into_inner", since = "1.70.0")]
library/alloc/src/sync.rs:1098:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:1099:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:1117:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:1132:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:1145:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:1168:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:1169:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:1170:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:1189:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:1204:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:1205:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:1218:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:1253:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:1254:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:1267:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:1295:    /// #![feature(new_uninit)]
library/alloc/src/sync.rs:1296:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:1312:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/sync.rs:1363:    #[stable(feature = "rc_raw", since = "1.17.0")]
library/alloc/src/sync.rs:1395:    #[stable(feature = "arc_mutate_strong_count", since = "1.51.0")]
library/alloc/src/sync.rs:1431:    #[stable(feature = "arc_mutate_strong_count", since = "1.51.0")]
library/alloc/src/sync.rs:1453:    #[stable(feature = "rc_raw", since = "1.17.0")]
library/alloc/src/sync.rs:1477:    #[stable(feature = "rc_as_ptr", since = "1.45.0")]
library/alloc/src/sync.rs:1511:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:1530:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:1555:    #[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:1615:    #[stable(feature = "arc_counts", since = "1.15.0")]
library/alloc/src/sync.rs:1645:    #[stable(feature = "arc_counts", since = "1.15.0")]
library/alloc/src/sync.rs:1663:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:1681:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:1707:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:1727:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:1775:    #[stable(feature = "ptr_eq", since = "1.17.0")]
library/alloc/src/sync.rs:1989:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:2043:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:2053:#[unstable(feature = "receiver_trait", issue = "none")]
library/alloc/src/sync.rs:2109:    #[stable(feature = "arc_unique", since = "1.4.0")]
library/alloc/src/sync.rs:2172:    /// #![feature(arc_unwrap_or_clone)]
library/alloc/src/sync.rs:2193:    #[unstable(feature = "arc_unwrap_or_clone", issue = "93610")]
library/alloc/src/sync.rs:2225:    #[stable(feature = "arc_unique", since = "1.4.0")]
library/alloc/src/sync.rs:2257:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:2269:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:2283:    /// #![feature(get_mut_unchecked)]
library/alloc/src/sync.rs:2300:    #[unstable(feature = "get_mut_unchecked", issue = "63292")]
library/alloc/src/sync.rs:2336:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:2428:    #[stable(feature = "rc_downcast", since = "1.29.0")]
library/alloc/src/sync.rs:2452:    /// #![feature(downcast_unchecked)]
library/alloc/src/sync.rs:2472:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/alloc/src/sync.rs:2501:    #[stable(feature = "downgraded_weak", since = "1.10.0")]
library/alloc/src/sync.rs:2502:    #[rustc_const_unstable(feature = "const_weak_new", issue = "95091", reason = "recently added")]
library/alloc/src/sync.rs:2522:    /// #![feature(allocator_api)]
library/alloc/src/sync.rs:2531:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:2590:    #[stable(feature = "weak_into_raw", since = "1.45.0")]
library/alloc/src/sync.rs:2623:    #[stable(feature = "weak_into_raw", since = "1.45.0")]
library/alloc/src/sync.rs:2667:    #[stable(feature = "weak_into_raw", since = "1.45.0")]
library/alloc/src/sync.rs:2717:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/sync.rs:2764:    #[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:2800:    #[stable(feature = "weak_counts", since = "1.41.0")]
library/alloc/src/sync.rs:2817:    #[stable(feature = "weak_counts", since = "1.41.0")]
library/alloc/src/sync.rs:2897:    #[stable(feature = "weak_ptr_eq", since = "1.39.0")]
library/alloc/src/sync.rs:2903:#[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:2938:#[stable(feature = "downgraded_weak", since = "1.10.0")]
library/alloc/src/sync.rs:2959:#[stable(feature = "arc_weak", since = "1.4.0")]
library/alloc/src/sync.rs:3005:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3011:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3030:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3043:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3089:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3177:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3197:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3200:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3207:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3214:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3222:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3239:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3247:#[stable(feature = "from_for_ptrs", since = "1.6.0")]
library/alloc/src/sync.rs:3269:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/sync.rs:3288:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/sync.rs:3307:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/sync.rs:3326:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/sync.rs:3345:#[stable(feature = "shared_from_slice", since = "1.21.0")]
library/alloc/src/sync.rs:3374:#[stable(feature = "shared_from_cow", since = "1.45.0")]
library/alloc/src/sync.rs:3401:#[stable(feature = "shared_from_str", since = "1.62.0")]
library/alloc/src/sync.rs:3420:#[stable(feature = "boxed_slice_try_from", since = "1.43.0")]
library/alloc/src/sync.rs:3435:#[stable(feature = "shared_from_iter", since = "1.37.0")]
library/alloc/src/sync.rs:3519:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/sync.rs:3526:#[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
library/alloc/src/sync.rs:3533:#[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/sync.rs:3558:#[stable(feature = "arc_error", since = "1.52.0")]
library/alloc/src/boxed.rs:147:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:181:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed.rs:191:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:197:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/boxed.rs:212:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:225:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:239:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:255:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:266:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:280:    #[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/boxed.rs:295:    /// #![feature(allocator_api)]
library/alloc/src/boxed.rs:300:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:312:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:326:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:327:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:342:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:352:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:353:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:368:    /// #![feature(allocator_api)]
library/alloc/src/boxed.rs:375:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:397:    /// #![feature(allocator_api)]
library/alloc/src/boxed.rs:404:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:422:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:437:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:440:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:460:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:476:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:477:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:500:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:511:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:513:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:538:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:550:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:551:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:573:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:586:    #[unstable(feature = "box_into_boxed_slice", issue = "71582")]
library/alloc/src/boxed.rs:597:    /// #![feature(box_into_inner)]
library/alloc/src/boxed.rs:603:    #[unstable(feature = "box_into_inner", issue = "80437")]
library/alloc/src/boxed.rs:616:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:632:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:647:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:657:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:669:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:683:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:707:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:717:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:739:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:757:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:758:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:773:    /// #![feature(allocator_api, new_uninit)]
library/alloc/src/boxed.rs:785:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:786:    // #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:809:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:822:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:839:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:856:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:882:    /// #![feature(new_uninit)]
library/alloc/src/boxed.rs:897:    #[unstable(feature = "new_uninit", issue = "63291")]
library/alloc/src/boxed.rs:947:    #[stable(feature = "box_raw", since = "1.4.0")]
library/alloc/src/boxed.rs:976:    /// #![feature(allocator_api)]
library/alloc/src/boxed.rs:986:    /// #![feature(allocator_api, slice_ptr_get)]
library/alloc/src/boxed.rs:1003:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:1004:    #[rustc_const_unstable(feature = "const_box", issue = "92521")]
library/alloc/src/boxed.rs:1049:    #[stable(feature = "box_raw", since = "1.4.0")]
library/alloc/src/boxed.rs:1075:    /// #![feature(allocator_api)]
library/alloc/src/boxed.rs:1086:    /// #![feature(allocator_api)]
library/alloc/src/boxed.rs:1101:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:1109:        feature = "ptr_internals",
library/alloc/src/boxed.rs:1130:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/boxed.rs:1131:    #[rustc_const_unstable(feature = "const_box", issue = "92521")]
library/alloc/src/boxed.rs:1172:    #[stable(feature = "box_leak", since = "1.26.0")]
library/alloc/src/boxed.rs:1211:    #[stable(feature = "box_into_pin", since = "1.63.0")]
library/alloc/src/boxed.rs:1212:    #[rustc_const_unstable(feature = "const_box", issue = "92521")]
library/alloc/src/boxed.rs:1224:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1242:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1252:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1262:#[stable(feature = "default_box_extra", since = "1.17.0")]
library/alloc/src/boxed.rs:1276:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1326:#[stable(feature = "box_slice_clone", since = "1.3.0")]
library/alloc/src/boxed.rs:1335:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1346:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1369:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1376:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1379:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1386:#[stable(feature = "indirect_hasher_impl", since = "1.22.0")]
library/alloc/src/boxed.rs:1439:#[stable(feature = "from_for_ptrs", since = "1.6.0")]
library/alloc/src/boxed.rs:1459:#[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/boxed.rs:1508:#[stable(feature = "box_from_slice", since = "1.17.0")]
library/alloc/src/boxed.rs:1530:#[stable(feature = "box_from_cow", since = "1.45.0")]
library/alloc/src/boxed.rs:1548:#[stable(feature = "box_from_slice", since = "1.17.0")]
library/alloc/src/boxed.rs:1568:#[stable(feature = "box_from_cow", since = "1.45.0")]
library/alloc/src/boxed.rs:1602:#[stable(feature = "boxed_str_conv", since = "1.19.0")]
library/alloc/src/boxed.rs:1628:#[stable(feature = "box_from_array", since = "1.45.0")]
library/alloc/src/boxed.rs:1661:#[stable(feature = "boxed_slice_try_from", since = "1.43.0")]
library/alloc/src/boxed.rs:1684:#[stable(feature = "boxed_array_try_from_vec", since = "1.66.0")]
library/alloc/src/boxed.rs:1735:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1747:    /// #![feature(downcast_unchecked)]
library/alloc/src/boxed.rs:1765:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/alloc/src/boxed.rs:1794:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1806:    /// #![feature(downcast_unchecked)]
library/alloc/src/boxed.rs:1824:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/alloc/src/boxed.rs:1853:    #[stable(feature = "box_send_sync_any_downcast", since = "1.51.0")]
library/alloc/src/boxed.rs:1865:    /// #![feature(downcast_unchecked)]
library/alloc/src/boxed.rs:1883:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/alloc/src/boxed.rs:1894:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1901:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1908:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1918:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1927:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1934:#[unstable(feature = "receiver_trait", issue = "none")]
library/alloc/src/boxed.rs:1937:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1973:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1980:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1989:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:1999:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/boxed.rs:2002:#[stable(feature = "boxed_closure_impls", since = "1.35.0")]
library/alloc/src/boxed.rs:2011:#[stable(feature = "boxed_closure_impls", since = "1.35.0")]
library/alloc/src/boxed.rs:2018:#[stable(feature = "boxed_closure_impls", since = "1.35.0")]
library/alloc/src/boxed.rs:2025:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/alloc/src/boxed.rs:2028:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/alloc/src/boxed.rs:2032:#[stable(feature = "boxed_slice_from_iter", since = "1.32.0")]
library/alloc/src/boxed.rs:2040:#[stable(feature = "box_slice_clone", since = "1.3.0")]
library/alloc/src/boxed.rs:2056:#[stable(feature = "box_borrow", since = "1.1.0")]
library/alloc/src/boxed.rs:2063:#[stable(feature = "box_borrow", since = "1.1.0")]
library/alloc/src/boxed.rs:2070:#[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
library/alloc/src/boxed.rs:2077:#[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
library/alloc/src/boxed.rs:2106:#[stable(feature = "pin", since = "1.33.0")]
library/alloc/src/boxed.rs:2109:#[unstable(feature = "generator_trait", issue = "43122")]
library/alloc/src/boxed.rs:2122:#[unstable(feature = "generator_trait", issue = "43122")]
library/alloc/src/boxed.rs:2135:#[stable(feature = "futures_api", since = "1.36.0")]
library/alloc/src/boxed.rs:2147:#[unstable(feature = "async_iterator", issue = "79024")]
library/alloc/src/boxed.rs:2162:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/alloc/src/boxed.rs:2179:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/alloc/src/boxed.rs:2193:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/alloc/src/boxed.rs:2206:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:2239:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:2278:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:2322:#[stable(feature = "string_box_error", since = "1.6.0")]
library/alloc/src/boxed.rs:2344:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/boxed.rs:2368:#[stable(feature = "string_box_error", since = "1.6.0")]
library/alloc/src/boxed.rs:2390:#[stable(feature = "cow_box_error", since = "1.22.0")]
library/alloc/src/boxed.rs:2412:#[stable(feature = "cow_box_error", since = "1.22.0")]
library/alloc/src/boxed.rs:2432:#[stable(feature = "box_error", since = "1.8.0")]
library/alloc/src/boxed/thin.rs:22:/// #![feature(thin_box)]
library/alloc/src/boxed/thin.rs:33:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:42:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:46:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:49:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:57:    /// #![feature(thin_box)]
library/alloc/src/boxed/thin.rs:72:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:80:    /// #![feature(thin_box)]
library/alloc/src/boxed/thin.rs:98:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:105:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:112:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:124:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:134:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:145:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/boxed/thin.rs:297:#[unstable(feature = "thin_box", issue = "92791")]
library/alloc/src/fmt.rs:552:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:554:#[stable(feature = "fmt_flags_align", since = "1.28.0")]
library/alloc/src/fmt.rs:556:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:558:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:560:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:562:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:564:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:566:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:568:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:570:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/fmt.rs:604:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/task.rs:1:#![stable(feature = "wake_trait", since = "1.51.0")]
library/alloc/src/task.rs:76:#[stable(feature = "wake_trait", since = "1.51.0")]
library/alloc/src/task.rs:79:    #[stable(feature = "wake_trait", since = "1.51.0")]
library/alloc/src/task.rs:89:    #[stable(feature = "wake_trait", since = "1.51.0")]
library/alloc/src/task.rs:95:#[stable(feature = "wake_trait", since = "1.51.0")]
library/alloc/src/task.rs:107:#[stable(feature = "wake_trait", since = "1.51.0")]
library/alloc/src/borrow.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:20:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:37:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:40:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:56:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:75:    #[stable(feature = "toowned_clone_into", since = "1.63.0")]
library/alloc/src/borrow.rs:81:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:177:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:184:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:185:    Borrowed(#[stable(feature = "rust1", since = "1.0.0")] &'a B),
library/alloc/src/borrow.rs:188:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:189:    Owned(#[stable(feature = "rust1", since = "1.0.0")] <B as ToOwned>::Owned),
library/alloc/src/borrow.rs:192:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:218:    /// #![feature(cow_is_borrowed)]
library/alloc/src/borrow.rs:227:    #[unstable(feature = "cow_is_borrowed", issue = "65143")]
library/alloc/src/borrow.rs:228:    #[rustc_const_unstable(feature = "const_cow_is_borrowed", issue = "65143")]
library/alloc/src/borrow.rs:241:    /// #![feature(cow_is_borrowed)]
library/alloc/src/borrow.rs:250:    #[unstable(feature = "cow_is_borrowed", issue = "65143")]
library/alloc/src/borrow.rs:251:    #[rustc_const_unstable(feature = "const_cow_is_borrowed", issue = "65143")]
library/alloc/src/borrow.rs:273:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:321:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:330:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:345:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:348:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:359:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:371:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:382:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:395:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:408:#[stable(feature = "default", since = "1.11.0")]
library/alloc/src/borrow.rs:419:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:430:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/borrow.rs:438:#[stable(feature = "cow_add", since = "1.14.0")]
library/alloc/src/borrow.rs:450:#[stable(feature = "cow_add", since = "1.14.0")]
library/alloc/src/borrow.rs:462:#[stable(feature = "cow_add", since = "1.14.0")]
library/alloc/src/borrow.rs:479:#[stable(feature = "cow_add", since = "1.14.0")]
library/alloc/src/alloc.rs:3:#![stable(feature = "alloc_module", since = "1.28.0")]
library/alloc/src/alloc.rs:11:#[stable(feature = "alloc_module", since = "1.28.0")]
library/alloc/src/alloc.rs:50:#[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/alloc.rs:89:#[stable(feature = "global_alloc", since = "1.28.0")]
library/alloc/src/alloc.rs:114:#[stable(feature = "global_alloc", since = "1.28.0")]
library/alloc/src/alloc.rs:132:#[stable(feature = "global_alloc", since = "1.28.0")]
library/alloc/src/alloc.rs:166:#[stable(feature = "global_alloc", since = "1.28.0")]
library/alloc/src/alloc.rs:236:#[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/alloc.rs:358:#[stable(feature = "global_alloc", since = "1.28.0")]
library/alloc/src/alloc.rs:359:#[rustc_const_unstable(feature = "const_alloc_error", issue = "92523")]
library/alloc/src/alloc.rs:383:#[unstable(feature = "alloc_internals", issue = "none")]
library/alloc/src/vec/cow.rs:5:#[stable(feature = "cow_from_vec", since = "1.8.0")]
library/alloc/src/vec/cow.rs:18:#[stable(feature = "cow_from_vec", since = "1.8.0")]
library/alloc/src/vec/cow.rs:31:#[stable(feature = "cow_from_vec_ref", since = "1.28.0")]
library/alloc/src/vec/cow.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/extract_if.rs:15:/// #![feature(extract_if)]
library/alloc/src/vec/extract_if.rs:20:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/vec/extract_if.rs:27:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/vec/extract_if.rs:47:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/extract_if.rs:54:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/vec/extract_if.rs:90:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/vec/into_iter.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:35:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/vec/into_iter.rs:49:#[stable(feature = "vec_intoiter_debug", since = "1.13.0")]
library/alloc/src/vec/into_iter.rs:68:    #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
library/alloc/src/vec/into_iter.rs:86:    #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
library/alloc/src/vec/into_iter.rs:92:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/into_iter.rs:171:#[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
library/alloc/src/vec/into_iter.rs:178:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:180:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:183:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:294:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:332:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:339:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/vec/into_iter.rs:342:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/vec/into_iter.rs:345:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/vec/into_iter.rs:364:#[unstable(issue = "none", feature = "std_internals")]
library/alloc/src/vec/into_iter.rs:370:#[unstable(issue = "none", feature = "std_internals")]
library/alloc/src/vec/into_iter.rs:374:#[unstable(issue = "none", feature = "std_internals")]
library/alloc/src/vec/into_iter.rs:385:#[stable(feature = "vec_into_iter_clone", since = "1.8.0")]
library/alloc/src/vec/into_iter.rs:397:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/into_iter.rs:424:#[unstable(issue = "none", feature = "inplace_iteration")]
library/alloc/src/vec/into_iter.rs:428:#[unstable(issue = "none", feature = "inplace_iteration")]
library/alloc/src/vec/splice.rs:20:#[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/splice.rs:24:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + 'a = Global,
library/alloc/src/vec/splice.rs:30:#[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/splice.rs:43:#[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/splice.rs:50:#[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/splice.rs:53:#[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/mod.rs:54:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:74:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/vec/mod.rs:80:#[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/mod.rs:86:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/mod.rs:96:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:393:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:396:pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
library/alloc/src/vec/mod.rs:417:    #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
library/alloc/src/vec/mod.rs:418:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:476:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:584:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:598:    /// #![feature(allocator_api)]
library/alloc/src/vec/mod.rs:606:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/mod.rs:639:    /// #![feature(allocator_api)]
library/alloc/src/vec/mod.rs:668:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/mod.rs:721:    /// #![feature(allocator_api)]
library/alloc/src/vec/mod.rs:759:    /// #![feature(allocator_api)]
library/alloc/src/vec/mod.rs:782:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/mod.rs:805:    /// #![feature(vec_into_raw_parts)]
library/alloc/src/vec/mod.rs:819:    #[unstable(feature = "vec_into_raw_parts", reason = "new API", issue = "65816")]
library/alloc/src/vec/mod.rs:842:    /// #![feature(allocator_api, vec_into_raw_parts)]
library/alloc/src/vec/mod.rs:862:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/mod.rs:863:    // #[unstable(feature = "vec_into_raw_parts", reason = "new API", issue = "65816")]
library/alloc/src/vec/mod.rs:884:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:907:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:937:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:974:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/vec/mod.rs:1017:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/vec/mod.rs:1037:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1066:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/alloc/src/vec/mod.rs:1099:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1152:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1187:    #[stable(feature = "vec_as_slice", since = "1.7.0")]
library/alloc/src/vec/mod.rs:1204:    #[stable(feature = "vec_as_slice", since = "1.7.0")]
library/alloc/src/vec/mod.rs:1235:    #[stable(feature = "vec_as_ptr", since = "1.37.0")]
library/alloc/src/vec/mod.rs:1268:    #[stable(feature = "vec_as_ptr", since = "1.37.0")]
library/alloc/src/vec/mod.rs:1277:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/mod.rs:1362:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1394:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1435:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1495:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1551:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1577:    #[stable(feature = "vec_retain_mut", since = "1.61.0")]
library/alloc/src/vec/mod.rs:1685:    #[stable(feature = "dedup_by", since = "1.16.0")]
library/alloc/src/vec/mod.rs:1713:    #[stable(feature = "dedup_by", since = "1.16.0")]
library/alloc/src/vec/mod.rs:1824:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1853:    /// #![feature(vec_push_within_capacity)]
library/alloc/src/vec/mod.rs:1870:    #[unstable(feature = "vec_push_within_capacity", issue = "100486")]
library/alloc/src/vec/mod.rs:1899:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:1928:    #[stable(feature = "append", since = "1.4.0")]
library/alloc/src/vec/mod.rs:1977:    #[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/mod.rs:2023:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2049:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2065:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2091:    #[stable(feature = "split_off", since = "1.4.0")]
library/alloc/src/vec/mod.rs:2154:    #[stable(feature = "vec_resize_with", since = "1.33.0")]
library/alloc/src/vec/mod.rs:2190:    #[stable(feature = "vec_leak", since = "1.47.0")]
library/alloc/src/vec/mod.rs:2228:    #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
library/alloc/src/vec/mod.rs:2269:    /// #![feature(vec_split_at_spare)]
library/alloc/src/vec/mod.rs:2293:    #[unstable(feature = "vec_split_at_spare", issue = "81944")]
library/alloc/src/vec/mod.rs:2354:    #[stable(feature = "vec_resize", since = "1.5.0")]
library/alloc/src/vec/mod.rs:2385:    #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
library/alloc/src/vec/mod.rs:2412:    #[stable(feature = "vec_extend_from_within", since = "1.53.0")]
library/alloc/src/vec/mod.rs:2442:    /// #![feature(slice_flatten)]
library/alloc/src/vec/mod.rs:2450:    #[unstable(feature = "slice_flatten", issue = "95629")]
library/alloc/src/vec/mod.rs:2520:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2533:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2540:#[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/mod.rs:2604:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2614:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2623:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2657:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2665:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2679:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2692:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2700:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2745:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2755:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2766:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2881:    #[stable(feature = "vec_splice", since = "1.21.0")]
library/alloc/src/vec/mod.rs:2931:    /// #![feature(extract_if)]
library/alloc/src/vec/mod.rs:2940:    #[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/vec/mod.rs:2963:#[stable(feature = "extend_ref", since = "1.2.0")]
library/alloc/src/vec/mod.rs:2981:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2994:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:2998:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3006:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3019:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3029:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3036:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3043:#[stable(feature = "vec_as_mut", since = "1.5.0")]
library/alloc/src/vec/mod.rs:3050:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3057:#[stable(feature = "vec_as_mut", since = "1.5.0")]
library/alloc/src/vec/mod.rs:3065:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3085:#[stable(feature = "vec_from_mut", since = "1.19.0")]
library/alloc/src/vec/mod.rs:3105:#[stable(feature = "vec_from_array", since = "1.44.0")]
library/alloc/src/vec/mod.rs:3125:#[stable(feature = "vec_from_cow_slice", since = "1.14.0")]
library/alloc/src/vec/mod.rs:3151:#[stable(feature = "vec_from_box", since = "1.18.0")]
library/alloc/src/vec/mod.rs:3170:#[stable(feature = "box_from_vec", since = "1.20.0")]
library/alloc/src/vec/mod.rs:3196:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/vec/mod.rs:3210:#[stable(feature = "array_try_from_vec", since = "1.48.0")]
library/alloc/src/vec/drain.rs:21:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:25:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + 'a = Global,
library/alloc/src/vec/drain.rs:36:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/vec/drain.rs:56:    #[stable(feature = "vec_drain_as_slice", since = "1.46.0")]
library/alloc/src/vec/drain.rs:62:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/vec/drain.rs:74:    /// #![feature(drain_keep_rest)]
library/alloc/src/vec/drain.rs:88:    #[unstable(feature = "drain_keep_rest", issue = "101122")]
library/alloc/src/vec/drain.rs:139:#[stable(feature = "vec_drain_as_slice", since = "1.46.0")]
library/alloc/src/vec/drain.rs:146:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:148:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:151:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:165:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:173:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:242:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/vec/drain.rs:249:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/vec/drain.rs:252:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/vec/partial_eq.rs:23:__impl_slice_eq1! { [A1: Allocator, A2: Allocator] Vec<T, A1>, Vec<U, A2>, #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:24:__impl_slice_eq1! { [A: Allocator] Vec<T, A>, &[U], #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:25:__impl_slice_eq1! { [A: Allocator] Vec<T, A>, &mut [U], #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:26:__impl_slice_eq1! { [A: Allocator] &[T], Vec<U, A>, #[stable(feature = "partialeq_vec_for_ref_slice", since = "1.46.0")] }
library/alloc/src/vec/partial_eq.rs:27:__impl_slice_eq1! { [A: Allocator] &mut [T], Vec<U, A>, #[stable(feature = "partialeq_vec_for_ref_slice", since = "1.46.0")] }
library/alloc/src/vec/partial_eq.rs:28:__impl_slice_eq1! { [A: Allocator] Vec<T, A>, [U], #[stable(feature = "partialeq_vec_for_slice", since = "1.48.0")]  }
library/alloc/src/vec/partial_eq.rs:29:__impl_slice_eq1! { [A: Allocator] [T], Vec<U, A>, #[stable(feature = "partialeq_vec_for_slice", since = "1.48.0")]  }
library/alloc/src/vec/partial_eq.rs:31:__impl_slice_eq1! { [A: Allocator] Cow<'_, [T]>, Vec<U, A> where T: Clone, #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:33:__impl_slice_eq1! { [] Cow<'_, [T]>, &[U] where T: Clone, #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:35:__impl_slice_eq1! { [] Cow<'_, [T]>, &mut [U] where T: Clone, #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:36:__impl_slice_eq1! { [A: Allocator, const N: usize] Vec<T, A>, [U; N], #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/vec/partial_eq.rs:37:__impl_slice_eq1! { [A: Allocator, const N: usize] Vec<T, A>, &[U; N], #[stable(feature = "rust1", since = "1.0.0")] }
library/alloc/src/ffi/c_str.rs:111:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/alloc/src/ffi/c_str.rs:135:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/alloc/src/ffi/c_str.rs:160:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/alloc/src/ffi/c_str.rs:166:#[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:185:    #[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:211:    #[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:226:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/alloc/src/ffi/c_str.rs:260:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:339:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:396:    #[stable(feature = "cstr_memory", since = "1.4.0")]
library/alloc/src/ffi/c_str.rs:449:    #[stable(feature = "cstr_memory", since = "1.4.0")]
library/alloc/src/ffi/c_str.rs:472:    #[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:496:    #[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:517:    #[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:540:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:560:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:579:    #[stable(feature = "as_c_str", since = "1.20.0")]
library/alloc/src/ffi/c_str.rs:597:    #[stable(feature = "into_boxed_c_str", since = "1.20.0")]
library/alloc/src/ffi/c_str.rs:631:    #[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:674:    #[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:698:#[stable(feature = "cstring_drop", since = "1.13.0")]
library/alloc/src/ffi/c_str.rs:708:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:718:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:725:#[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:736:#[stable(feature = "cstr_default", since = "1.10.0")]
library/alloc/src/ffi/c_str.rs:745:#[stable(feature = "cstr_borrow", since = "1.3.0")]
library/alloc/src/ffi/c_str.rs:753:#[stable(feature = "cstring_from_cow_cstr", since = "1.28.0")]
library/alloc/src/ffi/c_str.rs:764:#[stable(feature = "box_from_c_str", since = "1.17.0")]
library/alloc/src/ffi/c_str.rs:774:#[stable(feature = "box_from_cow", since = "1.45.0")]
library/alloc/src/ffi/c_str.rs:787:#[stable(feature = "c_string_from_box", since = "1.18.0")]
library/alloc/src/ffi/c_str.rs:797:#[stable(feature = "cstring_from_vec_of_nonzerou8", since = "1.43.0")]
library/alloc/src/ffi/c_str.rs:820:#[stable(feature = "more_box_slice_clone", since = "1.29.0")]
library/alloc/src/ffi/c_str.rs:828:#[stable(feature = "box_from_c_string", since = "1.20.0")]
library/alloc/src/ffi/c_str.rs:837:#[stable(feature = "cow_from_cstr", since = "1.28.0")]
library/alloc/src/ffi/c_str.rs:846:#[stable(feature = "cow_from_cstr", since = "1.28.0")]
library/alloc/src/ffi/c_str.rs:855:#[stable(feature = "cow_from_cstr", since = "1.28.0")]
library/alloc/src/ffi/c_str.rs:865:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/alloc/src/ffi/c_str.rs:877:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/alloc/src/ffi/c_str.rs:888:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/alloc/src/ffi/c_str.rs:899:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/alloc/src/ffi/c_str.rs:911:#[stable(feature = "default_box_extra", since = "1.17.0")]
library/alloc/src/ffi/c_str.rs:935:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:952:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:958:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:965:#[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:983:    #[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:990:    #[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:1002:#[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:1010:#[stable(feature = "cstr_borrow", since = "1.3.0")]
library/alloc/src/ffi/c_str.rs:1025:#[stable(feature = "cstring_asref", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:1032:#[stable(feature = "cstring_asref", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:1042:#[stable(feature = "cstring_asref", since = "1.7.0")]
library/alloc/src/ffi/c_str.rs:1095:    #[stable(feature = "cstr_to_str", since = "1.4.0")]
library/alloc/src/ffi/c_str.rs:1113:    #[stable(feature = "into_boxed_c_str", since = "1.20.0")]
library/alloc/src/ffi/c_str.rs:1119:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/ffi/c_str.rs:1127:#[stable(feature = "cstring_from_vec_with_nul", since = "1.58.0")]
library/alloc/src/ffi/c_str.rs:1130:#[stable(feature = "cstring_into", since = "1.7.0")]
library/alloc/src/ffi/mod.rs:81:#![stable(feature = "alloc_ffi", since = "1.64.0")]
library/alloc/src/ffi/mod.rs:83:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/alloc/src/ffi/mod.rs:85:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/alloc/src/string.rs:43:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:363:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:402:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:426:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:450:    #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
library/alloc/src/string.rs:451:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:496:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:569:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:628:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:679:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:721:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:746:    /// #![feature(vec_into_raw_parts)]
library/alloc/src/string.rs:755:    #[unstable(feature = "vec_into_raw_parts", reason = "new API", issue = "65816")]
library/alloc/src/string.rs:809:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:844:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:865:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:883:    #[stable(feature = "string_as_str", since = "1.7.0")]
library/alloc/src/string.rs:904:    #[stable(feature = "string_as_str", since = "1.7.0")]
library/alloc/src/string.rs:924:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:939:    /// #![feature(string_extend_from_within)]
library/alloc/src/string.rs:952:    #[unstable(feature = "string_extend_from_within", issue = "103806")]
library/alloc/src/string.rs:978:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1025:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1075:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1110:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/string.rs:1151:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/string.rs:1173:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1200:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/alloc/src/string.rs:1222:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1247:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1276:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1302:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1334:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1355:    /// #![feature(string_remove_matches)]
library/alloc/src/string.rs:1365:    /// #![feature(string_remove_matches)]
library/alloc/src/string.rs:1371:    #[unstable(feature = "string_remove_matches", reason = "new API", issue = "72826")]
library/alloc/src/string.rs:1451:    #[stable(feature = "string_retain", since = "1.26.0")]
library/alloc/src/string.rs:1530:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1577:    #[stable(feature = "insert_str", since = "1.16.0")]
library/alloc/src/string.rs:1612:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1635:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1655:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1685:    #[stable(feature = "string_split_off", since = "1.16.0")]
library/alloc/src/string.rs:1712:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1752:    #[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:1798:    #[stable(feature = "splice", since = "1.27.0")]
library/alloc/src/string.rs:1845:    #[stable(feature = "box_str", since = "1.4.0")]
library/alloc/src/string.rs:1876:    #[stable(feature = "string_leak", since = "1.72.0")]
library/alloc/src/string.rs:1900:    #[stable(feature = "from_utf8_error_as_bytes", since = "1.26.0")]
library/alloc/src/string.rs:1924:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1953:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1959:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1966:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1973:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1981:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:1990:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2002:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2012:#[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
library/alloc/src/string.rs:2022:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2032:#[stable(feature = "extend_string", since = "1.4.0")]
library/alloc/src/string.rs:2051:#[stable(feature = "box_str2", since = "1.45.0")]
library/alloc/src/string.rs:2061:#[stable(feature = "herd_cows", since = "1.19.0")]
library/alloc/src/string.rs:2081:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2102:#[stable(feature = "extend_ref", since = "1.2.0")]
library/alloc/src/string.rs:2120:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2133:#[stable(feature = "box_str2", since = "1.45.0")]
library/alloc/src/string.rs:2141:#[stable(feature = "extend_string", since = "1.4.0")]
library/alloc/src/string.rs:2154:#[stable(feature = "herd_cows", since = "1.19.0")]
library/alloc/src/string.rs:2174:    feature = "pattern",
library/alloc/src/string.rs:2213:        #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2226:        #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2250:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2259:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2267:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2275:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2321:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2336:#[stable(feature = "stringaddassign", since = "1.12.0")]
library/alloc/src/string.rs:2344:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2353:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2362:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2371:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2380:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/alloc/src/string.rs:2389:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/alloc/src/string.rs:2399:#[stable(feature = "derefmut_for_string", since = "1.3.0")]
library/alloc/src/string.rs:2406:#[stable(feature = "derefmut_for_string", since = "1.3.0")]
library/alloc/src/string.rs:2413:#[stable(feature = "derefmut_for_string", since = "1.3.0")]
library/alloc/src/string.rs:2420:#[stable(feature = "derefmut_for_string", since = "1.3.0")]
library/alloc/src/string.rs:2427:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/alloc/src/string.rs:2434:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/alloc/src/string.rs:2442:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2452:#[stable(feature = "derefmut_for_string", since = "1.3.0")]
library/alloc/src/string.rs:2465:#[stable(feature = "str_parse_error", since = "1.5.0")]
library/alloc/src/string.rs:2469:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2487:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2502:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2513:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2531:#[unstable(feature = "ascii_char", issue = "110998")]
library/alloc/src/string.rs:2540:#[stable(feature = "char_to_string_specialization", since = "1.46.0")]
library/alloc/src/string.rs:2549:#[stable(feature = "bool_to_string_specialization", since = "1.68.0")]
library/alloc/src/string.rs:2558:#[stable(feature = "u8_to_string_specialization", since = "1.54.0")]
library/alloc/src/string.rs:2578:#[stable(feature = "i8_to_string_specialization", since = "1.54.0")]
library/alloc/src/string.rs:2601:#[stable(feature = "str_to_string_specialization", since = "1.9.0")]
library/alloc/src/string.rs:2610:#[stable(feature = "cow_str_to_string_specialization", since = "1.17.0")]
library/alloc/src/string.rs:2619:#[stable(feature = "string_to_string_specialization", since = "1.17.0")]
library/alloc/src/string.rs:2628:#[stable(feature = "fmt_arguments_to_string_specialization", since = "1.71.0")]
library/alloc/src/string.rs:2636:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2644:#[stable(feature = "string_as_mut", since = "1.43.0")]
library/alloc/src/string.rs:2652:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2661:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2673:#[stable(feature = "from_mut_str_for_string", since = "1.44.0")]
library/alloc/src/string.rs:2685:#[stable(feature = "from_ref_string", since = "1.35.0")]
library/alloc/src/string.rs:2698:#[stable(feature = "string_from_box", since = "1.18.0")]
library/alloc/src/string.rs:2720:#[stable(feature = "box_from_str", since = "1.20.0")]
library/alloc/src/string.rs:2741:#[stable(feature = "string_from_cow_str", since = "1.14.0")]
library/alloc/src/string.rs:2765:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2786:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2809:#[stable(feature = "cow_from_string_ref", since = "1.28.0")]
library/alloc/src/string.rs:2831:#[stable(feature = "cow_str_from_iter", since = "1.12.0")]
library/alloc/src/string.rs:2839:#[stable(feature = "cow_str_from_iter", since = "1.12.0")]
library/alloc/src/string.rs:2847:#[stable(feature = "cow_str_from_iter", since = "1.12.0")]
library/alloc/src/string.rs:2854:#[stable(feature = "from_string_for_vec_u8", since = "1.14.0")]
library/alloc/src/string.rs:2876:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/string.rs:2897:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:2909:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/string.rs:2916:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:2918:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:2921:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:2948:    #[stable(feature = "string_drain_as_str", since = "1.55.0")]
library/alloc/src/string.rs:2954:#[stable(feature = "string_drain_as_str", since = "1.55.0")]
library/alloc/src/string.rs:2961:#[stable(feature = "string_drain_as_str", since = "1.55.0")]
library/alloc/src/string.rs:2968:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:2987:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/string.rs:2995:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/string.rs:2999:#[stable(feature = "from_char_for_string", since = "1.46.0")]
library/alloc/src/macros.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/macros.rs:116:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/macros.rs:128:#[unstable(feature = "liballoc_internals", issue = "none", reason = "implementation detail")]
library/alloc/src/collections/linked_list.rs:13:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:48:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:53:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/linked_list.rs:73:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:81:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/linked_list.rs:98:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:110:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:118:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/linked_list.rs:141:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:144:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/linked_list.rs:149:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/linked_list.rs:423:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:443:    #[rustc_const_stable(feature = "const_linked_list_new", since = "1.39.0")]
library/alloc/src/collections/linked_list.rs:444:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:479:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:506:    /// #![feature(allocator_api)]
library/alloc/src/collections/linked_list.rs:514:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/linked_list.rs:538:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:567:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:577:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:587:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:597:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:607:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:629:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:656:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:682:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:714:    #[stable(feature = "linked_list_contains", since = "1.12.0")]
library/alloc/src/collections/linked_list.rs:740:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:769:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:792:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:820:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:842:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:871:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:890:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:916:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:946:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:991:    /// #![feature(linked_list_remove)]
library/alloc/src/collections/linked_list.rs:1004:    #[unstable(feature = "linked_list_remove", issue = "69210")]
library/alloc/src/collections/linked_list.rs:1045:    /// #![feature(extract_if)]
library/alloc/src/collections/linked_list.rs:1057:    #[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/collections/linked_list.rs:1070:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1090:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1120:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1138:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1141:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/linked_list.rs:1144:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/linked_list.rs:1158:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1188:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1206:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1209:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/linked_list.rs:1212:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/linked_list.rs:1228:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1232:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/linked_list.rs:1239:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1247:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1264:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1268:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/linked_list.rs:1275:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1288:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1299:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1321:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1343:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1354:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1371:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1385:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1393:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1405:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1416:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1438:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1460:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1470:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1486:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1503:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1516:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1539:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1561:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1581:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1601:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1619:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1647:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1666:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1682:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1695:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1714:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1741:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1761:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1769:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1777:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1788:    /// #![feature(linked_list_cursors)]
library/alloc/src/collections/linked_list.rs:1804:    #[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:1811:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/collections/linked_list.rs:1817:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/linked_list.rs:1828:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/collections/linked_list.rs:1857:#[unstable(feature = "extract_if", reason = "recently added", issue = "43244")]
library/alloc/src/collections/linked_list.rs:1867:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1882:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1890:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1893:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/linked_list.rs:1896:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/linked_list.rs:1910:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1919:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1931:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1941:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1951:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1975:#[stable(feature = "extend_ref", since = "1.2.0")]
library/alloc/src/collections/linked_list.rs:1987:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:1998:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2001:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2008:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2016:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2038:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2045:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2055:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/alloc/src/collections/linked_list.rs:2085:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2088:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2091:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2094:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2097:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2100:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/linked_list.rs:2103:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:2106:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:2109:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/linked_list.rs:2112:#[unstable(feature = "linked_list_cursors", issue = "58533")]
library/alloc/src/collections/vec_deque/iter.rs:12:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter.rs:24:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/vec_deque/iter.rs:32:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter.rs:113:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter.rs:159:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter.rs:170:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/vec_deque/iter.rs:173:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/collections/vec_deque/iter.rs:177:#[unstable(feature = "trusted_random_access", issue = "none")]
library/alloc/src/collections/vec_deque/iter.rs:181:#[unstable(feature = "trusted_random_access", issue = "none")]
library/alloc/src/collections/vec_deque/into_iter.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/into_iter.rs:19:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/vec_deque/into_iter.rs:34:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/vec_deque/into_iter.rs:41:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/into_iter.rs:178:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/into_iter.rs:249:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/into_iter.rs:257:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/vec_deque/into_iter.rs:260:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/collections/vec_deque/mod.rs:8:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:34:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/mod.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:49:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:92:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:96:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/vec_deque/mod.rs:108:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:122:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:147:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:539:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:540:    #[rustc_const_stable(feature = "const_vec_deque_new", since = "1.68.0")]
library/alloc/src/collections/vec_deque/mod.rs:557:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:575:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/vec_deque/mod.rs:589:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/vec_deque/mod.rs:642:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:672:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:705:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:726:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:753:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:782:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:834:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/collections/vec_deque/mod.rs:882:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/collections/vec_deque/mod.rs:913:    #[stable(feature = "deque_extras_15", since = "1.5.0")]
library/alloc/src/collections/vec_deque/mod.rs:938:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/alloc/src/collections/vec_deque/mod.rs:1034:    #[stable(feature = "deque_extras", since = "1.16.0")]
library/alloc/src/collections/vec_deque/mod.rs:1080:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/vec_deque/mod.rs:1101:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1124:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1157:    #[stable(feature = "deque_extras_15", since = "1.5.0")]
library/alloc/src/collections/vec_deque/mod.rs:1191:    #[stable(feature = "deque_extras_15", since = "1.5.0")]
library/alloc/src/collections/vec_deque/mod.rs:1211:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1228:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1297:    #[stable(feature = "deque_range", since = "1.51.0")]
library/alloc/src/collections/vec_deque/mod.rs:1337:    #[stable(feature = "deque_range", since = "1.51.0")]
library/alloc/src/collections/vec_deque/mod.rs:1386:    #[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/mod.rs:1439:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1469:    #[stable(feature = "vec_deque_contains", since = "1.12.0")]
library/alloc/src/collections/vec_deque/mod.rs:1493:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1517:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1537:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1561:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1582:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1608:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1630:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1656:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1696:    #[stable(feature = "deque_extras_15", since = "1.5.0")]
library/alloc/src/collections/vec_deque/mod.rs:1731:    #[stable(feature = "deque_extras_15", since = "1.5.0")]
library/alloc/src/collections/vec_deque/mod.rs:1765:    #[stable(feature = "deque_extras_15", since = "1.5.0")]
library/alloc/src/collections/vec_deque/mod.rs:1815:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:1867:    #[stable(feature = "split_off", since = "1.4.0")]
library/alloc/src/collections/vec_deque/mod.rs:1933:    #[stable(feature = "append", since = "1.4.0")]
library/alloc/src/collections/vec_deque/mod.rs:1988:    #[stable(feature = "vec_deque_retain", since = "1.4.0")]
library/alloc/src/collections/vec_deque/mod.rs:2017:    #[stable(feature = "vec_retain_mut", since = "1.61.0")]
library/alloc/src/collections/vec_deque/mod.rs:2093:    #[stable(feature = "vec_resize_with", since = "1.33.0")]
library/alloc/src/collections/vec_deque/mod.rs:2159:    #[stable(feature = "deque_make_contiguous", since = "1.48.0")]
library/alloc/src/collections/vec_deque/mod.rs:2318:    #[stable(feature = "vecdeque_rotate", since = "1.36.0")]
library/alloc/src/collections/vec_deque/mod.rs:2361:    #[stable(feature = "vecdeque_rotate", since = "1.36.0")]
library/alloc/src/collections/vec_deque/mod.rs:2443:    #[stable(feature = "vecdeque_binary_search", since = "1.54.0")]
library/alloc/src/collections/vec_deque/mod.rs:2490:    #[stable(feature = "vecdeque_binary_search", since = "1.54.0")]
library/alloc/src/collections/vec_deque/mod.rs:2547:    #[stable(feature = "vecdeque_binary_search", since = "1.54.0")]
library/alloc/src/collections/vec_deque/mod.rs:2600:    #[stable(feature = "vecdeque_binary_search", since = "1.54.0")]
library/alloc/src/collections/vec_deque/mod.rs:2637:    #[stable(feature = "deque_extras", since = "1.16.0")]
library/alloc/src/collections/vec_deque/mod.rs:2659:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2698:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2708:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2715:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2723:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2737:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2747:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2755:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2762:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2774:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2784:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2794:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2811:#[stable(feature = "extend_ref", since = "1.2.0")]
library/alloc/src/collections/vec_deque/mod.rs:2828:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/mod.rs:2835:#[stable(feature = "vecdeque_vec_conversions", since = "1.10.0")]
library/alloc/src/collections/vec_deque/mod.rs:2852:#[stable(feature = "vecdeque_vec_conversions", since = "1.10.0")]
library/alloc/src/collections/vec_deque/mod.rs:2901:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:12:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:24:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:104:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:150:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:161:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/vec_deque/iter_mut.rs:164:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/collections/vec_deque/iter_mut.rs:168:#[unstable(feature = "trusted_random_access", issue = "none")]
library/alloc/src/collections/vec_deque/iter_mut.rs:172:#[unstable(feature = "trusted_random_access", issue = "none")]
library/alloc/src/collections/vec_deque/drain.rs:17:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:21:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/vec_deque/drain.rs:76:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/vec_deque/drain.rs:88:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:90:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:93:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:178:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:200:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:213:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/vec_deque/drain.rs:216:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/vec_deque/macros.rs:3:        #[stable(feature = "vec_deque_partial_eq_slice", since = "1.17.0")]
library/alloc/src/collections/mod.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:15:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:18:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:26:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:41:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:46:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:51:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/mod.rs:60:#[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/collections/mod.rs:70:        feature = "try_reserve_kind",
library/alloc/src/collections/mod.rs:82:    feature = "try_reserve_kind",
library/alloc/src/collections/mod.rs:98:            feature = "container_error_extra",
library/alloc/src/collections/mod.rs:110:    feature = "try_reserve_kind",
library/alloc/src/collections/mod.rs:121:#[unstable(feature = "try_reserve_kind", reason = "new API", issue = "48043")]
library/alloc/src/collections/mod.rs:130:#[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/collections/mod.rs:156:#[stable(feature = "try_reserve", since = "1.57.0")]
library/alloc/src/collections/btree/map/entry.rs:18:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:24:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map/entry.rs:27:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:28:    Vacant(#[stable(feature = "rust1", since = "1.0.0")] VacantEntry<'a, K, V, A>),
library/alloc/src/collections/btree/map/entry.rs:31:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:32:    Occupied(#[stable(feature = "rust1", since = "1.0.0")] OccupiedEntry<'a, K, V, A>),
library/alloc/src/collections/btree/map/entry.rs:35:#[stable(feature = "debug_btree_map", since = "1.12.0")]
library/alloc/src/collections/btree/map/entry.rs:47:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:52:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map/entry.rs:66:#[stable(feature = "debug_btree_map", since = "1.12.0")]
library/alloc/src/collections/btree/map/entry.rs:75:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:80:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map/entry.rs:92:#[stable(feature = "debug_btree_map", since = "1.12.0")]
library/alloc/src/collections/btree/map/entry.rs:102:#[unstable(feature = "map_try_insert", issue = "82766")]
library/alloc/src/collections/btree/map/entry.rs:110:#[unstable(feature = "map_try_insert", issue = "82766")]
library/alloc/src/collections/btree/map/entry.rs:121:#[unstable(feature = "map_try_insert", issue = "82766")]
library/alloc/src/collections/btree/map/entry.rs:136:#[unstable(feature = "map_try_insert", issue = "82766")]
library/alloc/src/collections/btree/map/entry.rs:160:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:183:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:210:    #[stable(feature = "or_insert_with_key", since = "1.50.0")]
library/alloc/src/collections/btree/map/entry.rs:231:    #[stable(feature = "map_entry_keys", since = "1.10.0")]
library/alloc/src/collections/btree/map/entry.rs:259:    #[stable(feature = "entry_and_modify", since = "1.26.0")]
library/alloc/src/collections/btree/map/entry.rs:275:    #[stable(feature = "entry_or_default", since = "1.28.0")]
library/alloc/src/collections/btree/map/entry.rs:309:    #[stable(feature = "map_entry_keys", since = "1.10.0")]
library/alloc/src/collections/btree/map/entry.rs:328:    #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
library/alloc/src/collections/btree/map/entry.rs:349:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:401:    #[stable(feature = "map_entry_keys", since = "1.10.0")]
library/alloc/src/collections/btree/map/entry.rs:425:    #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
library/alloc/src/collections/btree/map/entry.rs:446:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:477:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:504:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:526:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map/entry.rs:548:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:73:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:77:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/set.rs:82:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:89:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:96:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:99:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:106:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:113:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:131:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:136:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:149:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:153:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/set.rs:166:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:179:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:183:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/set.rs:220:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:235:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:238:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:253:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:257:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/set.rs:292:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:307:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:310:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:338:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:339:    #[rustc_const_stable(feature = "const_btree_new", since = "1.66.0")]
library/alloc/src/collections/btree/set.rs:353:    /// # #![feature(allocator_api)]
library/alloc/src/collections/btree/set.rs:354:    /// # #![feature(btreemap_alloc)]
library/alloc/src/collections/btree/set.rs:360:    #[unstable(feature = "btreemap_alloc", issue = "32838")]
library/alloc/src/collections/btree/set.rs:392:    #[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:422:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:483:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:514:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:565:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:585:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:608:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:633:    #[stable(feature = "set_recovery", since = "1.9.0")]
library/alloc/src/collections/btree/set.rs:660:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:686:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:766:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:792:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/set.rs:818:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/set.rs:842:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/set.rs:866:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/set.rs:898:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:921:    #[stable(feature = "set_recovery", since = "1.9.0")]
library/alloc/src/collections/btree/set.rs:947:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:972:    #[stable(feature = "set_recovery", since = "1.9.0")]
library/alloc/src/collections/btree/set.rs:996:    #[stable(feature = "btree_retain", since = "1.53.0")]
library/alloc/src/collections/btree/set.rs:1033:    #[stable(feature = "btree_append", since = "1.11.0")]
library/alloc/src/collections/btree/set.rs:1071:    #[stable(feature = "btree_split_off", since = "1.11.0")]
library/alloc/src/collections/btree/set.rs:1097:    /// #![feature(btree_extract_if)]
library/alloc/src/collections/btree/set.rs:1106:    #[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/set.rs:1144:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1162:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1164:        feature = "const_btree_len",
library/alloc/src/collections/btree/set.rs:1185:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1187:        feature = "const_btree_len",
library/alloc/src/collections/btree/set.rs:1196:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1219:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/alloc/src/collections/btree/set.rs:1243:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1265:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1276:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/set.rs:1282:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/set.rs:1293:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/set.rs:1304:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/set.rs:1322:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/set.rs:1325:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1340:#[stable(feature = "extend_ref", since = "1.2.0")]
library/alloc/src/collections/btree/set.rs:1352:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1360:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1385:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1410:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1435:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1460:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1467:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1473:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1503:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1509:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1516:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/set.rs:1519:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1532:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/set.rs:1546:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1552:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1559:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/set.rs:1562:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/set.rs:1579:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:1586:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:1613:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/set.rs:1620:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/set.rs:1623:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/set.rs:1637:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1654:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1701:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/set.rs:1704:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1710:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1736:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/set.rs:1739:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1755:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1796:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/set.rs:1799:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1805:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/set.rs:1825:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:169:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:175:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map.rs:185:#[stable(feature = "btree_drop", since = "1.7.0")]
library/alloc/src/collections/btree/map.rs:196:#[stable(feature = "btree_unwindsafe", since = "1.64.0")]
library/alloc/src/collections/btree/map.rs:205:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:352:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:358:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:365:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:385:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:395:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:403:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:423:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:428:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map.rs:444:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:451:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:475:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:480:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:494:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:499:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:513:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/alloc/src/collections/btree/map.rs:518:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/alloc/src/collections/btree/map.rs:532:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:537:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:551:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:555:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map.rs:560:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:574:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:579:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:593:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:601:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:626:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:627:    #[rustc_const_stable(feature = "const_btree_new", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:649:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:667:    /// # #![feature(allocator_api)]
library/alloc/src/collections/btree/map.rs:668:    /// # #![feature(btreemap_alloc)]
library/alloc/src/collections/btree/map.rs:677:    #[unstable(feature = "btreemap_alloc", issue = "32838")]
library/alloc/src/collections/btree/map.rs:701:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:729:    #[stable(feature = "map_get_key_value", since = "1.40.0")]
library/alloc/src/collections/btree/map.rs:758:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:786:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:820:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:843:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:871:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:905:    #[stable(feature = "map_first_last", since = "1.66.0")]
library/alloc/src/collections/btree/map.rs:930:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:959:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:998:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1023:    /// #![feature(map_try_insert)]
library/alloc/src/collections/btree/map.rs:1035:    #[unstable(feature = "map_try_insert", issue = "82766")]
library/alloc/src/collections/btree/map.rs:1064:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1091:    #[stable(feature = "btreemap_remove_entry", since = "1.45.0")]
library/alloc/src/collections/btree/map.rs:1129:    #[stable(feature = "btree_retain", since = "1.53.0")]
library/alloc/src/collections/btree/map.rs:1169:    #[stable(feature = "btree_append", since = "1.11.0")]
library/alloc/src/collections/btree/map.rs:1226:    #[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:1268:    #[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:1302:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1363:    #[stable(feature = "btree_split_off", since = "1.11.0")]
library/alloc/src/collections/btree/map.rs:1409:    /// #![feature(btree_extract_if)]
library/alloc/src/collections/btree/map.rs:1418:    #[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/map.rs:1472:    #[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:1494:    #[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:1512:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1522:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1558:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:1561:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1573:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1580:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1587:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1597:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1633:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1645:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1652:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:1663:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1688:#[stable(feature = "btree_drop", since = "1.7.0")]
library/alloc/src/collections/btree/map.rs:1743:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1757:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1765:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1772:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:1775:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1806:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1813:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1820:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:1823:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1830:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:1844:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1861:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1868:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1875:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:1878:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:1885:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:1900:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/map.rs:1907:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator + Clone = Global,
library/alloc/src/collections/btree/map.rs:1930:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/map.rs:1942:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/map.rs:2002:#[unstable(feature = "btree_extract_if", issue = "70530")]
library/alloc/src/collections/btree/map.rs:2005:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:2032:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:2046:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/alloc/src/collections/btree/map.rs:2063:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/alloc/src/collections/btree/map.rs:2070:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/alloc/src/collections/btree/map.rs:2077:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:2080:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2111:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2118:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2125:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2128:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:2145:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2162:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2169:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2176:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/alloc/src/collections/btree/map.rs:2179:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/btree/map.rs:2196:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:2203:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:2206:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:2213:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:2240:#[stable(feature = "btree_range", since = "1.17.0")]
library/alloc/src/collections/btree/map.rs:2247:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/btree/map.rs:2250:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2265:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2280:#[stable(feature = "extend_ref", since = "1.2.0")]
library/alloc/src/collections/btree/map.rs:2294:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2304:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2312:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2319:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2322:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2330:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2338:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2345:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2364:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/alloc/src/collections/btree/map.rs:2408:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2441:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2468:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2489:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2515:    #[stable(feature = "map_values_mut", since = "1.10.0")]
library/alloc/src/collections/btree/map.rs:2535:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2537:        feature = "const_btree_len",
library/alloc/src/collections/btree/map.rs:2560:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/btree/map.rs:2562:        feature = "const_btree_len",
library/alloc/src/collections/btree/map.rs:2584:    /// #![feature(btree_cursors)]
library/alloc/src/collections/btree/map.rs:2597:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2625:    /// #![feature(btree_cursors)]
library/alloc/src/collections/btree/map.rs:2638:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2679:    /// #![feature(btree_cursors)]
library/alloc/src/collections/btree/map.rs:2692:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2720:    /// #![feature(btree_cursors)]
library/alloc/src/collections/btree/map.rs:2733:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2770:#[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2776:#[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2784:#[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2804:#[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2809:    #[unstable(feature = "allocator_api", issue = "32838")] A = Global,
library/alloc/src/collections/btree/map.rs:2817:#[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2830:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2849:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2868:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2878:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2888:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2898:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2910:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2924:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2944:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2964:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2974:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2984:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:2994:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3004:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3026:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3036:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3062:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3092:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3116:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3159:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3202:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3231:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3255:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/btree/map.rs:3279:    #[unstable(feature = "btree_cursors", issue = "107540")]
library/alloc/src/collections/binary_heap/mod.rs:144:#![stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:274:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:278:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:290:#[stable(feature = "binary_heap_peek_mut", since = "1.12.0")]
library/alloc/src/collections/binary_heap/mod.rs:294:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:302:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/binary_heap/mod.rs:309:#[stable(feature = "binary_heap_peek_mut", since = "1.12.0")]
library/alloc/src/collections/binary_heap/mod.rs:326:#[stable(feature = "binary_heap_peek_mut", since = "1.12.0")]
library/alloc/src/collections/binary_heap/mod.rs:336:#[stable(feature = "binary_heap_peek_mut", since = "1.12.0")]
library/alloc/src/collections/binary_heap/mod.rs:367:    #[stable(feature = "binary_heap_peek_mut_pop", since = "1.18.0")]
library/alloc/src/collections/binary_heap/mod.rs:382:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:393:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:402:#[stable(feature = "binaryheap_debug", since = "1.4.0")]
library/alloc/src/collections/binary_heap/mod.rs:412:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:436:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:457:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:472:    /// #![feature(allocator_api)]
library/alloc/src/collections/binary_heap/mod.rs:479:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:496:    /// #![feature(allocator_api)]
library/alloc/src/collections/binary_heap/mod.rs:503:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:539:    #[stable(feature = "binary_heap_peek_mut", since = "1.12.0")]
library/alloc/src/collections/binary_heap/mod.rs:563:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:607:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:634:    #[stable(feature = "binary_heap_extras_15", since = "1.5.0")]
library/alloc/src/collections/binary_heap/mod.rs:853:    #[stable(feature = "binary_heap_append", since = "1.11.0")]
library/alloc/src/collections/binary_heap/mod.rs:882:    /// #![feature(binary_heap_drain_sorted)]
library/alloc/src/collections/binary_heap/mod.rs:892:    #[unstable(feature = "binary_heap_drain_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:915:    #[stable(feature = "binary_heap_retain", since = "1.70.0")]
library/alloc/src/collections/binary_heap/mod.rs:953:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:966:    /// #![feature(binary_heap_into_iter_sorted)]
library/alloc/src/collections/binary_heap/mod.rs:972:    #[unstable(feature = "binary_heap_into_iter_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:999:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1017:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1048:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1074:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1116:    #[stable(feature = "try_reserve_2", since = "1.63.0")]
library/alloc/src/collections/binary_heap/mod.rs:1152:    #[stable(feature = "try_reserve_2", since = "1.63.0")]
library/alloc/src/collections/binary_heap/mod.rs:1171:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1194:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/alloc/src/collections/binary_heap/mod.rs:1207:    /// #![feature(binary_heap_as_slice)]
library/alloc/src/collections/binary_heap/mod.rs:1216:    #[unstable(feature = "binary_heap_as_slice", issue = "83659")]
library/alloc/src/collections/binary_heap/mod.rs:1239:    #[stable(feature = "binary_heap_extras_15", since = "1.5.0")]
library/alloc/src/collections/binary_heap/mod.rs:1245:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:1264:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1288:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1317:    #[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/binary_heap/mod.rs:1338:    #[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1422:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1427:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/binary_heap/mod.rs:1435:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1442:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1462:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1470:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1477:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/binary_heap/mod.rs:1486:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1490:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:1497:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:1503:#[stable(feature = "collection_debug", since = "1.17.0")]
library/alloc/src/collections/binary_heap/mod.rs:1510:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1525:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1533:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1540:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/binary_heap/mod.rs:1543:#[stable(feature = "default_iters", since = "1.70.0")]
library/alloc/src/collections/binary_heap/mod.rs:1559:#[unstable(issue = "none", feature = "inplace_iteration")]
library/alloc/src/collections/binary_heap/mod.rs:1570:#[unstable(issue = "none", feature = "inplace_iteration")]
library/alloc/src/collections/binary_heap/mod.rs:1583:#[unstable(feature = "binary_heap_into_iter_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1587:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:1594:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:1600:#[unstable(feature = "binary_heap_into_iter_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1616:#[unstable(feature = "binary_heap_into_iter_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1619:#[unstable(feature = "binary_heap_into_iter_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1622:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/collections/binary_heap/mod.rs:1631:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/binary_heap/mod.rs:1636:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:1643:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:1649:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/binary_heap/mod.rs:1664:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/binary_heap/mod.rs:1672:#[stable(feature = "drain", since = "1.6.0")]
library/alloc/src/collections/binary_heap/mod.rs:1679:#[stable(feature = "fused", since = "1.26.0")]
library/alloc/src/collections/binary_heap/mod.rs:1688:#[unstable(feature = "binary_heap_drain_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1693:    #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
library/alloc/src/collections/binary_heap/mod.rs:1700:    #[unstable(feature = "allocator_api", issue = "32838")]
library/alloc/src/collections/binary_heap/mod.rs:1706:#[unstable(feature = "binary_heap_drain_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1726:#[unstable(feature = "binary_heap_drain_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1742:#[unstable(feature = "binary_heap_drain_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1745:#[unstable(feature = "binary_heap_drain_sorted", issue = "59278")]
library/alloc/src/collections/binary_heap/mod.rs:1748:#[unstable(feature = "trusted_len", issue = "37572")]
library/alloc/src/collections/binary_heap/mod.rs:1751:#[stable(feature = "binary_heap_extras_15", since = "1.5.0")]
library/alloc/src/collections/binary_heap/mod.rs:1763:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/alloc/src/collections/binary_heap/mod.rs:1779:#[stable(feature = "binary_heap_extras_15", since = "1.5.0")]
library/alloc/src/collections/binary_heap/mod.rs:1790:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1797:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1825:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1835:#[stable(feature = "rust1", since = "1.0.0")]
library/alloc/src/collections/binary_heap/mod.rs:1854:#[stable(feature = "extend_ref", since = "1.2.0")]
library/core/Cargo.toml:27:rand = { version = "0.8.5", default-features = false }
library/core/Cargo.toml:28:rand_xorshift = { version = "0.3.0", default-features = false }
library/core/Cargo.toml:30:[features]
library/core/tests/lib.rs:1:#![feature(alloc_layout_extra)]
library/core/tests/lib.rs:2:#![feature(array_chunks)]
library/core/tests/lib.rs:3:#![feature(array_methods)]
library/core/tests/lib.rs:4:#![feature(array_windows)]
library/core/tests/lib.rs:5:#![feature(bigint_helper_methods)]
library/core/tests/lib.rs:6:#![feature(cell_update)]
library/core/tests/lib.rs:7:#![feature(const_align_offset)]
library/core/tests/lib.rs:8:#![feature(const_assume)]
library/core/tests/lib.rs:9:#![feature(const_align_of_val_raw)]
library/core/tests/lib.rs:10:#![feature(const_black_box)]
library/core/tests/lib.rs:11:#![feature(const_caller_location)]
library/core/tests/lib.rs:12:#![feature(const_cell_into_inner)]
library/core/tests/lib.rs:13:#![feature(const_hash)]
library/core/tests/lib.rs:14:#![feature(const_heap)]
library/core/tests/lib.rs:15:#![feature(const_maybe_uninit_as_mut_ptr)]
library/core/tests/lib.rs:16:#![feature(const_maybe_uninit_assume_init_read)]
library/core/tests/lib.rs:17:#![feature(const_nonnull_new)]
library/core/tests/lib.rs:18:#![feature(const_pointer_byte_offsets)]
library/core/tests/lib.rs:19:#![feature(const_pointer_is_aligned)]
library/core/tests/lib.rs:20:#![feature(const_ptr_as_ref)]
library/core/tests/lib.rs:21:#![feature(const_ptr_write)]
library/core/tests/lib.rs:22:#![feature(const_trait_impl)]
library/core/tests/lib.rs:23:#![feature(const_likely)]
library/core/tests/lib.rs:24:#![feature(const_location_fields)]
library/core/tests/lib.rs:25:#![feature(core_intrinsics)]
library/core/tests/lib.rs:26:#![feature(core_private_bignum)]
library/core/tests/lib.rs:27:#![feature(core_private_diy_float)]
library/core/tests/lib.rs:28:#![feature(dec2flt)]
library/core/tests/lib.rs:29:#![feature(div_duration)]
library/core/tests/lib.rs:30:#![feature(duration_consts_float)]
library/core/tests/lib.rs:31:#![feature(duration_constants)]
library/core/tests/lib.rs:32:#![feature(exact_size_is_empty)]
library/core/tests/lib.rs:33:#![feature(extern_types)]
library/core/tests/lib.rs:34:#![feature(flt2dec)]
library/core/tests/lib.rs:35:#![feature(fmt_internals)]
library/core/tests/lib.rs:36:#![feature(float_minimum_maximum)]
library/core/tests/lib.rs:37:#![feature(future_join)]
library/core/tests/lib.rs:38:#![feature(generic_assert_internals)]
library/core/tests/lib.rs:39:#![feature(array_try_from_fn)]
library/core/tests/lib.rs:40:#![feature(hasher_prefixfree_extras)]
library/core/tests/lib.rs:41:#![feature(hashmap_internals)]
library/core/tests/lib.rs:42:#![feature(try_find)]
library/core/tests/lib.rs:43:#![feature(inline_const)]
library/core/tests/lib.rs:44:#![feature(is_sorted)]
library/core/tests/lib.rs:45:#![feature(layout_for_ptr)]
library/core/tests/lib.rs:46:#![feature(pattern)]
library/core/tests/lib.rs:47:#![feature(sort_internals)]
library/core/tests/lib.rs:48:#![feature(slice_take)]
library/core/tests/lib.rs:49:#![feature(slice_from_ptr_range)]
library/core/tests/lib.rs:50:#![feature(split_as_slice)]
library/core/tests/lib.rs:51:#![feature(maybe_uninit_uninit_array)]
library/core/tests/lib.rs:52:#![feature(maybe_uninit_write_slice)]
library/core/tests/lib.rs:53:#![feature(maybe_uninit_uninit_array_transpose)]
library/core/tests/lib.rs:54:#![feature(min_specialization)]
library/core/tests/lib.rs:55:#![feature(numfmt)]
library/core/tests/lib.rs:56:#![feature(num_midpoint)]
library/core/tests/lib.rs:57:#![feature(step_trait)]
library/core/tests/lib.rs:58:#![feature(str_internals)]
library/core/tests/lib.rs:59:#![feature(std_internals)]
library/core/tests/lib.rs:60:#![feature(test)]
library/core/tests/lib.rs:61:#![feature(trusted_len)]
library/core/tests/lib.rs:62:#![feature(try_blocks)]
library/core/tests/lib.rs:63:#![feature(try_trait_v2)]
library/core/tests/lib.rs:64:#![feature(slice_internals)]
library/core/tests/lib.rs:65:#![feature(slice_partition_dedup)]
library/core/tests/lib.rs:66:#![feature(ip)]
library/core/tests/lib.rs:67:#![feature(ip_in_core)]
library/core/tests/lib.rs:68:#![feature(iter_advance_by)]
library/core/tests/lib.rs:69:#![feature(iter_array_chunks)]
library/core/tests/lib.rs:70:#![feature(iter_collect_into)]
library/core/tests/lib.rs:71:#![feature(iter_partition_in_place)]
library/core/tests/lib.rs:72:#![feature(iter_intersperse)]
library/core/tests/lib.rs:73:#![feature(iter_is_partitioned)]
library/core/tests/lib.rs:74:#![feature(iter_next_chunk)]
library/core/tests/lib.rs:75:#![feature(iter_order_by)]
library/core/tests/lib.rs:76:#![feature(iter_repeat_n)]
library/core/tests/lib.rs:77:#![feature(iterator_try_collect)]
library/core/tests/lib.rs:78:#![feature(iterator_try_reduce)]
library/core/tests/lib.rs:79:#![feature(const_ip)]
library/core/tests/lib.rs:80:#![feature(const_ipv4)]
library/core/tests/lib.rs:81:#![feature(const_ipv6)]
library/core/tests/lib.rs:82:#![feature(const_mut_refs)]
library/core/tests/lib.rs:83:#![feature(const_pin)]
library/core/tests/lib.rs:84:#![feature(const_waker)]
library/core/tests/lib.rs:85:#![feature(never_type)]
library/core/tests/lib.rs:86:#![feature(unwrap_infallible)]
library/core/tests/lib.rs:87:#![feature(pointer_byte_offsets)]
library/core/tests/lib.rs:88:#![feature(pointer_is_aligned)]
library/core/tests/lib.rs:89:#![feature(portable_simd)]
library/core/tests/lib.rs:90:#![feature(ptr_metadata)]
library/core/tests/lib.rs:91:#![feature(lazy_cell)]
library/core/tests/lib.rs:92:#![feature(unsized_tuple_coercion)]
library/core/tests/lib.rs:93:#![feature(const_option)]
library/core/tests/lib.rs:94:#![feature(const_option_ext)]
library/core/tests/lib.rs:95:#![feature(const_result)]
library/core/tests/lib.rs:96:#![feature(integer_atomics)]
library/core/tests/lib.rs:97:#![feature(int_roundings)]
library/core/tests/lib.rs:98:#![feature(slice_group_by)]
library/core/tests/lib.rs:99:#![feature(split_array)]
library/core/tests/lib.rs:100:#![feature(strict_provenance)]
library/core/tests/lib.rs:101:#![feature(strict_provenance_atomic_ptr)]
library/core/tests/lib.rs:102:#![feature(trusted_random_access)]
library/core/tests/lib.rs:103:#![feature(unsize)]
library/core/tests/lib.rs:104:#![feature(const_array_from_ref)]
library/core/tests/lib.rs:105:#![feature(const_slice_from_ref)]
library/core/tests/lib.rs:106:#![feature(waker_getters)]
library/core/tests/lib.rs:107:#![feature(slice_flatten)]
library/core/tests/lib.rs:108:#![feature(provide_any)]
library/core/tests/lib.rs:109:#![feature(utf8_chunks)]
library/core/tests/lib.rs:110:#![feature(is_ascii_octdigit)]
library/core/tests/lib.rs:111:#![feature(get_many_mut)]
library/core/tests/lib.rs:112:#![feature(offset_of)]
library/core/tests/ptr.rs:892:    //   or the unstable `unsized_locals` language feature,
library/core/tests/intrinsics.rs:25:// Check that `const_assume` feature allow `assume` intrinsic
library/core/benches/lib.rs:3:#![feature(flt2dec)]
library/core/benches/lib.rs:4:#![feature(test)]
library/core/benches/lib.rs:5:#![feature(trusted_random_access)]
library/core/benches/lib.rs:6:#![feature(iter_array_chunks)]
library/core/benches/lib.rs:7:#![feature(iter_next_chunk)]
library/core/src/arch.rs:3:#[stable(feature = "simd_arch", since = "1.27.0")]
library/core/src/arch.rs:13:#[stable(feature = "asm", since = "1.59.0")]
library/core/src/arch.rs:26:#[stable(feature = "global_asm", since = "1.59.0")]
library/core/src/ascii/ascii_char.rs:58:#[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:62:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:65:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:68:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:71:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:74:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:77:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:80:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:83:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:86:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:89:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:92:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:95:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:98:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:101:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:104:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:107:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:110:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:113:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:116:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:119:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:122:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:125:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:128:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:131:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:134:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:137:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:140:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:143:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:146:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:149:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:152:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:155:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:158:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:161:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:164:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:167:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:170:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:173:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:176:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:179:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:182:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:185:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:188:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:191:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:194:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:197:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:200:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:203:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:206:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:209:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:212:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:215:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:218:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:221:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:224:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:227:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:230:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:233:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:236:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:239:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:242:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:245:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:248:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:251:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:254:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:257:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:260:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:263:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:266:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:269:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:272:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:275:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:278:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:281:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:284:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:287:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:290:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:293:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:296:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:299:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:302:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:305:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:308:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:311:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:314:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:317:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:320:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:323:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:326:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:329:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:332:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:335:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:338:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:341:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:344:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:347:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:350:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:353:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:356:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:359:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:362:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:365:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:368:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:371:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:374:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:377:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:380:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:383:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:386:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:389:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:392:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:395:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:398:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:401:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:404:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:407:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:410:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:413:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:416:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:419:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:422:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:425:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:428:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:431:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:434:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:437:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:440:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:443:    #[unstable(feature = "ascii_char_variants", issue = "110998")]
library/core/src/ascii/ascii_char.rs:450:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:467:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:478:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:504:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:519:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:526:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:533:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:542:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:553:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii/ascii_char.rs:560:#[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/panic.rs:3:#![stable(feature = "core_panic_info", since = "1.41.0")]
library/core/src/panic.rs:11:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic.rs:13:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic.rs:15:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic.rs:19:#[unstable(feature = "edition_panic", issue = "none", reason = "use panic!() instead")]
library/core/src/panic.rs:46:#[unstable(feature = "edition_panic", issue = "none", reason = "use panic!() instead")]
library/core/src/panic.rs:66:#[unstable(feature = "edition_panic", issue = "none", reason = "use unreachable!() instead")]
library/core/src/panic.rs:85:#[unstable(feature = "edition_panic", issue = "none", reason = "use unreachable!() instead")]
library/core/src/panic.rs:100:#[unstable(feature = "std_internals", issue = "none")]
library/core/src/bool.rs:31:    #[stable(feature = "bool_to_option", since = "1.62.0")]
library/core/src/bool.rs:57:    #[stable(feature = "lazy_bool_to_option", since = "1.50.0")]
library/core/src/ascii.rs:10:#![stable(feature = "core_ascii", since = "1.26.0")]
library/core/src/ascii.rs:18:#[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/ascii.rs:26:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ascii.rs:92:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ascii.rs:99:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ascii.rs:130:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ascii.rs:143:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ascii.rs:151:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/ascii.rs:154:#[stable(feature = "ascii_escape_display", since = "1.39.0")]
library/core/src/ascii.rs:161:#[stable(feature = "std_debug", since = "1.16.0")]
library/core/src/net/mod.rs:12:#![unstable(feature = "ip_in_core", issue = "108443")]
library/core/src/net/mod.rs:14:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/mod.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/mod.rs:18:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:34:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:35:    V4(#[stable(feature = "rust1", since = "1.0.0")] SocketAddrV4),
library/core/src/net/socket_addr.rs:37:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:38:    V6(#[stable(feature = "rust1", since = "1.0.0")] SocketAddrV6),
library/core/src/net/socket_addr.rs:67:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:100:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:122:    #[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/socket_addr.rs:124:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:144:    #[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/socket_addr.rs:145:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:165:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:187:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:188:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:208:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:233:    #[stable(feature = "sockaddr_checker", since = "1.16.0")]
library/core/src/net/socket_addr.rs:234:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:256:    #[stable(feature = "sockaddr_checker", since = "1.16.0")]
library/core/src/net/socket_addr.rs:257:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:276:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:278:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:295:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:296:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:313:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:330:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:331:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:348:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:372:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:374:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:391:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:392:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:409:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:426:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:427:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:444:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:471:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:472:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:491:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:513:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:514:    #[rustc_const_stable(feature = "const_socketaddr", since = "1.69.0")]
library/core/src/net/socket_addr.rs:533:    #[stable(feature = "sockaddr_setters", since = "1.9.0")]
library/core/src/net/socket_addr.rs:540:#[stable(feature = "ip_from_ip", since = "1.16.0")]
library/core/src/net/socket_addr.rs:549:#[stable(feature = "ip_from_ip", since = "1.16.0")]
library/core/src/net/socket_addr.rs:558:#[stable(feature = "addr_from_into_ip", since = "1.17.0")]
library/core/src/net/socket_addr.rs:571:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:581:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:588:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:607:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:614:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:641:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:648:#[stable(feature = "socketaddr_ordering", since = "1.45.0")]
library/core/src/net/socket_addr.rs:656:#[stable(feature = "socketaddr_ordering", since = "1.45.0")]
library/core/src/net/socket_addr.rs:664:#[stable(feature = "socketaddr_ordering", since = "1.45.0")]
library/core/src/net/socket_addr.rs:672:#[stable(feature = "socketaddr_ordering", since = "1.45.0")]
library/core/src/net/socket_addr.rs:680:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/socket_addr.rs:686:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:27:#[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/ip_addr.rs:31:    #[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/ip_addr.rs:32:    V4(#[stable(feature = "ip_addr", since = "1.7.0")] Ipv4Addr),
library/core/src/net/ip_addr.rs:34:    #[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/ip_addr.rs:35:    V6(#[stable(feature = "ip_addr", since = "1.7.0")] Ipv6Addr),
library/core/src/net/ip_addr.rs:70:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:152:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:167:/// #![feature(ip)]
library/core/src/net/ip_addr.rs:193:#[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:226:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:227:    #[stable(feature = "ip_shared", since = "1.12.0")]
library/core/src/net/ip_addr.rs:250:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:251:    #[stable(feature = "ip_shared", since = "1.12.0")]
library/core/src/net/ip_addr.rs:269:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:276:    #[rustc_const_unstable(feature = "const_ip", issue = "76205")]
library/core/src/net/ip_addr.rs:277:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:300:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:301:    #[stable(feature = "ip_shared", since = "1.12.0")]
library/core/src/net/ip_addr.rs:319:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:329:    #[rustc_const_unstable(feature = "const_ip", issue = "76205")]
library/core/src/net/ip_addr.rs:330:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:348:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:355:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:378:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:379:    #[stable(feature = "ipaddr_checker", since = "1.16.0")]
library/core/src/net/ip_addr.rs:399:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:400:    #[stable(feature = "ipaddr_checker", since = "1.16.0")]
library/core/src/net/ip_addr.rs:413:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:423:    #[rustc_const_unstable(feature = "const_ip", issue = "76205")]
library/core/src/net/ip_addr.rs:424:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:445:    #[rustc_const_stable(feature = "const_ip_32", since = "1.32.0")]
library/core/src/net/ip_addr.rs:446:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:463:    #[stable(feature = "ip_constructors", since = "1.30.0")]
library/core/src/net/ip_addr.rs:479:    #[stable(feature = "ip_constructors", since = "1.30.0")]
library/core/src/net/ip_addr.rs:492:    #[stable(feature = "ip_constructors", since = "1.30.0")]
library/core/src/net/ip_addr.rs:505:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:506:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:528:    #[rustc_const_stable(feature = "const_ip_32", since = "1.32.0")]
library/core/src/net/ip_addr.rs:529:    #[stable(feature = "ip_shared", since = "1.12.0")]
library/core/src/net/ip_addr.rs:550:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:551:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:581:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:582:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:609:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:610:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:646:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:689:    #[rustc_const_unstable(feature = "const_ipv4", issue = "76205")]
library/core/src/net/ip_addr.rs:690:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:715:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:722:    #[rustc_const_unstable(feature = "const_ipv4", issue = "76205")]
library/core/src/net/ip_addr.rs:723:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:740:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:748:    #[rustc_const_unstable(feature = "const_ipv4", issue = "76205")]
library/core/src/net/ip_addr.rs:749:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:773:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:783:    #[rustc_const_unstable(feature = "const_ipv4", issue = "76205")]
library/core/src/net/ip_addr.rs:784:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:807:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:808:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:829:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:830:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:857:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:858:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:885:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:886:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:910:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:911:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:921:#[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/ip_addr.rs:931:#[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/ip_addr.rs:938:#[stable(feature = "ip_from_ip", since = "1.16.0")]
library/core/src/net/ip_addr.rs:960:#[stable(feature = "ip_from_ip", since = "1.16.0")]
library/core/src/net/ip_addr.rs:982:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1003:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1010:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1021:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1032:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1040:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1051:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1062:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1070:#[stable(feature = "ip_u32", since = "1.1.0")]
library/core/src/net/ip_addr.rs:1088:#[stable(feature = "ip_u32", since = "1.1.0")]
library/core/src/net/ip_addr.rs:1106:#[stable(feature = "from_slice_v4", since = "1.9.0")]
library/core/src/net/ip_addr.rs:1124:#[stable(feature = "ip_from_slice", since = "1.17.0")]
library/core/src/net/ip_addr.rs:1154:    #[rustc_const_stable(feature = "const_ip_32", since = "1.32.0")]
library/core/src/net/ip_addr.rs:1155:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1191:    #[stable(feature = "ip_constructors", since = "1.30.0")]
library/core/src/net/ip_addr.rs:1208:    #[stable(feature = "ip_constructors", since = "1.30.0")]
library/core/src/net/ip_addr.rs:1221:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:1222:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1256:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:1257:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:1280:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:1281:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:1319:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1352:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1353:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1393:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1400:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1401:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1417:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1429:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1430:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1466:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1481:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1482:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1499:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1506:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1507:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1523:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1530:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1560:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1567:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1568:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1586:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1596:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1597:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1631:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:1632:    #[stable(since = "1.7.0", feature = "ip_17")]
library/core/src/net/ip_addr.rs:1659:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1660:    #[stable(feature = "ipv6_to_ipv4_mapped", since = "1.63.0")]
library/core/src/net/ip_addr.rs:1701:    #[rustc_const_stable(feature = "const_ip_50", since = "1.50.0")]
library/core/src/net/ip_addr.rs:1702:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1722:    /// #![feature(ip)]
library/core/src/net/ip_addr.rs:1728:    #[rustc_const_unstable(feature = "const_ipv6", issue = "76205")]
library/core/src/net/ip_addr.rs:1729:    #[unstable(feature = "ip", issue = "27709")]
library/core/src/net/ip_addr.rs:1748:    #[rustc_const_stable(feature = "const_ip_32", since = "1.32.0")]
library/core/src/net/ip_addr.rs:1749:    #[stable(feature = "ipv6_to_octets", since = "1.12.0")]
library/core/src/net/ip_addr.rs:1759:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1839:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1846:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1857:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1868:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1876:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1887:#[stable(feature = "ip_cmp", since = "1.16.0")]
library/core/src/net/ip_addr.rs:1898:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/ip_addr.rs:1906:#[stable(feature = "i128", since = "1.26.0")]
library/core/src/net/ip_addr.rs:1926:#[stable(feature = "i128", since = "1.26.0")]
library/core/src/net/ip_addr.rs:1949:#[stable(feature = "ipv6_from_octets", since = "1.9.0")]
library/core/src/net/ip_addr.rs:1978:#[stable(feature = "ipv6_from_segments", since = "1.16.0")]
library/core/src/net/ip_addr.rs:2008:#[stable(feature = "ip_from_slice", since = "1.17.0")]
library/core/src/net/ip_addr.rs:2037:#[stable(feature = "ip_from_slice", since = "1.17.0")]
library/core/src/net/parser.rs:278:    /// #![feature(addr_parse_ascii)]
library/core/src/net/parser.rs:288:    #[unstable(feature = "addr_parse_ascii", issue = "101035")]
library/core/src/net/parser.rs:294:#[stable(feature = "ip_addr", since = "1.7.0")]
library/core/src/net/parser.rs:306:    /// #![feature(addr_parse_ascii)]
library/core/src/net/parser.rs:314:    #[unstable(feature = "addr_parse_ascii", issue = "101035")]
library/core/src/net/parser.rs:325:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/parser.rs:337:    /// #![feature(addr_parse_ascii)]
library/core/src/net/parser.rs:345:    #[unstable(feature = "addr_parse_ascii", issue = "101035")]
library/core/src/net/parser.rs:351:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/parser.rs:363:    /// #![feature(addr_parse_ascii)]
library/core/src/net/parser.rs:371:    #[unstable(feature = "addr_parse_ascii", issue = "101035")]
library/core/src/net/parser.rs:377:#[stable(feature = "socket_addr_from_str", since = "1.5.0")]
library/core/src/net/parser.rs:389:    /// #![feature(addr_parse_ascii)]
library/core/src/net/parser.rs:397:    #[unstable(feature = "addr_parse_ascii", issue = "101035")]
library/core/src/net/parser.rs:403:#[stable(feature = "socket_addr_from_str", since = "1.5.0")]
library/core/src/net/parser.rs:415:    /// #![feature(addr_parse_ascii)]
library/core/src/net/parser.rs:425:    #[unstable(feature = "addr_parse_ascii", issue = "101035")]
library/core/src/net/parser.rs:431:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/parser.rs:473:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/net/parser.rs:477:#[stable(feature = "addr_parse_error_error", since = "1.4.0")]
library/core/src/net/parser.rs:485:#[stable(feature = "addr_parse_error_error", since = "1.4.0")]
library/core/src/iter/range.rs:13:        #[unstable(feature = "trusted_step", issue = "85731")]
library/core/src/iter/range.rs:23:#[unstable(feature = "step_trait", reason = "recently redesigned", issue = "42168")]
library/core/src/iter/range.rs:237:            #[unstable(feature = "step_trait", reason = "recently redesigned", issue = "42168")]
library/core/src/iter/range.rs:269:            #[unstable(feature = "step_trait", reason = "recently redesigned", issue = "42168")]
library/core/src/iter/range.rs:333:            #[unstable(feature = "step_trait", reason = "recently redesigned", issue = "42168")]
library/core/src/iter/range.rs:358:            #[unstable(feature = "step_trait", reason = "recently redesigned", issue = "42168")]
library/core/src/iter/range.rs:408:#[unstable(feature = "step_trait", reason = "recently redesigned", issue = "42168")]
library/core/src/iter/range.rs:489:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/range.rs:499:        #[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/range.rs:503:        #[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/range.rs:512:        #[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/iter/range.rs:706:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/range.rs:822:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/range.rs:859:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/range.rs:862:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/range.rs:865:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/range.rs:889:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/range.rs:892:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/range.rs:1101:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/iter/range.rs:1189:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/iter/range.rs:1238:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/range.rs:1241:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/traits/exact_size.rs:85:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/exact_size.rs:115:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/exact_size.rs:136:    /// #![feature(exact_size_is_empty)]
library/core/src/iter/traits/exact_size.rs:147:    #[unstable(feature = "exact_size_is_empty", issue = "35428")]
library/core/src/iter/traits/exact_size.rs:153:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/double_ended.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/double_ended.rs:93:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/double_ended.rs:121:    /// #![feature(iter_advance_by)]
library/core/src/iter/traits/double_ended.rs:136:    #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
library/core/src/iter/traits/double_ended.rs:189:    #[stable(feature = "iter_nth_back", since = "1.37.0")]
library/core/src/iter/traits/double_ended.rs:228:    #[stable(feature = "iterator_try_fold", since = "1.27.0")]
library/core/src/iter/traits/double_ended.rs:299:    #[stable(feature = "iter_rfold", since = "1.27.0")]
library/core/src/iter/traits/double_ended.rs:354:    #[stable(feature = "iter_rfind", since = "1.27.0")]
library/core/src/iter/traits/double_ended.rs:371:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/accum.rs:12:#[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:20:    #[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:33:#[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:41:    #[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:93:                #[stable(feature = "iter_arith_traits", since = "1.12.0")],
library/core/src/iter/traits/accum.rs:96:                #[stable(feature = "wrapping_iter_arith", since = "1.14.0")],
library/core/src/iter/traits/accum.rs:103:        #[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:114:        #[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:125:        #[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:136:        #[stable(feature = "iter_arith_traits", since = "1.12.0")]
library/core/src/iter/traits/accum.rs:152:#[stable(feature = "iter_arith_traits_result", since = "1.16.0")]
library/core/src/iter/traits/accum.rs:183:#[stable(feature = "iter_arith_traits_result", since = "1.16.0")]
library/core/src/iter/traits/accum.rs:213:#[stable(feature = "iter_arith_traits_option", since = "1.37.0")]
library/core/src/iter/traits/accum.rs:243:#[stable(feature = "iter_arith_traits_option", since = "1.37.0")]
library/core/src/iter/traits/collect.rs:95:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:148:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:238:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:241:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:245:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:266:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:270:#[rustc_const_unstable(feature = "const_intoiterator_identity", issue = "90603")]
library/core/src/iter/traits/collect.rs:271:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:351:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:370:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/collect.rs:374:    #[unstable(feature = "extend_one", issue = "72631")]
library/core/src/iter/traits/collect.rs:382:    #[unstable(feature = "extend_one", issue = "72631")]
library/core/src/iter/traits/collect.rs:388:#[stable(feature = "extend_for_unit", since = "1.28.0")]
library/core/src/iter/traits/collect.rs:396:#[stable(feature = "extend_for_tuple", since = "1.56.0")]
library/core/src/iter/traits/mod.rs:9:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/mod.rs:19:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/traits/mod.rs:21:#[unstable(feature = "trusted_step", issue = "85731")]
library/core/src/iter/traits/marker.rs:15:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/traits/marker.rs:19:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/traits/marker.rs:49:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/traits/marker.rs:53:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/traits/marker.rs:72:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/traits/marker.rs:87:#[unstable(feature = "trusted_step", issue = "85731")]
library/core/src/iter/traits/iterator.rs:26:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:76:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:110:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:123:    /// #![feature(iter_next_chunk)]
library/core/src/iter/traits/iterator.rs:135:    /// #![feature(iter_next_chunk)]
library/core/src/iter/traits/iterator.rs:144:    #[unstable(feature = "iter_next_chunk", reason = "recently added", issue = "98326")]
library/core/src/iter/traits/iterator.rs:222:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:260:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:291:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:328:    /// #![feature(iter_advance_by)]
library/core/src/iter/traits/iterator.rs:340:    #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
library/core/src/iter/traits/iterator.rs:392:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:445:    #[stable(feature = "iterator_step_by", since = "1.28.0")]
library/core/src/iter/traits/iterator.rs:517:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:636:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:657:    /// #![feature(iter_intersperse)]
library/core/src/iter/traits/iterator.rs:670:    /// #![feature(iter_intersperse)]
library/core/src/iter/traits/iterator.rs:679:    #[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/traits/iterator.rs:705:    /// #![feature(iter_intersperse)]
library/core/src/iter/traits/iterator.rs:724:    /// #![feature(iter_intersperse)]
library/core/src/iter/traits/iterator.rs:738:    #[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/traits/iterator.rs:798:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:844:    #[stable(feature = "iterator_for_each", since = "1.21.0")]
library/core/src/iter/traits/iterator.rs:920:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:966:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1013:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1085:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1151:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1233:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1322:    #[stable(feature = "iter_map_while", since = "1.57.0")]
library/core/src/iter/traits/iterator.rs:1354:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1408:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1458:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1499:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1584:    #[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/traits/iterator.rs:1653:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1738:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1769:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1887:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:1918:    /// #![feature(iterator_try_collect)]
library/core/src/iter/traits/iterator.rs:1927:    /// #![feature(iterator_try_collect)]
library/core/src/iter/traits/iterator.rs:1936:    /// #![feature(iterator_try_collect)]
library/core/src/iter/traits/iterator.rs:1952:    /// #![feature(iterator_try_collect)]
library/core/src/iter/traits/iterator.rs:1968:    #[unstable(feature = "iterator_try_collect", issue = "94047")]
library/core/src/iter/traits/iterator.rs:1997:    /// #![feature(iter_collect_into)]
library/core/src/iter/traits/iterator.rs:2011:    /// #![feature(iter_collect_into)]
library/core/src/iter/traits/iterator.rs:2026:    /// #![feature(iter_collect_into)]
library/core/src/iter/traits/iterator.rs:2042:    #[unstable(feature = "iter_collect_into", reason = "new API", issue = "94780")]
library/core/src/iter/traits/iterator.rs:2077:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:2129:    /// #![feature(iter_partition_in_place)]
library/core/src/iter/traits/iterator.rs:2140:    #[unstable(feature = "iter_partition_in_place", reason = "new API", issue = "62543")]
library/core/src/iter/traits/iterator.rs:2193:    /// #![feature(iter_is_partitioned)]
library/core/src/iter/traits/iterator.rs:2198:    #[unstable(feature = "iter_is_partitioned", reason = "new API", issue = "62544")]
library/core/src/iter/traits/iterator.rs:2293:    #[stable(feature = "iterator_try_fold", since = "1.27.0")]
library/core/src/iter/traits/iterator.rs:2352:    #[stable(feature = "iterator_try_fold", since = "1.27.0")]
library/core/src/iter/traits/iterator.rs:2472:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:2510:    #[stable(feature = "iterator_fold_self", since = "1.51.0")]
library/core/src/iter/traits/iterator.rs:2542:    /// #![feature(iterator_try_reduce)]
library/core/src/iter/traits/iterator.rs:2552:    /// #![feature(iterator_try_reduce)]
library/core/src/iter/traits/iterator.rs:2562:    /// #![feature(iterator_try_reduce)]
library/core/src/iter/traits/iterator.rs:2572:    /// #![feature(iterator_try_reduce)]
library/core/src/iter/traits/iterator.rs:2582:    #[unstable(feature = "iterator_try_reduce", reason = "new API", issue = "87053")]
library/core/src/iter/traits/iterator.rs:2640:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:2694:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:2758:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:2790:    #[stable(feature = "iterator_find_map", since = "1.30.0")]
library/core/src/iter/traits/iterator.rs:2818:    /// #![feature(try_find)]
library/core/src/iter/traits/iterator.rs:2835:    /// #![feature(try_find)]
library/core/src/iter/traits/iterator.rs:2847:    #[unstable(feature = "try_find", reason = "new API", issue = "63178")]
library/core/src/iter/traits/iterator.rs:2930:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:2988:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3040:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3079:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3102:    #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
library/core/src/iter/traits/iterator.rs:3136:    #[stable(feature = "iter_max_by", since = "1.15.0")]
library/core/src/iter/traits/iterator.rs:3164:    #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
library/core/src/iter/traits/iterator.rs:3198:    #[stable(feature = "iter_min_by", since = "1.15.0")]
library/core/src/iter/traits/iterator.rs:3236:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3275:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3308:    #[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/traits/iterator.rs:3356:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3390:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/iterator.rs:3416:    /// #![feature(iter_array_chunks)]
library/core/src/iter/traits/iterator.rs:3426:    /// #![feature(iter_array_chunks)]
library/core/src/iter/traits/iterator.rs:3435:    #[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/traits/iterator.rs:3469:    #[stable(feature = "iter_arith", since = "1.11.0")]
library/core/src/iter/traits/iterator.rs:3502:    #[stable(feature = "iter_arith", since = "1.11.0")]
library/core/src/iter/traits/iterator.rs:3524:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3543:    /// #![feature(iter_order_by)]
library/core/src/iter/traits/iterator.rs:3554:    #[unstable(feature = "iter_order_by", issue = "64295")]
library/core/src/iter/traits/iterator.rs:3611:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3630:    /// #![feature(iter_order_by)]
library/core/src/iter/traits/iterator.rs:3650:    #[unstable(feature = "iter_order_by", issue = "64295")]
library/core/src/iter/traits/iterator.rs:3684:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3703:    /// #![feature(iter_order_by)]
library/core/src/iter/traits/iterator.rs:3710:    #[unstable(feature = "iter_order_by", issue = "64295")]
library/core/src/iter/traits/iterator.rs:3743:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3765:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3787:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3809:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3831:    #[stable(feature = "iter_order", since = "1.5.0")]
library/core/src/iter/traits/iterator.rs:3854:    /// #![feature(is_sorted)]
library/core/src/iter/traits/iterator.rs:3863:    #[unstable(feature = "is_sorted", reason = "new API", issue = "53485")]
library/core/src/iter/traits/iterator.rs:3882:    /// #![feature(is_sorted)]
library/core/src/iter/traits/iterator.rs:3892:    #[unstable(feature = "is_sorted", reason = "new API", issue = "53485")]
library/core/src/iter/traits/iterator.rs:3933:    /// #![feature(is_sorted)]
library/core/src/iter/traits/iterator.rs:3939:    #[unstable(feature = "is_sorted", reason = "new API", issue = "53485")]
library/core/src/iter/traits/iterator.rs:3955:    #[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/traits/iterator.rs:4005:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/traits/unchecked_iterator.rs:28:    #[unstable(feature = "trusted_len_next_unchecked", issue = "37572")]
library/core/src/iter/adapters/take_while.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/take_while.rs:27:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/take_while.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/take_while.rs:100:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/take_while.rs:108:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/take_while.rs:122:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/cloned.rs:14:#[stable(feature = "iter_cloned", since = "1.1.0")]
library/core/src/iter/adapters/cloned.rs:31:#[stable(feature = "iter_cloned", since = "1.1.0")]
library/core/src/iter/adapters/cloned.rs:73:#[stable(feature = "iter_cloned", since = "1.1.0")]
library/core/src/iter/adapters/cloned.rs:100:#[stable(feature = "iter_cloned", since = "1.1.0")]
library/core/src/iter/adapters/cloned.rs:115:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/cloned.rs:124:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/cloned.rs:128:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/cloned.rs:136:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/cloned.rs:157:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/chain.rs:22:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/chain.rs:41:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/chain.rs:173:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/chain.rs:260:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/chain.rs:268:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/chain.rs:276:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/skip_while.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/skip_while.rs:27:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/skip_while.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/skip_while.rs:99:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/skip_while.rs:107:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/skip_while.rs:121:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/step_by.rs:16:#[stable(feature = "iterator_step_by", since = "1.28.0")]
library/core/src/iter/adapters/step_by.rs:39:#[stable(feature = "iterator_step_by", since = "1.28.0")]
library/core/src/iter/adapters/step_by.rs:94:#[stable(feature = "double_ended_step_by_iterator", since = "1.38.0")]
library/core/src/iter/adapters/step_by.rs:128:#[stable(feature = "iterator_step_by", since = "1.28.0")]
library/core/src/iter/adapters/step_by.rs:491:        #[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/by_ref_sized.rs:8:#[unstable(feature = "std_internals", issue = "none")]
library/core/src/iter/adapters/by_ref_sized.rs:15:#[unstable(feature = "std_internals", issue = "none")]
library/core/src/iter/adapters/by_ref_sized.rs:58:#[unstable(feature = "std_internals", issue = "none")]
library/core/src/iter/adapters/flatten.rs:12:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/flatten.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/flatten.rs:33:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/flatten.rs:43:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/flatten.rs:94:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/flatten.rs:129:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/flatten.rs:138:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/flatten.rs:156:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/flatten.rs:167:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/flatten.rs:178:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/flatten.rs:189:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/flatten.rs:241:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/flatten.rs:276:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/flatten.rs:284:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/flatten.rs:292:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/flatten.rs:313:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/peekable.rs:14:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/peekable.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/peekable.rs:118:#[stable(feature = "double_ended_peek_iterator", since = "1.38.0")]
library/core/src/iter/adapters/peekable.rs:168:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/peekable.rs:171:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/peekable.rs:213:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/peekable.rs:253:    #[stable(feature = "peekable_peek_mut", since = "1.53.0")]
library/core/src/iter/adapters/peekable.rs:284:    #[stable(feature = "peekable_next_if", since = "1.51.0")]
library/core/src/iter/adapters/peekable.rs:310:    #[stable(feature = "peekable_next_if", since = "1.51.0")]
library/core/src/iter/adapters/peekable.rs:320:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/peekable.rs:323:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/skip.rs:15:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/skip.rs:27:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/skip.rs:156:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/skip.rs:159:#[stable(feature = "double_ended_skip_iterator", since = "1.9.0")]
library/core/src/iter/adapters/skip.rs:214:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/skip.rs:217:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/skip.rs:231:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/array_chunks.rs:14:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/array_chunks.rs:33:    #[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/array_chunks.rs:40:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/array_chunks.rs:94:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/array_chunks.rs:159:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/array_chunks.rs:162:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/rev.rs:14:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/rev.rs:25:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/rev.rs:76:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/rev.rs:120:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/rev.rs:134:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/rev.rs:137:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/rev.rs:140:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/cycle.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/cycle.rs:25:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/cycle.rs:107:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/fuse.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/fuse.rs:29:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/fuse.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/fuse.rs:119:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/fuse.rs:164:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/fuse.rs:184:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/fuse.rs:199:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/fuse.rs:206:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/fuse.rs:215:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/mod.rs:29:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/mod.rs:36:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/adapters/mod.rs:39:#[unstable(feature = "std_internals", issue = "none")]
library/core/src/iter/adapters/mod.rs:42:#[stable(feature = "iter_cloned", since = "1.1.0")]
library/core/src/iter/adapters/mod.rs:45:#[stable(feature = "iterator_step_by", since = "1.28.0")]
library/core/src/iter/adapters/mod.rs:48:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/adapters/mod.rs:51:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/mod.rs:54:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/mod.rs:57:#[stable(feature = "iter_map_while", since = "1.57.0")]
library/core/src/iter/adapters/mod.rs:60:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/mod.rs:63:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/mod.rs:66:#[stable(feature = "iter_zip", since = "1.59.0")]
library/core/src/iter/adapters/mod.rs:96:/// # #![feature(inplace_iteration)]
library/core/src/iter/adapters/mod.rs:107:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/mod.rs:209:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/mod.rs:226:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/intersperse.rs:7:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/intersperse.rs:27:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/intersperse.rs:64:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/intersperse.rs:74:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/intersperse.rs:90:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/intersperse.rs:116:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/adapters/enumerate.rs:17:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/enumerate.rs:28:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/enumerate.rs:141:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/enumerate.rs:216:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/enumerate.rs:231:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/enumerate.rs:235:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/enumerate.rs:243:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/enumerate.rs:246:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/enumerate.rs:249:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/enumerate.rs:263:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/enumerate.rs:266:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/filter_map.rs:14:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/filter_map.rs:26:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/filter_map.rs:53:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/filter_map.rs:149:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/filter_map.rs:188:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/filter_map.rs:191:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/filter_map.rs:205:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/take.rs:15:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/take.rs:27:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/take.rs:137:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/take.rs:151:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/take.rs:154:#[stable(feature = "double_ended_take_iterator", since = "1.38.0")]
library/core/src/iter/adapters/take.rs:244:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/take.rs:247:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/take.rs:250:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/filter.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/filter.rs:29:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/filter.rs:50:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/filter.rs:160:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/filter.rs:189:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/filter.rs:192:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/filter.rs:206:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/scan.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/scan.rs:27:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/scan.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/scan.rs:80:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/scan.rs:94:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/map_while.rs:13:#[stable(feature = "iter_map_while", since = "1.57.0")]
library/core/src/iter/adapters/map_while.rs:26:#[stable(feature = "iter_map_while", since = "1.57.0")]
library/core/src/iter/adapters/map_while.rs:33:#[stable(feature = "iter_map_while", since = "1.57.0")]
library/core/src/iter/adapters/map_while.rs:70:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/map_while.rs:84:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/copied.rs:18:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/copied.rs:39:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/copied.rs:107:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/copied.rs:139:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/copied.rs:154:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/copied.rs:163:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/copied.rs:167:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/copied.rs:175:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/adapters/copied.rs:245:#[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/iter/adapters/inspect.rs:14:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/inspect.rs:26:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/inspect.rs:67:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/inspect.rs:104:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/inspect.rs:134:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/inspect.rs:148:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/inspect.rs:151:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/inspect.rs:165:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/zip.rs:12:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/zip.rs:65:#[stable(feature = "iter_zip", since = "1.59.0")]
library/core/src/iter/adapters/zip.rs:74:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/zip.rs:108:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/zip.rs:377:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/zip.rs:386:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/zip.rs:395:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/zip.rs:404:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/zip.rs:412:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/zip.rs:429:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/zip.rs:444:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/zip.rs:447:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/zip.rs:528:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/zip.rs:541:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/map.rs:59:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/map.rs:73:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/adapters/map.rs:94:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/map.rs:138:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/map.rs:165:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/adapters/map.rs:179:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/adapters/map.rs:182:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/adapters/map.rs:204:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/map.rs:208:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/adapters/map.rs:216:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/adapters/map.rs:230:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/mod.rs:354:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/mod.rs:377:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/mod.rs:381:    feature = "step_trait",
library/core/src/iter/mod.rs:388:    feature = "iter_from_generator",
library/core/src/iter/mod.rs:393:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/mod.rs:395:#[stable(feature = "iter_from_fn", since = "1.34.0")]
library/core/src/iter/mod.rs:397:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/mod.rs:399:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/mod.rs:401:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/mod.rs:403:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/mod.rs:405:#[stable(feature = "iterator_repeat_with", since = "1.28.0")]
library/core/src/iter/mod.rs:407:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/mod.rs:410:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/mod.rs:412:#[unstable(issue = "none", feature = "inplace_iteration")]
library/core/src/iter/mod.rs:414:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/mod.rs:416:#[unstable(feature = "trusted_step", issue = "85731")]
library/core/src/iter/mod.rs:418:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/mod.rs:423:#[stable(feature = "iter_zip", since = "1.59.0")]
library/core/src/iter/mod.rs:425:#[unstable(feature = "iter_array_chunks", reason = "recently added", issue = "100450")]
library/core/src/iter/mod.rs:427:#[unstable(feature = "std_internals", issue = "none")]
library/core/src/iter/mod.rs:429:#[stable(feature = "iter_cloned", since = "1.1.0")]
library/core/src/iter/mod.rs:431:#[stable(feature = "iter_copied", since = "1.36.0")]
library/core/src/iter/mod.rs:433:#[stable(feature = "iterator_flatten", since = "1.29.0")]
library/core/src/iter/mod.rs:435:#[stable(feature = "iter_map_while", since = "1.57.0")]
library/core/src/iter/mod.rs:437:#[unstable(feature = "inplace_iteration", issue = "none")]
library/core/src/iter/mod.rs:439:#[stable(feature = "iterator_step_by", since = "1.28.0")]
library/core/src/iter/mod.rs:441:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/mod.rs:443:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/iter/mod.rs:445:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/mod.rs:450:#[unstable(feature = "iter_intersperse", reason = "recently added", issue = "79524")]
library/core/src/iter/sources/repeat_n.rs:21:/// #![feature(iter_repeat_n)]
library/core/src/iter/sources/repeat_n.rs:39:/// #![feature(iter_repeat_n)]
library/core/src/iter/sources/repeat_n.rs:61:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:81:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:106:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:113:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:168:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:175:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:193:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources/repeat_n.rs:196:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/sources/empty.rs:19:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/empty.rs:20:#[rustc_const_stable(feature = "const_iter_empty", since = "1.32.0")]
library/core/src/iter/sources/empty.rs:29:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/empty.rs:32:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/iter/sources/empty.rs:39:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/empty.rs:52:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/empty.rs:59:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/empty.rs:66:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/sources/empty.rs:69:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/sources/empty.rs:74:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/empty.rs:83:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources/once_with.rs:60:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/once_with.rs:71:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/once_with.rs:76:#[stable(feature = "iter_once_with_debug", since = "1.68.0")]
library/core/src/iter/sources/once_with.rs:87:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/once_with.rs:103:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/once_with.rs:110:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/once_with.rs:117:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/once_with.rs:120:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/iter/sources/from_fn.rs:42:#[stable(feature = "iter_from_fn", since = "1.34.0")]
library/core/src/iter/sources/from_fn.rs:57:#[stable(feature = "iter_from_fn", since = "1.34.0")]
library/core/src/iter/sources/from_fn.rs:60:#[stable(feature = "iter_from_fn", since = "1.34.0")]
library/core/src/iter/sources/from_fn.rs:73:#[stable(feature = "iter_from_fn", since = "1.34.0")]
library/core/src/iter/sources/from_generator.rs:14:/// #![feature(generators)]
library/core/src/iter/sources/from_generator.rs:15:/// #![feature(iter_from_generator)]
library/core/src/iter/sources/from_generator.rs:26:#[unstable(feature = "iter_from_generator", issue = "43122", reason = "generators are unstable")]
library/core/src/iter/sources/from_generator.rs:37:#[unstable(feature = "iter_from_generator", issue = "43122", reason = "generators are unstable")]
library/core/src/iter/sources/from_generator.rs:41:#[unstable(feature = "iter_from_generator", issue = "43122", reason = "generators are unstable")]
library/core/src/iter/sources/from_generator.rs:53:#[unstable(feature = "iter_from_generator", issue = "43122", reason = "generators are unstable")]
library/core/src/iter/sources/once.rs:54:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/sources/once.rs:63:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/sources/once.rs:68:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/sources/once.rs:81:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/sources/once.rs:88:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/sources/once.rs:95:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/sources/once.rs:98:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/sources/repeat_with.rs:64:#[stable(feature = "iterator_repeat_with", since = "1.28.0")]
library/core/src/iter/sources/repeat_with.rs:75:#[stable(feature = "iterator_repeat_with", since = "1.28.0")]
library/core/src/iter/sources/repeat_with.rs:80:#[stable(feature = "iterator_repeat_with_debug", since = "1.68.0")]
library/core/src/iter/sources/repeat_with.rs:87:#[stable(feature = "iterator_repeat_with", since = "1.28.0")]
library/core/src/iter/sources/repeat_with.rs:118:#[stable(feature = "iterator_repeat_with", since = "1.28.0")]
library/core/src/iter/sources/repeat_with.rs:121:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/sources/successors.rs:14:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/sources/successors.rs:32:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/sources/successors.rs:38:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/sources/successors.rs:58:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/sources/successors.rs:61:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/sources/repeat.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/sources/repeat.rs:64:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/sources/repeat.rs:69:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/sources/repeat.rs:105:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/sources/repeat.rs:126:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/iter/sources/repeat.rs:129:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/iter/sources.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/iter/sources.rs:14:#[stable(feature = "iter_empty", since = "1.2.0")]
library/core/src/iter/sources.rs:17:#[stable(feature = "iter_once", since = "1.2.0")]
library/core/src/iter/sources.rs:20:#[unstable(feature = "iter_repeat_n", issue = "104434")]
library/core/src/iter/sources.rs:23:#[stable(feature = "iterator_repeat_with", since = "1.28.0")]
library/core/src/iter/sources.rs:26:#[stable(feature = "iter_from_fn", since = "1.34.0")]
library/core/src/iter/sources.rs:30:    feature = "iter_from_generator",
library/core/src/iter/sources.rs:36:#[stable(feature = "iter_successors", since = "1.34.0")]
library/core/src/iter/sources.rs:39:#[stable(feature = "iter_once_with", since = "1.43.0")]
library/core/src/cell.rs:236:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:248:#[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell.rs:250:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell.rs:291:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:297:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:305:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:308:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:316:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:325:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:333:#[stable(feature = "cell_eq", since = "1.2.0")]
library/core/src/cell.rs:336:#[stable(feature = "cell_ord", since = "1.10.0")]
library/core/src/cell.rs:364:#[stable(feature = "cell_ord", since = "1.10.0")]
library/core/src/cell.rs:372:#[stable(feature = "cell_from", since = "1.12.0")]
library/core/src/cell.rs:390:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:391:    #[rustc_const_stable(feature = "const_cell_new", since = "1.24.0")]
library/core/src/cell.rs:409:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:430:    #[stable(feature = "move_cell", since = "1.17.0")]
library/core/src/cell.rs:457:    #[stable(feature = "move_cell", since = "1.17.0")]
library/core/src/cell.rs:476:    #[stable(feature = "move_cell", since = "1.17.0")]
library/core/src/cell.rs:477:    #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
library/core/src/cell.rs:496:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:508:    /// #![feature(cell_update)]
library/core/src/cell.rs:519:    #[unstable(feature = "cell_update", issue = "50186")]
library/core/src/cell.rs:544:    #[stable(feature = "cell_as_ptr", since = "1.12.0")]
library/core/src/cell.rs:545:    #[rustc_const_stable(feature = "const_cell_as_ptr", since = "1.32.0")]
library/core/src/cell.rs:573:    #[stable(feature = "cell_get_mut", since = "1.11.0")]
library/core/src/cell.rs:592:    #[stable(feature = "as_cell", since = "1.37.0")]
library/core/src/cell.rs:613:    #[stable(feature = "move_cell", since = "1.17.0")]
library/core/src/cell.rs:619:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/cell.rs:629:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/cell.rs:646:    #[stable(feature = "as_cell", since = "1.37.0")]
library/core/src/cell.rs:659:    /// #![feature(as_array_of_cells)]
library/core/src/cell.rs:666:    #[unstable(feature = "as_array_of_cells", issue = "88248")]
library/core/src/cell.rs:677:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:684:    #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:690:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:693:    #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:697:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:702:        #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:709:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:717:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:720:    #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:724:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:729:        #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:736:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:779:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:780:    #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
library/core/src/cell.rs:786:            #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:802:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:803:    #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
library/core/src/cell.rs:830:    #[stable(feature = "refcell_replace", since = "1.24.0")]
library/core/src/cell.rs:853:    #[stable(feature = "refcell_replace_swap", since = "1.35.0")]
library/core/src/cell.rs:882:    #[stable(feature = "refcell_swap", since = "1.24.0")]
library/core/src/cell.rs:920:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:952:    #[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:954:    #[cfg_attr(feature = "debug_refcell", track_caller)]
library/core/src/cell.rs:958:                #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:974:                #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:1013:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1042:    #[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/cell.rs:1044:    #[cfg_attr(feature = "debug_refcell", track_caller)]
library/core/src/cell.rs:1048:                #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:1060:                #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:1078:    #[stable(feature = "cell_as_ptr", since = "1.12.0")]
library/core/src/cell.rs:1111:    #[stable(feature = "cell_get_mut", since = "1.11.0")]
library/core/src/cell.rs:1127:    /// #![feature(cell_leak)]
library/core/src/cell.rs:1137:    #[unstable(feature = "cell_leak", issue = "69099")]
library/core/src/cell.rs:1170:    #[stable(feature = "borrow_state", since = "1.37.0")]
library/core/src/cell.rs:1184:                #[cfg(feature = "debug_refcell")]
library/core/src/cell.rs:1209:    #[stable(feature = "refcell_take", since = "1.50.0")]
library/core/src/cell.rs:1215:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1218:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1221:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1242:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1251:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1262:#[stable(feature = "cell_eq", since = "1.2.0")]
library/core/src/cell.rs:1265:#[stable(feature = "cell_ord", since = "1.10.0")]
library/core/src/cell.rs:1308:#[stable(feature = "cell_ord", since = "1.10.0")]
library/core/src/cell.rs:1319:#[stable(feature = "cell_from", since = "1.12.0")]
library/core/src/cell.rs:1327:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/cell.rs:1387:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1397:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1417:    #[stable(feature = "cell_extras", since = "1.15.0")]
library/core/src/cell.rs:1442:    #[stable(feature = "cell_map", since = "1.8.0")]
library/core/src/cell.rs:1471:    #[stable(feature = "cell_filter_map", since = "1.63.0")]
library/core/src/cell.rs:1503:    #[stable(feature = "refcell_map_split", since = "1.35.0")]
library/core/src/cell.rs:1531:    /// #![feature(cell_leak)]
library/core/src/cell.rs:1541:    #[unstable(feature = "cell_leak", issue = "69099")]
library/core/src/cell.rs:1553:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/cell.rs:1556:#[stable(feature = "std_guard_impls", since = "1.20.0")]
library/core/src/cell.rs:1587:    #[stable(feature = "cell_map", since = "1.8.0")]
library/core/src/cell.rs:1625:    #[stable(feature = "cell_filter_map", since = "1.63.0")]
library/core/src/cell.rs:1668:    #[stable(feature = "refcell_map_split", since = "1.35.0")]
library/core/src/cell.rs:1697:    /// #![feature(cell_leak)]
library/core/src/cell.rs:1707:    #[unstable(feature = "cell_leak", issue = "69099")]
library/core/src/cell.rs:1768:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1779:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1790:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1799:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/cell.rs:1802:#[stable(feature = "std_guard_impls", since = "1.20.0")]
library/core/src/cell.rs:1984:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:1990:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:2006:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:2007:    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
library/core/src/cell.rs:2025:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:2026:    #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
library/core/src/cell.rs:2038:    /// # #![feature(unsafe_cell_from_mut)]
library/core/src/cell.rs:2048:    #[unstable(feature = "unsafe_cell_from_mut", issue = "111645")]
library/core/src/cell.rs:2071:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cell.rs:2072:    #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
library/core/src/cell.rs:2096:    #[stable(feature = "unsafe_cell_get_mut", since = "1.50.0")]
library/core/src/cell.rs:2097:    #[rustc_const_unstable(feature = "const_unsafecell_get_mut", issue = "88836")]
library/core/src/cell.rs:2131:    #[stable(feature = "unsafe_cell_raw_get", since = "1.56.0")]
library/core/src/cell.rs:2132:    #[rustc_const_stable(feature = "unsafe_cell_raw_get", since = "1.56.0")]
library/core/src/cell.rs:2141:#[stable(feature = "unsafe_cell_default", since = "1.10.0")]
library/core/src/cell.rs:2149:#[stable(feature = "cell_from", since = "1.12.0")]
library/core/src/cell.rs:2157:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/cell.rs:2167:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/cell.rs:2182:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2188:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2191:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2206:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2240:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2248:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2256:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/cell.rs:2257://#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/cell.rs:2267:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/cell.rs:2268://#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/char/convert.rs:29:#[stable(feature = "char_convert", since = "1.13.0")]
library/core/src/char/convert.rs:48:#[stable(feature = "more_char_conversions", since = "1.51.0")]
library/core/src/char/convert.rs:69:#[stable(feature = "more_char_conversions", since = "1.51.0")]
library/core/src/char/convert.rs:94:#[stable(feature = "u8_from_char", since = "1.59.0")]
library/core/src/char/convert.rs:122:#[stable(feature = "char_convert", since = "1.13.0")]
library/core/src/char/convert.rs:144:#[stable(feature = "char_from_str", since = "1.20.0")]
library/core/src/char/convert.rs:156:#[stable(feature = "char_from_str", since = "1.20.0")]
library/core/src/char/convert.rs:167:#[stable(feature = "char_from_str", since = "1.20.0")]
library/core/src/char/convert.rs:175:#[stable(feature = "char_from_str", since = "1.20.0")]
library/core/src/char/convert.rs:213:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/char/convert.rs:227:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/char/convert.rs:231:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/char/methods.rs:25:    #[stable(feature = "assoc_char_consts", since = "1.52.0")]
library/core/src/char/methods.rs:33:    #[stable(feature = "assoc_char_consts", since = "1.52.0")]
library/core/src/char/methods.rs:46:    #[stable(feature = "assoc_char_consts", since = "1.52.0")]
library/core/src/char/methods.rs:91:    #[stable(feature = "assoc_char_funcs", since = "1.52.0")]
library/core/src/char/methods.rs:135:    #[stable(feature = "assoc_char_funcs", since = "1.52.0")]
library/core/src/char/methods.rs:136:    #[rustc_const_stable(feature = "const_char_convert", since = "1.67.0")]
library/core/src/char/methods.rs:176:    #[stable(feature = "assoc_char_funcs", since = "1.52.0")]
library/core/src/char/methods.rs:177:    #[rustc_const_unstable(feature = "const_char_from_u32_unchecked", issue = "89259")]
library/core/src/char/methods.rs:228:    #[stable(feature = "assoc_char_funcs", since = "1.52.0")]
library/core/src/char/methods.rs:229:    #[rustc_const_stable(feature = "const_char_convert", since = "1.67.0")]
library/core/src/char/methods.rs:276:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:325:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:326:    #[rustc_const_stable(feature = "const_char_convert", since = "1.67.0")]
library/core/src/char/methods.rs:381:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:446:    #[stable(feature = "char_escape_debug", since = "1.20.0")]
library/core/src/char/methods.rs:502:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:560:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:561:    #[rustc_const_stable(feature = "const_char_len_utf", since = "1.52.0")]
library/core/src/char/methods.rs:591:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:592:    #[rustc_const_stable(feature = "const_char_len_utf", since = "1.52.0")]
library/core/src/char/methods.rs:629:    #[stable(feature = "unicode_encode_char", since = "1.15.0")]
library/core/src/char/methods.rs:664:    #[stable(feature = "unicode_encode_char", since = "1.15.0")]
library/core/src/char/methods.rs:692:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:728:    /// #![feature(const_unicode_case_lookup)]
library/core/src/char/methods.rs:733:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:734:    #[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]
library/core/src/char/methods.rs:770:    /// #![feature(const_unicode_case_lookup)]
library/core/src/char/methods.rs:775:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:776:    #[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]
library/core/src/char/methods.rs:808:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:837:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:863:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:918:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:988:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:1080:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/methods.rs:1098:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/char/methods.rs:1099:    #[rustc_const_stable(feature = "const_char_is_ascii", since = "1.32.0")]
library/core/src/char/methods.rs:1112:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/char/methods.rs:1146:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/char/methods.rs:1147:    #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.52.0")]
library/core/src/char/methods.rs:1180:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/char/methods.rs:1181:    #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.52.0")]
library/core/src/char/methods.rs:1208:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/char/methods.rs:1209:    #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.52.0")]
library/core/src/char/methods.rs:1234:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/char/methods.rs:1259:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/char/methods.rs:1294:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1295:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1328:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1329:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1362:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1363:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1399:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1400:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1433:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1434:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1446:    /// #![feature(is_ascii_octdigit)]
library/core/src/char/methods.rs:1465:    #[unstable(feature = "is_ascii_octdigit", issue = "101288")]
library/core/src/char/methods.rs:1466:    #[rustc_const_unstable(feature = "is_ascii_octdigit", issue = "101288")]
library/core/src/char/methods.rs:1502:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1503:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1540:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1541:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1574:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1575:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1625:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1626:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1661:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/char/methods.rs:1662:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/char/methods.rs:1714:#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
library/core/src/char/methods.rs:1758:#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
library/core/src/char/mod.rs:21:#![stable(feature = "core_char", since = "1.2.0")]
library/core/src/char/mod.rs:28:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/char/mod.rs:30:#[stable(feature = "char_from_str", since = "1.20.0")]
library/core/src/char/mod.rs:32:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/mod.rs:36:#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
library/core/src/char/mod.rs:38:#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
library/core/src/char/mod.rs:93:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:98:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/mod.rs:103:#[stable(feature = "unicode_version", since = "1.45.0")]
library/core/src/char/mod.rs:108:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/mod.rs:115:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:116:#[rustc_const_stable(feature = "const_char_convert", since = "1.67.0")]
library/core/src/char/mod.rs:125:#[stable(feature = "char_from_unchecked", since = "1.5.0")]
library/core/src/char/mod.rs:126:#[rustc_const_unstable(feature = "const_char_from_u32_unchecked", issue = "89259")]
library/core/src/char/mod.rs:135:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:136:#[rustc_const_stable(feature = "const_char_convert", since = "1.67.0")]
library/core/src/char/mod.rs:151:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:162:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:193:#[stable(feature = "exact_size_escape", since = "1.11.0")]
library/core/src/char/mod.rs:201:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/char/mod.rs:204:#[stable(feature = "char_struct_display", since = "1.16.0")]
library/core/src/char/mod.rs:218:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:237:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:268:#[stable(feature = "exact_size_escape", since = "1.11.0")]
library/core/src/char/mod.rs:276:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/char/mod.rs:279:#[stable(feature = "char_struct_display", since = "1.16.0")]
library/core/src/char/mod.rs:292:#[stable(feature = "char_escape_debug", since = "1.20.0")]
library/core/src/char/mod.rs:327:#[stable(feature = "char_escape_debug", since = "1.20.0")]
library/core/src/char/mod.rs:353:#[stable(feature = "char_escape_debug", since = "1.20.0")]
library/core/src/char/mod.rs:363:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/char/mod.rs:366:#[stable(feature = "char_escape_debug", since = "1.20.0")]
library/core/src/char/mod.rs:382:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:386:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:397:#[stable(feature = "case_mapping_double_ended", since = "1.59.0")]
library/core/src/char/mod.rs:404:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/char/mod.rs:407:#[stable(feature = "exact_size_case_mapping_iter", since = "1.35.0")]
library/core/src/char/mod.rs:416:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:420:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/char/mod.rs:431:#[stable(feature = "case_mapping_double_ended", since = "1.59.0")]
library/core/src/char/mod.rs:438:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/char/mod.rs:441:#[stable(feature = "exact_size_case_mapping_iter", since = "1.35.0")]
library/core/src/char/mod.rs:535:#[stable(feature = "char_struct_display", since = "1.16.0")]
library/core/src/char/mod.rs:542:#[stable(feature = "char_struct_display", since = "1.16.0")]
library/core/src/char/mod.rs:550:#[stable(feature = "u8_from_char", since = "1.59.0")]
library/core/src/char/mod.rs:554:#[stable(feature = "u8_from_char", since = "1.59.0")]
library/core/src/char/mod.rs:561:#[stable(feature = "u8_from_char", since = "1.59.0")]
library/core/src/char/decode.rs:12:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/decode.rs:25:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/decode.rs:38:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/decode.rs:111:    #[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/decode.rs:117:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/char/decode.rs:124:#[stable(feature = "decode_utf16", since = "1.9.0")]
library/core/src/alloc/layout.rs:35:#[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:64:    #[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:65:    #[rustc_const_stable(feature = "const_alloc_layout_size_align", since = "1.50.0")]
library/core/src/alloc/layout.rs:113:    #[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:114:    #[rustc_const_stable(feature = "const_alloc_layout_unchecked", since = "1.36.0")]
library/core/src/alloc/layout.rs:124:    #[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:125:    #[rustc_const_stable(feature = "const_alloc_layout_size_align", since = "1.50.0")]
library/core/src/alloc/layout.rs:133:    #[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:134:    #[rustc_const_stable(feature = "const_alloc_layout_size_align", since = "1.50.0")]
library/core/src/alloc/layout.rs:144:    #[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:145:    #[rustc_const_stable(feature = "alloc_layout_const_new", since = "1.42.0")]
library/core/src/alloc/layout.rs:159:    #[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:160:    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/alloc/layout.rs:193:    /// [extern type]: ../../unstable-book/language-features/extern-types.html
library/core/src/alloc/layout.rs:194:    #[unstable(feature = "layout_for_ptr", issue = "69835")]
library/core/src/alloc/layout.rs:195:    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/alloc/layout.rs:210:    #[unstable(feature = "alloc_layout_extra", issue = "55724")]
library/core/src/alloc/layout.rs:211:    #[rustc_const_unstable(feature = "alloc_layout_extra", issue = "55724")]
library/core/src/alloc/layout.rs:233:    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
library/core/src/alloc/layout.rs:255:    #[unstable(feature = "alloc_layout_extra", issue = "55724")]
library/core/src/alloc/layout.rs:256:    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/alloc/layout.rs:291:    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
library/core/src/alloc/layout.rs:292:    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/alloc/layout.rs:316:    #[unstable(feature = "alloc_layout_extra", issue = "55724")]
library/core/src/alloc/layout.rs:376:    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
library/core/src/alloc/layout.rs:402:    #[unstable(feature = "alloc_layout_extra", issue = "55724")]
library/core/src/alloc/layout.rs:416:    #[unstable(feature = "alloc_layout_extra", issue = "55724")]
library/core/src/alloc/layout.rs:428:    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
library/core/src/alloc/layout.rs:429:    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/alloc/layout.rs:461:#[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:472:#[stable(feature = "alloc_layout_error", since = "1.50.0")]
library/core/src/alloc/layout.rs:477:#[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/layout.rs:481:#[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/global.rs:122:#[stable(feature = "global_alloc", since = "1.28.0")]
library/core/src/alloc/global.rs:156:    #[stable(feature = "global_alloc", since = "1.28.0")]
library/core/src/alloc/global.rs:171:    #[stable(feature = "global_alloc", since = "1.28.0")]
library/core/src/alloc/global.rs:193:    #[stable(feature = "global_alloc", since = "1.28.0")]
library/core/src/alloc/global.rs:262:    #[stable(feature = "global_alloc", since = "1.28.0")]
library/core/src/alloc/mod.rs:3:#![stable(feature = "alloc_module", since = "1.28.0")]
library/core/src/alloc/mod.rs:8:#[stable(feature = "global_alloc", since = "1.28.0")]
library/core/src/alloc/mod.rs:10:#[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/mod.rs:12:#[stable(feature = "alloc_layout", since = "1.28.0")]
library/core/src/alloc/mod.rs:21:#[stable(feature = "alloc_layout_error", since = "1.50.0")]
library/core/src/alloc/mod.rs:32:#[unstable(feature = "allocator_api", issue = "32838")]
library/core/src/alloc/mod.rs:37:    feature = "allocator_api",
library/core/src/alloc/mod.rs:44:#[unstable(feature = "allocator_api", issue = "32838")]
library/core/src/alloc/mod.rs:108:#[unstable(feature = "allocator_api", issue = "32838")]
library/core/src/alloc/mod.rs:368:#[unstable(feature = "allocator_api", issue = "32838")]
library/core/src/panicking.rs:24:    feature = "core_panic",
library/core/src/panicking.rs:32:#[cfg(feature = "panic_immediate_abort")]
library/core/src/panicking.rs:46:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:47:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:51:#[rustc_const_unstable(feature = "core_panic", issue = "none")]
library/core/src/panicking.rs:53:    if cfg!(feature = "panic_immediate_abort") {
library/core/src/panicking.rs:73:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:74:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:81:    if cfg!(feature = "panic_immediate_abort") {
library/core/src/panicking.rs:105:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:106:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:108:#[rustc_const_unstable(feature = "core_panic", issue = "none")]
library/core/src/panicking.rs:121:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:122:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:132:#[rustc_const_unstable(feature = "core_panic", issue = "none")]
library/core/src/panicking.rs:148:#[rustc_const_unstable(feature = "core_panic", issue = "none")]
library/core/src/panicking.rs:153:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:154:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:158:    if cfg!(feature = "panic_immediate_abort") {
library/core/src/panicking.rs:166:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never))]
library/core/src/panicking.rs:171:    if cfg!(feature = "panic_immediate_abort") {
library/core/src/panicking.rs:184:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:185:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:194:#[rustc_const_unstable(feature = "core_panic", issue = "none")]
library/core/src/panicking.rs:215:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:216:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:233:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:234:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/panicking.rs:253:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/panicking.rs:254:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/unicode/unicode_data.rs:3:#[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]
library/core/src/unicode/unicode_data.rs:22:    // feature stabilizes.
library/core/src/unicode/unicode_data.rs:30:    // feature stabilizes.
library/core/src/unicode/unicode_data.rs:421:    #[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]
library/core/src/unicode/unicode_data.rs:544:    #[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]
library/core/src/unicode/mod.rs:1:#![unstable(feature = "unicode_internals", issue = "none")]
library/core/src/unicode/mod.rs:17:#[stable(feature = "unicode_version", since = "1.45.0")]
library/core/src/hash/sip.rs:16:#[unstable(feature = "hashmap_internals", issue = "none")]
library/core/src/hash/sip.rs:27:#[unstable(feature = "hashmap_internals", issue = "none")]
library/core/src/hash/sip.rs:46:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/sip.rs:149:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/sip.rs:154:    #[rustc_const_unstable(feature = "const_hash", issue = "104061")]
library/core/src/hash/sip.rs:162:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/sip.rs:167:    #[rustc_const_unstable(feature = "const_hash", issue = "104061")]
library/core/src/hash/sip.rs:177:    #[unstable(feature = "hashmap_internals", issue = "none")]
library/core/src/hash/sip.rs:182:    #[rustc_const_unstable(feature = "const_hash", issue = "104061")]
library/core/src/hash/sip.rs:189:    #[unstable(feature = "hashmap_internals", issue = "none")]
library/core/src/hash/sip.rs:194:    #[rustc_const_unstable(feature = "const_hash", issue = "104061")]
library/core/src/hash/sip.rs:227:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/sip.rs:245:#[unstable(feature = "hashmap_internals", issue = "none")]
library/core/src/hash/mod.rs:86:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:91:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:95:#[unstable(feature = "hashmap_internals", issue = "none")]
library/core/src/hash/mod.rs:184:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:199:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:236:    #[stable(feature = "hash_slice", since = "1.3.0")]
library/core/src/hash/mod.rs:251:    #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/hash/mod.rs:257:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/hash/mod.rs:315:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:337:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:361:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:366:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:372:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:378:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:384:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:390:    #[stable(feature = "i128", since = "1.26.0")]
library/core/src/hash/mod.rs:396:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:403:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:409:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:415:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:421:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:427:    #[stable(feature = "i128", since = "1.26.0")]
library/core/src/hash/mod.rs:433:    #[stable(feature = "hasher_write", since = "1.3.0")]
library/core/src/hash/mod.rs:457:    /// #![feature(hasher_prefixfree_extras)]
library/core/src/hash/mod.rs:486:    #[unstable(feature = "hasher_prefixfree_extras", issue = "96762")]
library/core/src/hash/mod.rs:510:    /// # #![feature(hasher_prefixfree_extras)]
library/core/src/hash/mod.rs:533:    /// # #![feature(hasher_prefixfree_extras)]
library/core/src/hash/mod.rs:553:    #[unstable(feature = "hasher_prefixfree_extras", issue = "96762")]
library/core/src/hash/mod.rs:560:#[stable(feature = "indirect_hasher_impl", since = "1.22.0")]
library/core/src/hash/mod.rs:640:#[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:643:    #[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:660:    #[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:698:    #[stable(feature = "build_hasher_simple_hash_one", since = "1.71.0")]
library/core/src/hash/mod.rs:755:#[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:758:#[stable(since = "1.9.0", feature = "core_impl_debug")]
library/core/src/hash/mod.rs:765:#[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:774:#[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:781:#[stable(since = "1.7.0", feature = "build_hasher")]
library/core/src/hash/mod.rs:788:#[stable(since = "1.29.0", feature = "build_hasher_eq")]
library/core/src/hash/mod.rs:795:#[stable(since = "1.29.0", feature = "build_hasher_eq")]
library/core/src/hash/mod.rs:806:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:842:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:850:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:858:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:866:    #[stable(feature = "never_hash", since = "1.29.0")]
library/core/src/hash/mod.rs:876:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:886:                #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:932:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:941:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:949:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:957:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/hash/mod.rs:967:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/async_iter/from_iter.rs:12:#[unstable(feature = "async_iter_from_iter", issue = "81798")]
library/core/src/async_iter/from_iter.rs:18:#[unstable(feature = "async_iter_from_iter", issue = "81798")]
library/core/src/async_iter/from_iter.rs:22:#[unstable(feature = "async_iter_from_iter", issue = "81798")]
library/core/src/async_iter/from_iter.rs:27:#[unstable(feature = "async_iter_from_iter", issue = "81798")]
library/core/src/async_iter/async_iter.rs:13:#[unstable(feature = "async_iterator", issue = "79024")]
library/core/src/async_iter/async_iter.rs:83:#[unstable(feature = "async_iterator", issue = "79024")]
library/core/src/async_iter/async_iter.rs:96:#[unstable(feature = "async_iterator", issue = "79024")]
library/core/src/async_iter/mod.rs:71://! #![feature(async_iterator)]
library/core/src/array/ascii.rs:11:    /// #![feature(ascii_char)]
library/core/src/array/ascii.rs:12:    /// #![feature(const_option)]
library/core/src/array/ascii.rs:20:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/array/ascii.rs:38:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/array/iter.rs:14:#[stable(feature = "array_value_iter", since = "1.51.0")]
library/core/src/array/iter.rs:43:#[stable(feature = "array_into_iter_impl", since = "1.53.0")]
library/core/src/array/iter.rs:77:    #[stable(feature = "array_value_iter", since = "1.51.0")]
library/core/src/array/iter.rs:101:    /// #![feature(array_into_iter_constructors)]
library/core/src/array/iter.rs:102:    /// #![feature(maybe_uninit_uninit_array_transpose)]
library/core/src/array/iter.rs:103:    /// #![feature(maybe_uninit_uninit_array)]
library/core/src/array/iter.rs:139:    #[unstable(feature = "array_into_iter_constructors", issue = "91583")]
library/core/src/array/iter.rs:140:    #[rustc_const_unstable(feature = "const_array_into_iter_constructors", issue = "91583")]
library/core/src/array/iter.rs:161:    /// #![feature(array_into_iter_constructors)]
library/core/src/array/iter.rs:174:    /// #![feature(array_into_iter_constructors)]
library/core/src/array/iter.rs:188:    /// #![feature(array_into_iter_constructors)]
library/core/src/array/iter.rs:202:    #[unstable(feature = "array_into_iter_constructors", issue = "91583")]
library/core/src/array/iter.rs:203:    #[rustc_const_unstable(feature = "const_array_into_iter_constructors", issue = "91583")]
library/core/src/array/iter.rs:215:    #[stable(feature = "array_value_iter", since = "1.51.0")]
library/core/src/array/iter.rs:225:    #[stable(feature = "array_value_iter", since = "1.51.0")]
library/core/src/array/iter.rs:235:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:298:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:347:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:357:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:367:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:374:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:377:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/iter.rs:397:#[stable(feature = "array_value_iter_impls", since = "1.40.0")]
library/core/src/array/mod.rs:5:#![stable(feature = "core_array", since = "1.36.0")]
library/core/src/array/mod.rs:27:#[stable(feature = "array_value_iter", since = "1.51.0")]
library/core/src/array/mod.rs:58:#[stable(feature = "array_from_fn", since = "1.63.0")]
library/core/src/array/mod.rs:81:/// #![feature(array_try_from_fn)]
library/core/src/array/mod.rs:96:#[unstable(feature = "array_try_from_fn", issue = "89379")]
library/core/src/array/mod.rs:114:#[stable(feature = "array_from_ref", since = "1.53.0")]
library/core/src/array/mod.rs:115:#[rustc_const_stable(feature = "const_array_from_ref_shared", since = "1.63.0")]
library/core/src/array/mod.rs:122:#[stable(feature = "array_from_ref", since = "1.53.0")]
library/core/src/array/mod.rs:123:#[rustc_const_unstable(feature = "const_array_from_ref", issue = "90206")]
library/core/src/array/mod.rs:130:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/array/mod.rs:134:#[stable(feature = "core_array", since = "1.36.0")]
library/core/src/array/mod.rs:143:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/array/mod.rs:151:#[stable(feature = "try_from_slice_error", since = "1.36.0")]
library/core/src/array/mod.rs:158:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:166:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:174:#[stable(feature = "array_borrow", since = "1.4.0")]
library/core/src/array/mod.rs:181:#[stable(feature = "array_borrow", since = "1.4.0")]
library/core/src/array/mod.rs:200:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/array/mod.rs:225:#[stable(feature = "try_from_mut_slice_to_array", since = "1.59.0")]
library/core/src/array/mod.rs:250:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/array/mod.rs:278:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/array/mod.rs:305:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:312:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:319:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:329:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:339:#[stable(feature = "index_trait_on_arrays", since = "1.50.0")]
library/core/src/array/mod.rs:352:#[stable(feature = "index_trait_on_arrays", since = "1.50.0")]
library/core/src/array/mod.rs:363:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:388:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/mod.rs:396:#[stable(feature = "copy_clone_array_lib", since = "1.58.0")]
library/core/src/array/mod.rs:399:#[stable(feature = "copy_clone_array_lib", since = "1.58.0")]
library/core/src/array/mod.rs:436:        #[stable(since = "1.4.0", feature = "array_default")]
library/core/src/array/mod.rs:445:        #[stable(since = "1.4.0", feature = "array_default")]
library/core/src/array/mod.rs:496:    #[stable(feature = "array_map", since = "1.55.0")]
library/core/src/array/mod.rs:514:    /// #![feature(array_try_map)]
library/core/src/array/mod.rs:531:    #[unstable(feature = "array_try_map", issue = "79711")]
library/core/src/array/mod.rs:542:    #[stable(feature = "array_as_slice", since = "1.57.0")]
library/core/src/array/mod.rs:543:    #[rustc_const_stable(feature = "array_as_slice", since = "1.57.0")]
library/core/src/array/mod.rs:550:    #[stable(feature = "array_as_slice", since = "1.57.0")]
library/core/src/array/mod.rs:562:    /// #![feature(array_methods)]
library/core/src/array/mod.rs:574:    /// #![feature(array_methods)]
library/core/src/array/mod.rs:583:    #[unstable(feature = "array_methods", issue = "76118")]
library/core/src/array/mod.rs:595:    /// #![feature(array_methods)]
library/core/src/array/mod.rs:603:    #[unstable(feature = "array_methods", issue = "76118")]
library/core/src/array/mod.rs:621:    /// #![feature(split_array)]
library/core/src/array/mod.rs:644:        feature = "split_array",
library/core/src/array/mod.rs:666:    /// #![feature(split_array)]
library/core/src/array/mod.rs:677:        feature = "split_array",
library/core/src/array/mod.rs:699:    /// #![feature(split_array)]
library/core/src/array/mod.rs:722:        feature = "split_array",
library/core/src/array/mod.rs:744:    /// #![feature(split_array)]
library/core/src/array/mod.rs:755:        feature = "split_array",
library/core/src/array/equality.rs:4:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:19:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:42:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:65:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:80:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:95:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:110:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/array/equality.rs:129:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/error.rs:2:#![unstable(feature = "error_in_core", issue = "103765")]
library/core/src/error.rs:28:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/error.rs:83:    #[stable(feature = "error_source", since = "1.30.0")]
library/core/src/error.rs:91:        feature = "error_type_id",
library/core/src/error.rs:108:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/error.rs:114:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/error.rs:132:    /// #![feature(provide_any)]
library/core/src/error.rs:133:    /// #![feature(error_generic_member_access)]
library/core/src/error.rs:192:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:197:#[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:210:    #[unstable(feature = "error_type_id", issue = "60784")]
library/core/src/error.rs:215:#[unstable(feature = "never_type", issue = "35121")]
library/core/src/error.rs:220:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:226:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:235:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:250:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:263:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:277:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:284:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:291:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:298:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:304:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:312:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:319:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:326:    #[stable(feature = "error_downcast", since = "1.3.0")]
library/core/src/error.rs:333:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:339:    #[unstable(feature = "error_generic_member_access", issue = "99301")]
library/core/src/error.rs:355:    /// #![feature(error_iter)]
library/core/src/error.rs:397:    #[unstable(feature = "error_iter", issue = "58520")]
library/core/src/error.rs:419:#[unstable(feature = "error_iter", issue = "58520")]
library/core/src/error.rs:425:#[unstable(feature = "error_iter", issue = "58520")]
library/core/src/error.rs:436:#[stable(feature = "error_by_ref", since = "1.51.0")]
library/core/src/error.rs:457:#[stable(feature = "fmt_error", since = "1.11.0")]
library/core/src/error.rs:465:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/error.rs:473:#[stable(feature = "try_borrow", since = "1.13.0")]
library/core/src/error.rs:481:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/error.rs:489:#[stable(feature = "duration_checked_float", since = "1.66.0")]
library/core/src/error.rs:492:#[stable(feature = "cstr_from_bytes_until_nul", since = "1.69.0")]
library/core/src/error.rs:495:#[unstable(feature = "get_many_mut", issue = "104642")]
library/core/src/fmt/nofloat.rs:5:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/num.rs:156:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/num.rs:186:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/num.rs:280:        $(#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/num.rs:429:            #[stable(feature = "integer_exp_format", since = "1.42.0")]
library/core/src/fmt/num.rs:444:            #[stable(feature = "integer_exp_format", since = "1.42.0")]
library/core/src/fmt/num.rs:573:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/num.rs:580:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/rt.rs:2:#![unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
library/core/src/fmt/float.rs:199:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/float.rs:206:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/float.rs:213:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/float.rs:220:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/builders.rs:78:#[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:122:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:175:    #[stable(feature = "debug_non_exhaustive", since = "1.53.0")]
library/core/src/fmt/builders.rs:222:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:267:#[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:307:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:354:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:433:#[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:467:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:496:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:530:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:563:#[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:597:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:626:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:660:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:693:#[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:731:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:767:    #[stable(feature = "debug_map_key_value", since = "1.42.0")]
library/core/src/fmt/builders.rs:831:    #[stable(feature = "debug_map_key_value", since = "1.42.0")]
library/core/src/fmt/builders.rs:877:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/builders.rs:917:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:23:#[stable(feature = "fmt_flags_align", since = "1.28.0")]
library/core/src/fmt/mod.rs:28:    #[stable(feature = "fmt_flags_align", since = "1.28.0")]
library/core/src/fmt/mod.rs:31:    #[stable(feature = "fmt_flags_align", since = "1.28.0")]
library/core/src/fmt/mod.rs:34:    #[stable(feature = "fmt_flags_align", since = "1.28.0")]
library/core/src/fmt/mod.rs:39:#[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:66:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:92:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:104:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:134:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:162:    #[stable(feature = "fmt_write_char", since = "1.1.0")]
library/core/src/fmt/mod.rs:190:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:196:#[stable(feature = "fmt_write_blanket_impl", since = "1.4.0")]
library/core/src/fmt/mod.rs:221:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:240:    #[unstable(feature = "fmt_internals", reason = "internal to standard library", issue = "none")]
library/core/src/fmt/mod.rs:277:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:293:#[unstable(feature = "fmt_internals", issue = "none")]
library/core/src/fmt/mod.rs:296:    #[rustc_const_unstable(feature = "const_fmt_arguments_new", issue = "none")]
library/core/src/fmt/mod.rs:398:    #[stable(feature = "fmt_as_str", since = "1.52.0")]
library/core/src/fmt/mod.rs:399:    #[rustc_const_unstable(feature = "const_arguments_as_str", issue = "103900")]
library/core/src/fmt/mod.rs:411:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:418:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:535:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:578:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:586:    #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/fmt/mod.rs:592:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/fmt/mod.rs:647:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:670:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:721:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:724:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:778:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:781:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:833:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:836:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:888:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:891:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:938:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:942:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:990:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:993:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1041:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1044:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1079:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1245:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1339:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1535:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1558:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1565:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:1603:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1638:    #[stable(feature = "fmt_flags_align", since = "1.28.0")]
library/core/src/fmt/mod.rs:1673:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1704:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1736:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1765:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1793:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1819:    #[stable(feature = "fmt_flags", since = "1.5.0")]
library/core/src/fmt/mod.rs:1870:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:1878:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:1893:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:1911:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:1932:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:1956:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:1983:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2024:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:2032:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2042:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2058:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2076:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2096:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2118:    #[unstable(feature = "fmt_helpers_for_derive", issue = "none")]
library/core/src/fmt/mod.rs:2149:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:2207:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:2233:    #[stable(feature = "debug_builders", since = "1.2.0")]
library/core/src/fmt/mod.rs:2239:#[stable(since = "1.2.0", feature = "formatter_write")]
library/core/src/fmt/mod.rs:2254:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2266:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2270:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2280:#[unstable(feature = "never_type", issue = "35121")]
library/core/src/fmt/mod.rs:2288:#[unstable(feature = "never_type", issue = "35121")]
library/core/src/fmt/mod.rs:2296:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2304:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2311:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2336:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2343:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2358:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2369:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2409:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2416:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2423:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2432:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2438:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2454:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2493:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2500:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2507:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2514:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2521:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2543:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2550:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/fmt/mod.rs:2557:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/fmt/mod.rs:2564:#[unstable(feature = "sync_unsafe_cell", issue = "95439")]
library/core/src/slice/ascii.rs:12:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/slice/ascii.rs:13:    #[rustc_const_unstable(feature = "const_slice_is_ascii", issue = "111090")]
library/core/src/slice/ascii.rs:22:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/slice/ascii.rs:40:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/slice/ascii.rs:54:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/slice/ascii.rs:70:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/slice/ascii.rs:87:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/slice/ascii.rs:108:    #[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:121:    /// #![feature(byte_slice_trim_ascii)]
library/core/src/slice/ascii.rs:127:    #[unstable(feature = "byte_slice_trim_ascii", issue = "94035")]
library/core/src/slice/ascii.rs:150:    /// #![feature(byte_slice_trim_ascii)]
library/core/src/slice/ascii.rs:156:    #[unstable(feature = "byte_slice_trim_ascii", issue = "94035")]
library/core/src/slice/ascii.rs:180:    /// #![feature(byte_slice_trim_ascii)]
library/core/src/slice/ascii.rs:186:    #[unstable(feature = "byte_slice_trim_ascii", issue = "94035")]
library/core/src/slice/ascii.rs:203:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:210:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:242:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:248:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:250:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:256:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/ascii.rs:276:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/slice/sort.rs:248:#[unstable(feature = "sort_internals", reason = "internal to sort module", issue = "none")]
library/core/src/slice/iter/macros.rs:113:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter/macros.rs:126:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter/macros.rs:372:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter/macros.rs:420:        #[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/iter/macros.rs:423:        #[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter/macros.rs:435:        #[stable(feature = "default_iters", since = "1.70.0")]
library/core/src/slice/iter/macros.rs:453:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter/macros.rs:471:        #[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/raw.rs:90:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/raw.rs:91:#[rustc_const_stable(feature = "const_slice_from_raw_parts", since = "1.64.0")]
library/core/src/slice/raw.rs:136:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/raw.rs:137:#[rustc_const_unstable(feature = "const_slice_from_raw_parts_mut", issue = "67456")]
library/core/src/slice/raw.rs:152:#[stable(feature = "from_ref", since = "1.28.0")]
library/core/src/slice/raw.rs:153:#[rustc_const_stable(feature = "const_slice_from_ref_shared", since = "1.63.0")]
library/core/src/slice/raw.rs:160:#[stable(feature = "from_ref", since = "1.28.0")]
library/core/src/slice/raw.rs:161:#[rustc_const_unstable(feature = "const_slice_from_ref", issue = "90206")]
library/core/src/slice/raw.rs:213:/// #![feature(slice_from_ptr_range)]
library/core/src/slice/raw.rs:226:#[unstable(feature = "slice_from_ptr_range", issue = "89792")]
library/core/src/slice/raw.rs:227:#[rustc_const_unstable(feature = "const_slice_from_ptr_range", issue = "89792")]
library/core/src/slice/raw.rs:283:/// #![feature(slice_from_ptr_range)]
library/core/src/slice/raw.rs:296:#[unstable(feature = "slice_from_ptr_range", issue = "89792")]
library/core/src/slice/raw.rs:297:#[rustc_const_unstable(feature = "const_slice_from_mut_ptr_range", issue = "89792")]
library/core/src/slice/index.rs:9:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/index.rs:22:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/index.rs:33:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/slice/index.rs:34:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/slice/index.rs:36:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:61:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/slice/index.rs:62:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/slice/index.rs:64:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:85:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/slice/index.rs:86:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/slice/index.rs:88:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:107:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/slice/index.rs:108:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/slice/index.rs:114:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/core/src/slice/index.rs:115:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/slice/index.rs:123:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:126:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:128:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:130:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:132:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:134:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:136:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:138:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:140:    #[stable(feature = "slice_index_with_ops_bound_pair", since = "1.53.0")]
library/core/src/slice/index.rs:150:#[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:168:    #[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/index.rs:173:    #[unstable(feature = "slice_index_methods", issue = "none")]
library/core/src/slice/index.rs:178:    #[unstable(feature = "slice_index_methods", issue = "none")]
library/core/src/slice/index.rs:187:    #[unstable(feature = "slice_index_methods", issue = "none")]
library/core/src/slice/index.rs:196:    #[unstable(feature = "slice_index_methods", issue = "none")]
library/core/src/slice/index.rs:201:    #[unstable(feature = "slice_index_methods", issue = "none")]
library/core/src/slice/index.rs:207:    #[unstable(feature = "slice_index_methods", issue = "none")]
library/core/src/slice/index.rs:212:#[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
library/core/src/slice/index.rs:213:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:273:#[rustc_const_unstable(feature = "const_index_range_slice_index", issue = "none")]
library/core/src/slice/index.rs:348:#[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
library/core/src/slice/index.rs:349:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:429:#[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
library/core/src/slice/index.rs:430:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:467:#[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
library/core/src/slice/index.rs:468:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:513:#[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
library/core/src/slice/index.rs:514:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:549:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/slice/index.rs:550:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:593:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/slice/index.rs:594:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/slice/index.rs:655:/// #![feature(slice_range)]
library/core/src/slice/index.rs:668:/// #![feature(slice_range)]
library/core/src/slice/index.rs:676:/// #![feature(slice_range)]
library/core/src/slice/index.rs:684:/// #![feature(slice_range)]
library/core/src/slice/index.rs:693:#[unstable(feature = "slice_range", issue = "76393")]
library/core/src/slice/index.rs:802:#[stable(feature = "slice_index_with_ops_bound_pair", since = "1.53.0")]
library/core/src/slice/iter.rs:20:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:30:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:60:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:75:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:82:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:84:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:124:    #[stable(feature = "iter_to_slice", since = "1.4.0")]
library/core/src/slice/iter.rs:141:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:149:#[stable(feature = "slice_iter_as_ref", since = "1.13.0")]
library/core/src/slice/iter.rs:181:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:196:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:203:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:205:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:269:    #[stable(feature = "iter_to_slice", since = "1.4.0")]
library/core/src/slice/iter.rs:300:    #[stable(feature = "slice_iter_mut_as_slice", since = "1.53.0")]
library/core/src/slice/iter.rs:316:    /// #![feature(slice_iter_mut_as_mut_slice)]
library/core/src/slice/iter.rs:339:    #[unstable(feature = "slice_iter_mut_as_mut_slice", issue = "93079")]
library/core/src/slice/iter.rs:348:#[stable(feature = "slice_iter_mut_as_slice", since = "1.53.0")]
library/core/src/slice/iter.rs:356:// #[stable(feature = "slice_iter_mut_as_mut_slice", since = "FIXME")]
library/core/src/slice/iter.rs:388:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:410:    /// #![feature(split_as_slice)]
library/core/src/slice/iter.rs:416:    #[unstable(feature = "split_as_slice", issue = "96137")]
library/core/src/slice/iter.rs:422:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:433:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:443:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:478:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:515:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/iter.rs:533:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:552:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:566:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:576:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:612:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:637:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:654:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:672:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:697:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:737:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:765:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/iter.rs:783:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:802:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:815:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:856:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:890:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/iter.rs:907:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:923:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:937:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:947:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:965:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:976:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:987:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1004:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1020:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1033:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1044:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1062:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1073:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/iter.rs:1127:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1143:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:1168:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1184:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:1208:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1224:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:1249:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1265:#[stable(feature = "core_impl_debug", since = "1.9.0")]
library/core/src/slice/iter.rs:1294:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1309:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1316:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1378:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1405:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1408:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:1411:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/iter.rs:1415:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1419:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1442:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1457:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1464:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1540:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1588:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1591:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:1594:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/iter.rs:1598:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1602:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1625:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1646:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1728:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1769:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1772:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:1775:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/slice/iter.rs:1779:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1783:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1788:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1791:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/iter.rs:1814:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1850:    #[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1857:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1864:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1915:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1944:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1951:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:1954:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:1958:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1962:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:1987:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2016:    #[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2022:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2076:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2111:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2118:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:2121:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2125:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:2129:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:2134:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2137:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/iter.rs:2148:/// #![feature(array_windows)]
library/core/src/slice/iter.rs:2157:#[unstable(feature = "array_windows", issue = "75027")]
library/core/src/slice/iter.rs:2173:#[unstable(feature = "array_windows", issue = "75027")]
library/core/src/slice/iter.rs:2225:#[unstable(feature = "array_windows", issue = "75027")]
library/core/src/slice/iter.rs:2251:#[unstable(feature = "array_windows", issue = "75027")]
library/core/src/slice/iter.rs:2270:/// #![feature(array_chunks)]
library/core/src/slice/iter.rs:2280:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2298:    #[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2305:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2312:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2348:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2361:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2368:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:2371:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2375:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2379:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2396:/// #![feature(array_chunks)]
library/core/src/slice/iter.rs:2406:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2424:    #[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2430:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2466:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2479:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2486:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:2489:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2493:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2497:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/iter.rs:2520:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2535:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2542:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2622:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2656:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2659:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:2662:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2666:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:2670:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:2693:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2714:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2803:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2842:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2845:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:2848:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2852:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:2856:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:2861:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2864:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2887:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2922:    #[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2929:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2936:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:2988:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3020:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3027:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:3030:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3034:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3038:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3063:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3090:    #[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3096:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3153:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3191:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3198:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/slice/iter.rs:3201:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3205:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3209:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3214:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3217:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/iter.rs:3221:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3225:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3231:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3235:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/slice/iter.rs:3246:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3253:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3260:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3294:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3316:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3319:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3333:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3340:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3347:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3382:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3405:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/iter.rs:3408:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/mod.rs:7:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:25:    feature = "slice_internals",
library/core/src/slice/mod.rs:33:    feature = "slice_internals",
library/core/src/slice/mod.rs:48:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/slice/mod.rs:52:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:56:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:59:#[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/mod.rs:62:#[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/mod.rs:65:#[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/mod.rs:68:#[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/mod.rs:71:#[unstable(feature = "array_windows", issue = "75027")]
library/core/src/slice/mod.rs:74:#[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/mod.rs:77:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/mod.rs:80:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:83:#[stable(feature = "from_ref", since = "1.28.0")]
library/core/src/slice/mod.rs:86:#[unstable(feature = "slice_from_ptr_range", issue = "89792")]
library/core/src/slice/mod.rs:90:#[unstable(feature = "sort_internals", reason = "internal to sort module", issue = "none")]
library/core/src/slice/mod.rs:93:#[stable(feature = "slice_get_slice", since = "1.28.0")]
library/core/src/slice/mod.rs:96:#[unstable(feature = "slice_range", issue = "76393")]
library/core/src/slice/mod.rs:99:#[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/slice/mod.rs:136:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:137:    #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
library/core/src/slice/mod.rs:153:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:154:    #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
library/core/src/slice/mod.rs:172:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:173:    #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
library/core/src/slice/mod.rs:192:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:193:    #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
library/core/src/slice/mod.rs:212:    #[stable(feature = "slice_splits", since = "1.5.0")]
library/core/src/slice/mod.rs:213:    #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
library/core/src/slice/mod.rs:234:    #[stable(feature = "slice_splits", since = "1.5.0")]
library/core/src/slice/mod.rs:235:    #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
library/core/src/slice/mod.rs:254:    #[stable(feature = "slice_splits", since = "1.5.0")]
library/core/src/slice/mod.rs:255:    #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
library/core/src/slice/mod.rs:276:    #[stable(feature = "slice_splits", since = "1.5.0")]
library/core/src/slice/mod.rs:277:    #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
library/core/src/slice/mod.rs:295:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:296:    #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
library/core/src/slice/mod.rs:315:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:316:    #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
library/core/src/slice/mod.rs:328:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:339:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:340:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:358:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:368:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:369:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:388:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:397:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:398:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:419:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:430:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:431:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:455:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:464:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:465:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:485:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:496:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:497:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:520:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:531:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:532:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:553:    /// #![feature(slice_first_last_chunk)]
library/core/src/slice/mod.rs:563:    #[unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:564:    #[rustc_const_unstable(feature = "slice_first_last_chunk", issue = "111774")]
library/core/src/slice/mod.rs:598:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:623:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:655:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:692:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:731:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:732:    #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
library/core/src/slice/mod.rs:760:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:761:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/slice/mod.rs:797:    #[stable(feature = "slice_ptr_range", since = "1.48.0")]
library/core/src/slice/mod.rs:798:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/slice/mod.rs:840:    #[stable(feature = "slice_ptr_range", since = "1.48.0")]
library/core/src/slice/mod.rs:841:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/slice/mod.rs:872:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:873:    #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/slice/mod.rs:907:    /// #![feature(slice_swap_unchecked)]
library/core/src/slice/mod.rs:917:    #[unstable(feature = "slice_swap_unchecked", issue = "88539")]
library/core/src/slice/mod.rs:918:    #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/slice/mod.rs:941:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:999:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1018:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1066:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1101:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1140:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1178:    #[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/mod.rs:1221:    #[stable(feature = "chunks_exact", since = "1.31.0")]
library/core/src/slice/mod.rs:1241:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1256:    #[unstable(feature = "slice_as_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1286:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1296:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1303:    #[unstable(feature = "slice_as_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1329:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1335:    #[unstable(feature = "slice_as_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1366:    /// #![feature(array_chunks)]
library/core/src/slice/mod.rs:1376:    #[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1396:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1413:    #[unstable(feature = "slice_as_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1443:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1455:    #[unstable(feature = "slice_as_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1481:    /// #![feature(slice_as_chunks)]
library/core/src/slice/mod.rs:1493:    #[unstable(feature = "slice_as_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1524:    /// #![feature(array_chunks)]
library/core/src/slice/mod.rs:1536:    #[unstable(feature = "array_chunks", issue = "74985")]
library/core/src/slice/mod.rs:1559:    /// #![feature(array_windows)]
library/core/src/slice/mod.rs:1569:    #[unstable(feature = "array_windows", issue = "75027")]
library/core/src/slice/mod.rs:1604:    #[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/mod.rs:1643:    #[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/mod.rs:1683:    #[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/mod.rs:1727:    #[stable(feature = "rchunks", since = "1.31.0")]
library/core/src/slice/mod.rs:1745:    /// #![feature(slice_group_by)]
library/core/src/slice/mod.rs:1760:    /// #![feature(slice_group_by)]
library/core/src/slice/mod.rs:1771:    #[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/mod.rs:1790:    /// #![feature(slice_group_by)]
library/core/src/slice/mod.rs:1805:    /// #![feature(slice_group_by)]
library/core/src/slice/mod.rs:1816:    #[unstable(feature = "slice_group_by", issue = "80552")]
library/core/src/slice/mod.rs:1858:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1859:    #[rustc_const_stable(feature = "const_slice_split_at_not_mut", since = "1.71.0")]
library/core/src/slice/mod.rs:1892:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:1896:    #[rustc_const_unstable(feature = "const_slice_split_at_mut", issue = "101804")]
library/core/src/slice/mod.rs:1924:    /// #![feature(slice_split_at_unchecked)]
library/core/src/slice/mod.rs:1946:    #[unstable(feature = "slice_split_at_unchecked", reason = "new API", issue = "76014")]
library/core/src/slice/mod.rs:1947:    #[rustc_const_unstable(feature = "slice_split_at_unchecked", issue = "76014")]
library/core/src/slice/mod.rs:1988:    /// #![feature(slice_split_at_unchecked)]
library/core/src/slice/mod.rs:2001:    #[unstable(feature = "slice_split_at_unchecked", reason = "new API", issue = "76014")]
library/core/src/slice/mod.rs:2002:    #[rustc_const_unstable(feature = "const_slice_split_at_mut", issue = "101804")]
library/core/src/slice/mod.rs:2035:    /// #![feature(split_array)]
library/core/src/slice/mod.rs:2057:    #[unstable(feature = "split_array", reason = "new API", issue = "90091")]
library/core/src/slice/mod.rs:2080:    /// #![feature(split_array)]
library/core/src/slice/mod.rs:2090:    #[unstable(feature = "split_array", reason = "new API", issue = "90091")]
library/core/src/slice/mod.rs:2114:    /// #![feature(split_array)]
library/core/src/slice/mod.rs:2136:    #[unstable(feature = "split_array", reason = "new API", issue = "90091")]
library/core/src/slice/mod.rs:2160:    /// #![feature(split_array)]
library/core/src/slice/mod.rs:2170:    #[unstable(feature = "split_array", reason = "new API", issue = "90091")]
library/core/src/slice/mod.rs:2220:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2242:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2278:    #[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/mod.rs:2302:    #[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/slice/mod.rs:2338:    #[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/mod.rs:2364:    #[stable(feature = "slice_rsplit", since = "1.27.0")]
library/core/src/slice/mod.rs:2392:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2418:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2447:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2474:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2508:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2538:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2568:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2599:    #[stable(feature = "slice_strip", since = "1.51.0")]
library/core/src/slice/mod.rs:2633:    #[stable(feature = "slice_strip", since = "1.51.0")]
library/core/src/slice/mod.rs:2717:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2767:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:2856:    #[stable(feature = "slice_binary_search_by_key", since = "1.10.0")]
library/core/src/slice/mod.rs:2892:    #[stable(feature = "sort_unstable", since = "1.20.0")]
library/core/src/slice/mod.rs:2947:    #[stable(feature = "sort_unstable", since = "1.20.0")]
library/core/src/slice/mod.rs:2985:    #[stable(feature = "sort_unstable", since = "1.20.0")]
library/core/src/slice/mod.rs:3035:    #[stable(feature = "slice_select_nth_unstable", since = "1.49.0")]
library/core/src/slice/mod.rs:3086:    #[stable(feature = "slice_select_nth_unstable", since = "1.49.0")]
library/core/src/slice/mod.rs:3141:    #[stable(feature = "slice_select_nth_unstable", since = "1.49.0")]
library/core/src/slice/mod.rs:3166:    /// #![feature(slice_partition_dedup)]
library/core/src/slice/mod.rs:3175:    #[unstable(feature = "slice_partition_dedup", issue = "54279")]
library/core/src/slice/mod.rs:3200:    /// #![feature(slice_partition_dedup)]
library/core/src/slice/mod.rs:3209:    #[unstable(feature = "slice_partition_dedup", issue = "54279")]
library/core/src/slice/mod.rs:3326:    /// #![feature(slice_partition_dedup)]
library/core/src/slice/mod.rs:3335:    #[unstable(feature = "slice_partition_dedup", issue = "54279")]
library/core/src/slice/mod.rs:3375:    #[stable(feature = "slice_rotate", since = "1.26.0")]
library/core/src/slice/mod.rs:3418:    #[stable(feature = "slice_rotate", since = "1.26.0")]
library/core/src/slice/mod.rs:3441:    #[stable(feature = "slice_fill", since = "1.50.0")]
library/core/src/slice/mod.rs:3465:    #[stable(feature = "slice_fill_with", since = "1.51.0")]
library/core/src/slice/mod.rs:3527:    #[stable(feature = "clone_from_slice", since = "1.7.0")]
library/core/src/slice/mod.rs:3591:    #[stable(feature = "copy_from_slice", since = "1.9.0")]
library/core/src/slice/mod.rs:3645:    #[stable(feature = "copy_within", since = "1.37.0")]
library/core/src/slice/mod.rs:3712:    #[stable(feature = "swap_with_slice", since = "1.27.0")]
library/core/src/slice/mod.rs:3792:    #[stable(feature = "slice_align_to", since = "1.30.0")]
library/core/src/slice/mod.rs:3854:    #[stable(feature = "slice_align_to", since = "1.30.0")]
library/core/src/slice/mod.rs:3921:    /// #![feature(portable_simd)]
library/core/src/slice/mod.rs:3949:    #[unstable(feature = "portable_simd", issue = "86656")]
library/core/src/slice/mod.rs:3994:    #[unstable(feature = "portable_simd", issue = "86656")]
library/core/src/slice/mod.rs:4024:    /// #![feature(is_sorted)]
library/core/src/slice/mod.rs:4034:    #[unstable(feature = "is_sorted", reason = "new API", issue = "53485")]
library/core/src/slice/mod.rs:4050:    #[unstable(feature = "is_sorted", reason = "new API", issue = "53485")]
library/core/src/slice/mod.rs:4070:    /// #![feature(is_sorted)]
library/core/src/slice/mod.rs:4076:    #[unstable(feature = "is_sorted", reason = "new API", issue = "53485")]
library/core/src/slice/mod.rs:4135:    #[stable(feature = "partition_point", since = "1.52.0")]
library/core/src/slice/mod.rs:4158:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4170:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4182:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4194:    #[unstable(feature = "slice_take", issue = "62280")]
library/core/src/slice/mod.rs:4227:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4239:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4251:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4263:    #[unstable(feature = "slice_take", issue = "62280")]
library/core/src/slice/mod.rs:4293:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4302:    #[unstable(feature = "slice_take", issue = "62280")]
library/core/src/slice/mod.rs:4317:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4327:    #[unstable(feature = "slice_take", issue = "62280")]
library/core/src/slice/mod.rs:4342:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4351:    #[unstable(feature = "slice_take", issue = "62280")]
library/core/src/slice/mod.rs:4366:    /// #![feature(slice_take)]
library/core/src/slice/mod.rs:4376:    #[unstable(feature = "slice_take", issue = "62280")]
library/core/src/slice/mod.rs:4395:    /// #![feature(get_many_mut)]
library/core/src/slice/mod.rs:4409:    #[unstable(feature = "get_many_mut", issue = "104642")]
library/core/src/slice/mod.rs:4442:    /// #![feature(get_many_mut)]
library/core/src/slice/mod.rs:4451:    #[unstable(feature = "get_many_mut", issue = "104642")]
library/core/src/slice/mod.rs:4480:    /// #![feature(slice_flatten)]
library/core/src/slice/mod.rs:4495:    #[unstable(feature = "slice_flatten", issue = "95629")]
library/core/src/slice/mod.rs:4521:    /// #![feature(slice_flatten)]
library/core/src/slice/mod.rs:4533:    #[unstable(feature = "slice_flatten", issue = "95629")]
library/core/src/slice/mod.rs:4561:    /// #![feature(sort_floats)]
library/core/src/slice/mod.rs:4569:    #[unstable(feature = "sort_floats", issue = "93396")]
library/core/src/slice/mod.rs:4590:    /// #![feature(sort_floats)]
library/core/src/slice/mod.rs:4598:    #[unstable(feature = "sort_floats", issue = "93396")]
library/core/src/slice/mod.rs:4637:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/mod.rs:4645:#[stable(feature = "mut_slice_default", since = "1.5.0")]
library/core/src/slice/mod.rs:4653:#[unstable(feature = "slice_pattern", reason = "stopgap trait for slice patterns", issue = "56345")]
library/core/src/slice/mod.rs:4665:#[stable(feature = "slice_strip", since = "1.51.0")]
library/core/src/slice/mod.rs:4675:#[stable(feature = "slice_strip", since = "1.51.0")]
library/core/src/slice/mod.rs:4711:/// #![feature(get_many_mut)]
library/core/src/slice/mod.rs:4717:#[unstable(feature = "get_many_mut", issue = "104642")]
library/core/src/slice/mod.rs:4724:#[unstable(feature = "get_many_mut", issue = "104642")]
library/core/src/slice/mod.rs:4731:#[unstable(feature = "get_many_mut", issue = "104642")]
library/core/src/slice/cmp.rs:20:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/cmp.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/cmp.rs:38:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/cmp.rs:46:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/slice/memchr.rs:18:#[rustc_const_stable(feature = "const_memchr", since = "1.65.0")]
library/core/src/slice/memchr.rs:25:#[rustc_const_stable(feature = "const_memchr", since = "1.65.0")]
library/core/src/slice/memchr.rs:32:#[rustc_const_stable(feature = "const_memchr", since = "1.65.0")]
library/core/src/slice/memchr.rs:40:#[rustc_const_stable(feature = "const_memchr", since = "1.65.0")]
library/core/src/slice/memchr.rs:51:#[rustc_const_stable(feature = "const_memchr", since = "1.65.0")]
library/core/src/slice/memchr.rs:70:#[rustc_const_stable(feature = "const_memchr", since = "1.65.0")]
library/core/src/lib.rs:54:// rustc itself never sets the feature, so this line has no affect there.
library/core/src/lib.rs:55:#![cfg(any(not(feature = "miri-test-libstd"), test, doctest))]
library/core/src/lib.rs:56:#![stable(feature = "core", since = "1.6.0")]
library/core/src/lib.rs:65:    any(not(feature = "miri-test-libstd"), test, doctest),
library/core/src/lib.rs:97:#![allow(incomplete_features)]
library/core/src/lib.rs:100:// Library features:
library/core/src/lib.rs:102:#![feature(char_indices_offset)]
library/core/src/lib.rs:103:#![feature(const_align_of_val)]
library/core/src/lib.rs:104:#![feature(const_align_of_val_raw)]
library/core/src/lib.rs:105:#![feature(const_align_offset)]
library/core/src/lib.rs:106:#![feature(const_alloc_layout)]
library/core/src/lib.rs:107:#![feature(const_arguments_as_str)]
library/core/src/lib.rs:108:#![feature(const_array_from_ref)]
library/core/src/lib.rs:109:#![feature(const_array_into_iter_constructors)]
library/core/src/lib.rs:110:#![feature(const_assume)]
library/core/src/lib.rs:111:#![feature(const_bigint_helper_methods)]
library/core/src/lib.rs:112:#![feature(const_black_box)]
library/core/src/lib.rs:113:#![feature(const_caller_location)]
library/core/src/lib.rs:114:#![feature(const_cell_into_inner)]
library/core/src/lib.rs:115:#![feature(const_char_from_u32_unchecked)]
library/core/src/lib.rs:116:#![feature(const_discriminant)]
library/core/src/lib.rs:117:#![feature(const_eval_select)]
library/core/src/lib.rs:118:#![feature(const_exact_div)]
library/core/src/lib.rs:119:#![feature(const_float_bits_conv)]
library/core/src/lib.rs:120:#![feature(const_float_classify)]
library/core/src/lib.rs:121:#![feature(const_fmt_arguments_new)]
library/core/src/lib.rs:122:#![feature(const_hash)]
library/core/src/lib.rs:123:#![feature(const_heap)]
library/core/src/lib.rs:124:#![feature(const_index_range_slice_index)]
library/core/src/lib.rs:125:#![feature(const_inherent_unchecked_arith)]
library/core/src/lib.rs:126:#![feature(const_int_unchecked_arith)]
library/core/src/lib.rs:127:#![feature(const_intrinsic_forget)]
library/core/src/lib.rs:128:#![feature(const_ipv4)]
library/core/src/lib.rs:129:#![feature(const_ipv6)]
library/core/src/lib.rs:130:#![feature(const_likely)]
library/core/src/lib.rs:131:#![feature(const_maybe_uninit_as_mut_ptr)]
library/core/src/lib.rs:132:#![feature(const_maybe_uninit_assume_init)]
library/core/src/lib.rs:133:#![feature(const_maybe_uninit_uninit_array)]
library/core/src/lib.rs:134:#![feature(const_nonnull_new)]
library/core/src/lib.rs:135:#![feature(const_num_midpoint)]
library/core/src/lib.rs:136:#![feature(const_option)]
library/core/src/lib.rs:137:#![feature(const_option_ext)]
library/core/src/lib.rs:138:#![feature(const_pin)]
library/core/src/lib.rs:139:#![feature(const_pointer_byte_offsets)]
library/core/src/lib.rs:140:#![feature(const_pointer_is_aligned)]
library/core/src/lib.rs:141:#![feature(const_ptr_as_ref)]
library/core/src/lib.rs:142:#![feature(const_ptr_is_null)]
library/core/src/lib.rs:143:#![feature(const_ptr_sub_ptr)]
library/core/src/lib.rs:144:#![feature(const_ptr_write)]
library/core/src/lib.rs:145:#![feature(const_raw_ptr_comparison)]
library/core/src/lib.rs:146:#![feature(const_replace)]
library/core/src/lib.rs:147:#![feature(const_size_of_val)]
library/core/src/lib.rs:148:#![feature(const_size_of_val_raw)]
library/core/src/lib.rs:149:#![feature(const_slice_from_raw_parts_mut)]
library/core/src/lib.rs:150:#![feature(const_slice_from_ref)]
library/core/src/lib.rs:151:#![feature(const_slice_index)]
library/core/src/lib.rs:152:#![feature(const_slice_is_ascii)]
library/core/src/lib.rs:153:#![feature(const_slice_ptr_len)]
library/core/src/lib.rs:154:#![feature(const_slice_split_at_mut)]
library/core/src/lib.rs:155:#![feature(const_str_from_utf8_unchecked_mut)]
library/core/src/lib.rs:156:#![feature(const_swap)]
library/core/src/lib.rs:157:#![feature(const_transmute_copy)]
library/core/src/lib.rs:158:#![feature(const_try)]
library/core/src/lib.rs:159:#![feature(const_type_id)]
library/core/src/lib.rs:160:#![feature(const_type_name)]
library/core/src/lib.rs:161:#![feature(const_unicode_case_lookup)]
library/core/src/lib.rs:162:#![feature(const_unsafecell_get_mut)]
library/core/src/lib.rs:163:#![feature(const_waker)]
library/core/src/lib.rs:164:#![feature(core_panic)]
library/core/src/lib.rs:165:#![feature(duration_consts_float)]
library/core/src/lib.rs:166:#![feature(internal_impls_macro)]
library/core/src/lib.rs:167:#![feature(ip)]
library/core/src/lib.rs:168:#![feature(is_ascii_octdigit)]
library/core/src/lib.rs:169:#![feature(maybe_uninit_uninit_array)]
library/core/src/lib.rs:170:#![feature(ptr_alignment_type)]
library/core/src/lib.rs:171:#![feature(ptr_metadata)]
library/core/src/lib.rs:172:#![feature(set_ptr_value)]
library/core/src/lib.rs:173:#![feature(slice_ptr_get)]
library/core/src/lib.rs:174:#![feature(slice_split_at_unchecked)]
library/core/src/lib.rs:175:#![feature(str_internals)]
library/core/src/lib.rs:176:#![feature(str_split_inclusive_remainder)]
library/core/src/lib.rs:177:#![feature(str_split_remainder)]
library/core/src/lib.rs:178:#![feature(strict_provenance)]
library/core/src/lib.rs:179:#![feature(utf16_extra)]
library/core/src/lib.rs:180:#![feature(utf16_extra_const)]
library/core/src/lib.rs:181:#![feature(variant_count)]
library/core/src/lib.rs:184:// Language features:
library/core/src/lib.rs:186:#![feature(abi_unadjusted)]
library/core/src/lib.rs:187:#![feature(adt_const_params)]
library/core/src/lib.rs:188:#![feature(allow_internal_unsafe)]
library/core/src/lib.rs:189:#![feature(allow_internal_unstable)]
library/core/src/lib.rs:190:#![feature(asm_const)]
library/core/src/lib.rs:191:#![feature(associated_type_bounds)]
library/core/src/lib.rs:192:#![feature(auto_traits)]
library/core/src/lib.rs:193:#![feature(c_unwind)]
library/core/src/lib.rs:194:#![feature(cfg_sanitize)]
library/core/src/lib.rs:195:#![feature(cfg_target_has_atomic)]
library/core/src/lib.rs:196:#![feature(cfg_target_has_atomic_equal_alignment)]
library/core/src/lib.rs:197:#![feature(const_closures)]
library/core/src/lib.rs:198:#![feature(const_fn_floating_point_arithmetic)]
library/core/src/lib.rs:199:#![feature(const_for)]
library/core/src/lib.rs:200:#![feature(const_mut_refs)]
library/core/src/lib.rs:201:#![feature(const_precise_live_drops)]
library/core/src/lib.rs:202:#![feature(const_refs_to_cell)]
library/core/src/lib.rs:203:#![feature(const_trait_impl)]
library/core/src/lib.rs:204:#![feature(decl_macro)]
library/core/src/lib.rs:205:#![feature(deprecated_suggestion)]
library/core/src/lib.rs:206:#![feature(doc_cfg)]
library/core/src/lib.rs:207:#![feature(doc_cfg_hide)]
library/core/src/lib.rs:208:#![feature(doc_notable_trait)]
library/core/src/lib.rs:209:#![feature(exhaustive_patterns)]
library/core/src/lib.rs:210:#![feature(extern_types)]
library/core/src/lib.rs:211:#![feature(fundamental)]
library/core/src/lib.rs:212:#![feature(generic_arg_infer)]
library/core/src/lib.rs:213:#![feature(if_let_guard)]
library/core/src/lib.rs:214:#![feature(inline_const)]
library/core/src/lib.rs:215:#![feature(intra_doc_pointers)]
library/core/src/lib.rs:216:#![feature(intrinsics)]
library/core/src/lib.rs:217:#![feature(lang_items)]
library/core/src/lib.rs:218:#![feature(let_chains)]
library/core/src/lib.rs:219:#![feature(link_llvm_intrinsics)]
library/core/src/lib.rs:220:#![feature(macro_metavar_expr)]
library/core/src/lib.rs:221:#![feature(min_specialization)]
library/core/src/lib.rs:222:#![feature(multiple_supertrait_upcastable)]
library/core/src/lib.rs:223:#![feature(must_not_suspend)]
library/core/src/lib.rs:224:#![feature(negative_impls)]
library/core/src/lib.rs:225:#![feature(never_type)]
library/core/src/lib.rs:226:#![feature(no_core)]
library/core/src/lib.rs:227:#![feature(no_coverage)] // rust-lang/rust#84605
library/core/src/lib.rs:228:#![feature(platform_intrinsics)]
library/core/src/lib.rs:229:#![feature(prelude_import)]
library/core/src/lib.rs:230:#![feature(repr_simd)]
library/core/src/lib.rs:231:#![feature(rustc_allow_const_fn_unstable)]
library/core/src/lib.rs:232:#![feature(rustc_attrs)]
library/core/src/lib.rs:233:#![feature(rustdoc_internals)]
library/core/src/lib.rs:234:#![feature(simd_ffi)]
library/core/src/lib.rs:235:#![feature(staged_api)]
library/core/src/lib.rs:236:#![feature(stmt_expr_attributes)]
library/core/src/lib.rs:237:#![feature(target_feature_11)]
library/core/src/lib.rs:238:#![feature(trait_alias)]
library/core/src/lib.rs:239:#![feature(transparent_unions)]
library/core/src/lib.rs:240:#![feature(try_blocks)]
library/core/src/lib.rs:241:#![feature(unboxed_closures)]
library/core/src/lib.rs:242:#![feature(unsized_fn_params)]
library/core/src/lib.rs:245:// Target features:
library/core/src/lib.rs:247:#![feature(arm_target_feature)]
library/core/src/lib.rs:248:#![feature(avx512_target_feature)]
library/core/src/lib.rs:249:#![feature(hexagon_target_feature)]
library/core/src/lib.rs:250:#![feature(mips_target_feature)]
library/core/src/lib.rs:251:#![feature(powerpc_target_feature)]
library/core/src/lib.rs:252:#![feature(riscv_target_feature)]
library/core/src/lib.rs:253:#![feature(rtm_target_feature)]
library/core/src/lib.rs:254:#![feature(sse4a_target_feature)]
library/core/src/lib.rs:255:#![feature(tbm_target_feature)]
library/core/src/lib.rs:256:#![feature(wasm_target_feature)]
library/core/src/lib.rs:274:#[unstable(feature = "assert_matches", issue = "82775")]
library/core/src/lib.rs:277:    #[unstable(feature = "assert_matches", issue = "82775")]
library/core/src/lib.rs:350:#[unstable(feature = "async_iterator", issue = "79024")]
library/core/src/lib.rs:386:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/lib.rs:407:#[unstable(feature = "stdsimd", issue = "48556")]
library/core/src/lib.rs:410:#[stable(feature = "simd_arch", since = "1.27.0")]
library/core/src/lib.rs:422:#[unstable(feature = "portable_simd", issue = "86656")]
library/core/src/lib.rs:426:#[unstable(feature = "portable_simd", issue = "86656")]
library/core/src/lib.rs:428:    #[unstable(feature = "portable_simd", issue = "86656")]
library/core/src/option.rs:547:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:562:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:566:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:570:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:571:    Some(#[stable(feature = "rust1", since = "1.0.0")] T),
library/core/src/option.rs:596:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:597:    #[rustc_const_stable(feature = "const_option_basics", since = "1.48.0")]
library/core/src/option.rs:618:    #[stable(feature = "is_some_and", since = "1.70.0")]
library/core/src/option.rs:640:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:641:    #[rustc_const_stable(feature = "const_option_basics", since = "1.48.0")]
library/core/src/option.rs:671:    #[rustc_const_stable(feature = "const_option_basics", since = "1.48.0")]
library/core/src/option.rs:672:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:693:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:694:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:707:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/option.rs:708:    #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
library/core/src/option.rs:723:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/option.rs:724:    #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
library/core/src/option.rs:746:    /// #![feature(option_as_slice)]
library/core/src/option.rs:758:    /// #![feature(option_as_slice)]
library/core/src/option.rs:766:    #[unstable(feature = "option_as_slice", issue = "108545")]
library/core/src/option.rs:797:    /// #![feature(option_as_slice)]
library/core/src/option.rs:809:    /// #![feature(option_as_slice)]
library/core/src/option.rs:820:    /// #![feature(option_as_slice)]
library/core/src/option.rs:826:    #[unstable(feature = "option_as_slice", issue = "108545")]
library/core/src/option.rs:893:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:894:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:930:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:931:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:954:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:972:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1003:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1036:    #[stable(feature = "option_result_unwrap_unchecked", since = "1.58.0")]
library/core/src/option.rs:1037:    #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
library/core/src/option.rs:1069:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1085:    /// #![feature(result_option_inspect)]
library/core/src/option.rs:1096:    #[unstable(feature = "result_option_inspect", issue = "91345")]
library/core/src/option.rs:1127:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1172:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1206:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1231:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1257:    #[stable(feature = "option_deref", since = "1.40.0")]
library/core/src/option.rs:1283:    #[stable(feature = "option_deref", since = "1.40.0")]
library/core/src/option.rs:1310:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:1311:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1332:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1369:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1407:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1443:    #[stable(feature = "option_filter", since = "1.27.0")]
library/core/src/option.rs:1484:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1506:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1539:    #[stable(feature = "option_xor", since = "1.37.0")]
library/core/src/option.rs:1573:    #[stable(feature = "option_insert", since = "1.53.0")]
library/core/src/option.rs:1602:    #[stable(feature = "option_entry", since = "1.20.0")]
library/core/src/option.rs:1619:    /// #![feature(option_get_or_insert_default)]
library/core/src/option.rs:1633:    #[unstable(feature = "option_get_or_insert_default", issue = "82901")]
library/core/src/option.rs:1659:    #[stable(feature = "option_entry", since = "1.20.0")]
library/core/src/option.rs:1693:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1694:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:1718:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:1719:    #[stable(feature = "option_replace", since = "1.31.0")]
library/core/src/option.rs:1739:    #[stable(feature = "option_zip_option", since = "1.46.0")]
library/core/src/option.rs:1755:    /// #![feature(option_zip)]
library/core/src/option.rs:1775:    #[unstable(feature = "option_zip", issue = "70086")]
library/core/src/option.rs:1803:    #[stable(feature = "unzip_option", since = "1.66.0")]
library/core/src/option.rs:1826:    #[stable(feature = "copied", since = "1.35.0")]
library/core/src/option.rs:1827:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:1853:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1879:    #[stable(feature = "copied", since = "1.35.0")]
library/core/src/option.rs:1880:    #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
library/core/src/option.rs:1904:    #[stable(since = "1.26.0", feature = "option_ref_mut_cloned")]
library/core/src/option.rs:1934:    #[stable(feature = "transpose_result", since = "1.33.0")]
library/core/src/option.rs:1935:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:1946:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never))]
library/core/src/option.rs:1947:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/core/src/option.rs:1950:#[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/option.rs:1959:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1981:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:1997:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2021:#[stable(since = "1.4.0", feature = "option_iter")]
library/core/src/option.rs:2031:#[stable(since = "1.4.0", feature = "option_iter")]
library/core/src/option.rs:2041:#[stable(since = "1.12.0", feature = "option_from")]
library/core/src/option.rs:2057:#[stable(feature = "option_ref_from_ref_option", since = "1.30.0")]
library/core/src/option.rs:2084:#[stable(feature = "option_ref_from_ref_option", since = "1.30.0")]
library/core/src/option.rs:2106:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2108:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2122:#[unstable(feature = "spec_option_partial_eq", issue = "none", reason = "exposed only for rustc")]
library/core/src/option.rs:2128:#[unstable(feature = "spec_option_partial_eq", issue = "none", reason = "exposed only for rustc")]
library/core/src/option.rs:2155:    #[stable(feature = "nonzero", since = "1.28.0")] crate::num::NonZeroU8;
library/core/src/option.rs:2156:    #[stable(feature = "nonzero", since = "1.28.0")] crate::num::NonZeroU16;
library/core/src/option.rs:2157:    #[stable(feature = "nonzero", since = "1.28.0")] crate::num::NonZeroU32;
library/core/src/option.rs:2158:    #[stable(feature = "nonzero", since = "1.28.0")] crate::num::NonZeroU64;
library/core/src/option.rs:2159:    #[stable(feature = "nonzero", since = "1.28.0")] crate::num::NonZeroU128;
library/core/src/option.rs:2160:    #[stable(feature = "nonzero", since = "1.28.0")] crate::num::NonZeroUsize;
library/core/src/option.rs:2161:    #[stable(feature = "signed_nonzero", since = "1.34.0")] crate::num::NonZeroI8;
library/core/src/option.rs:2162:    #[stable(feature = "signed_nonzero", since = "1.34.0")] crate::num::NonZeroI16;
library/core/src/option.rs:2163:    #[stable(feature = "signed_nonzero", since = "1.34.0")] crate::num::NonZeroI32;
library/core/src/option.rs:2164:    #[stable(feature = "signed_nonzero", since = "1.34.0")] crate::num::NonZeroI64;
library/core/src/option.rs:2165:    #[stable(feature = "signed_nonzero", since = "1.34.0")] crate::num::NonZeroI128;
library/core/src/option.rs:2166:    #[stable(feature = "signed_nonzero", since = "1.34.0")] crate::num::NonZeroIsize;
library/core/src/option.rs:2169:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/option.rs:2178:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2228:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2234:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2248:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2256:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2259:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/option.rs:2262:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/option.rs:2265:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2278:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2284:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2298:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2306:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2309:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/option.rs:2311:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/option.rs:2320:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2325:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2339:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2347:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2350:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/option.rs:2353:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/option.rs:2360:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/option.rs:2431:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/option.rs:2450:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/option.rs:2460:#[unstable(feature = "try_trait_v2_yeet", issue = "96374")]
library/core/src/option.rs:2468:#[unstable(feature = "try_trait_v2_residual", issue = "91285")]
library/core/src/option.rs:2499:    #[stable(feature = "option_flattening", since = "1.40.0")]
library/core/src/option.rs:2500:    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
library/core/src/time.rs:1:#![stable(feature = "duration_core", since = "1.25.0")]
library/core/src/time.rs:83:#[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:97:    /// #![feature(duration_constants)]
library/core/src/time.rs:102:    #[unstable(feature = "duration_constants", issue = "57391")]
library/core/src/time.rs:110:    /// #![feature(duration_constants)]
library/core/src/time.rs:115:    #[unstable(feature = "duration_constants", issue = "57391")]
library/core/src/time.rs:123:    /// #![feature(duration_constants)]
library/core/src/time.rs:128:    #[unstable(feature = "duration_constants", issue = "57391")]
library/core/src/time.rs:136:    /// #![feature(duration_constants)]
library/core/src/time.rs:141:    #[unstable(feature = "duration_constants", issue = "57391")]
library/core/src/time.rs:155:    #[stable(feature = "duration_zero", since = "1.53.0")]
library/core/src/time.rs:174:    #[stable(feature = "duration_saturating_ops", since = "1.53.0")]
library/core/src/time.rs:195:    #[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:198:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:221:    #[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:224:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:241:    #[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:244:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:261:    #[stable(feature = "duration_from_micros", since = "1.27.0")]
library/core/src/time.rs:264:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:281:    #[stable(feature = "duration_extras", since = "1.27.0")]
library/core/src/time.rs:284:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:306:    #[stable(feature = "duration_zero", since = "1.53.0")]
library/core/src/time.rs:307:    #[rustc_const_stable(feature = "duration_zero", since = "1.53.0")]
library/core/src/time.rs:333:    #[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:334:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:356:    #[stable(feature = "duration_extras", since = "1.27.0")]
library/core/src/time.rs:357:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:379:    #[stable(feature = "duration_extras", since = "1.27.0")]
library/core/src/time.rs:380:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:402:    #[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:403:    #[rustc_const_stable(feature = "duration_consts", since = "1.32.0")]
library/core/src/time.rs:420:    #[stable(feature = "duration_as_u128", since = "1.33.0")]
library/core/src/time.rs:421:    #[rustc_const_stable(feature = "duration_as_u128", since = "1.33.0")]
library/core/src/time.rs:438:    #[stable(feature = "duration_as_u128", since = "1.33.0")]
library/core/src/time.rs:439:    #[rustc_const_stable(feature = "duration_as_u128", since = "1.33.0")]
library/core/src/time.rs:456:    #[stable(feature = "duration_as_u128", since = "1.33.0")]
library/core/src/time.rs:457:    #[rustc_const_stable(feature = "duration_as_u128", since = "1.33.0")]
library/core/src/time.rs:477:    #[stable(feature = "duration_checked_ops", since = "1.16.0")]
library/core/src/time.rs:481:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:506:    /// #![feature(duration_constants)]
library/core/src/time.rs:512:    #[stable(feature = "duration_saturating_ops", since = "1.53.0")]
library/core/src/time.rs:516:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:537:    #[stable(feature = "duration_checked_ops", since = "1.16.0")]
library/core/src/time.rs:541:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:570:    #[stable(feature = "duration_saturating_ops", since = "1.53.0")]
library/core/src/time.rs:574:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:595:    #[stable(feature = "duration_checked_ops", since = "1.16.0")]
library/core/src/time.rs:599:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:620:    /// #![feature(duration_constants)]
library/core/src/time.rs:626:    #[stable(feature = "duration_saturating_ops", since = "1.53.0")]
library/core/src/time.rs:630:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:652:    #[stable(feature = "duration_checked_ops", since = "1.16.0")]
library/core/src/time.rs:656:    #[rustc_const_stable(feature = "duration_consts_2", since = "1.58.0")]
library/core/src/time.rs:681:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:684:    #[rustc_const_unstable(feature = "duration_consts_float", issue = "72440")]
library/core/src/time.rs:700:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:703:    #[rustc_const_unstable(feature = "duration_consts_float", issue = "72440")]
library/core/src/time.rs:735:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:772:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:795:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:816:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:837:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:860:    #[stable(feature = "duration_float", since = "1.38.0")]
library/core/src/time.rs:872:    /// #![feature(div_duration)]
library/core/src/time.rs:879:    #[unstable(feature = "div_duration", issue = "63139")]
library/core/src/time.rs:883:    #[rustc_const_unstable(feature = "duration_consts_float", issue = "72440")]
library/core/src/time.rs:892:    /// #![feature(div_duration)]
library/core/src/time.rs:899:    #[unstable(feature = "div_duration", issue = "63139")]
library/core/src/time.rs:903:    #[rustc_const_unstable(feature = "duration_consts_float", issue = "72440")]
library/core/src/time.rs:909:#[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:918:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/core/src/time.rs:925:#[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:934:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/core/src/time.rs:941:#[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:950:#[stable(feature = "symmetric_u32_duration_mul", since = "1.31.0")]
library/core/src/time.rs:959:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/core/src/time.rs:966:#[stable(feature = "duration", since = "1.3.0")]
library/core/src/time.rs:975:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/core/src/time.rs:1008:#[stable(feature = "duration_sum", since = "1.16.0")]
library/core/src/time.rs:1015:#[stable(feature = "duration_sum", since = "1.16.0")]
library/core/src/time.rs:1022:#[stable(feature = "duration_debug_impl", since = "1.27.0")]
library/core/src/time.rs:1229:#[stable(feature = "duration_checked_float", since = "1.66.0")]
library/core/src/time.rs:1247:#[stable(feature = "duration_checked_float", since = "1.66.0")]
library/core/src/time.rs:1398:    #[stable(feature = "duration_checked_float", since = "1.66.0")]
library/core/src/time.rs:1474:    #[stable(feature = "duration_checked_float", since = "1.66.0")]
library/core/src/pin.rs:382:#![stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:405:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:416:    #[unstable(feature = "unsafe_pin_internals", issue = "none")]
library/core/src/pin.rs:427:#[stable(feature = "pin_trait_impls", since = "1.41.0")]
library/core/src/pin.rs:441:#[stable(feature = "pin_trait_impls", since = "1.41.0")]
library/core/src/pin.rs:444:#[stable(feature = "pin_trait_impls", since = "1.41.0")]
library/core/src/pin.rs:470:#[stable(feature = "pin_trait_impls", since = "1.41.0")]
library/core/src/pin.rs:477:#[stable(feature = "pin_trait_impls", since = "1.41.0")]
library/core/src/pin.rs:501:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:502:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:526:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:527:    #[stable(feature = "pin_into_inner", since = "1.39.0")]
library/core/src/pin.rs:652:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:653:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:665:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:686:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:687:    #[stable(feature = "pin_into_inner", since = "1.39.0")]
library/core/src/pin.rs:722:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:745:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:771:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:804:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:805:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:815:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:816:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:832:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:833:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:853:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:854:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:875:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:896:    #[stable(feature = "pin_static_ref", since = "1.61.0")]
library/core/src/pin.rs:897:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:913:    #[unstable(feature = "pin_deref_mut", issue = "86918")]
library/core/src/pin.rs:949:    #[stable(feature = "pin_static_ref", since = "1.61.0")]
library/core/src/pin.rs:950:    #[rustc_const_unstable(feature = "const_pin", issue = "76654")]
library/core/src/pin.rs:958:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:966:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:973:#[unstable(feature = "receiver_trait", issue = "none")]
library/core/src/pin.rs:976:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:983:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:990:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:1002:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:1005:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/pin.rs:1088:/// #![feature(generators, generator_trait)]
library/core/src/pin.rs:1172:#[stable(feature = "pin_macro", since = "1.68.0")]
library/core/src/num/flt2dec/mod.rs:120:    feature = "flt2dec",
library/core/src/num/f32.rs:12:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:33:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:50:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:70:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:91:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:108:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:125:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:142:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:159:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:176:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:193:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:210:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:227:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:244:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:261:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:266:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:271:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:277:    #[stable(feature = "tau_constant", since = "1.47.0")]
library/core/src/num/f32.rs:281:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:285:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:289:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:293:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:297:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:301:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:305:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:309:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:313:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:317:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:321:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:325:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:329:    #[stable(feature = "extra_log_consts", since = "1.43.0")]
library/core/src/num/f32.rs:333:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:337:    #[stable(feature = "extra_log_consts", since = "1.43.0")]
library/core/src/num/f32.rs:341:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:345:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:352:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:356:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:360:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:368:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:372:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:375:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:378:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:382:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:385:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:389:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:392:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:405:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:409:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:412:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f32.rs:425:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:426:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:436:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:458:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:459:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:483:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:484:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:511:    #[stable(feature = "is_subnormal", since = "1.53.0")]
library/core/src/num/f32.rs:512:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:538:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:539:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:558:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:559:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:604:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:621:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:650:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:651:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:672:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:673:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f32.rs:696:    /// #![feature(float_next_up_down)]
library/core/src/num/f32.rs:708:    #[unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f32.rs:709:    #[rustc_const_unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f32.rs:746:    /// #![feature(float_next_up_down)]
library/core/src/num/f32.rs:758:    #[unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f32.rs:759:    #[rustc_const_unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f32.rs:791:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:808:    #[stable(feature = "f32_deg_rad_conversions", since = "1.7.0")]
library/core/src/num/f32.rs:827:    #[stable(feature = "f32_deg_rad_conversions", since = "1.7.0")]
library/core/src/num/f32.rs:848:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:868:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f32.rs:880:    /// #![feature(float_minimum_maximum)]
library/core/src/num/f32.rs:895:    #[unstable(feature = "float_minimum_maximum", issue = "91079")]
library/core/src/num/f32.rs:915:    /// #![feature(float_minimum_maximum)]
library/core/src/num/f32.rs:930:    #[unstable(feature = "float_minimum_maximum", issue = "91079")]
library/core/src/num/f32.rs:952:    /// #![feature(num_midpoint)]
library/core/src/num/f32.rs:956:    #[unstable(feature = "num_midpoint", issue = "110840")]
library/core/src/num/f32.rs:1002:    #[stable(feature = "float_approx_unchecked_to", since = "1.44.0")]
library/core/src/num/f32.rs:1032:    #[stable(feature = "float_bits_conv", since = "1.20.0")]
library/core/src/num/f32.rs:1033:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1058:        #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1121:    #[stable(feature = "float_bits_conv", since = "1.20.0")]
library/core/src/num/f32.rs:1122:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1150:        #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1191:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f32.rs:1192:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1212:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f32.rs:1213:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1246:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f32.rs:1247:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1264:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f32.rs:1265:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1283:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f32.rs:1284:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1313:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f32.rs:1314:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f32.rs:1372:    #[stable(feature = "total_cmp", since = "1.62.0")]
library/core/src/num/f32.rs:1428:    #[stable(feature = "clamp", since = "1.50.0")]
library/core/src/num/int_macros.rs:37:        #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/int_macros.rs:50:        #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/int_macros.rs:60:        #[stable(feature = "int_bits_const", since = "1.53.0")]
library/core/src/num/int_macros.rs:84:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:101:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:102:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:119:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:120:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:143:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:144:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:163:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:164:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:183:        #[stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/int_macros.rs:184:        #[rustc_const_stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/int_macros.rs:203:        #[stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/int_macros.rs:204:        #[rustc_const_stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/int_macros.rs:227:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:228:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:252:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:253:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:274:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:275:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:297:        #[stable(feature = "reverse_bits", since = "1.37.0")]
library/core/src/num/int_macros.rs:298:        #[rustc_const_stable(feature = "reverse_bits", since = "1.37.0")]
library/core/src/num/int_macros.rs:323:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:324:        #[rustc_const_stable(feature = "const_int_conversions", since = "1.32.0")]
library/core/src/num/int_macros.rs:355:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:356:        #[rustc_const_stable(feature = "const_int_conversions", since = "1.32.0")]
library/core/src/num/int_macros.rs:387:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:388:        #[rustc_const_stable(feature = "const_int_conversions", since = "1.32.0")]
library/core/src/num/int_macros.rs:420:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:421:        #[rustc_const_stable(feature = "const_int_conversions", since = "1.32.0")]
library/core/src/num/int_macros.rs:447:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:448:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:468:            feature = "unchecked_math",
library/core/src/num/int_macros.rs:474:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/int_macros.rs:494:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:495:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:515:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:516:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:536:            feature = "unchecked_math",
library/core/src/num/int_macros.rs:542:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/int_macros.rs:562:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:563:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:583:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:584:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:604:            feature = "unchecked_math",
library/core/src/num/int_macros.rs:610:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/int_macros.rs:631:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:632:        #[rustc_const_stable(feature = "const_checked_int_div", since = "1.52.0")]
library/core/src/num/int_macros.rs:657:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:658:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:683:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:684:        #[rustc_const_stable(feature = "const_checked_int_div", since = "1.52.0")]
library/core/src/num/int_macros.rs:709:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:710:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:733:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:734:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:754:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:755:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:775:            feature = "unchecked_math",
library/core/src/num/int_macros.rs:781:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/int_macros.rs:802:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:803:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:823:            feature = "unchecked_math",
library/core/src/num/int_macros.rs:829:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/int_macros.rs:850:        #[stable(feature = "no_panic_abs", since = "1.13.0")]
library/core/src/num/int_macros.rs:851:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:875:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/int_macros.rs:876:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/int_macros.rs:914:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:915:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:934:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:935:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:960:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:961:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:980:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:981:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1008:        #[stable(feature = "saturating_neg", since = "1.45.0")]
library/core/src/num/int_macros.rs:1009:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:1031:        #[stable(feature = "saturating_neg", since = "1.45.0")]
library/core/src/num/int_macros.rs:1032:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:1056:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1057:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/int_macros.rs:1090:        #[stable(feature = "saturating_div", since = "1.58.0")]
library/core/src/num/int_macros.rs:1091:        #[rustc_const_stable(feature = "saturating_div", since = "1.58.0")]
library/core/src/num/int_macros.rs:1114:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/int_macros.rs:1115:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/int_macros.rs:1138:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:1139:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1158:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1159:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1178:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:1179:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1198:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1199:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1218:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:1219:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1246:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/int_macros.rs:1247:        #[rustc_const_stable(feature = "const_wrapping_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1274:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:1275:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1302:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/int_macros.rs:1303:        #[rustc_const_stable(feature = "const_wrapping_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1329:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:1330:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1353:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/int_macros.rs:1354:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1378:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/int_macros.rs:1379:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1408:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/int_macros.rs:1409:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1439:        #[stable(feature = "no_panic_abs", since = "1.13.0")]
library/core/src/num/int_macros.rs:1440:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1466:        #[stable(feature = "unsigned_abs", since = "1.51.0")]
library/core/src/num/int_macros.rs:1467:        #[rustc_const_stable(feature = "unsigned_abs", since = "1.51.0")]
library/core/src/num/int_macros.rs:1487:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/int_macros.rs:1488:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/int_macros.rs:1527:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1528:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1560:        /// #![feature(bigint_helper_methods)]
library/core/src/num/int_macros.rs:1582:        #[unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/int_macros.rs:1583:        #[rustc_const_unstable(feature = "const_bigint_helper_methods", issue = "85532")]
library/core/src/num/int_macros.rs:1610:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1611:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1634:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1635:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1668:        /// #![feature(bigint_helper_methods)]
library/core/src/num/int_macros.rs:1690:        #[unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/int_macros.rs:1691:        #[rustc_const_unstable(feature = "const_bigint_helper_methods", issue = "85532")]
library/core/src/num/int_macros.rs:1718:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1719:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/int_macros.rs:1742:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1743:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1770:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1771:        #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1801:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:1802:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1832:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1833:        #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1862:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:1863:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:1891:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1892:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1918:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1919:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1941:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/int_macros.rs:1942:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1967:        #[stable(feature = "no_panic_abs", since = "1.13.0")]
library/core/src/num/int_macros.rs:1968:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:1989:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/int_macros.rs:1990:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/int_macros.rs:2036:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2037:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/int_macros.rs:2091:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:2092:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:2129:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/int_macros.rs:2130:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/int_macros.rs:2168:        /// #![feature(int_roundings)]
library/core/src/num/int_macros.rs:2177:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/int_macros.rs:2208:        /// #![feature(int_roundings)]
library/core/src/num/int_macros.rs:2217:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/int_macros.rs:2251:        /// #![feature(int_roundings)]
library/core/src/num/int_macros.rs:2261:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/int_macros.rs:2297:        /// #![feature(int_roundings)]
library/core/src/num/int_macros.rs:2309:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/int_macros.rs:2344:        /// #![feature(num_midpoint)]
library/core/src/num/int_macros.rs:2349:        #[unstable(feature = "num_midpoint", issue = "110840")]
library/core/src/num/int_macros.rs:2350:        #[rustc_const_unstable(feature = "const_num_midpoint", issue = "110840")]
library/core/src/num/int_macros.rs:2390:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2391:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2416:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2417:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2441:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2442:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2469:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2470:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2505:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2506:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2529:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2530:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/int_macros.rs:2564:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2565:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:2598:        #[stable(feature = "int_abs_diff", since = "1.60.0")]
library/core/src/num/int_macros.rs:2599:        #[rustc_const_stable(feature = "int_abs_diff", since = "1.60.0")]
library/core/src/num/int_macros.rs:2639:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2640:        #[rustc_const_stable(feature = "const_int_sign", since = "1.47.0")]
library/core/src/num/int_macros.rs:2668:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2669:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:2685:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2686:        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
library/core/src/num/int_macros.rs:2701:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/int_macros.rs:2702:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/int_macros.rs:2721:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/int_macros.rs:2722:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/int_macros.rs:2755:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/int_macros.rs:2756:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/int_macros.rs:2789:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/int_macros.rs:2790:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/int_macros.rs:2818:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/int_macros.rs:2819:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/int_macros.rs:2858:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/int_macros.rs:2859:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/int_macros.rs:2873:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2876:        #[rustc_const_stable(feature = "const_min_value", since = "1.32.0")]
library/core/src/num/int_macros.rs:2886:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/int_macros.rs:2889:        #[rustc_const_stable(feature = "const_max_value", since = "1.32.0")]
library/core/src/num/error.rs:8:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/num/error.rs:12:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/num/error.rs:20:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/num/error.rs:28:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/num/error.rs:35:#[unstable(feature = "never_type", issue = "35121")]
library/core/src/num/error.rs:65:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/error.rs:81:#[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:88:    #[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:97:    #[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:100:    #[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:103:    #[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:109:    #[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:116:    #[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/error.rs:122:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/error.rs:130:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/i64.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/int_macros.rs:4:    ($T:ident) => (int_module!($T, #[stable(feature = "rust1", since = "1.0.0")]););
library/core/src/num/shells/i128.rs:5:#![stable(feature = "i128", since = "1.26.0")]
library/core/src/num/shells/i128.rs:11:int_module! { i128, #[stable(feature = "i128", since="1.26.0")] }
library/core/src/num/shells/i8.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/u32.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/u16.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/u128.rs:5:#![stable(feature = "i128", since = "1.26.0")]
library/core/src/num/shells/u128.rs:11:int_module! { u128, #[stable(feature = "i128", since="1.26.0")] }
library/core/src/num/shells/u64.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/isize.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/usize.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/u8.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/i16.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/shells/i32.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/nonzero.rs:76:                #[rustc_const_stable(feature = "const_nonzero_int_methods", since = "1.47.0")]
library/core/src/num/nonzero.rs:91:                #[rustc_const_stable(feature = "const_nonzero_get", since = "1.34.0")]
library/core/src/num/nonzero.rs:98:            #[stable(feature = "from_nonzero", since = "1.31.0")]
library/core/src/num/nonzero.rs:107:            #[stable(feature = "nonzero_bitor", since = "1.45.0")]
library/core/src/num/nonzero.rs:118:            #[stable(feature = "nonzero_bitor", since = "1.45.0")]
library/core/src/num/nonzero.rs:130:            #[stable(feature = "nonzero_bitor", since = "1.45.0")]
library/core/src/num/nonzero.rs:142:            #[stable(feature = "nonzero_bitor", since = "1.45.0")]
library/core/src/num/nonzero.rs:150:            #[stable(feature = "nonzero_bitor", since = "1.45.0")]
library/core/src/num/nonzero.rs:166:    #[stable(feature = "nonzero", since = "1.28.0")] #[rustc_const_stable(feature = "nonzero", since = "1.28.0")] NonZeroU8(u8);
library/core/src/num/nonzero.rs:167:    #[stable(feature = "nonzero", since = "1.28.0")] #[rustc_const_stable(feature = "nonzero", since = "1.28.0")] NonZeroU16(u16);
library/core/src/num/nonzero.rs:168:    #[stable(feature = "nonzero", since = "1.28.0")] #[rustc_const_stable(feature = "nonzero", since = "1.28.0")] NonZeroU32(u32);
library/core/src/num/nonzero.rs:169:    #[stable(feature = "nonzero", since = "1.28.0")] #[rustc_const_stable(feature = "nonzero", since = "1.28.0")] NonZeroU64(u64);
library/core/src/num/nonzero.rs:170:    #[stable(feature = "nonzero", since = "1.28.0")] #[rustc_const_stable(feature = "nonzero", since = "1.28.0")] NonZeroU128(u128);
library/core/src/num/nonzero.rs:171:    #[stable(feature = "nonzero", since = "1.28.0")] #[rustc_const_stable(feature = "nonzero", since = "1.28.0")] NonZeroUsize(usize);
library/core/src/num/nonzero.rs:172:    #[stable(feature = "signed_nonzero", since = "1.34.0")] #[rustc_const_stable(feature = "signed_nonzero", since = "1.34.0")] NonZeroI8(i8);
library/core/src/num/nonzero.rs:173:    #[stable(feature = "signed_nonzero", since = "1.34.0")] #[rustc_const_stable(feature = "signed_nonzero", since = "1.34.0")] NonZeroI16(i16);
library/core/src/num/nonzero.rs:174:    #[stable(feature = "signed_nonzero", since = "1.34.0")] #[rustc_const_stable(feature = "signed_nonzero", since = "1.34.0")] NonZeroI32(i32);
library/core/src/num/nonzero.rs:175:    #[stable(feature = "signed_nonzero", since = "1.34.0")] #[rustc_const_stable(feature = "signed_nonzero", since = "1.34.0")] NonZeroI64(i64);
library/core/src/num/nonzero.rs:176:    #[stable(feature = "signed_nonzero", since = "1.34.0")] #[rustc_const_stable(feature = "signed_nonzero", since = "1.34.0")] NonZeroI128(i128);
library/core/src/num/nonzero.rs:177:    #[stable(feature = "signed_nonzero", since = "1.34.0")] #[rustc_const_stable(feature = "signed_nonzero", since = "1.34.0")] NonZeroIsize(isize);
library/core/src/num/nonzero.rs:182:        #[stable(feature = "nonzero_parse", since = "1.35.0")]
library/core/src/num/nonzero.rs:215:                #[stable(feature = "nonzero_leading_trailing_zeros", since = "1.53.0")]
library/core/src/num/nonzero.rs:216:                #[rustc_const_stable(feature = "nonzero_leading_trailing_zeros", since = "1.53.0")]
library/core/src/num/nonzero.rs:239:                #[stable(feature = "nonzero_leading_trailing_zeros", since = "1.53.0")]
library/core/src/num/nonzero.rs:240:                #[rustc_const_stable(feature = "nonzero_leading_trailing_zeros", since = "1.53.0")]
library/core/src/num/nonzero.rs:272:            #[stable(feature = "nonzero_div", since = "1.51.0")]
library/core/src/num/nonzero.rs:285:            #[stable(feature = "nonzero_div", since = "1.51.0")]
library/core/src/num/nonzero.rs:335:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:336:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:369:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:370:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:390:                /// #![feature(nonzero_ops)]
library/core/src/num/nonzero.rs:402:                #[unstable(feature = "nonzero_ops", issue = "84186")]
library/core/src/num/nonzero.rs:434:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:435:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:464:                #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/nonzero.rs:465:                #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/nonzero.rs:488:                #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/nonzero.rs:489:                #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/nonzero.rs:506:                /// #![feature(num_midpoint)]
library/core/src/num/nonzero.rs:520:                #[unstable(feature = "num_midpoint", issue = "110840")]
library/core/src/num/nonzero.rs:521:                #[rustc_const_unstable(feature = "const_num_midpoint", issue = "110840")]
library/core/src/num/nonzero.rs:570:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:571:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:601:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:602:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:636:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:637:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:675:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:676:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:708:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:709:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:743:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:744:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:772:                #[stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:773:                #[rustc_const_stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:797:                #[stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:798:                #[rustc_const_stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:823:                #[stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:824:                #[rustc_const_stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:855:                #[stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:856:                #[rustc_const_stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:890:                #[stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:891:                #[rustc_const_stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:922:                #[stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:923:                #[rustc_const_stable(feature = "nonzero_negation_ops", since = "1.71.0")]
library/core/src/num/nonzero.rs:931:            #[stable(feature = "signed_nonzero_neg", since = "1.71.0")]
library/core/src/num/nonzero.rs:943:                #[stable(feature = "signed_nonzero_neg", since = "1.71.0")] }
library/core/src/num/nonzero.rs:982:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:983:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1017:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1018:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1048:                /// #![feature(nonzero_ops)]
library/core/src/num/nonzero.rs:1060:                #[unstable(feature = "nonzero_ops", issue = "84186")]
library/core/src/num/nonzero.rs:1089:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1090:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1132:                #[stable(feature = "nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1133:                #[rustc_const_stable(feature = "const_nonzero_checked_ops", since = "1.64.0")]
library/core/src/num/nonzero.rs:1193:                #[stable(feature = "nonzero_is_power_of_two", since = "1.59.0")]
library/core/src/num/nonzero.rs:1194:                #[rustc_const_stable(feature = "nonzero_is_power_of_two", since = "1.59.0")]
library/core/src/num/nonzero.rs:1225:                #[stable(feature = "nonzero_min_max", since = "1.70.0")]
library/core/src/num/nonzero.rs:1238:                #[stable(feature = "nonzero_min_max", since = "1.70.0")]
library/core/src/num/nonzero.rs:1263:                #[stable(feature = "nonzero_min_max", since = "1.70.0")]
library/core/src/num/nonzero.rs:1280:                #[stable(feature = "nonzero_min_max", since = "1.70.0")]
library/core/src/num/nonzero.rs:1320:                #[stable(feature = "nonzero_bits", since = "1.67.0")]
library/core/src/num/fmt.rs:4:    feature = "numfmt",
library/core/src/num/mod.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:47:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/mod.rs:51:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/mod.rs:53:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:56:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:60:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:63:#[stable(feature = "nonzero", since = "1.28.0")]
library/core/src/num/mod.rs:66:#[stable(feature = "signed_nonzero", since = "1.34.0")]
library/core/src/num/mod.rs:69:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/num/mod.rs:72:#[stable(feature = "int_error_matching", since = "1.55.0")]
library/core/src/num/mod.rs:108:        /// #![feature(num_midpoint)]
library/core/src/num/mod.rs:112:        #[unstable(feature = "num_midpoint", issue = "110840")]
library/core/src/num/mod.rs:113:        #[rustc_const_unstable(feature = "const_num_midpoint", issue = "110840")]
library/core/src/num/mod.rs:133:        /// #![feature(num_midpoint)]
library/core/src/num/mod.rs:137:        #[unstable(feature = "num_midpoint", issue = "110840")]
library/core/src/num/mod.rs:138:        #[rustc_const_unstable(feature = "const_num_midpoint", issue = "110840")]
library/core/src/num/mod.rs:166:        /// #![feature(bigint_helper_methods)]
library/core/src/num/mod.rs:170:        #[unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/mod.rs:171:        #[rustc_const_unstable(feature = "const_bigint_helper_methods", issue = "85532")]
library/core/src/num/mod.rs:203:        /// #![feature(bigint_helper_methods)]
library/core/src/num/mod.rs:218:        /// #![feature(bigint_helper_methods)]
library/core/src/num/mod.rs:243:        /// #![feature(bigint_helper_methods)]
library/core/src/num/mod.rs:255:        /// #![feature(bigint_helper_methods)]
library/core/src/num/mod.rs:261:        #[unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/mod.rs:262:        #[rustc_const_unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/mod.rs:516:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/num/mod.rs:517:    #[rustc_const_stable(feature = "const_u8_is_ascii", since = "1.43.0")]
library/core/src/num/mod.rs:526:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/num/mod.rs:549:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/num/mod.rs:550:    #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.52.0")]
library/core/src/num/mod.rs:574:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/num/mod.rs:575:    #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.52.0")]
library/core/src/num/mod.rs:600:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/num/mod.rs:601:    #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.52.0")]
library/core/src/num/mod.rs:626:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/num/mod.rs:651:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/num/mod.rs:686:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:687:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:720:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:721:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:754:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:755:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:791:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:792:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:825:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:826:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:838:    /// #![feature(is_ascii_octdigit)]
library/core/src/num/mod.rs:857:    #[unstable(feature = "is_ascii_octdigit", issue = "101288")]
library/core/src/num/mod.rs:858:    #[rustc_const_unstable(feature = "is_ascii_octdigit", issue = "101288")]
library/core/src/num/mod.rs:894:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:895:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:932:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:933:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:966:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:967:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:1017:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:1018:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:1053:    #[stable(feature = "ascii_ctype_on_intrinsics", since = "1.24.0")]
library/core/src/num/mod.rs:1054:    #[rustc_const_stable(feature = "const_ascii_ctype_on_intrinsics", since = "1.47.0")]
library/core/src/num/mod.rs:1080:    #[stable(feature = "inherent_ascii_escape", since = "1.60.0")]
library/core/src/num/mod.rs:1121:    /// #![feature(utf16_extra)]
library/core/src/num/mod.rs:1134:    #[unstable(feature = "utf16_extra", issue = "94919")]
library/core/src/num/mod.rs:1135:    #[rustc_const_unstable(feature = "utf16_extra_const", issue = "94919")]
library/core/src/num/mod.rs:1334:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1340:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1345:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1351:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1362:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1371:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1388:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/mod.rs:1426:#[unstable(issue = "none", feature = "std_internals")]
library/core/src/num/uint_macros.rs:35:        #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/uint_macros.rs:48:        #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/uint_macros.rs:58:        #[stable(feature = "int_bits_const", since = "1.53.0")]
library/core/src/num/uint_macros.rs:83:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:99:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:100:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:119:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:120:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:143:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:144:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:164:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:165:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:184:        #[stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/uint_macros.rs:185:        #[rustc_const_stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/uint_macros.rs:205:        #[stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/uint_macros.rs:206:        #[rustc_const_stable(feature = "leading_trailing_ones", since = "1.46.0")]
library/core/src/num/uint_macros.rs:229:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:230:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:254:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:255:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:275:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:276:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:298:        #[stable(feature = "reverse_bits", since = "1.37.0")]
library/core/src/num/uint_macros.rs:299:        #[rustc_const_stable(feature = "reverse_bits", since = "1.37.0")]
library/core/src/num/uint_macros.rs:325:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:326:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:358:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:359:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:391:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:392:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:425:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:426:        #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:455:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:456:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:476:            feature = "unchecked_math",
library/core/src/num/uint_macros.rs:482:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/uint_macros.rs:503:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:504:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:524:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:525:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:545:            feature = "unchecked_math",
library/core/src/num/uint_macros.rs:551:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/uint_macros.rs:571:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:572:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:592:            feature = "unchecked_math",
library/core/src/num/uint_macros.rs:598:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/uint_macros.rs:618:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:619:        #[rustc_const_stable(feature = "const_checked_int_div", since = "1.52.0")]
library/core/src/num/uint_macros.rs:644:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:645:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:669:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:670:        #[rustc_const_stable(feature = "const_checked_int_div", since = "1.52.0")]
library/core/src/num/uint_macros.rs:695:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:696:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:724:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:725:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:750:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:751:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:775:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:776:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:803:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:804:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:839:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:840:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:861:        #[stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:862:        #[rustc_const_stable(feature = "int_log", since = "1.67.0")]
library/core/src/num/uint_macros.rs:887:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:888:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:908:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:909:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:929:            feature = "unchecked_math",
library/core/src/num/uint_macros.rs:935:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/uint_macros.rs:956:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:957:        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:977:            feature = "unchecked_math",
library/core/src/num/uint_macros.rs:983:        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
library/core/src/num/uint_macros.rs:1004:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/uint_macros.rs:1005:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:1043:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:1046:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:1064:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:1065:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:1091:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:1094:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:1111:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1112:        #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
library/core/src/num/uint_macros.rs:1139:        #[stable(feature = "saturating_div", since = "1.58.0")]
library/core/src/num/uint_macros.rs:1140:        #[rustc_const_stable(feature = "saturating_div", since = "1.58.0")]
library/core/src/num/uint_macros.rs:1160:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/uint_macros.rs:1161:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:1183:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:1184:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1204:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:1205:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:1224:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:1225:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1247:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:1248:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1269:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/uint_macros.rs:1270:        #[rustc_const_stable(feature = "const_wrapping_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1294:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:1295:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1317:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/uint_macros.rs:1318:        #[rustc_const_stable(feature = "const_wrapping_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1343:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:1344:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1372:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/uint_macros.rs:1373:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1400:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/uint_macros.rs:1401:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1433:        #[stable(feature = "num_wrapping", since = "1.2.0")]
library/core/src/num/uint_macros.rs:1434:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1458:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/uint_macros.rs:1459:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:1499:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1500:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1528:        /// #![feature(bigint_helper_methods)]
library/core/src/num/uint_macros.rs:1546:        #[unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/uint_macros.rs:1547:        #[rustc_const_unstable(feature = "const_bigint_helper_methods", issue = "85532")]
library/core/src/num/uint_macros.rs:1574:        #[stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:1575:        #[rustc_const_stable(feature = "mixed_integer_ops", since = "1.66.0")]
library/core/src/num/uint_macros.rs:1598:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1599:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1620:        /// #![feature(bigint_helper_methods)]
library/core/src/num/uint_macros.rs:1638:        #[unstable(feature = "bigint_helper_methods", issue = "85532")]
library/core/src/num/uint_macros.rs:1639:        #[rustc_const_unstable(feature = "const_bigint_helper_methods", issue = "85532")]
library/core/src/num/uint_macros.rs:1661:        #[stable(feature = "int_abs_diff", since = "1.60.0")]
library/core/src/num/uint_macros.rs:1662:        #[rustc_const_stable(feature = "int_abs_diff", since = "1.60.0")]
library/core/src/num/uint_macros.rs:1697:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1698:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1726:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1727:        #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1756:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:1757:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1783:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1784:        #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1813:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:1814:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:1837:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1838:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1861:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1862:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1886:        #[stable(feature = "wrapping", since = "1.7.0")]
library/core/src/num/uint_macros.rs:1887:        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
library/core/src/num/uint_macros.rs:1908:        #[stable(feature = "no_panic_pow", since = "1.34.0")]
library/core/src/num/uint_macros.rs:1909:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:1954:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:1955:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:1999:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:2000:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:2027:        #[stable(feature = "euclidean_division", since = "1.38.0")]
library/core/src/num/uint_macros.rs:2028:        #[rustc_const_stable(feature = "const_euclidean_int_methods", since = "1.52.0")]
library/core/src/num/uint_macros.rs:2050:        /// #![feature(int_roundings)]
library/core/src/num/uint_macros.rs:2053:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/uint_macros.rs:2077:        /// #![feature(int_roundings)]
library/core/src/num/uint_macros.rs:2080:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/uint_macros.rs:2112:        /// #![feature(int_roundings)]
library/core/src/num/uint_macros.rs:2116:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/uint_macros.rs:2137:        /// #![feature(int_roundings)]
library/core/src/num/uint_macros.rs:2143:        #[unstable(feature = "int_roundings", issue = "88581")]
library/core/src/num/uint_macros.rs:2166:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:2167:        #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2183:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:2210:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:2211:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:2234:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:2235:        #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
library/core/src/num/uint_macros.rs:2251:        /// #![feature(wrapping_next_power_of_two)]
library/core/src/num/uint_macros.rs:2258:        #[unstable(feature = "wrapping_next_power_of_two", issue = "32463",
library/core/src/num/uint_macros.rs:2260:        #[rustc_const_unstable(feature = "wrapping_next_power_of_two", issue = "32463")]
library/core/src/num/uint_macros.rs:2278:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2279:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/uint_macros.rs:2298:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2299:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/uint_macros.rs:2332:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2333:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/uint_macros.rs:2366:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2367:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/uint_macros.rs:2395:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2396:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/uint_macros.rs:2435:        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2436:        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
library/core/src/num/uint_macros.rs:2450:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:2453:        #[rustc_const_stable(feature = "const_max_value", since = "1.32.0")]
library/core/src/num/uint_macros.rs:2461:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/uint_macros.rs:2464:        #[rustc_const_stable(feature = "const_max_value", since = "1.32.0")]
library/core/src/num/bignum.rs:16:    feature = "core_private_bignum",
library/core/src/num/dec2flt/mod.rs:73:    feature = "dec2flt",
library/core/src/num/dec2flt/mod.rs:101:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/dec2flt/mod.rs:181:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/dec2flt/mod.rs:192:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/dec2flt/mod.rs:203:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/dec2flt/fpu.rs:11:#[cfg(all(target_arch = "x86", not(target_feature = "sse2")))]
library/core/src/num/dec2flt/fpu.rs:87:#[cfg(any(not(target_arch = "x86"), target_feature = "sse2"))]
library/core/src/num/wrapping.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:42:pub struct Wrapping<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);
library/core/src/num/wrapping.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:51:#[stable(feature = "wrapping_display", since = "1.10.0")]
library/core/src/num/wrapping.rs:58:#[stable(feature = "wrapping_fmt", since = "1.11.0")]
library/core/src/num/wrapping.rs:65:#[stable(feature = "wrapping_fmt", since = "1.11.0")]
library/core/src/num/wrapping.rs:72:#[stable(feature = "wrapping_fmt", since = "1.11.0")]
library/core/src/num/wrapping.rs:79:#[stable(feature = "wrapping_fmt", since = "1.11.0")]
library/core/src/num/wrapping.rs:89:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:103:        #[stable(feature = "wrapping_ref_ops", since = "1.39.0")] }
library/core/src/num/wrapping.rs:105:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:114:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:128:        #[stable(feature = "wrapping_ref_ops", since = "1.39.0")] }
library/core/src/num/wrapping.rs:130:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:143:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:153:        #[stable(feature = "wrapping_ref_ops", since = "1.39.0")] }
library/core/src/num/wrapping.rs:155:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:164:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:174:        #[stable(feature = "wrapping_ref_ops", since = "1.39.0")] }
library/core/src/num/wrapping.rs:176:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:211:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:221:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:223:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:232:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:241:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:251:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:253:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:262:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:271:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:281:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:283:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:292:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:301:        #[stable(feature = "wrapping_div", since = "1.3.0")]
library/core/src/num/wrapping.rs:311:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:313:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:322:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:331:        #[stable(feature = "wrapping_impls", since = "1.7.0")]
library/core/src/num/wrapping.rs:341:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:343:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:352:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:361:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:371:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:373:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:383:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:385:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:394:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:403:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:413:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:415:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:424:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:433:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/wrapping.rs:443:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:445:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/num/wrapping.rs:454:        #[stable(feature = "wrapping_int_assign_impl", since = "1.60.0")]
library/core/src/num/wrapping.rs:463:        #[stable(feature = "wrapping_neg", since = "1.10.0")]
library/core/src/num/wrapping.rs:472:                #[stable(feature = "wrapping_ref", since = "1.14.0")] }
library/core/src/num/wrapping.rs:489:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:494:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:504:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:509:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:519:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:524:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:534:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:546:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:558:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:566:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:578:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:588:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:605:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:616:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:633:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:644:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:656:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:670:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:695:            #[stable(feature = "reverse_bits", since = "1.37.0")]
library/core/src/num/wrapping.rs:696:            #[rustc_const_stable(feature = "const_reverse_bits", since = "1.37.0")]
library/core/src/num/wrapping.rs:714:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:727:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:742:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:755:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:770:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:784:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:799:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:813:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:825:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:834:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:843:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:863:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:873:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:890:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:901:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:917:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:927:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:940:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:948:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:961:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:969:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:989:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:999:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:1011:            /// #![feature(wrapping_int_impl)]
library/core/src/num/wrapping.rs:1019:            #[unstable(feature = "wrapping_int_impl", issue = "32463")]
library/core/src/num/wrapping.rs:1034:            /// #![feature(wrapping_next_power_of_two)]
library/core/src/num/wrapping.rs:1044:            #[unstable(feature = "wrapping_next_power_of_two", issue = "32463",
library/core/src/num/diy_float.rs:7:    feature = "core_private_diy_float",
library/core/src/num/saturating.rs:27:/// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:35:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:38:pub struct Saturating<T>(#[unstable(feature = "saturating_int_impl", issue = "87920")] pub T);
library/core/src/num/saturating.rs:40:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:47:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:54:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:61:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:68:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:75:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:86:        // #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:100:        // #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:102:        // #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:111:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:125:        #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:127:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:140:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:150:        #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:152:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:161:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:171:        #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:173:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:208:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:218:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:220:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:229:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:238:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:248:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:250:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:259:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:268:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:278:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:280:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:289:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:303:        /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:312:        /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:317:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:327:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:330:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:339:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:348:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:358:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:360:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:369:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:378:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:388:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:390:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:400:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:402:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:411:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:420:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:430:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:432:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:441:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:450:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:460:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:462:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:471:        #[unstable(feature = "saturating_int_assign_impl", issue = "92354")]
library/core/src/num/saturating.rs:495:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:500:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:510:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:515:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:525:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:530:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:540:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:552:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:564:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:572:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:584:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:594:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:611:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:622:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:639:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:650:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:662:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:676:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:691:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:703:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:704:            #[rustc_const_unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:721:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:734:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:749:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:762:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:777:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:789:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:806:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:818:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:832:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:841:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:848:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:870:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:878:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:893:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:903:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:921:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:929:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:944:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:952:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:965:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:973:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:979:        #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:988:                #[unstable(feature = "saturating_int_impl", issue = "87920")] }
library/core/src/num/saturating.rs:1004:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:1012:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/saturating.rs:1026:            /// #![feature(saturating_int_impl)]
library/core/src/num/saturating.rs:1034:            #[unstable(feature = "saturating_int_impl", issue = "87920")]
library/core/src/num/f64.rs:12:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:33:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:50:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:70:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:91:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:108:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:125:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:142:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:159:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:176:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:193:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:210:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:227:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:244:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:261:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:266:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:271:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:277:    #[stable(feature = "tau_constant", since = "1.47.0")]
library/core/src/num/f64.rs:281:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:285:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:289:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:293:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:297:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:301:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:305:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:309:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:313:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:317:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:321:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:325:    #[stable(feature = "extra_log_consts", since = "1.43.0")]
library/core/src/num/f64.rs:329:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:333:    #[stable(feature = "extra_log_consts", since = "1.43.0")]
library/core/src/num/f64.rs:337:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:341:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:345:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:352:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:356:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:359:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:367:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:371:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:374:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:377:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:381:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:384:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:388:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:391:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:405:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:408:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:411:    #[stable(feature = "assoc_int_consts", since = "1.43.0")]
library/core/src/num/f64.rs:424:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:425:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:435:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:459:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:460:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:484:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:485:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:512:    #[stable(feature = "is_subnormal", since = "1.53.0")]
library/core/src/num/f64.rs:513:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:539:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:540:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:559:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:560:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:595:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:613:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:642:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:643:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:650:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:673:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:674:    #[rustc_const_unstable(feature = "const_float_classify", issue = "72505")]
library/core/src/num/f64.rs:684:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:706:    /// #![feature(float_next_up_down)]
library/core/src/num/f64.rs:718:    #[unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f64.rs:719:    #[rustc_const_unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f64.rs:756:    /// #![feature(float_next_up_down)]
library/core/src/num/f64.rs:768:    #[unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f64.rs:769:    #[rustc_const_unstable(feature = "float_next_up_down", issue = "91399")]
library/core/src/num/f64.rs:801:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:818:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:838:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:859:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:879:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/num/f64.rs:891:    /// #![feature(float_minimum_maximum)]
library/core/src/num/f64.rs:906:    #[unstable(feature = "float_minimum_maximum", issue = "91079")]
library/core/src/num/f64.rs:926:    /// #![feature(float_minimum_maximum)]
library/core/src/num/f64.rs:941:    #[unstable(feature = "float_minimum_maximum", issue = "91079")]
library/core/src/num/f64.rs:963:    /// #![feature(num_midpoint)]
library/core/src/num/f64.rs:967:    #[unstable(feature = "num_midpoint", issue = "110840")]
library/core/src/num/f64.rs:1013:    #[stable(feature = "float_approx_unchecked_to", since = "1.44.0")]
library/core/src/num/f64.rs:1043:    #[stable(feature = "float_bits_conv", since = "1.20.0")]
library/core/src/num/f64.rs:1044:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1051:        #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1114:    #[stable(feature = "float_bits_conv", since = "1.20.0")]
library/core/src/num/f64.rs:1115:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1148:        #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1189:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f64.rs:1190:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1210:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f64.rs:1211:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1244:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f64.rs:1245:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1262:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f64.rs:1263:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1281:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f64.rs:1282:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1311:    #[stable(feature = "float_to_from_bytes", since = "1.40.0")]
library/core/src/num/f64.rs:1312:    #[rustc_const_unstable(feature = "const_float_bits_conv", issue = "72447")]
library/core/src/num/f64.rs:1370:    #[stable(feature = "total_cmp", since = "1.62.0")]
library/core/src/num/f64.rs:1426:    #[stable(feature = "clamp", since = "1.50.0")]
library/core/src/tuple.rs:25:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/tuple.rs:43:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/tuple.rs:52:            #[unstable(feature = "structural_match", issue = "31434")]
library/core/src/tuple.rs:59:            #[unstable(feature = "structural_match", issue = "31434")]
library/core/src/tuple.rs:66:            #[unstable(feature = "structural_match", issue = "31434")]
library/core/src/tuple.rs:73:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/tuple.rs:103:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/tuple.rs:117:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/tuple.rs:126:        #[stable(feature = "array_tuple_conv", since = "1.71.0")]
library/core/src/tuple.rs:136:        #[stable(feature = "array_tuple_conv", since = "1.71.0")]
library/core/src/cell/lazy.rs:21:/// #![feature(lazy_cell)]
library/core/src/cell/lazy.rs:39:#[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell/lazy.rs:50:    /// #![feature(lazy_cell)]
library/core/src/cell/lazy.rs:61:    #[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell/lazy.rs:73:    /// #![feature(lazy_cell)]
library/core/src/cell/lazy.rs:74:    /// #![feature(lazy_cell_consume)]
library/core/src/cell/lazy.rs:85:    #[unstable(feature = "lazy_cell_consume", issue = "109736")]
library/core/src/cell/lazy.rs:102:    /// #![feature(lazy_cell)]
library/core/src/cell/lazy.rs:112:    #[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell/lazy.rs:176:#[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell/lazy.rs:185:#[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell/lazy.rs:194:#[unstable(feature = "lazy_cell", issue = "109736")]
library/core/src/cell/once.rs:32:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:42:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:43:    #[rustc_const_stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:52:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:62:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:88:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:128:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:153:    /// #![feature(once_cell_try)]
library/core/src/cell/once.rs:166:    #[unstable(feature = "once_cell_try", issue = "109737")]
library/core/src/cell/once.rs:209:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:236:    #[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:242:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:250:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:260:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:275:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:283:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:286:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/cell/once.rs:296:#[stable(feature = "once_cell", since = "1.70.0")]
library/core/src/macros/mod.rs:5:#[stable(feature = "core", since = "1.6.0")]
library/core/src/macros/mod.rs:33:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:83:#[stable(feature = "assert_ne", since = "1.13.0")]
library/core/src/macros/mod.rs:129:/// #![feature(assert_matches)]
library/core/src/macros/mod.rs:141:#[unstable(feature = "assert_matches", issue = "82775")]
library/core/src/macros/mod.rs:213:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:244:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:274:#[stable(feature = "assert_ne", since = "1.13.0")]
library/core/src/macros/mod.rs:303:/// #![feature(assert_matches)]
library/core/src/macros/mod.rs:316:#[unstable(feature = "assert_matches", issue = "82775")]
library/core/src/macros/mod.rs:340:#[stable(feature = "matches_macro", since = "1.42.0")]
library/core/src/macros/mod.rs:414:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:515:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:549:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:616:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:700:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:767:#[stable(feature = "todo_macro", since = "1.40.0")]
library/core/src/macros/mod.rs:813:    /// Emit a compiler error if one of a number of features isn't available.
library/core/src/macros/mod.rs:816:    /// #[cfg(not(any(feature = "foo", feature = "bar")))]
library/core/src/macros/mod.rs:817:    /// compile_error!("Either feature \"foo\" or \"bar\" must be enabled for this crate.");
library/core/src/macros/mod.rs:819:    #[stable(feature = "compile_error_macro", since = "1.20.0")]
library/core/src/macros/mod.rs:870:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:883:    /// This macro is used by the panic macros for the `const_panic` feature.
library/core/src/macros/mod.rs:886:    #[unstable(feature = "const_format_args", issue = "none")]
library/core/src/macros/mod.rs:897:        feature = "format_args_nl",
library/core/src/macros/mod.rs:942:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:972:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:992:    /// #![feature(concat_idents)]
library/core/src/macros/mod.rs:1004:        feature = "concat_idents",
library/core/src/macros/mod.rs:1027:    /// #![feature(concat_bytes)]
library/core/src/macros/mod.rs:1034:    #[unstable(feature = "concat_bytes", issue = "87555")]
library/core/src/macros/mod.rs:1056:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1081:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1120:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1145:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1169:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1210:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1250:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1275:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1308:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1377:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1428:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1440:        feature = "log_syntax",
library/core/src/macros/mod.rs:1454:        feature = "trace_macros",
library/core/src/macros/mod.rs:1470:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1482:    #[unstable(feature = "derive_const", issue = "none")]
library/core/src/macros/mod.rs:1493:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1502:        feature = "test",
library/core/src/macros/mod.rs:1515:        feature = "custom_test_frameworks",
library/core/src/macros/mod.rs:1517:        reason = "custom test frameworks are an unstable feature"
library/core/src/macros/mod.rs:1528:    #[stable(feature = "global_allocator", since = "1.28.0")]
library/core/src/macros/mod.rs:1538:    #[unstable(feature = "alloc_error_handler", issue = "51540")]
library/core/src/macros/mod.rs:1547:        feature = "cfg_accessible",
library/core/src/macros/mod.rs:1558:        feature = "cfg_eval",
library/core/src/macros/mod.rs:1560:        reason = "`cfg_eval` is a recently implemented feature"
library/core/src/macros/mod.rs:1570:        feature = "type_ascription",
library/core/src/macros/mod.rs:1580:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/macros/mod.rs:1590:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:155:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:177:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:186:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:203:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:207:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:215:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:222:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:229:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/borrow.rs:236:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:37:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:103:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:118:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:128:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:136:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/clone.rs:149:    feature = "derive_clone_copy",
library/core/src/clone.rs:159:    feature = "derive_clone_copy",
library/core/src/clone.rs:178:                #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:196:    #[unstable(feature = "never_type", issue = "35121")]
library/core/src/clone.rs:204:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:212:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:221:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/clone.rs:231:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:82:#[stable(feature = "core_c_str", since = "1.64.0")]
library/core/src/ffi/c_str.rs:115:#[stable(feature = "core_c_str", since = "1.64.0")]
library/core/src/ffi/c_str.rs:135:#[stable(feature = "frombyteswithnulerror_impls", since = "1.17.0")]
library/core/src/ffi/c_str.rs:156:#[stable(feature = "cstr_from_bytes_until_nul", since = "1.69.0")]
library/core/src/ffi/c_str.rs:159:#[stable(feature = "cstr_from_bytes_until_nul", since = "1.69.0")]
library/core/src/ffi/c_str.rs:166:#[stable(feature = "cstr_debug", since = "1.3.0")]
library/core/src/ffi/c_str.rs:173:#[stable(feature = "cstr_default", since = "1.10.0")]
library/core/src/ffi/c_str.rs:183:#[stable(feature = "frombyteswithnulerror_impls", since = "1.17.0")]
library/core/src/ffi/c_str.rs:244:    /// #![feature(const_cstr_from_ptr)]
library/core/src/ffi/c_str.rs:258:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:259:    #[rustc_const_unstable(feature = "const_cstr_from_ptr", issue = "101719")]
library/core/src/ffi/c_str.rs:327:    #[stable(feature = "cstr_from_bytes_until_nul", since = "1.69.0")]
library/core/src/ffi/c_str.rs:328:    #[rustc_const_stable(feature = "cstr_from_bytes_until_nul", since = "1.69.0")]
library/core/src/ffi/c_str.rs:379:    #[stable(feature = "cstr_from_bytes", since = "1.10.0")]
library/core/src/ffi/c_str.rs:380:    #[rustc_const_stable(feature = "const_cstr_methods", since = "1.72.0")]
library/core/src/ffi/c_str.rs:416:    #[stable(feature = "cstr_from_bytes", since = "1.10.0")]
library/core/src/ffi/c_str.rs:417:    #[rustc_const_stable(feature = "const_cstr_unchecked", since = "1.59.0")]
library/core/src/ffi/c_str.rs:509:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:510:    #[rustc_const_stable(feature = "const_str_as_ptr", since = "1.32.0")]
library/core/src/ffi/c_str.rs:534:    #[stable(feature = "cstr_is_empty", since = "1.71.0")]
library/core/src/ffi/c_str.rs:535:    #[rustc_const_stable(feature = "cstr_is_empty", since = "1.71.0")]
library/core/src/ffi/c_str.rs:563:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:564:    #[rustc_const_stable(feature = "const_cstr_methods", since = "1.72.0")]
library/core/src/ffi/c_str.rs:592:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:593:    #[rustc_const_stable(feature = "const_cstr_methods", since = "1.72.0")]
library/core/src/ffi/c_str.rs:616:    #[stable(feature = "cstr_to_str", since = "1.4.0")]
library/core/src/ffi/c_str.rs:617:    #[rustc_const_stable(feature = "const_cstr_methods", since = "1.72.0")]
library/core/src/ffi/c_str.rs:627:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:634:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:636:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:643:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ffi/c_str.rs:651:#[stable(feature = "cstr_range_from", since = "1.47.0")]
library/core/src/ffi/c_str.rs:674:#[stable(feature = "cstring_asref", since = "1.7.0")]
library/core/src/ffi/mod.rs:9:#![stable(feature = "", since = "1.30.0")]
library/core/src/ffi/mod.rs:17:#[stable(feature = "core_c_str", since = "1.64.0")]
library/core/src/ffi/mod.rs:29:        #[stable(feature = "core_ffi_c", since = "1.64.0")]
library/core/src/ffi/mod.rs:48:        #[unstable(feature = "raw_os_nonzero", issue = "82363")]
library/core/src/ffi/mod.rs:87:#[unstable(feature = "c_size_t", issue = "88345")]
library/core/src/ffi/mod.rs:94:#[unstable(feature = "c_size_t", issue = "88345")]
library/core/src/ffi/mod.rs:101:#[unstable(feature = "c_size_t", issue = "88345")]
library/core/src/ffi/mod.rs:212:#[stable(feature = "core_c_void", since = "1.30.0")]
library/core/src/ffi/mod.rs:215:        feature = "c_void_variant",
library/core/src/ffi/mod.rs:222:        feature = "c_void_variant",
library/core/src/ffi/mod.rs:230:#[stable(feature = "std_debug", since = "1.16.0")]
library/core/src/ffi/mod.rs:254:    feature = "c_variadic",
library/core/src/ffi/mod.rs:255:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:282:    feature = "c_variadic",
library/core/src/ffi/mod.rs:283:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:307:    feature = "c_variadic",
library/core/src/ffi/mod.rs:308:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:327:    feature = "c_variadic",
library/core/src/ffi/mod.rs:328:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:347:    feature = "c_variadic",
library/core/src/ffi/mod.rs:348:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:366:    feature = "c_variadic",
library/core/src/ffi/mod.rs:367:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:384:    feature = "c_variadic",
library/core/src/ffi/mod.rs:385:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:443:    feature = "c_variadic",
library/core/src/ffi/mod.rs:444:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:473:    feature = "c_variadic",
library/core/src/ffi/mod.rs:474:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:487:    feature = "c_variadic",
library/core/src/ffi/mod.rs:488:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:502:    feature = "c_variadic",
library/core/src/ffi/mod.rs:503:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:526:        feature = "c_variadic",
library/core/src/ffi/mod.rs:527:        reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:537:            #[unstable(feature = "c_variadic",
library/core/src/ffi/mod.rs:538:                       reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:551:    feature = "c_variadic",
library/core/src/ffi/mod.rs:552:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:558:    feature = "c_variadic",
library/core/src/ffi/mod.rs:559:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:566:    feature = "c_variadic",
library/core/src/ffi/mod.rs:567:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:595:    feature = "c_variadic",
library/core/src/ffi/mod.rs:596:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/ffi/mod.rs:613:    feature = "c_variadic",
library/core/src/ffi/mod.rs:614:    reason = "the `c_variadic` feature has not been properly tested on \
library/core/src/panic/unwind_safe.rs:84:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:100:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:169:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:170:pub struct AssertUnwindSafe<T>(#[stable(feature = "catch_unwind", since = "1.9.0")] pub T);
library/core/src/panic/unwind_safe.rs:180:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:182:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:184:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:186:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:188:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/panic/unwind_safe.rs:190:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/panic/unwind_safe.rs:192:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:199:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:201:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:205:#[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
library/core/src/panic/unwind_safe.rs:208:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:211:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:214:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:217:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:220:#[unstable(feature = "integer_atomics", issue = "99069")]
library/core/src/panic/unwind_safe.rs:224:#[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
library/core/src/panic/unwind_safe.rs:227:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:230:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:233:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:236:#[stable(feature = "integer_atomics_stable", since = "1.34.0")]
library/core/src/panic/unwind_safe.rs:239:#[unstable(feature = "integer_atomics", issue = "99069")]
library/core/src/panic/unwind_safe.rs:243:#[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
library/core/src/panic/unwind_safe.rs:247:#[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
library/core/src/panic/unwind_safe.rs:250:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:259:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:266:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/core/src/panic/unwind_safe.rs:275:#[stable(feature = "std_debug", since = "1.16.0")]
library/core/src/panic/unwind_safe.rs:282:#[stable(feature = "assertunwindsafe_default", since = "1.62.0")]
library/core/src/panic/unwind_safe.rs:289:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/panic/unwind_safe.rs:300:#[unstable(feature = "async_iterator", issue = "79024")]
library/core/src/panic/panic_info.rs:24:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic/panic_info.rs:35:        feature = "panic_internals",
library/core/src/panic/panic_info.rs:51:        feature = "panic_internals",
library/core/src/panic/panic_info.rs:83:    #[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic/panic_info.rs:92:    #[unstable(feature = "panic_info_message", issue = "66745")]
library/core/src/panic/panic_info.rs:122:    #[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic/panic_info.rs:140:    #[unstable(feature = "panic_can_unwind", issue = "92988")]
library/core/src/panic/panic_info.rs:146:#[stable(feature = "panic_hook_display", since = "1.26.0")]
library/core/src/panic/location.rs:32:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic/location.rs:83:    #[stable(feature = "track_caller", since = "1.46.0")]
library/core/src/panic/location.rs:84:    #[rustc_const_unstable(feature = "const_caller_location", issue = "76156")]
library/core/src/panic/location.rs:125:    #[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic/location.rs:126:    #[rustc_const_unstable(feature = "const_location_fields", issue = "102911")]
library/core/src/panic/location.rs:150:    #[stable(feature = "panic_hooks", since = "1.10.0")]
library/core/src/panic/location.rs:151:    #[rustc_const_unstable(feature = "const_location_fields", issue = "102911")]
library/core/src/panic/location.rs:175:    #[stable(feature = "panic_col", since = "1.25.0")]
library/core/src/panic/location.rs:176:    #[rustc_const_unstable(feature = "const_location_fields", issue = "102911")]
library/core/src/panic/location.rs:184:    feature = "panic_internals",
library/core/src/panic/location.rs:195:#[stable(feature = "panic_hook_display", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:31:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/const_ptr.rs:32:    #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
library/core/src/ptr/const_ptr.rs:56:    #[stable(feature = "ptr_cast", since = "1.38.0")]
library/core/src/ptr/const_ptr.rs:57:    #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
library/core/src/ptr/const_ptr.rs:80:    /// #![feature(set_ptr_value)]
library/core/src/ptr/const_ptr.rs:91:    #[unstable(feature = "set_ptr_value", issue = "75091")]
library/core/src/ptr/const_ptr.rs:92:    #[rustc_const_unstable(feature = "set_ptr_value", issue = "75091")]
library/core/src/ptr/const_ptr.rs:106:    #[stable(feature = "ptr_const_cast", since = "1.65.0")]
library/core/src/ptr/const_ptr.rs:107:    #[rustc_const_stable(feature = "ptr_const_cast", since = "1.65.0")]
library/core/src/ptr/const_ptr.rs:126:    /// #![feature(ptr_to_from_bits)]
library/core/src/ptr/const_ptr.rs:135:    #[unstable(feature = "ptr_to_from_bits", issue = "91126")]
library/core/src/ptr/const_ptr.rs:157:    /// #![feature(ptr_to_from_bits)]
library/core/src/ptr/const_ptr.rs:164:    #[unstable(feature = "ptr_to_from_bits", issue = "91126")]
library/core/src/ptr/const_ptr.rs:204:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/const_ptr.rs:238:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/const_ptr.rs:258:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/const_ptr.rs:281:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/const_ptr.rs:289:    #[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/const_ptr.rs:290:    #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/const_ptr.rs:350:    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
library/core/src/ptr/const_ptr.rs:351:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/const_ptr.rs:386:    /// #![feature(ptr_as_uninit)]
library/core/src/ptr/const_ptr.rs:397:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/const_ptr.rs:398:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/const_ptr.rs:457:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/const_ptr.rs:459:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/const_ptr.rs:482:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:483:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:538:    #[stable(feature = "ptr_wrapping_offset", since = "1.16.0")]
library/core/src/ptr/const_ptr.rs:540:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/const_ptr.rs:562:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:563:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:578:    /// #![feature(ptr_mask, strict_provenance)]
library/core/src/ptr/const_ptr.rs:599:    #[unstable(feature = "ptr_mask", issue = "98290")]
library/core/src/ptr/const_ptr.rs:687:    #[stable(feature = "ptr_offset_from", since = "1.47.0")]
library/core/src/ptr/const_ptr.rs:688:    #[rustc_const_stable(feature = "const_ptr_offset_from", since = "1.65.0")]
library/core/src/ptr/const_ptr.rs:711:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:712:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:735:    /// # #![feature(ptr_sub_ptr)]
library/core/src/ptr/const_ptr.rs:764:    /// #![feature(ptr_sub_ptr)]
library/core/src/ptr/const_ptr.rs:779:    #[unstable(feature = "ptr_sub_ptr", issue = "95892")]
library/core/src/ptr/const_ptr.rs:780:    #[rustc_const_unstable(feature = "const_ptr_sub_ptr", issue = "95892")]
library/core/src/ptr/const_ptr.rs:820:    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/const_ptr.rs:821:    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/const_ptr.rs:850:    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/const_ptr.rs:851:    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/const_ptr.rs:912:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:914:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/const_ptr.rs:937:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:938:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:995:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:997:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/const_ptr.rs:1021:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:1022:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:1078:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1080:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/const_ptr.rs:1101:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:1102:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:1156:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1158:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/const_ptr.rs:1179:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:1180:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/const_ptr.rs:1191:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1192:    #[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/ptr/const_ptr.rs:1213:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1232:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1233:    #[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/ptr/const_ptr.rs:1252:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/ptr/const_ptr.rs:1253:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1272:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/ptr/const_ptr.rs:1273:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/const_ptr.rs:1326:    #[stable(feature = "align_offset", since = "1.36.0")]
library/core/src/ptr/const_ptr.rs:1327:    #[rustc_const_unstable(feature = "const_align_offset", issue = "90962")]
library/core/src/ptr/const_ptr.rs:1347:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1348:    /// #![feature(pointer_byte_offsets)]
library/core/src/ptr/const_ptr.rs:1372:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1373:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1398:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1399:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1424:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1425:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1448:    #[unstable(feature = "pointer_is_aligned", issue = "96284")]
library/core/src/ptr/const_ptr.rs:1449:    #[rustc_const_unstable(feature = "const_pointer_is_aligned", issue = "104203")]
library/core/src/ptr/const_ptr.rs:1469:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1470:    /// #![feature(pointer_byte_offsets)]
library/core/src/ptr/const_ptr.rs:1499:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1500:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1524:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1525:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1548:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1549:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/const_ptr.rs:1564:    #[unstable(feature = "pointer_is_aligned", issue = "96284")]
library/core/src/ptr/const_ptr.rs:1565:    #[rustc_const_unstable(feature = "const_pointer_is_aligned", issue = "104203")]
library/core/src/ptr/const_ptr.rs:1601:    /// #![feature(slice_ptr_len)]
library/core/src/ptr/const_ptr.rs:1609:    #[unstable(feature = "slice_ptr_len", issue = "71146")]
library/core/src/ptr/const_ptr.rs:1610:    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
library/core/src/ptr/const_ptr.rs:1622:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/const_ptr.rs:1629:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/const_ptr.rs:1630:    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/const_ptr.rs:1646:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/const_ptr.rs:1654:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/const_ptr.rs:1702:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/const_ptr.rs:1703:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/const_ptr.rs:1715:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/const_ptr.rs:1723:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/const_ptr.rs:1727:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/const_ptr.rs:1741:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mut_ptr.rs:30:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mut_ptr.rs:31:    #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
library/core/src/ptr/mut_ptr.rs:55:    #[stable(feature = "ptr_cast", since = "1.38.0")]
library/core/src/ptr/mut_ptr.rs:56:    #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
library/core/src/ptr/mut_ptr.rs:79:    /// #![feature(set_ptr_value)]
library/core/src/ptr/mut_ptr.rs:90:    #[unstable(feature = "set_ptr_value", issue = "75091")]
library/core/src/ptr/mut_ptr.rs:91:    #[rustc_const_unstable(feature = "set_ptr_value", issue = "75091")]
library/core/src/ptr/mut_ptr.rs:111:    #[stable(feature = "ptr_const_cast", since = "1.65.0")]
library/core/src/ptr/mut_ptr.rs:112:    #[rustc_const_stable(feature = "ptr_const_cast", since = "1.65.0")]
library/core/src/ptr/mut_ptr.rs:130:    /// #![feature(ptr_to_from_bits)]
library/core/src/ptr/mut_ptr.rs:140:    #[unstable(feature = "ptr_to_from_bits", issue = "91126")]
library/core/src/ptr/mut_ptr.rs:162:    /// #![feature(ptr_to_from_bits)]
library/core/src/ptr/mut_ptr.rs:169:    #[unstable(feature = "ptr_to_from_bits", issue = "91126")]
library/core/src/ptr/mut_ptr.rs:209:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mut_ptr.rs:243:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mut_ptr.rs:263:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mut_ptr.rs:286:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mut_ptr.rs:294:    #[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/mut_ptr.rs:295:    #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/mut_ptr.rs:358:    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
library/core/src/ptr/mut_ptr.rs:359:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/mut_ptr.rs:397:    /// #![feature(ptr_as_uninit)]
library/core/src/ptr/mut_ptr.rs:408:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/mut_ptr.rs:409:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/mut_ptr.rs:468:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mut_ptr.rs:470:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/mut_ptr.rs:495:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:496:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:550:    #[stable(feature = "ptr_wrapping_offset", since = "1.16.0")]
library/core/src/ptr/mut_ptr.rs:552:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/mut_ptr.rs:574:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:575:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:590:    /// #![feature(ptr_mask, strict_provenance)]
library/core/src/ptr/mut_ptr.rs:614:    #[unstable(feature = "ptr_mask", issue = "98290")]
library/core/src/ptr/mut_ptr.rs:677:    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
library/core/src/ptr/mut_ptr.rs:678:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/mut_ptr.rs:713:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/mut_ptr.rs:714:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/mut_ptr.rs:741:    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/mut_ptr.rs:742:    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/mut_ptr.rs:768:    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/mut_ptr.rs:769:    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/ptr/mut_ptr.rs:859:    #[stable(feature = "ptr_offset_from", since = "1.47.0")]
library/core/src/ptr/mut_ptr.rs:860:    #[rustc_const_stable(feature = "const_ptr_offset_from", since = "1.65.0")]
library/core/src/ptr/mut_ptr.rs:881:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:882:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:905:    /// # #![feature(ptr_sub_ptr)]
library/core/src/ptr/mut_ptr.rs:934:    /// #![feature(ptr_sub_ptr)]
library/core/src/ptr/mut_ptr.rs:950:    #[unstable(feature = "ptr_sub_ptr", issue = "95892")]
library/core/src/ptr/mut_ptr.rs:951:    #[rustc_const_unstable(feature = "const_ptr_sub_ptr", issue = "95892")]
library/core/src/ptr/mut_ptr.rs:1011:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1013:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/mut_ptr.rs:1036:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1037:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1094:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1096:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/mut_ptr.rs:1120:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1121:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1177:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1179:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/mut_ptr.rs:1200:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1201:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1255:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1257:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/ptr/mut_ptr.rs:1278:    #[unstable(feature = "pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1279:    #[rustc_const_unstable(feature = "const_pointer_byte_offsets", issue = "96283")]
library/core/src/ptr/mut_ptr.rs:1290:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1291:    #[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/ptr/mut_ptr.rs:1312:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1331:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1332:    #[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/ptr/mut_ptr.rs:1351:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/ptr/mut_ptr.rs:1352:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1371:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/ptr/mut_ptr.rs:1372:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1391:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/ptr/mut_ptr.rs:1392:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1411:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/ptr/mut_ptr.rs:1412:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1428:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1441:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1442:    #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/ptr/mut_ptr.rs:1460:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1461:    #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/ptr/mut_ptr.rs:1482:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1501:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1502:    #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/ptr/mut_ptr.rs:1519:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1536:    #[stable(feature = "pointer_methods", since = "1.26.0")]
library/core/src/ptr/mut_ptr.rs:1537:    #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/ptr/mut_ptr.rs:1591:    #[stable(feature = "align_offset", since = "1.36.0")]
library/core/src/ptr/mut_ptr.rs:1592:    #[rustc_const_unstable(feature = "const_align_offset", issue = "90962")]
library/core/src/ptr/mut_ptr.rs:1612:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1613:    /// #![feature(pointer_byte_offsets)]
library/core/src/ptr/mut_ptr.rs:1637:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1638:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1639:    /// #![feature(const_mut_refs)]
library/core/src/ptr/mut_ptr.rs:1664:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1665:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1691:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1692:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1715:    #[unstable(feature = "pointer_is_aligned", issue = "96284")]
library/core/src/ptr/mut_ptr.rs:1716:    #[rustc_const_unstable(feature = "const_pointer_is_aligned", issue = "104203")]
library/core/src/ptr/mut_ptr.rs:1736:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1737:    /// #![feature(pointer_byte_offsets)]
library/core/src/ptr/mut_ptr.rs:1766:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1767:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1768:    /// #![feature(const_mut_refs)]
library/core/src/ptr/mut_ptr.rs:1792:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1793:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1817:    /// #![feature(pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1818:    /// #![feature(const_pointer_is_aligned)]
library/core/src/ptr/mut_ptr.rs:1833:    #[unstable(feature = "pointer_is_aligned", issue = "96284")]
library/core/src/ptr/mut_ptr.rs:1834:    #[rustc_const_unstable(feature = "const_pointer_is_aligned", issue = "104203")]
library/core/src/ptr/mut_ptr.rs:1870:    /// #![feature(slice_ptr_len)]
library/core/src/ptr/mut_ptr.rs:1877:    #[unstable(feature = "slice_ptr_len", issue = "71146")]
library/core/src/ptr/mut_ptr.rs:1878:    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
library/core/src/ptr/mut_ptr.rs:1888:    /// #![feature(slice_ptr_len)]
library/core/src/ptr/mut_ptr.rs:1895:    #[unstable(feature = "slice_ptr_len", issue = "71146")]
library/core/src/ptr/mut_ptr.rs:1896:    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
library/core/src/ptr/mut_ptr.rs:1930:    /// #![feature(raw_slice_split)]
library/core/src/ptr/mut_ptr.rs:1931:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/mut_ptr.rs:1943:    #[unstable(feature = "raw_slice_split", issue = "95595")]
library/core/src/ptr/mut_ptr.rs:1971:    /// #![feature(raw_slice_split)]
library/core/src/ptr/mut_ptr.rs:1986:    #[unstable(feature = "raw_slice_split", issue = "95595")]
library/core/src/ptr/mut_ptr.rs:2006:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/mut_ptr.rs:2013:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/mut_ptr.rs:2014:    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/mut_ptr.rs:2031:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/mut_ptr.rs:2039:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/mut_ptr.rs:2090:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/mut_ptr.rs:2091:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/mut_ptr.rs:2142:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/mut_ptr.rs:2143:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/mut_ptr.rs:2155:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mut_ptr.rs:2163:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mut_ptr.rs:2166:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mut_ptr.rs:2180:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/unique.rs:28:    feature = "ptr_internals",
library/core/src/ptr/unique.rs:51:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:58:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:61:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:80:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:146:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:154:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:157:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:160:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:163:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:170:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:177:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/unique.rs:188:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/metadata.rs:1:#![unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/metadata.rs:70:/// #![feature(ptr_metadata)]
library/core/src/ptr/metadata.rs:76:#[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/metadata.rs:88:/// #![feature(ptr_metadata)]
library/core/src/ptr/metadata.rs:92:#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/metadata.rs:108:#[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/metadata.rs:109:#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/metadata.rs:125:#[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/metadata.rs:126:#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/alignment.rs:11:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:32:    /// #![feature(ptr_alignment_type)]
library/core/src/ptr/alignment.rs:37:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:44:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:55:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:74:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:75:    #[rustc_const_unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:92:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:93:    #[rustc_const_unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:100:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:114:    /// #![feature(ptr_alignment_type)]
library/core/src/ptr/alignment.rs:120:    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:127:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:134:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:144:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:154:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:162:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:170:#[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/ptr/alignment.rs:171:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:179:#[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
library/core/src/ptr/alignment.rs:180:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/alignment.rs:188:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/mod.rs:221://! #![feature(strict_provenance)]
library/core/src/ptr/mod.rs:369:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:382:#[unstable(feature = "ptr_alignment_type", issue = "102070")]
library/core/src/ptr/mod.rs:385:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:389:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:393:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:398:#[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/mod.rs:402:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/mod.rs:406:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/mod.rs:494:#[stable(feature = "drop_in_place", since = "1.8.0")]
library/core/src/ptr/mod.rs:517:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:519:#[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
library/core/src/ptr/mod.rs:538:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:540:#[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
library/core/src/ptr/mod.rs:567:#[rustc_const_stable(feature = "stable_things_using_strict_provenance", since = "1.61.0")]
library/core/src/ptr/mod.rs:568:#[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mod.rs:598:#[rustc_const_stable(feature = "stable_things_using_strict_provenance", since = "1.61.0")]
library/core/src/ptr/mod.rs:599:#[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mod.rs:645:#[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mod.rs:683:#[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/mod.rs:700:#[unstable(feature = "ptr_from_ref", issue = "106116")]
library/core/src/ptr/mod.rs:712:#[unstable(feature = "ptr_from_ref", issue = "106116")]
library/core/src/ptr/mod.rs:738:#[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
library/core/src/ptr/mod.rs:739:#[rustc_const_stable(feature = "const_slice_from_raw_parts", since = "1.64.0")]
library/core/src/ptr/mod.rs:771:#[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
library/core/src/ptr/mod.rs:772:#[rustc_const_unstable(feature = "const_slice_from_raw_parts_mut", issue = "67456")]
library/core/src/ptr/mod.rs:847:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:848:#[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/ptr/mod.rs:908:#[stable(feature = "swap_nonoverlapping", since = "1.27.0")]
library/core/src/ptr/mod.rs:909:#[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/ptr/mod.rs:963:#[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/ptr/mod.rs:1019:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:1020:#[rustc_const_unstable(feature = "const_replace", issue = "83164")]
library/core/src/ptr/mod.rs:1142:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:1143:#[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/ptr/mod.rs:1259:#[stable(feature = "ptr_unaligned", since = "1.17.0")]
library/core/src/ptr/mod.rs:1260:#[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/ptr/mod.rs:1357:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ptr/mod.rs:1358:#[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/ptr/mod.rs:1459:#[stable(feature = "ptr_unaligned", since = "1.17.0")]
library/core/src/ptr/mod.rs:1460:#[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/ptr/mod.rs:1534:#[stable(feature = "volatile", since = "1.9.0")]
library/core/src/ptr/mod.rs:1608:#[stable(feature = "volatile", since = "1.9.0")]
library/core/src/ptr/mod.rs:1858:#[stable(feature = "ptr_eq", since = "1.17.0")]
library/core/src/ptr/mod.rs:1890:#[stable(feature = "ptr_hash", since = "1.35.0")]
library/core/src/ptr/mod.rs:1896:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1903:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1906:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1913:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1921:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1928:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1935:#[stable(feature = "fnptr_impls", since = "1.4.0")]
library/core/src/ptr/mod.rs:1975:#[stable(feature = "raw_ref_macros", since = "1.51.0")]
library/core/src/ptr/mod.rs:2031:#[stable(feature = "raw_ref_macros", since = "1.51.0")]
library/core/src/ptr/non_null.rs:49:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:59:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:64:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:87:    #[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:88:    #[rustc_const_stable(feature = "const_nonnull_dangling", since = "1.36.0")]
library/core/src/ptr/non_null.rs:127:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/non_null.rs:128:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/non_null.rs:161:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/non_null.rs:162:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/non_null.rs:194:    #[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:195:    #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
library/core/src/ptr/non_null.rs:219:    #[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:220:    #[rustc_const_unstable(feature = "const_nonnull_new", issue = "93235")]
library/core/src/ptr/non_null.rs:237:    #[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/non_null.rs:238:    #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/non_null.rs:253:    #[unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/non_null.rs:254:    #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
library/core/src/ptr/non_null.rs:270:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/non_null.rs:285:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/non_null.rs:299:    #[unstable(feature = "strict_provenance", issue = "95228")]
library/core/src/ptr/non_null.rs:321:    #[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:322:    #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
library/core/src/ptr/non_null.rs:369:    #[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:370:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/non_null.rs:420:    #[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:421:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/non_null.rs:443:    #[stable(feature = "nonnull_cast", since = "1.27.0")]
library/core/src/ptr/non_null.rs:444:    #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
library/core/src/ptr/non_null.rs:489:    #[stable(feature = "nonnull_slice_from_raw_parts", since = "1.70.0")]
library/core/src/ptr/non_null.rs:490:    #[rustc_const_unstable(feature = "const_slice_from_raw_parts_mut", issue = "67456")]
library/core/src/ptr/non_null.rs:513:    #[stable(feature = "slice_ptr_len_nonnull", since = "1.63.0")]
library/core/src/ptr/non_null.rs:514:    #[rustc_const_stable(feature = "const_slice_ptr_len_nonnull", since = "1.63.0")]
library/core/src/ptr/non_null.rs:527:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/non_null.rs:535:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/non_null.rs:536:    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/non_null.rs:547:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/non_null.rs:555:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/non_null.rs:556:    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/non_null.rs:600:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/non_null.rs:601:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/non_null.rs:648:    /// #![feature(allocator_api, ptr_as_uninit)]
library/core/src/ptr/non_null.rs:663:    #[unstable(feature = "ptr_as_uninit", issue = "75402")]
library/core/src/ptr/non_null.rs:664:    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
library/core/src/ptr/non_null.rs:681:    /// #![feature(slice_ptr_get)]
library/core/src/ptr/non_null.rs:691:    #[unstable(feature = "slice_ptr_get", issue = "74265")]
library/core/src/ptr/non_null.rs:703:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:711:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:714:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ptr/non_null.rs:717:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ptr/non_null.rs:720:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:727:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:734:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:737:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:745:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:753:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:761:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:769:#[unstable(feature = "ptr_internals", issue = "none")]
library/core/src/ptr/non_null.rs:779:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/ptr/non_null.rs:791:#[stable(feature = "nonnull", since = "1.25.0")]
library/core/src/hint.rs:1:#![stable(feature = "core_hint", since = "1.27.0")]
library/core/src/hint.rs:97:#[stable(feature = "unreachable", since = "1.27.0")]
library/core/src/hint.rs:98:#[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
library/core/src/hint.rs:164:#[stable(feature = "renamed_spin_loop", since = "1.49.0")]
library/core/src/hint.rs:193:    #[cfg(any(target_arch = "aarch64", all(target_arch = "arm", target_feature = "v6")))]
library/core/src/hint.rs:203:            // with support for the v6 feature.
library/core/src/hint.rs:290:#[stable(feature = "bench_black_box", since = "1.66.0")]
library/core/src/hint.rs:291:#[rustc_const_unstable(feature = "const_black_box", issue = "none")]
library/core/src/hint.rs:309:/// #![feature(hint_must_use)]
library/core/src/hint.rs:373:///   # #![feature(hint_must_use)]
library/core/src/hint.rs:412:#[unstable(feature = "hint_must_use", issue = "94745")]
library/core/src/hint.rs:413:#[rustc_const_unstable(feature = "hint_must_use", issue = "94745")]
library/core/src/internal_macros.rs:6:                #[stable(feature = "rust1", since = "1.0.0")]);
library/core/src/internal_macros.rs:26:                #[stable(feature = "rust1", since = "1.0.0")]);
library/core/src/internal_macros.rs:66:                #[stable(feature = "op_assign_builtins_by_ref", since = "1.22.0")]);
library/core/src/task/wake.rs:1:#![stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:15:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:41:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:42:    #[rustc_const_stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:51:    #[unstable(feature = "waker_getters", issue = "87021")]
library/core/src/task/wake.rs:59:    #[unstable(feature = "waker_getters", issue = "87021")]
library/core/src/task/wake.rs:81:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:161:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:162:    #[rustc_const_stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:177:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:193:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:194:    #[rustc_const_unstable(feature = "const_waker", issue = "102012")]
library/core/src/task/wake.rs:202:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:203:    #[rustc_const_unstable(feature = "const_waker", issue = "102012")]
library/core/src/task/wake.rs:211:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:237:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:242:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:244:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:246:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:268:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:290:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:308:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:320:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:321:    #[rustc_const_unstable(feature = "const_waker", issue = "102012")]
library/core/src/task/wake.rs:335:    /// #![feature(noop_waker)]
library/core/src/task/wake.rs:348:    #[unstable(feature = "noop_waker", issue = "98286")]
library/core/src/task/wake.rs:368:    #[unstable(feature = "waker_getters", issue = "87021")]
library/core/src/task/wake.rs:374:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:387:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/wake.rs:398:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/mod.rs:1:#![stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/mod.rs:6:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/mod.rs:10:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/mod.rs:14:#[stable(feature = "ready_macro", since = "1.64.0")]
library/core/src/task/poll.rs:1:#![stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:12:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:16:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:17:    Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
library/core/src/task/poll.rs:25:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:46:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:71:    #[rustc_const_stable(feature = "const_poll", since = "1.49.0")]
library/core/src/task/poll.rs:72:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:92:    #[rustc_const_stable(feature = "const_poll", since = "1.49.0")]
library/core/src/task/poll.rs:93:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:114:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:142:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:171:    #[stable(feature = "poll_map", since = "1.51.0")]
library/core/src/task/poll.rs:201:    #[stable(feature = "poll_map", since = "1.51.0")]
library/core/src/task/poll.rs:216:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/task/poll.rs:231:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/task/poll.rs:251:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/task/poll.rs:261:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/task/poll.rs:282:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/task/ready.rs:48:#[stable(feature = "ready_macro", since = "1.64.0")]
library/core/src/asserting.rs:10:#![unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:20:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:24:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:44:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:48:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:84:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:102:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/asserting.rs:106:#[unstable(feature = "generic_assert_internals", issue = "44838")]
library/core/src/ops/control_flow.rs:81:#[stable(feature = "control_flow_enum_type", since = "1.55.0")]
library/core/src/ops/control_flow.rs:87:    #[stable(feature = "control_flow_enum_type", since = "1.55.0")]
library/core/src/ops/control_flow.rs:91:    #[stable(feature = "control_flow_enum_type", since = "1.55.0")]
library/core/src/ops/control_flow.rs:99:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/control_flow.rs:118:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/control_flow.rs:128:#[unstable(feature = "try_trait_v2_residual", issue = "91285")]
library/core/src/ops/control_flow.rs:145:    #[stable(feature = "control_flow_enum_is", since = "1.59.0")]
library/core/src/ops/control_flow.rs:161:    #[stable(feature = "control_flow_enum_is", since = "1.59.0")]
library/core/src/ops/control_flow.rs:172:    /// #![feature(control_flow_enum)]
library/core/src/ops/control_flow.rs:179:    #[unstable(feature = "control_flow_enum", reason = "new API", issue = "75744")]
library/core/src/ops/control_flow.rs:190:    #[unstable(feature = "control_flow_enum", reason = "new API", issue = "75744")]
library/core/src/ops/control_flow.rs:207:    /// #![feature(control_flow_enum)]
library/core/src/ops/control_flow.rs:214:    #[unstable(feature = "control_flow_enum", reason = "new API", issue = "75744")]
library/core/src/ops/control_flow.rs:225:    #[unstable(feature = "control_flow_enum", reason = "new API", issue = "75744")]
library/core/src/ops/range.rs:42:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:45:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:79:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:82:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:85:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:89:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:118:    #[stable(feature = "range_contains", since = "1.35.0")]
library/core/src/ops/range.rs:144:    #[stable(feature = "range_is_empty", since = "1.47.0")]
library/core/src/ops/range.rs:186:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:189:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:193:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:216:    #[stable(feature = "range_contains", since = "1.35.0")]
library/core/src/ops/range.rs:267:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:270:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:274:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/range.rs:297:    #[stable(feature = "range_contains", since = "1.35.0")]
library/core/src/ops/range.rs:340:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/ops/range.rs:370:    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
library/core/src/ops/range.rs:373:    #[rustc_const_stable(feature = "const_range_new", since = "1.32.0")]
library/core/src/ops/range.rs:396:    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
library/core/src/ops/range.rs:397:    #[rustc_const_stable(feature = "const_inclusive_range_methods", since = "1.32.0")]
library/core/src/ops/range.rs:421:    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
library/core/src/ops/range.rs:422:    #[rustc_const_stable(feature = "const_inclusive_range_methods", since = "1.32.0")]
library/core/src/ops/range.rs:438:    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
library/core/src/ops/range.rs:440:    #[rustc_const_unstable(feature = "const_range_bounds", issue = "108082")]
library/core/src/ops/range.rs:460:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/ops/range.rs:503:    #[stable(feature = "range_contains", since = "1.35.0")]
library/core/src/ops/range.rs:538:    #[stable(feature = "range_is_empty", since = "1.47.0")]
library/core/src/ops/range.rs:586:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/ops/range.rs:589:    #[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/ops/range.rs:593:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/ops/range.rs:616:    #[stable(feature = "range_contains", since = "1.35.0")]
library/core/src/ops/range.rs:664:#[stable(feature = "collections_bound", since = "1.17.0")]
library/core/src/ops/range.rs:668:    #[stable(feature = "collections_bound", since = "1.17.0")]
library/core/src/ops/range.rs:669:    Included(#[stable(feature = "collections_bound", since = "1.17.0")] T),
library/core/src/ops/range.rs:671:    #[stable(feature = "collections_bound", since = "1.17.0")]
library/core/src/ops/range.rs:672:    Excluded(#[stable(feature = "collections_bound", since = "1.17.0")] T),
library/core/src/ops/range.rs:674:    #[stable(feature = "collections_bound", since = "1.17.0")]
library/core/src/ops/range.rs:681:    #[stable(feature = "bound_as_ref_shared", since = "1.65.0")]
library/core/src/ops/range.rs:692:    #[unstable(feature = "bound_as_ref", issue = "80996")]
library/core/src/ops/range.rs:707:    /// #![feature(bound_map)]
library/core/src/ops/range.rs:716:    /// #![feature(bound_map)]
library/core/src/ops/range.rs:725:    #[unstable(feature = "bound_map", issue = "86026")]
library/core/src/ops/range.rs:748:    #[stable(feature = "bound_cloned", since = "1.55.0")]
library/core/src/ops/range.rs:760:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:777:    #[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:795:    #[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:810:    #[stable(feature = "range_contains", since = "1.35.0")]
library/core/src/ops/range.rs:830:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:840:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:850:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:860:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:870:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:886:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:896:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:915:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:926:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:936:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:946:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:956:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:966:#[stable(feature = "collections_range", since = "1.28.0")]
library/core/src/ops/range.rs:982:#[unstable(feature = "one_sided_range", issue = "69780")]
library/core/src/ops/range.rs:985:#[unstable(feature = "one_sided_range", issue = "69780")]
library/core/src/ops/range.rs:988:#[unstable(feature = "one_sided_range", issue = "69780")]
library/core/src/ops/range.rs:991:#[unstable(feature = "one_sided_range", issue = "69780")]
library/core/src/ops/index.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/index.rs:60:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/index.rs:69:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/index.rs:163:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/index.rs:173:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:62:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:66:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:73:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:78:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:88:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:91:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:169:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:172:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:176:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/deref.rs:184:/// `arbitrary_self_types` feature. This is implemented by stdlib pointer types like `Box<T>`,
library/core/src/ops/deref.rs:187:#[unstable(feature = "receiver_trait", issue = "none")]
library/core/src/ops/deref.rs:193:#[unstable(feature = "receiver_trait", issue = "none")]
library/core/src/ops/deref.rs:196:#[unstable(feature = "receiver_trait", issue = "none")]
library/core/src/ops/mod.rs:139:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:154:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:156:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/mod.rs:159:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:161:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/mod.rs:164:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:167:#[unstable(feature = "receiver_trait", issue = "none")]
library/core/src/ops/mod.rs:170:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:173:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:176:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:179:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/mod.rs:184:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/ops/mod.rs:187:#[unstable(feature = "one_sided_range", issue = "69780")]
library/core/src/ops/mod.rs:190:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/mod.rs:193:#[unstable(feature = "try_trait_v2_yeet", issue = "96374")]
library/core/src/ops/mod.rs:196:#[unstable(feature = "try_trait_v2_residual", issue = "91285")]
library/core/src/ops/mod.rs:201:#[unstable(feature = "generator_trait", issue = "43122")]
library/core/src/ops/mod.rs:204:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/mod.rs:207:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ops/mod.rs:210:#[unstable(feature = "control_flow_enum", reason = "new API", issue = "75744")]
library/core/src/ops/drop.rs:196:/// check eyepatch" or `may_dangle`. For more details on this nightly-only feature, see the
library/core/src/ops/drop.rs:204:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/drop.rs:232:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:57:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:78:    #[unstable(feature = "fn_traits", issue = "29625")]
library/core/src/ops/function.rs:144:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:165:    #[unstable(feature = "fn_traits", issue = "29625")]
library/core/src/ops/function.rs:223:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:245:    #[stable(feature = "fn_once_output", since = "1.12.0")]
library/core/src/ops/function.rs:249:    #[unstable(feature = "fn_traits", issue = "29625")]
library/core/src/ops/function.rs:256:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:266:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:276:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:288:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/function.rs:298:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/unsize.rs:34:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:41:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:44:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:47:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:50:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:54:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:57:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:61:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:64:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:68:#[unstable(feature = "coerce_unsized", issue = "18598")]
library/core/src/ops/unsize.rs:107:/// # #![feature(dispatch_from_dyn, unsize)]
library/core/src/ops/unsize.rs:115:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ops/unsize.rs:122:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ops/unsize.rs:125:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ops/unsize.rs:128:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ops/unsize.rs:131:#[unstable(feature = "dispatch_from_dyn", issue = "none")]
library/core/src/ops/try_trait.rs:43:/// # #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:57:/// # #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:80:/// # #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:102:/// # #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:115:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:133:    #[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:157:    #[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:169:    /// #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:189:    #[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:200:    /// #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:216:    #[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:333:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:345:    /// #![feature(try_trait_v2)]
library/core/src/ops/try_trait.rs:356:    #[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/ops/try_trait.rs:361:    feature = "yeet_desugar_details",
library/core/src/ops/try_trait.rs:385:#[unstable(feature = "try_trait_v2_residual", issue = "91285")]
library/core/src/ops/try_trait.rs:388:    #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
library/core/src/ops/try_trait.rs:392:#[unstable(feature = "pub_crate_should_not_need_unstable_attr", issue = "none")]
library/core/src/ops/try_trait.rs:451:#[unstable(feature = "try_trait_v2_yeet", issue = "96374")]
library/core/src/ops/arith.rs:67:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:78:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:90:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:96:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:177:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:186:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:198:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:204:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:307:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:315:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:327:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:333:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:440:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:448:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:460:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:472:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:491:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:541:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:549:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:561:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:573:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:607:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:658:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:662:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:675:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:681:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/arith.rs:726:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:743:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:749:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:792:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:809:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:815:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:849:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:866:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:872:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:906:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:923:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:929:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:966:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:983:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/arith.rs:989:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:32:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:36:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:50:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:56:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:70:#[stable(feature = "not_never", since = "1.60.0")]
library/core/src/ops/bit.rs:139:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:146:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:160:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:166:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:239:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:246:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:260:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:266:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:339:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:346:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:360:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:366:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:438:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:445:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:457:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:463:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:556:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:563:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:575:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:581:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/ops/bit.rs:683:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:710:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:716:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:754:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:781:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:787:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:825:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:852:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:858:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:894:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:913:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:919:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:976:#[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:995:    #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/bit.rs:1001:        #[stable(feature = "op_assign_traits", since = "1.8.0")]
library/core/src/ops/generator.rs:11:#[unstable(feature = "generator_trait", issue = "43122")]
library/core/src/ops/generator.rs:32:/// experimental language feature in Rust. Added in [RFC 2033] generators are
library/core/src/ops/generator.rs:42:/// #![feature(generators, generator_trait)]
library/core/src/ops/generator.rs:67:/// [unstable book]: ../../unstable-book/language-features/generators.html
library/core/src/ops/generator.rs:69:#[unstable(feature = "generator_trait", issue = "43122")]
library/core/src/ops/generator.rs:117:#[unstable(feature = "generator_trait", issue = "43122")]
library/core/src/ops/generator.rs:127:#[unstable(feature = "generator_trait", issue = "43122")]
library/core/src/any.rs:5://! `Any` itself can be used to get a `TypeId`, and has more features when used
library/core/src/any.rs:113://! # #![feature(provide_any)]
library/core/src/any.rs:153:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:179:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:196:    #[stable(feature = "get_type_id", since = "1.34.0")]
library/core/src/any.rs:200:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:211:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:221:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:228:#[stable(feature = "any_send_sync_methods", since = "1.28.0")]
library/core/src/any.rs:254:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:286:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:322:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:340:    /// #![feature(downcast_unchecked)]
library/core/src/any.rs:355:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/core/src/any.rs:368:    /// #![feature(downcast_unchecked)]
library/core/src/any.rs:385:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/core/src/any.rs:413:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:437:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:465:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:476:    /// #![feature(downcast_unchecked)]
library/core/src/any.rs:490:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/core/src/any.rs:502:    /// #![feature(downcast_unchecked)]
library/core/src/any.rs:518:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/core/src/any.rs:545:    #[stable(feature = "any_send_sync_methods", since = "1.28.0")]
library/core/src/any.rs:569:    #[stable(feature = "any_send_sync_methods", since = "1.28.0")]
library/core/src/any.rs:597:    #[stable(feature = "any_send_sync_methods", since = "1.28.0")]
library/core/src/any.rs:608:    /// #![feature(downcast_unchecked)]
library/core/src/any.rs:618:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/core/src/any.rs:630:    /// #![feature(downcast_unchecked)]
library/core/src/any.rs:642:    #[unstable(feature = "downcast_unchecked", issue = "90850")]
library/core/src/any.rs:667:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:672:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:697:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:698:    #[rustc_const_unstable(feature = "const_type_id", issue = "77125")]
library/core/src/any.rs:705:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/any.rs:753:#[stable(feature = "type_name", since = "1.38.0")]
library/core/src/any.rs:754:#[rustc_const_unstable(feature = "const_type_name", issue = "63084")]
library/core/src/any.rs:787:/// #![feature(type_name_of_val)]
library/core/src/any.rs:796:#[unstable(feature = "type_name_of_val", issue = "66359")]
library/core/src/any.rs:797:#[rustc_const_unstable(feature = "const_type_name", issue = "63084")]
library/core/src/any.rs:807:#[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:822:    /// # #![feature(provide_any)]
library/core/src/any.rs:833:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:844:/// # #![feature(provide_any)]
library/core/src/any.rs:851:#[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:866:/// # #![feature(provide_any)]
library/core/src/any.rs:873:#[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:898:#[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:917:    /// #![feature(provide_any)]
library/core/src/any.rs:928:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:943:    /// #![feature(provide_any)]
library/core/src/any.rs:954:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:970:    /// #![feature(provide_any)]
library/core/src/any.rs:981:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:994:    /// #![feature(provide_any)]
library/core/src/any.rs:1012:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:1052:    /// #![feature(provide_any)]
library/core/src/any.rs:1105:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:1123:    /// #![feature(provide_any)]
library/core/src/any.rs:1177:    #[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:1193:#[unstable(feature = "provide_any", issue = "96024")]
library/core/src/any.rs:1290:#[unstable(feature = "provide_any", issue = "96024")]
library/core/src/intrinsics/mir.rs:4://! this feature, turn back. This is *exceptionally* unstable. There is no attempt at all to make
library/core/src/intrinsics/mir.rs:9://! The documentation for this module describes how to use this feature. If you are interested in
library/core/src/intrinsics/mir.rs:16://! #![feature(core_intrinsics, custom_mir)]
library/core/src/intrinsics/mir.rs:65://! #![feature(core_intrinsics, custom_mir)]
library/core/src/intrinsics/mir.rs:145://! #![feature(core_intrinsics, custom_mir)]
library/core/src/intrinsics/mir.rs:252:    feature = "custom_mir",
library/core/src/intrinsics/mir.rs:318:    /// #![feature(custom_mir, core_intrinsics)]
library/core/src/cmp.rs:23:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:205:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:218:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:225:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:234:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/cmp.rs:281:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:294:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:300:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/cmp.rs:312:#[unstable(feature = "derive_eq", reason = "deriving hack, should not be public", issue = "none")]
library/core/src/cmp.rs:331:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:335:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:338:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:341:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:359:    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:360:    #[stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:378:    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:379:    #[stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:397:    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:398:    #[stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:416:    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:417:    #[stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:435:    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:436:    #[stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:454:    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:455:    #[stable(feature = "ordering_helpers", since = "1.53.0")]
library/core/src/cmp.rs:491:    #[rustc_const_stable(feature = "const_ordering", since = "1.48.0")]
library/core/src/cmp.rs:492:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:530:    #[rustc_const_stable(feature = "const_ordering", since = "1.48.0")]
library/core/src/cmp.rs:531:    #[stable(feature = "ordering_chaining", since = "1.17.0")]
library/core/src/cmp.rs:569:    #[stable(feature = "ordering_chaining", since = "1.17.0")]
library/core/src/cmp.rs:595:#[stable(feature = "reverse_cmp_key", since = "1.19.0")]
library/core/src/cmp.rs:597:pub struct Reverse<T>(#[stable(feature = "reverse_cmp_key", since = "1.19.0")] pub T);
library/core/src/cmp.rs:599:#[stable(feature = "reverse_cmp_key", since = "1.19.0")]
library/core/src/cmp.rs:624:#[stable(feature = "reverse_cmp_key", since = "1.19.0")]
library/core/src/cmp.rs:632:#[stable(feature = "reverse_cmp_key", since = "1.19.0")]
library/core/src/cmp.rs:756:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:774:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:787:    #[stable(feature = "ord_max_min", since = "1.21.0")]
library/core/src/cmp.rs:807:    #[stable(feature = "ord_max_min", since = "1.21.0")]
library/core/src/cmp.rs:834:    #[stable(feature = "clamp", since = "1.50.0")]
library/core/src/cmp.rs:854:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/cmp.rs:1016:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1052:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1066:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1083:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1099:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1116:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1125:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/cmp.rs:1147:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1170:#[stable(feature = "cmp_min_max_by", since = "1.53.0")]
library/core/src/cmp.rs:1195:#[stable(feature = "cmp_min_max_by", since = "1.53.0")]
library/core/src/cmp.rs:1216:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1239:#[stable(feature = "cmp_min_max_by", since = "1.53.0")]
library/core/src/cmp.rs:1264:#[stable(feature = "cmp_min_max_by", since = "1.53.0")]
library/core/src/cmp.rs:1276:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1286:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1304:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1313:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1336:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1344:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1356:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1372:            #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1386:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1394:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1413:    #[unstable(feature = "never_type", issue = "35121")]
library/core/src/cmp.rs:1421:    #[unstable(feature = "never_type", issue = "35121")]
library/core/src/cmp.rs:1424:    #[unstable(feature = "never_type", issue = "35121")]
library/core/src/cmp.rs:1432:    #[unstable(feature = "never_type", issue = "35121")]
library/core/src/cmp.rs:1442:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1456:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1482:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1492:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1497:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1511:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1537:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1547:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1550:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/cmp.rs:1565:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/unit.rs:16:#[stable(feature = "unit_from_iter", since = "1.23.0")]
library/core/src/sync/exclusive.rs:46:/// #![feature(exclusive_wrapper)]
library/core/src/sync/exclusive.rs:72:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:86:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:89:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:98:    #[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:106:    #[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:116:    #[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:129:    #[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:141:    #[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:152:    #[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:162:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/exclusive.rs:170:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/mod.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/mod.rs:7:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/core/src/sync/atomic.rs:121:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:141:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:149:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:160:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:170:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:180:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:189:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:192:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:209:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:219:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:234:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:249:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:263:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:272:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:278:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:299:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:300:    #[rustc_const_stable(feature = "const_atomic_new", since = "1.24.0")]
library/core/src/sync/atomic.rs:311:    /// #![feature(atomic_from_ptr, pointer_is_aligned)]
library/core/src/sync/atomic.rs:343:    #[unstable(feature = "atomic_from_ptr", issue = "108652")]
library/core/src/sync/atomic.rs:344:    #[rustc_const_unstable(feature = "atomic_from_ptr", issue = "108652")]
library/core/src/sync/atomic.rs:366:    #[stable(feature = "atomic_access", since = "1.15.0")]
library/core/src/sync/atomic.rs:377:    /// #![feature(atomic_from_mut)]
library/core/src/sync/atomic.rs:387:    #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:402:    /// #![feature(atomic_from_mut, inline_const)]
library/core/src/sync/atomic.rs:422:    #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:433:    /// #![feature(atomic_from_mut)]
library/core/src/sync/atomic.rs:447:    #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:468:    #[stable(feature = "atomic_access", since = "1.15.0")]
library/core/src/sync/atomic.rs:469:    #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
library/core/src/sync/atomic.rs:493:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:521:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:552:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:605:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:656:    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
library/core/src/sync/atomic.rs:711:    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
library/core/src/sync/atomic.rs:764:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:806:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:858:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:899:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:925:    /// #![feature(atomic_bool_fetch_not)]
library/core/src/sync/atomic.rs:937:    #[unstable(feature = "atomic_bool_fetch_not", issue = "98485")]
library/core/src/sync/atomic.rs:973:    #[stable(feature = "atomic_as_ptr", since = "1.70.0")]
library/core/src/sync/atomic.rs:974:    #[rustc_const_stable(feature = "atomic_as_ptr", since = "1.70.0")]
library/core/src/sync/atomic.rs:1022:    #[stable(feature = "atomic_fetch_update", since = "1.53.0")]
library/core/src/sync/atomic.rs:1058:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:1059:    #[rustc_const_stable(feature = "const_atomic_new", since = "1.24.0")]
library/core/src/sync/atomic.rs:1069:    /// #![feature(atomic_from_ptr, pointer_is_aligned)]
library/core/src/sync/atomic.rs:1101:    #[unstable(feature = "atomic_from_ptr", issue = "108652")]
library/core/src/sync/atomic.rs:1102:    #[rustc_const_unstable(feature = "atomic_from_ptr", issue = "108652")]
library/core/src/sync/atomic.rs:1125:    #[stable(feature = "atomic_access", since = "1.15.0")]
library/core/src/sync/atomic.rs:1135:    /// #![feature(atomic_from_mut)]
library/core/src/sync/atomic.rs:1147:    #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:1166:    /// #![feature(atomic_from_mut, inline_const)]
library/core/src/sync/atomic.rs:1192:    #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:1203:    /// #![feature(atomic_from_mut)]
library/core/src/sync/atomic.rs:1225:    #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:1249:    #[stable(feature = "atomic_access", since = "1.15.0")]
library/core/src/sync/atomic.rs:1250:    #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
library/core/src/sync/atomic.rs:1275:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:1304:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:1336:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:1388:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:1432:    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
library/core/src/sync/atomic.rs:1481:    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
library/core/src/sync/atomic.rs:1550:    #[stable(feature = "atomic_fetch_update", since = "1.53.0")]
library/core/src/sync/atomic.rs:1597:    /// #![feature(strict_provenance_atomic_ptr, strict_provenance)]
library/core/src/sync/atomic.rs:1607:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1638:    /// #![feature(strict_provenance_atomic_ptr)]
library/core/src/sync/atomic.rs:1652:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1677:    /// #![feature(strict_provenance_atomic_ptr, strict_provenance)]
library/core/src/sync/atomic.rs:1687:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1713:    /// #![feature(strict_provenance_atomic_ptr, strict_provenance)]
library/core/src/sync/atomic.rs:1722:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1758:    /// #![feature(strict_provenance_atomic_ptr, strict_provenance)]
library/core/src/sync/atomic.rs:1773:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1809:    /// #![feature(strict_provenance_atomic_ptr, strict_provenance)]
library/core/src/sync/atomic.rs:1823:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1859:    /// #![feature(strict_provenance_atomic_ptr, strict_provenance)]
library/core/src/sync/atomic.rs:1871:    #[unstable(feature = "strict_provenance_atomic_ptr", issue = "99108")]
library/core/src/sync/atomic.rs:1908:    #[stable(feature = "atomic_as_ptr", since = "1.70.0")]
library/core/src/sync/atomic.rs:1909:    #[rustc_const_stable(feature = "atomic_as_ptr", since = "1.70.0")]
library/core/src/sync/atomic.rs:1916:#[stable(feature = "atomic_bool_from", since = "1.24.0")]
library/core/src/sync/atomic.rs:1934:#[stable(feature = "atomic_from", since = "1.23.0")]
library/core/src/sync/atomic.rs:1964:     $extra_feature:expr,
library/core/src/sync/atomic.rs:2032:            #[doc = concat!($extra_feature, "use std::sync::atomic::", stringify!($atomic_type), ";")]
library/core/src/sync/atomic.rs:2049:            /// #![feature(atomic_from_ptr, pointer_is_aligned)]
library/core/src/sync/atomic.rs:2050:            #[doc = concat!($extra_feature, "use std::sync::atomic::{self, ", stringify!($atomic_type), "};")]
library/core/src/sync/atomic.rs:2083:            #[unstable(feature = "atomic_from_ptr", issue = "108652")]
library/core/src/sync/atomic.rs:2084:            #[rustc_const_unstable(feature = "atomic_from_ptr", issue = "108652")]
library/core/src/sync/atomic.rs:2099:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2125:            /// #![feature(atomic_from_mut)]
library/core/src/sync/atomic.rs:2126:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2136:            #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:2155:            /// #![feature(atomic_from_mut, inline_const)]
library/core/src/sync/atomic.rs:2156:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2177:            #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:2188:            /// #![feature(atomic_from_mut)]
library/core/src/sync/atomic.rs:2189:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2204:            #[unstable(feature = "atomic_from_mut", issue = "76314")]
library/core/src/sync/atomic.rs:2223:            #[doc = concat!($extra_feature, "use std::sync::atomic::", stringify!($atomic_type), ";")]
library/core/src/sync/atomic.rs:2230:            #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
library/core/src/sync/atomic.rs:2247:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2273:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2301:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2351:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2403:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2455:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2498:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2528:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2561:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2594:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2627:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2660:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2709:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2718:            #[stable(feature = "no_more_cas", since = "1.45.0")]
library/core/src/sync/atomic.rs:2754:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2764:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2772:            #[stable(feature = "atomic_min_max", since = "1.45.0")]
library/core/src/sync/atomic.rs:2798:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2810:            #[doc = concat!($extra_feature, "use std::sync::atomic::{", stringify!($atomic_type), ", Ordering};")]
library/core/src/sync/atomic.rs:2818:            #[stable(feature = "atomic_min_max", since = "1.45.0")]
library/core/src/sync/atomic.rs:2842:            #[doc = concat!($extra_feature, "use std::sync::atomic::", stringify!($atomic_type), ";")]
library/core/src/sync/atomic.rs:2857:            #[stable(feature = "atomic_as_ptr", since = "1.70.0")]
library/core/src/sync/atomic.rs:2858:            #[rustc_const_stable(feature = "atomic_as_ptr", since = "1.70.0")]
library/core/src/sync/atomic.rs:2870:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2871:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2872:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2873:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2874:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2875:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2876:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2877:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:2890:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2891:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2892:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2893:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2894:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2895:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2896:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2897:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:2910:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2911:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2912:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2913:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2914:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2915:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2916:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2917:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:2930:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2931:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2932:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2933:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2934:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2935:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2936:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2937:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:2950:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2951:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2952:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2953:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2954:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2955:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2956:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2957:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:2970:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2971:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2972:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2973:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2974:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2975:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2976:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2977:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:2990:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2991:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2992:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2993:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2994:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2995:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:2996:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:2997:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3010:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:3011:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:3012:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:3013:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:3014:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:3015:    stable(feature = "integer_atomics_stable", since = "1.34.0"),
library/core/src/sync/atomic.rs:3016:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:3017:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3030:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3031:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3032:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3033:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3034:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3035:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3036:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:3037:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3040:    "#![feature(integer_atomics)]\n\n",
library/core/src/sync/atomic.rs:3050:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3051:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3052:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3053:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3054:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3055:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3056:    rustc_const_stable(feature = "const_integer_atomics", since = "1.34.0"),
library/core/src/sync/atomic.rs:3057:    unstable(feature = "integer_atomics", issue = "99069"),
library/core/src/sync/atomic.rs:3060:    "#![feature(integer_atomics)]\n\n",
library/core/src/sync/atomic.rs:3074:            stable(feature = "rust1", since = "1.0.0"),
library/core/src/sync/atomic.rs:3075:            stable(feature = "extended_compare_and_swap", since = "1.10.0"),
library/core/src/sync/atomic.rs:3076:            stable(feature = "atomic_debug", since = "1.3.0"),
library/core/src/sync/atomic.rs:3077:            stable(feature = "atomic_access", since = "1.15.0"),
library/core/src/sync/atomic.rs:3078:            stable(feature = "atomic_from", since = "1.23.0"),
library/core/src/sync/atomic.rs:3079:            stable(feature = "atomic_nand", since = "1.27.0"),
library/core/src/sync/atomic.rs:3080:            rustc_const_stable(feature = "const_ptr_sized_atomics", since = "1.24.0"),
library/core/src/sync/atomic.rs:3081:            stable(feature = "rust1", since = "1.0.0"),
library/core/src/sync/atomic.rs:3095:            stable(feature = "rust1", since = "1.0.0"),
library/core/src/sync/atomic.rs:3096:            stable(feature = "extended_compare_and_swap", since = "1.10.0"),
library/core/src/sync/atomic.rs:3097:            stable(feature = "atomic_debug", since = "1.3.0"),
library/core/src/sync/atomic.rs:3098:            stable(feature = "atomic_access", since = "1.15.0"),
library/core/src/sync/atomic.rs:3099:            stable(feature = "atomic_from", since = "1.23.0"),
library/core/src/sync/atomic.rs:3100:            stable(feature = "atomic_nand", since = "1.27.0"),
library/core/src/sync/atomic.rs:3101:            rustc_const_stable(feature = "const_ptr_sized_atomics", since = "1.24.0"),
library/core/src/sync/atomic.rs:3102:            stable(feature = "rust1", since = "1.0.0"),
library/core/src/sync/atomic.rs:3489:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/sync/atomic.rs:3572:#[stable(feature = "compiler_fences", since = "1.21.0")]
library/core/src/sync/atomic.rs:3589:#[stable(feature = "atomic_debug", since = "1.3.0")]
library/core/src/sync/atomic.rs:3597:#[stable(feature = "atomic_debug", since = "1.3.0")]
library/core/src/sync/atomic.rs:3605:#[stable(feature = "atomic_pointer", since = "1.24.0")]
library/core/src/sync/atomic.rs:3618:#[stable(feature = "spin_loop_hint", since = "1.24.0")]
library/core/src/prelude/v1.rs:5:#![stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:8:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:11:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:16:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:21:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:24:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:27:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:30:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:33:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:36:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:39:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:42:#[stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/v1.rs:47:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/prelude/v1.rs:50:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/prelude/v1.rs:54:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/prelude/v1.rs:64:    feature = "concat_bytes",
library/core/src/prelude/v1.rs:72:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/prelude/v1.rs:78:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/prelude/v1.rs:83:#[unstable(feature = "derive_const", issue = "none")]
library/core/src/prelude/v1.rs:87:    feature = "cfg_accessible",
library/core/src/prelude/v1.rs:94:    feature = "cfg_eval",
library/core/src/prelude/v1.rs:96:    reason = "`cfg_eval` is a recently implemented feature"
library/core/src/prelude/v1.rs:101:    feature = "type_ascription",
library/core/src/prelude/mod.rs:7:#![stable(feature = "core_prelude", since = "1.4.0")]
library/core/src/prelude/mod.rs:14:#[stable(feature = "prelude_2015", since = "1.55.0")]
library/core/src/prelude/mod.rs:16:    #[stable(feature = "prelude_2015", since = "1.55.0")]
library/core/src/prelude/mod.rs:24:#[stable(feature = "prelude_2018", since = "1.55.0")]
library/core/src/prelude/mod.rs:26:    #[stable(feature = "prelude_2018", since = "1.55.0")]
library/core/src/prelude/mod.rs:34:#[stable(feature = "prelude_2021", since = "1.55.0")]
library/core/src/prelude/mod.rs:36:    #[stable(feature = "prelude_2021", since = "1.55.0")]
library/core/src/prelude/mod.rs:40:    #[stable(feature = "prelude_2021", since = "1.55.0")]
library/core/src/prelude/mod.rs:44:    #[stable(feature = "prelude_2021", since = "1.55.0")]
library/core/src/prelude/mod.rs:52:#[unstable(feature = "prelude_2024", issue = "none")]
library/core/src/prelude/mod.rs:54:    #[unstable(feature = "prelude_2024", issue = "none")]
library/core/src/default.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/default.rs:101:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/default.rs:132:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/default.rs:138:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/default.rs:146:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:489:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:501:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:505:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:506:    Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
library/core/src/result.rs:510:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:511:    Err(#[stable(feature = "rust1", since = "1.0.0")] E),
library/core/src/result.rs:535:    #[rustc_const_stable(feature = "const_result_basics", since = "1.48.0")]
library/core/src/result.rs:537:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:558:    #[stable(feature = "is_some_and", since = "1.70.0")]
library/core/src/result.rs:578:    #[rustc_const_stable(feature = "const_result_basics", since = "1.48.0")]
library/core/src/result.rs:580:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:603:    #[stable(feature = "is_some_and", since = "1.70.0")]
library/core/src/result.rs:630:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:653:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:680:    #[rustc_const_stable(feature = "const_result_basics", since = "1.48.0")]
library/core/src/result.rs:681:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:710:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:711:    #[rustc_const_unstable(feature = "const_result", issue = "82814")]
library/core/src/result.rs:743:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:770:    #[stable(feature = "result_map_or", since = "1.41.0")]
library/core/src/result.rs:797:    #[stable(feature = "result_map_or_else", since = "1.41.0")]
library/core/src/result.rs:824:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:837:    /// #![feature(result_option_inspect)]
library/core/src/result.rs:846:    #[unstable(feature = "result_option_inspect", issue = "91345")]
library/core/src/result.rs:860:    /// #![feature(result_option_inspect)]
library/core/src/result.rs:870:    #[unstable(feature = "result_option_inspect", issue = "91345")]
library/core/src/result.rs:896:    #[stable(feature = "inner_deref", since = "1.47.0")]
library/core/src/result.rs:923:    #[stable(feature = "inner_deref", since = "1.47.0")]
library/core/src/result.rs:949:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:972:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1026:    #[stable(feature = "result_expect", since = "1.4.0")]
library/core/src/result.rs:1069:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1106:    #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
library/core/src/result.rs:1133:    #[stable(feature = "result_expect_err", since = "1.17.0")]
library/core/src/result.rs:1164:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1188:    /// # #![feature(never_type)]
library/core/src/result.rs:1189:    /// # #![feature(unwrap_infallible)]
library/core/src/result.rs:1198:    #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
library/core/src/result.rs:1223:    /// # #![feature(never_type)]
library/core/src/result.rs:1224:    /// # #![feature(unwrap_infallible)]
library/core/src/result.rs:1233:    #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
library/core/src/result.rs:1277:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1316:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1352:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1377:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1404:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1424:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1454:    #[stable(feature = "option_result_unwrap_unchecked", since = "1.58.0")]
library/core/src/result.rs:1486:    #[stable(feature = "option_result_unwrap_unchecked", since = "1.58.0")]
library/core/src/result.rs:1511:    #[stable(feature = "result_copied", since = "1.59.0")]
library/core/src/result.rs:1532:    #[stable(feature = "result_cloned", since = "1.59.0")]
library/core/src/result.rs:1555:    #[stable(feature = "result_copied", since = "1.59.0")]
library/core/src/result.rs:1576:    #[stable(feature = "result_cloned", since = "1.59.0")]
library/core/src/result.rs:1602:    #[stable(feature = "transpose_result", since = "1.33.0")]
library/core/src/result.rs:1603:    #[rustc_const_unstable(feature = "const_result", issue = "82814")]
library/core/src/result.rs:1619:    /// #![feature(result_flattening)]
library/core/src/result.rs:1633:    /// #![feature(result_flattening)]
library/core/src/result.rs:1639:    #[unstable(feature = "result_flattening", issue = "70142")]
library/core/src/result.rs:1646:#[cfg(not(feature = "panic_immediate_abort"))]
library/core/src/result.rs:1658:#[cfg(feature = "panic_immediate_abort")]
library/core/src/result.rs:1670:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1694:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1720:#[stable(since = "1.4.0", feature = "result_iter")]
library/core/src/result.rs:1730:#[stable(since = "1.4.0", feature = "result_iter")]
library/core/src/result.rs:1750:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1755:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1770:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1778:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1781:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/result.rs:1784:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/result.rs:1787:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1799:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1804:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1819:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1827:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1830:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/result.rs:1833:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/result.rs:1845:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1850:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1865:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1873:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1876:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/result.rs:1879:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/result.rs:1886:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/result.rs:1936:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/result.rs:1955:#[unstable(feature = "try_trait_v2", issue = "84277")]
library/core/src/result.rs:1966:#[unstable(feature = "try_trait_v2_yeet", issue = "96374")]
library/core/src/result.rs:1974:#[unstable(feature = "try_trait_v2_residual", issue = "91285")]
library/core/src/future/pending.rs:12:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/pending.rs:32:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/pending.rs:37:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/pending.rs:46:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/pending.rs:53:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/join.rs:18:/// #![feature(future_join)]
library/core/src/future/join.rs:34:/// #![feature(future_join)]
library/core/src/future/join.rs:47:#[unstable(feature = "future_join", issue = "91642")]
library/core/src/future/join.rs:58:#[unstable(feature = "future_join", issue = "91642")]
library/core/src/future/join.rs:153:#[unstable(feature = "future_join", issue = "91642")]
library/core/src/future/join.rs:160:#[unstable(feature = "future_join", issue = "91642")]
library/core/src/future/join.rs:173:#[unstable(feature = "future_join", issue = "91642")]
library/core/src/future/mod.rs:1:#![stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/mod.rs:22:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/mod.rs:25:#[unstable(feature = "future_join", issue = "91642")]
library/core/src/future/mod.rs:28:#[stable(feature = "into_future", since = "1.64.0")]
library/core/src/future/mod.rs:31:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/mod.rs:33:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/mod.rs:36:#[stable(feature = "future_poll_fn", since = "1.64.0")]
library/core/src/future/mod.rs:49:#[unstable(feature = "gen_future", issue = "50547")]
library/core/src/future/mod.rs:53:#[unstable(feature = "gen_future", issue = "50547")]
library/core/src/future/mod.rs:56:#[unstable(feature = "gen_future", issue = "50547")]
library/core/src/future/mod.rs:61:#[unstable(feature = "gen_future", issue = "50547")]
library/core/src/future/into_future.rs:101:#[stable(feature = "into_future", since = "1.64.0")]
library/core/src/future/into_future.rs:105:    #[stable(feature = "into_future", since = "1.64.0")]
library/core/src/future/into_future.rs:109:    #[stable(feature = "into_future", since = "1.64.0")]
library/core/src/future/into_future.rs:127:    #[stable(feature = "into_future", since = "1.64.0")]
library/core/src/future/into_future.rs:132:#[stable(feature = "into_future", since = "1.64.0")]
library/core/src/future/future.rs:1:#![stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/future.rs:30:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/future.rs:39:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/future.rs:104:    #[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/future.rs:108:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/future.rs:117:#[stable(feature = "futures_api", since = "1.36.0")]
library/core/src/future/poll_fn.rs:114:#[stable(feature = "future_poll_fn", since = "1.64.0")]
library/core/src/future/poll_fn.rs:127:#[stable(feature = "future_poll_fn", since = "1.64.0")]
library/core/src/future/poll_fn.rs:132:#[stable(feature = "future_poll_fn", since = "1.64.0")]
library/core/src/future/poll_fn.rs:135:#[stable(feature = "future_poll_fn", since = "1.64.0")]
library/core/src/future/poll_fn.rs:142:#[stable(feature = "future_poll_fn", since = "1.64.0")]
library/core/src/future/ready.rs:9:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/ready.rs:14:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/ready.rs:17:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/future/ready.rs:37:    /// #![feature(ready_into_inner)]
library/core/src/future/ready.rs:43:    #[unstable(feature = "ready_into_inner", issue = "101196")]
library/core/src/future/ready.rs:67:#[stable(feature = "future_readiness_fns", since = "1.48.0")]
library/core/src/marker.rs:7:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:29:///     #[unstable(feature = "marker_trait", issue = "none")]
library/core/src/marker.rs:44:#[unstable(feature = "internal_impls_macro", issue = "none")]
library/core/src/marker.rs:76:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:86:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:88:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:94:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:135:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:174:#[unstable(feature = "unsize", issue = "18598")]
library/core/src/marker.rs:201:#[unstable(feature = "structural_match", issue = "31434")]
library/core/src/marker.rs:209:    #[unstable(feature = "structural_match", issue = "31434")]
library/core/src/marker.rs:268:#[unstable(feature = "structural_match", issue = "31434")]
library/core/src/marker.rs:277:    #[unstable(feature = "structural_match", issue = "31434")]
library/core/src/marker.rs:455:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:471:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/core/src/marker.rs:483:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:494:#[unstable(feature = "never_type", issue = "35121")]
library/core/src/marker.rs:498:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:571:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:648:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:650:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:788:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:791:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:797:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:804:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:807:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:814:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:821:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:824:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:831:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/marker.rs:838:#[unstable(feature = "structural_match", issue = "31434")]
library/core/src/marker.rs:841:#[unstable(feature = "structural_match", issue = "31434")]
library/core/src/marker.rs:852:    feature = "discriminant_kind",
library/core/src/marker.rs:923:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/marker.rs:934:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/marker.rs:938:#[stable(feature = "pin", since = "1.33.0")]
library/core/src/marker.rs:942:    #[stable(feature = "pin", since = "1.33.0")]
library/core/src/marker.rs:949:    #[stable(feature = "pin_raw", since = "1.38.0")]
library/core/src/marker.rs:959:#[unstable(feature = "const_trait_impl", issue = "67792")]
library/core/src/marker.rs:970:#[unstable(feature = "tuple_trait", issue = "none")]
library/core/src/marker.rs:980:#[unstable(feature = "pointer_like_trait", issue = "none")]
library/core/src/marker.rs:990:#[unstable(feature = "adt_const_params", issue = "95174")]
library/core/src/marker.rs:997:#[unstable(feature = "adt_const_params", issue = "95174")]
library/core/src/marker.rs:1004:    #[unstable(feature = "adt_const_params", issue = "95174")]
library/core/src/marker.rs:1017:#[unstable(feature = "adt_const_params", issue = "95174")]
library/core/src/marker.rs:1022:    feature = "fn_ptr_trait",
library/core/src/intrinsics.rs:14://! `#[rustc_const_unstable(feature = "const_such_and_such", issue = "01234")]` to the intrinsic declaration.
library/core/src/intrinsics.rs:18://! without T-lang consultation, because it bakes a feature into the language that cannot be
library/core/src/intrinsics.rs:49:    feature = "core_intrinsics",
library/core/src/intrinsics.rs:68:#[stable(feature = "drop_in_place", since = "1.8.0")]
library/core/src/intrinsics.rs:929:    #[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
library/core/src/intrinsics.rs:943:    #[rustc_const_unstable(feature = "const_assume", issue = "76972")]
library/core/src/intrinsics.rs:958:    #[rustc_const_unstable(feature = "const_likely", issue = "none")]
library/core/src/intrinsics.rs:974:    #[rustc_const_unstable(feature = "const_likely", issue = "none")]
library/core/src/intrinsics.rs:996:    #[rustc_const_stable(feature = "const_size_of", since = "1.40.0")]
library/core/src/intrinsics.rs:1009:    #[rustc_const_stable(feature = "const_min_align_of", since = "1.40.0")]
library/core/src/intrinsics.rs:1017:    #[rustc_const_unstable(feature = "const_pref_align_of", issue = "91971")]
library/core/src/intrinsics.rs:1024:    #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
library/core/src/intrinsics.rs:1030:    #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
library/core/src/intrinsics.rs:1042:    #[rustc_const_unstable(feature = "const_type_name", issue = "63084")]
library/core/src/intrinsics.rs:1057:    #[rustc_const_unstable(feature = "const_type_id", issue = "77125")]
library/core/src/intrinsics.rs:1066:    #[rustc_const_stable(feature = "const_assert_type", since = "1.59.0")]
library/core/src/intrinsics.rs:1075:    #[rustc_const_unstable(feature = "const_assert_type2", issue = "none")]
library/core/src/intrinsics.rs:1083:    #[rustc_const_unstable(feature = "const_assert_type2", issue = "none")]
library/core/src/intrinsics.rs:1096:    #[rustc_const_unstable(feature = "const_caller_location", issue = "76156")]
library/core/src/intrinsics.rs:1110:    #[rustc_const_unstable(feature = "const_intrinsic_forget", issue = "none")]
library/core/src/intrinsics.rs:1372:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/intrinsics.rs:1374:    #[rustc_const_stable(feature = "const_transmute", since = "1.56.0")]
library/core/src/intrinsics.rs:1388:    #[rustc_const_stable(feature = "const_transmute", since = "1.56.0")]
library/core/src/intrinsics.rs:1405:    #[rustc_const_stable(feature = "const_needs_drop", since = "1.40.0")]
library/core/src/intrinsics.rs:1428:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/intrinsics.rs:1446:    #[rustc_const_stable(feature = "const_ptr_offset", since = "1.61.0")]
library/core/src/intrinsics.rs:1878:    #[rustc_const_stable(feature = "const_ctpop", since = "1.40.0")]
library/core/src/intrinsics.rs:1897:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:1909:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:1917:    #[rustc_const_stable(feature = "const_ctlz", since = "1.40.0")]
library/core/src/intrinsics.rs:1930:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:1938:    #[rustc_const_stable(feature = "constctlz", since = "1.50.0")]
library/core/src/intrinsics.rs:1956:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:1968:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:1976:    #[rustc_const_stable(feature = "const_cttz", since = "1.40.0")]
library/core/src/intrinsics.rs:1989:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:1997:    #[rustc_const_stable(feature = "const_cttz_nonzero", since = "1.53.0")]
library/core/src/intrinsics.rs:2011:    #[rustc_const_stable(feature = "const_bswap", since = "1.40.0")]
library/core/src/intrinsics.rs:2026:    #[rustc_const_stable(feature = "const_bitreverse", since = "1.40.0")]
library/core/src/intrinsics.rs:2041:    #[rustc_const_stable(feature = "const_int_overflow", since = "1.40.0")]
library/core/src/intrinsics.rs:2056:    #[rustc_const_stable(feature = "const_int_overflow", since = "1.40.0")]
library/core/src/intrinsics.rs:2071:    #[rustc_const_stable(feature = "const_int_overflow", since = "1.40.0")]
library/core/src/intrinsics.rs:2080:    #[rustc_const_unstable(feature = "const_exact_div", issue = "none")]
library/core/src/intrinsics.rs:2090:    #[rustc_const_stable(feature = "const_int_unchecked_div", since = "1.52.0")]
library/core/src/intrinsics.rs:2099:    #[rustc_const_stable(feature = "const_int_unchecked_rem", since = "1.52.0")]
library/core/src/intrinsics.rs:2109:    #[rustc_const_stable(feature = "const_int_unchecked", since = "1.40.0")]
library/core/src/intrinsics.rs:2118:    #[rustc_const_stable(feature = "const_int_unchecked", since = "1.40.0")]
library/core/src/intrinsics.rs:2126:    #[rustc_const_unstable(feature = "const_int_unchecked_arith", issue = "none")]
library/core/src/intrinsics.rs:2134:    #[rustc_const_unstable(feature = "const_int_unchecked_arith", issue = "none")]
library/core/src/intrinsics.rs:2142:    #[rustc_const_unstable(feature = "const_int_unchecked_arith", issue = "none")]
library/core/src/intrinsics.rs:2156:    #[rustc_const_stable(feature = "const_int_rotate", since = "1.40.0")]
library/core/src/intrinsics.rs:2171:    #[rustc_const_stable(feature = "const_int_rotate", since = "1.40.0")]
library/core/src/intrinsics.rs:2186:    #[rustc_const_stable(feature = "const_int_wrapping", since = "1.40.0")]
library/core/src/intrinsics.rs:2200:    #[rustc_const_stable(feature = "const_int_wrapping", since = "1.40.0")]
library/core/src/intrinsics.rs:2214:    #[rustc_const_stable(feature = "const_int_wrapping", since = "1.40.0")]
library/core/src/intrinsics.rs:2229:    #[rustc_const_stable(feature = "const_int_saturating", since = "1.40.0")]
library/core/src/intrinsics.rs:2243:    #[rustc_const_stable(feature = "const_int_saturating", since = "1.40.0")]
library/core/src/intrinsics.rs:2254:    #[rustc_const_stable(feature = "const_ptr_read", since = "1.71.0")]
library/core/src/intrinsics.rs:2264:    #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/intrinsics.rs:2277:    #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
library/core/src/intrinsics.rs:2291:    #[rustc_const_unstable(feature = "variant_count", issue = "73662")]
library/core/src/intrinsics.rs:2314:    #[rustc_const_stable(feature = "const_ptr_offset_from", since = "1.65.0")]
library/core/src/intrinsics.rs:2319:    #[rustc_const_unstable(feature = "const_ptr_sub_ptr", issue = "95892")]
library/core/src/intrinsics.rs:2332:    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
library/core/src/intrinsics.rs:2345:    #[rustc_const_unstable(feature = "const_heap", issue = "79597")]
library/core/src/intrinsics.rs:2359:    #[rustc_const_unstable(feature = "const_heap", issue = "79597")]
library/core/src/intrinsics.rs:2384:    #[rustc_const_unstable(feature = "const_intrinsic_raw_eq", issue = "none")]
library/core/src/intrinsics.rs:2391:    #[rustc_const_unstable(feature = "const_black_box", issue = "none")]
library/core/src/intrinsics.rs:2431:    /// #![feature(const_eval_select)]
library/core/src/intrinsics.rs:2432:    /// #![feature(core_intrinsics)]
library/core/src/intrinsics.rs:2458:    #[rustc_const_unstable(feature = "const_eval_select", issue = "none")]
library/core/src/intrinsics.rs:2640:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/intrinsics.rs:2642:#[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/intrinsics.rs:2647:        #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/intrinsics.rs:2731:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/intrinsics.rs:2733:#[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/intrinsics.rs:2738:        #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
library/core/src/intrinsics.rs:2804:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/intrinsics.rs:2806:#[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/intrinsics.rs:2811:        #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
library/core/src/primitive_docs.rs:63:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:79:/// #![feature(never_type)]
library/core/src/primitive_docs.rs:133:/// #![feature(exhaustive_patterns)]
library/core/src/primitive_docs.rs:139:/// feature is present this means we can exhaustively match on [`Result<T, !>`] by just taking the
library/core/src/primitive_docs.rs:238:/// #![feature(never_type)]
library/core/src/primitive_docs.rs:274:#[unstable(feature = "never_type", issue = "35121")]
library/core/src/primitive_docs.rs:398:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:439:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:449:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:458:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:552:/// # #![feature(rustc_private)]
library/core/src/primitive_docs.rs:577:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:789:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:881:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:948:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1023:/// missing language features.
library/core/src/primitive_docs.rs:1075:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1085:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1096:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1166:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1181:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1187:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1193:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1199:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1205:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1211:#[stable(feature = "i128", since = "1.26.0")]
library/core/src/primitive_docs.rs:1217:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1223:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1229:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1235:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1241:#[stable(feature = "i128", since = "1.26.0")]
library/core/src/primitive_docs.rs:1251:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1261:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1393:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1550:/// so are not limited by missing language features:
library/core/src/primitive_docs.rs:1567:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1577:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/primitive_docs.rs:1588:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/lossy.rs:17:/// #![feature(utf8_chunks)]
library/core/src/str/lossy.rs:33:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:46:    #[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:66:    #[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:73:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/str/lossy.rs:76:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/str/lossy.rs:126:/// #![feature(utf8_chunks)]
library/core/src/str/lossy.rs:143:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:151:    #[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:157:    #[unstable(feature = "str_internals", issue = "none")]
library/core/src/str/lossy.rs:163:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:262:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/lossy.rs:265:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/pattern.rs:36:    feature = "pattern",
library/core/src/str/pattern.rs:963:                #[cfg(all(target_arch = "x86_64", target_feature = "sse2"))]
library/core/src/str/pattern.rs:1730:#[cfg(all(target_arch = "x86_64", target_feature = "sse2"))]
library/core/src/str/pattern.rs:1863:#[cfg(all(target_arch = "x86_64", target_feature = "sse2"))] // only called on x86
library/core/src/str/error.rs:46:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/error.rs:75:    #[stable(feature = "utf8_error", since = "1.5.0")]
library/core/src/str/error.rs:76:    #[rustc_const_stable(feature = "const_str_from_utf8_shared", since = "1.63.0")]
library/core/src/str/error.rs:98:    #[stable(feature = "utf8_error_error_len", since = "1.20.0")]
library/core/src/str/error.rs:99:    #[rustc_const_stable(feature = "const_str_from_utf8_shared", since = "1.63.0")]
library/core/src/str/error.rs:111:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/error.rs:126:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/error.rs:139:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/error.rs:142:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/error.rs:149:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:68:#[stable(feature = "chars_debug_impl", since = "1.38.0")]
library/core/src/str/iter.rs:78:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:88:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:109:    #[stable(feature = "iter_to_slice", since = "1.4.0")]
library/core/src/str/iter.rs:127:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:133:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:168:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:179:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:187:    #[stable(feature = "iter_to_slice", since = "1.4.0")]
library/core/src/str/iter.rs:200:    /// #![feature(char_indices_offset)]
library/core/src/str/iter.rs:214:    #[unstable(feature = "char_indices_offset", issue = "83871")]
library/core/src/str/iter.rs:227:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:231:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:308:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:329:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:342:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:345:#[unstable(feature = "trusted_len", issue = "37572")]
library/core/src/str/iter.rs:349:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/str/iter.rs:353:#[unstable(feature = "trusted_random_access", issue = "none")]
library/core/src/str/iter.rs:510:        #[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:513:        #[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:743:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:757:    /// #![feature(str_split_remainder)]
library/core/src/str/iter.rs:766:    #[unstable(feature = "str_split_remainder", issue = "77998")]
library/core/src/str/iter.rs:780:    /// #![feature(str_split_remainder)]
library/core/src/str/iter.rs:789:    #[unstable(feature = "str_split_remainder", issue = "77998")]
library/core/src/str/iter.rs:807:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:821:    /// #![feature(str_split_remainder)]
library/core/src/str/iter.rs:830:    #[unstable(feature = "str_split_remainder", issue = "77998")]
library/core/src/str/iter.rs:844:    /// #![feature(str_split_remainder)]
library/core/src/str/iter.rs:853:    #[unstable(feature = "str_split_remainder", issue = "77998")]
library/core/src/str/iter.rs:934:        #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:948:    /// #![feature(str_split_remainder)]
library/core/src/str/iter.rs:957:    #[unstable(feature = "str_split_remainder", issue = "77998")]
library/core/src/str/iter.rs:971:    /// #![feature(str_split_remainder)]
library/core/src/str/iter.rs:980:    #[unstable(feature = "str_split_remainder", issue = "77998")]
library/core/src/str/iter.rs:1035:        #[stable(feature = "str_match_indices", since = "1.5.0")]
library/core/src/str/iter.rs:1092:        #[stable(feature = "str_matches", since = "1.2.0")]
library/core/src/str/iter.rs:1104:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:1109:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:1129:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:1137:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:1143:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:1150:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:1166:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/iter.rs:1175:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:1186:#[stable(feature = "split_whitespace", since = "1.1.0")]
library/core/src/str/iter.rs:1199:#[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/core/src/str/iter.rs:1215:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/iter.rs:1218:#[stable(feature = "split_whitespace", since = "1.1.0")]
library/core/src/str/iter.rs:1238:#[stable(feature = "split_whitespace", since = "1.1.0")]
library/core/src/str/iter.rs:1246:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:1255:    /// #![feature(str_split_whitespace_remainder)]
library/core/src/str/iter.rs:1268:    #[unstable(feature = "str_split_whitespace_remainder", issue = "77998")]
library/core/src/str/iter.rs:1274:#[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/core/src/str/iter.rs:1294:#[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/core/src/str/iter.rs:1302:#[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/core/src/str/iter.rs:1313:    /// #![feature(str_split_whitespace_remainder)]
library/core/src/str/iter.rs:1326:    #[unstable(feature = "str_split_whitespace_remainder", issue = "77998")]
library/core/src/str/iter.rs:1337:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/iter.rs:1347:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/iter.rs:1355:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/iter.rs:1362:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/iter.rs:1372:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/iter.rs:1383:    /// #![feature(str_split_inclusive_remainder)]
library/core/src/str/iter.rs:1392:    #[unstable(feature = "str_split_inclusive_remainder", issue = "77998")]
library/core/src/str/iter.rs:1405:#[stable(feature = "encode_utf16", since = "1.8.0")]
library/core/src/str/iter.rs:1411:#[stable(feature = "collection_debug", since = "1.17.0")]
library/core/src/str/iter.rs:1418:#[stable(feature = "encode_utf16", since = "1.8.0")]
library/core/src/str/iter.rs:1450:#[stable(feature = "fused", since = "1.26.0")]
library/core/src/str/iter.rs:1454:#[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/iter.rs:1464:#[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/iter.rs:1471:#[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/iter.rs:1479:        #[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/iter.rs:1486:        #[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/iter.rs:1511:        #[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/mod.rs:7:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:27:#[unstable(feature = "utf8_chunks", issue = "99543")]
library/core/src/str/mod.rs:30:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:33:#[stable(feature = "str_mut_extras", since = "1.20.0")]
library/core/src/str/mod.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:39:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:42:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:45:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:49:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:52:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:55:#[stable(feature = "str_matches", since = "1.2.0")]
library/core/src/str/mod.rs:58:#[stable(feature = "str_match_indices", since = "1.5.0")]
library/core/src/str/mod.rs:61:#[stable(feature = "encode_utf16", since = "1.8.0")]
library/core/src/str/mod.rs:64:#[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/mod.rs:67:#[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/core/src/str/mod.rs:70:#[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/mod.rs:73:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/str/mod.rs:154:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:155:    #[rustc_const_stable(feature = "const_str_len", since = "1.39.0")]
library/core/src/str/mod.rs:173:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:174:    #[rustc_const_stable(feature = "const_str_is_empty", since = "1.39.0")]
library/core/src/str/mod.rs:205:    #[stable(feature = "is_char_boundary", since = "1.9.0")]
library/core/src/str/mod.rs:243:    /// #![feature(round_char_boundary)]
library/core/src/str/mod.rs:252:    #[unstable(feature = "round_char_boundary", issue = "93743")]
library/core/src/str/mod.rs:282:    /// #![feature(round_char_boundary)]
library/core/src/str/mod.rs:291:    #[unstable(feature = "round_char_boundary", issue = "93743")]
library/core/src/str/mod.rs:314:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:315:    #[rustc_const_stable(feature = "str_as_bytes", since = "1.39.0")]
library/core/src/str/mod.rs:360:    #[stable(feature = "str_mut_extras", since = "1.20.0")]
library/core/src/str/mod.rs:388:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:389:    #[rustc_const_stable(feature = "rustc_str_as_ptr", since = "1.32.0")]
library/core/src/str/mod.rs:404:    #[stable(feature = "str_as_mut_ptr", since = "1.36.0")]
library/core/src/str/mod.rs:430:    #[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/mod.rs:462:    #[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/mod.rs:494:    #[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/mod.rs:529:    #[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/mod.rs:578:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:612:    #[stable(feature = "str_slice_mut", since = "1.5.0")]
library/core/src/str/mod.rs:652:    #[stable(feature = "str_split_at", since = "1.4.0")]
library/core/src/str/mod.rs:694:    #[stable(feature = "str_split_at", since = "1.4.0")]
library/core/src/str/mod.rs:759:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:816:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:839:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:890:    #[stable(feature = "split_whitespace", since = "1.1.0")]
library/core/src/str/mod.rs:940:    #[stable(feature = "split_ascii_whitespace", since = "1.34.0")]
library/core/src/str/mod.rs:988:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:995:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1017:    #[stable(feature = "encode_utf16", since = "1.8.0")]
library/core/src/str/mod.rs:1041:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1066:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1090:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1140:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1186:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1308:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1348:    #[stable(feature = "split_inclusive", since = "1.51.0")]
library/core/src/str/mod.rs:1403:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1452:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1498:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1553:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1602:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1622:    #[stable(feature = "str_split_once", since = "1.52.0")]
library/core/src/str/mod.rs:1640:    #[stable(feature = "str_split_once", since = "1.52.0")]
library/core/src/str/mod.rs:1680:    #[stable(feature = "str_matches", since = "1.2.0")]
library/core/src/str/mod.rs:1714:    #[stable(feature = "str_matches", since = "1.2.0")]
library/core/src/str/mod.rs:1758:    #[stable(feature = "str_match_indices", since = "1.5.0")]
library/core/src/str/mod.rs:1798:    #[stable(feature = "str_match_indices", since = "1.5.0")]
library/core/src/str/mod.rs:1822:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1861:    #[stable(feature = "trim_direction", since = "1.30.0")]
library/core/src/str/mod.rs:1900:    #[stable(feature = "trim_direction", since = "1.30.0")]
library/core/src/str/mod.rs:1940:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:1980:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2014:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2061:    #[stable(feature = "trim_direction", since = "1.30.0")]
library/core/src/str/mod.rs:2094:    #[stable(feature = "str_strip", since = "1.45.0")]
library/core/src/str/mod.rs:2121:    #[stable(feature = "str_strip", since = "1.45.0")]
library/core/src/str/mod.rs:2165:    #[stable(feature = "trim_direction", since = "1.30.0")]
library/core/src/str/mod.rs:2204:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2247:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2304:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2320:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/str/mod.rs:2321:    #[rustc_const_unstable(feature = "const_slice_is_ascii", issue = "111090")]
library/core/src/str/mod.rs:2333:    #[unstable(feature = "ascii_char", issue = "110998")]
library/core/src/str/mod.rs:2353:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/str/mod.rs:2379:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/str/mod.rs:2406:    #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
library/core/src/str/mod.rs:2450:    #[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/mod.rs:2496:    #[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/mod.rs:2534:    #[stable(feature = "str_escape", since = "1.34.0")]
library/core/src/str/mod.rs:2540:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2548:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/mod.rs:2557:#[stable(feature = "default_mut_str", since = "1.28.0")]
library/core/src/str/mod.rs:2622:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:18:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:26:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:52:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:65:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:95:#[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/traits.rs:96:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/str/traits.rs:160:#[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/traits.rs:161:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/str/traits.rs:270:#[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/traits.rs:271:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/str/traits.rs:339:#[stable(feature = "str_checked_slicing", since = "1.20.0")]
library/core/src/str/traits.rs:340:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/str/traits.rs:411:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/str/traits.rs:412:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/str/traits.rs:463:#[stable(feature = "inclusive_range", since = "1.26.0")]
library/core/src/str/traits.rs:464:#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
library/core/src/str/traits.rs:550:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:553:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:574:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/traits.rs:578:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/converts.rs:84:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/converts.rs:85:#[rustc_const_stable(feature = "const_str_from_utf8_shared", since = "1.63.0")]
library/core/src/str/converts.rs:129:#[stable(feature = "str_mut_extras", since = "1.20.0")]
library/core/src/str/converts.rs:130:#[rustc_const_unstable(feature = "const_str_from_utf8", issue = "91006")]
library/core/src/str/converts.rs:170:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/str/converts.rs:171:#[rustc_const_stable(feature = "const_str_from_utf8_unchecked", since = "1.55.0")]
library/core/src/str/converts.rs:198:#[stable(feature = "str_mut_extras", since = "1.20.0")]
library/core/src/str/converts.rs:199:#[rustc_const_unstable(feature = "const_str_from_utf8_unchecked_mut", issue = "91005")]
library/core/src/str/validations.rs:34:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/str/validations.rs:126:#[rustc_const_unstable(feature = "str_internals", issue = "none")]
library/core/src/str/validations.rs:266:#[unstable(feature = "str_internals", issue = "none")]
library/core/src/primitive.rs:34:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:36:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:38:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:40:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:42:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:44:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:46:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:48:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:50:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:52:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:54:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:56:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:58:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:60:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:62:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:64:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/primitive.rs:66:#[stable(feature = "core_primitive", since = "1.43.0")]
library/core/src/mem/transmutability.rs:8:#[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:19:#[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:40:#[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:45:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:50:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:54:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:58:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:62:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:66:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:77:    #[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:90:#[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/transmutability.rs:101:#[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/mod.rs:6:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:17:#[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/mod.rs:21:#[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/mod.rs:25:#[unstable(feature = "transmutability", issue = "99571")]
library/core/src/mem/mod.rs:28:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:145:#[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
library/core/src/mem/mod.rs:146:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:154:/// This function is just a shim intended to be removed when the `unsized_locals` feature gets
library/core/src/mem/mod.rs:157:#[unstable(feature = "forget_unsized", issue = "none")]
library/core/src/mem/mod.rs:308:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:310:#[rustc_const_stable(feature = "const_mem_size_of", since = "1.24.0")]
library/core/src/mem/mod.rs:339:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:340:#[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
library/core/src/mem/mod.rs:374:/// [extern type]: ../../unstable-book/language-features/extern-types.html
library/core/src/mem/mod.rs:379:/// #![feature(layout_for_ptr)]
library/core/src/mem/mod.rs:390:#[unstable(feature = "layout_for_ptr", issue = "69835")]
library/core/src/mem/mod.rs:391:#[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
library/core/src/mem/mod.rs:415:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:438:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:462:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:464:#[rustc_const_stable(feature = "const_align_of", since = "1.24.0")]
library/core/src/mem/mod.rs:485:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:486:#[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
library/core/src/mem/mod.rs:520:/// [extern type]: ../../unstable-book/language-features/extern-types.html
library/core/src/mem/mod.rs:525:/// #![feature(layout_for_ptr)]
library/core/src/mem/mod.rs:532:#[unstable(feature = "layout_for_ptr", issue = "69835")]
library/core/src/mem/mod.rs:533:#[rustc_const_unstable(feature = "const_align_of_val_raw", issue = "46571")]
library/core/src/mem/mod.rs:597:#[stable(feature = "needs_drop", since = "1.21.0")]
library/core/src/mem/mod.rs:598:#[rustc_const_stable(feature = "const_mem_needs_drop", since = "1.36.0")]
library/core/src/mem/mod.rs:645:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:684:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:724:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:725:#[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/mem/mod.rs:761:#[rustc_const_unstable(feature = "const_swap", issue = "83163")]
library/core/src/mem/mod.rs:843:#[stable(feature = "mem_take", since = "1.40.0")]
library/core/src/mem/mod.rs:907:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:909:#[rustc_const_unstable(feature = "const_replace", issue = "83164")]
library/core/src/mem/mod.rs:985:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:1000:/// #![feature(mem_copy_fn)]
library/core/src/mem/mod.rs:1006:#[unstable(feature = "mem_copy_fn", issue = "98262")]
library/core/src/mem/mod.rs:1053:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/mem/mod.rs:1054:#[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
library/core/src/mem/mod.rs:1077:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1082:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1085:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1092:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1099:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1102:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1109:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1199:#[stable(feature = "discriminant_value", since = "1.21.0")]
library/core/src/mem/mod.rs:1200:#[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
library/core/src/mem/mod.rs:1220:/// # #![feature(never_type)]
library/core/src/mem/mod.rs:1221:/// # #![feature(variant_count)]
library/core/src/mem/mod.rs:1236:#[unstable(feature = "variant_count", issue = "73662")]
library/core/src/mem/mod.rs:1237:#[rustc_const_unstable(feature = "variant_count", issue = "73662")]
library/core/src/mem/mod.rs:1249:#[unstable(feature = "sized_type_properties", issue = "none")]
library/core/src/mem/mod.rs:1257:    /// #![feature(sized_type_properties)]
library/core/src/mem/mod.rs:1277:    #[unstable(feature = "sized_type_properties", issue = "none")]
library/core/src/mem/mod.rs:1281:#[unstable(feature = "sized_type_properties", issue = "none")]
library/core/src/mem/mod.rs:1295:/// #![feature(offset_of)]
library/core/src/mem/mod.rs:1319:#[unstable(feature = "offset_of", issue = "106655")]
library/core/src/mem/manually_drop.rs:46:#[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/manually_drop.rs:67:    #[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/manually_drop.rs:68:    #[rustc_const_stable(feature = "const_manually_drop", since = "1.32.0")]
library/core/src/mem/manually_drop.rs:85:    #[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/manually_drop.rs:86:    #[rustc_const_stable(feature = "const_manually_drop", since = "1.32.0")]
library/core/src/mem/manually_drop.rs:108:    #[stable(feature = "manually_drop_take", since = "1.42.0")]
library/core/src/mem/manually_drop.rs:138:    #[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/manually_drop.rs:148:#[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/manually_drop.rs:157:#[stable(feature = "manually_drop", since = "1.20.0")]
library/core/src/mem/maybe_uninit.rs:244:#[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:254:#[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:263:#[stable(feature = "maybe_uninit_debug", since = "1.41.0")]
library/core/src/mem/maybe_uninit.rs:286:    #[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:287:    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:308:    #[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:309:    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:327:    /// #![feature(maybe_uninit_uninit_array, maybe_uninit_slice)]
library/core/src/mem/maybe_uninit.rs:346:    #[unstable(feature = "maybe_uninit_uninit_array", issue = "96097")]
library/core/src/mem/maybe_uninit.rs:347:    #[rustc_const_unstable(feature = "const_maybe_uninit_uninit_array", issue = "96097")]
library/core/src/mem/maybe_uninit.rs:390:    #[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:391:    #[rustc_const_unstable(feature = "const_maybe_uninit_zeroed", issue = "91850")]
library/core/src/mem/maybe_uninit.rs:485:    #[stable(feature = "maybe_uninit_write", since = "1.55.0")]
library/core/src/mem/maybe_uninit.rs:486:    #[rustc_const_unstable(feature = "const_maybe_uninit_write", issue = "63567")]
library/core/src/mem/maybe_uninit.rs:525:    #[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:526:    #[rustc_const_stable(feature = "const_maybe_uninit_as_ptr", since = "1.59.0")]
library/core/src/mem/maybe_uninit.rs:564:    #[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:565:    #[rustc_const_unstable(feature = "const_maybe_uninit_as_mut_ptr", issue = "75251")]
library/core/src/mem/maybe_uninit.rs:617:    #[stable(feature = "maybe_uninit", since = "1.36.0")]
library/core/src/mem/maybe_uninit.rs:618:    #[rustc_const_stable(feature = "const_maybe_uninit_assume_init_by_value", since = "1.59.0")]
library/core/src/mem/maybe_uninit.rs:688:    #[stable(feature = "maybe_uninit_extra", since = "1.60.0")]
library/core/src/mem/maybe_uninit.rs:689:    #[rustc_const_unstable(feature = "const_maybe_uninit_assume_init_read", issue = "63567")]
library/core/src/mem/maybe_uninit.rs:723:    #[stable(feature = "maybe_uninit_extra", since = "1.60.0")]
library/core/src/mem/maybe_uninit.rs:783:    #[stable(feature = "maybe_uninit_ref", since = "1.55.0")]
library/core/src/mem/maybe_uninit.rs:784:    #[rustc_const_stable(feature = "const_maybe_uninit_assume_init_ref", since = "1.59.0")]
library/core/src/mem/maybe_uninit.rs:900:    #[stable(feature = "maybe_uninit_ref", since = "1.55.0")]
library/core/src/mem/maybe_uninit.rs:901:    #[rustc_const_unstable(feature = "const_maybe_uninit_assume_init", issue = "none")]
library/core/src/mem/maybe_uninit.rs:922:    /// #![feature(maybe_uninit_uninit_array)]
library/core/src/mem/maybe_uninit.rs:923:    /// #![feature(maybe_uninit_array_assume_init)]
library/core/src/mem/maybe_uninit.rs:938:    #[unstable(feature = "maybe_uninit_array_assume_init", issue = "96097")]
library/core/src/mem/maybe_uninit.rs:939:    #[rustc_const_unstable(feature = "const_maybe_uninit_array_assume_init", issue = "96097")]
library/core/src/mem/maybe_uninit.rs:965:    #[unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:966:    #[rustc_const_unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:987:    #[unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:988:    #[rustc_const_unstable(feature = "const_maybe_uninit_assume_init", issue = "none")]
library/core/src/mem/maybe_uninit.rs:997:    #[unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:998:    #[rustc_const_unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:1005:    #[unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:1006:    #[rustc_const_unstable(feature = "maybe_uninit_slice", issue = "63569")]
library/core/src/mem/maybe_uninit.rs:1025:    /// #![feature(maybe_uninit_write_slice)]
library/core/src/mem/maybe_uninit.rs:1037:    /// #![feature(maybe_uninit_write_slice)]
library/core/src/mem/maybe_uninit.rs:1055:    #[unstable(feature = "maybe_uninit_write_slice", issue = "79995")]
library/core/src/mem/maybe_uninit.rs:1085:    /// #![feature(maybe_uninit_write_slice)]
library/core/src/mem/maybe_uninit.rs:1097:    /// #![feature(maybe_uninit_write_slice)]
library/core/src/mem/maybe_uninit.rs:1115:    #[unstable(feature = "maybe_uninit_write_slice", issue = "79995")]
library/core/src/mem/maybe_uninit.rs:1168:    /// #![feature(maybe_uninit_as_bytes, maybe_uninit_slice)]
library/core/src/mem/maybe_uninit.rs:1177:    #[unstable(feature = "maybe_uninit_as_bytes", issue = "93092")]
library/core/src/mem/maybe_uninit.rs:1194:    /// #![feature(maybe_uninit_as_bytes)]
library/core/src/mem/maybe_uninit.rs:1208:    #[unstable(feature = "maybe_uninit_as_bytes", issue = "93092")]
library/core/src/mem/maybe_uninit.rs:1228:    /// #![feature(maybe_uninit_as_bytes, maybe_uninit_write_slice, maybe_uninit_slice)]
library/core/src/mem/maybe_uninit.rs:1238:    #[unstable(feature = "maybe_uninit_as_bytes", issue = "93092")]
library/core/src/mem/maybe_uninit.rs:1254:    /// #![feature(maybe_uninit_as_bytes, maybe_uninit_write_slice, maybe_uninit_slice)]
library/core/src/mem/maybe_uninit.rs:1267:    #[unstable(feature = "maybe_uninit_as_bytes", issue = "93092")]
library/core/src/mem/maybe_uninit.rs:1281:    /// #![feature(maybe_uninit_uninit_array_transpose)]
library/core/src/mem/maybe_uninit.rs:1286:    #[unstable(feature = "maybe_uninit_uninit_array_transpose", issue = "96097")]
library/core/src/mem/maybe_uninit.rs:1300:    /// #![feature(maybe_uninit_uninit_array_transpose)]
library/core/src/mem/maybe_uninit.rs:1306:    #[unstable(feature = "maybe_uninit_uninit_array_transpose", issue = "96097")]
library/core/src/convert/num.rs:8:    #[unstable(feature = "convert_float_to_int", issue = "67057")]
library/core/src/convert/num.rs:14:#[unstable(feature = "convert_float_to_int", issue = "67057")]
library/core/src/convert/num.rs:16:    #[unstable(feature = "convert_float_to_int", issue = "67057")]
library/core/src/convert/num.rs:23:        #[unstable(feature = "convert_float_to_int", issue = "67057")]
library/core/src/convert/num.rs:26:            #[unstable(feature = "convert_float_to_int", issue = "67057")]
library/core/src/convert/num.rs:85:impl_from_bool! { u8, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:86:impl_from_bool! { u16, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:87:impl_from_bool! { u32, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:88:impl_from_bool! { u64, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:89:impl_from_bool! { u128, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:90:impl_from_bool! { usize, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:91:impl_from_bool! { i8, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:92:impl_from_bool! { i16, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:93:impl_from_bool! { i32, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:94:impl_from_bool! { i64, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:95:impl_from_bool! { i128, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:96:impl_from_bool! { isize, #[stable(feature = "from_bool", since = "1.28.0")] }
library/core/src/convert/num.rs:99:impl_from! { u8, u16, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:100:impl_from! { u8, u32, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:101:impl_from! { u8, u64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:102:impl_from! { u8, u128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:103:impl_from! { u8, usize, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:104:impl_from! { u16, u32, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:105:impl_from! { u16, u64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:106:impl_from! { u16, u128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:107:impl_from! { u32, u64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:108:impl_from! { u32, u128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:109:impl_from! { u64, u128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:112:impl_from! { i8, i16, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:113:impl_from! { i8, i32, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:114:impl_from! { i8, i64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:115:impl_from! { i8, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:116:impl_from! { i8, isize, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:117:impl_from! { i16, i32, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:118:impl_from! { i16, i64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:119:impl_from! { i16, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:120:impl_from! { i32, i64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:121:impl_from! { i32, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:122:impl_from! { i64, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:125:impl_from! { u8, i16, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:126:impl_from! { u8, i32, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:127:impl_from! { u8, i64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:128:impl_from! { u8, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:129:impl_from! { u16, i32, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:130:impl_from! { u16, i64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:131:impl_from! { u16, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:132:impl_from! { u32, i64, #[stable(feature = "lossless_int_conv", since = "1.5.0")] }
library/core/src/convert/num.rs:133:impl_from! { u32, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:134:impl_from! { u64, i128, #[stable(feature = "i128", since = "1.26.0")] }
library/core/src/convert/num.rs:139:impl_from! { u16, usize, #[stable(feature = "lossless_iusize_conv", since = "1.26.0")] }
library/core/src/convert/num.rs:140:impl_from! { u8, isize, #[stable(feature = "lossless_iusize_conv", since = "1.26.0")] }
library/core/src/convert/num.rs:141:impl_from! { i16, isize, #[stable(feature = "lossless_iusize_conv", since = "1.26.0")] }
library/core/src/convert/num.rs:154:impl_from! { i8, f32, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:155:impl_from! { i8, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:156:impl_from! { i16, f32, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:157:impl_from! { i16, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:158:impl_from! { i32, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:161:impl_from! { u8, f32, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:162:impl_from! { u8, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:163:impl_from! { u16, f32, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:164:impl_from! { u16, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:165:impl_from! { u32, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:168:impl_from! { f32, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
library/core/src/convert/num.rs:171:#[stable(feature = "float_from_bool", since = "1.68.0")]
library/core/src/convert/num.rs:190:#[stable(feature = "float_from_bool", since = "1.68.0")]
library/core/src/convert/num.rs:213:        #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/num.rs:231:        #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/num.rs:253:        #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/num.rs:275:        #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/num.rs:453:nzint_impl_from! { NonZeroU8, NonZeroU16, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:454:nzint_impl_from! { NonZeroU8, NonZeroU32, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:455:nzint_impl_from! { NonZeroU8, NonZeroU64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:456:nzint_impl_from! { NonZeroU8, NonZeroU128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:457:nzint_impl_from! { NonZeroU8, NonZeroUsize, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:458:nzint_impl_from! { NonZeroU16, NonZeroU32, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:459:nzint_impl_from! { NonZeroU16, NonZeroU64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:460:nzint_impl_from! { NonZeroU16, NonZeroU128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:461:nzint_impl_from! { NonZeroU16, NonZeroUsize, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:462:nzint_impl_from! { NonZeroU32, NonZeroU64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:463:nzint_impl_from! { NonZeroU32, NonZeroU128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:464:nzint_impl_from! { NonZeroU64, NonZeroU128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:467:nzint_impl_from! { NonZeroI8, NonZeroI16, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:468:nzint_impl_from! { NonZeroI8, NonZeroI32, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:469:nzint_impl_from! { NonZeroI8, NonZeroI64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:470:nzint_impl_from! { NonZeroI8, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:471:nzint_impl_from! { NonZeroI8, NonZeroIsize, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:472:nzint_impl_from! { NonZeroI16, NonZeroI32, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:473:nzint_impl_from! { NonZeroI16, NonZeroI64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:474:nzint_impl_from! { NonZeroI16, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:475:nzint_impl_from! { NonZeroI16, NonZeroIsize, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:476:nzint_impl_from! { NonZeroI32, NonZeroI64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:477:nzint_impl_from! { NonZeroI32, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:478:nzint_impl_from! { NonZeroI64, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:481:nzint_impl_from! { NonZeroU8, NonZeroI16, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:482:nzint_impl_from! { NonZeroU8, NonZeroI32, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:483:nzint_impl_from! { NonZeroU8, NonZeroI64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:484:nzint_impl_from! { NonZeroU8, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:485:nzint_impl_from! { NonZeroU8, NonZeroIsize, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:486:nzint_impl_from! { NonZeroU16, NonZeroI32, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:487:nzint_impl_from! { NonZeroU16, NonZeroI64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:488:nzint_impl_from! { NonZeroU16, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:489:nzint_impl_from! { NonZeroU32, NonZeroI64, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:490:nzint_impl_from! { NonZeroU32, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:491:nzint_impl_from! { NonZeroU64, NonZeroI128, #[stable(feature = "nz_int_conv", since = "1.41.0")] }
library/core/src/convert/num.rs:521:nzint_impl_try_from_int! { u8, NonZeroU8, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:522:nzint_impl_try_from_int! { u16, NonZeroU16, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:523:nzint_impl_try_from_int! { u32, NonZeroU32, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:524:nzint_impl_try_from_int! { u64, NonZeroU64, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:525:nzint_impl_try_from_int! { u128, NonZeroU128, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:526:nzint_impl_try_from_int! { usize, NonZeroUsize, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:527:nzint_impl_try_from_int! { i8, NonZeroI8, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:528:nzint_impl_try_from_int! { i16, NonZeroI16, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:529:nzint_impl_try_from_int! { i32, NonZeroI32, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:530:nzint_impl_try_from_int! { i64, NonZeroI64, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:531:nzint_impl_try_from_int! { i128, NonZeroI128, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:532:nzint_impl_try_from_int! { isize, NonZeroIsize, #[stable(feature = "nzint_try_from_int_conv", since = "1.46.0")] }
library/core/src/convert/num.rs:536:        #[stable(feature = "nzint_try_from_nzint_conv", since = "1.49.0")]
library/core/src/convert/mod.rs:36:#![stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:44:#[unstable(feature = "convert_float_to_int", issue = "67057")]
library/core/src/convert/mod.rs:100:#[stable(feature = "convert_id", since = "1.33.0")]
library/core/src/convert/mod.rs:101:#[rustc_const_stable(feature = "const_identity", since = "1.33.0")]
library/core/src/convert/mod.rs:215:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:219:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:366:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:370:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:443:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:447:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:533:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:542:    #[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:561:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:564:    #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:568:    #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:637:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:640:    #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:644:    #[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:653:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:665:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:685:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:705:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:721:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:735:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:746:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:761:#[stable(feature = "try_from", since = "1.34.0")]
library/core/src/convert/mod.rs:778:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:786:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:794:#[stable(feature = "rust1", since = "1.0.0")]
library/core/src/convert/mod.rs:802:#[stable(feature = "as_mut_str_for_str", since = "1.51.0")]
library/core/src/convert/mod.rs:859:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:863:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:870:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:877:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:884:#[stable(feature = "str_parse_error2", since = "1.8.0")]
library/core/src/convert/mod.rs:891:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:898:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:901:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:908:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:915:#[stable(feature = "convert_infallible", since = "1.34.0")]
library/core/src/convert/mod.rs:923:#[stable(feature = "convert_infallible_hash", since = "1.44.0")]
library/test/Cargo.toml:10:getopts = { version = "0.2.21", features = ['rustc-dep-of-std'] }
library/test/src/lib.rs:17:#![unstable(feature = "test", issue = "50297")]
library/test/src/lib.rs:19:#![feature(internal_output_capture)]
library/test/src/lib.rs:20:#![feature(staged_api)]
library/test/src/lib.rs:21:#![feature(process_exitcode_internals)]
library/test/src/lib.rs:22:#![feature(panic_can_unwind)]
library/test/src/lib.rs:23:#![feature(test)]
library/test/src/term/terminfo/parser/compiled.rs:204:    // According to the spec, these fields must be >= -1 where -1 means that the feature is not
library/test/src/cli.rs:113:            unstable-options = Allow use of experimental features",
library/test/src/cli.rs:223:// Gets the option value and checks if unstable features are enabled.
library/test/src/cli.rs:238:// Gets the option value and checks if unstable features are enabled.
library/test/src/cli.rs:311:    // Whether this is a feature-staged build, i.e., on the beta or stable channel
library/test/src/cli.rs:312:    let disable_unstable_features =
library/test/src/cli.rs:313:        option_env!("CFG_DISABLE_UNSTABLE_FEATURES").map(|s| s != "0").unwrap_or(false);
library/test/src/cli.rs:314:    // Whether we should enable unstable features for bootstrapping
library/test/src/cli.rs:317:    bootstrap || !disable_unstable_features
library/test/src/cli.rs:320:// Gets the CLI options associated with `report-time` feature.
library/std/Cargo.toml:1:cargo-features = ["public-dependency"]
library/std/Cargo.toml:16:cfg-if = { version = "1.0", features = ['rustc-dep-of-std'] }
library/std/Cargo.toml:20:libc = { version = "0.2.146", default-features = false, features = ['rustc-dep-of-std'], public = true }
library/std/Cargo.toml:24:hashbrown = { version = "0.14", default-features = false, features = ['rustc-dep-of-std'] }
library/std/Cargo.toml:25:std_detect = { path = "../stdarch/crates/std_detect", default-features = false, features = ['rustc-dep-of-std'] }
library/std/Cargo.toml:28:addr2line = { version = "0.20.0", optional = true, default-features = false }
library/std/Cargo.toml:29:rustc-demangle = { version = "0.1.21", features = ['rustc-dep-of-std'] }
library/std/Cargo.toml:30:miniz_oxide = { version = "0.7.0", optional = true, default-features = false, public = false }
library/std/Cargo.toml:34:default-features = false
library/std/Cargo.toml:35:features = ['read_core', 'elf', 'macho', 'pe', 'unaligned', 'archive']
library/std/Cargo.toml:38:rand = { version = "0.8.5", default-features = false, features = ["alloc"] }
library/std/Cargo.toml:42:dlmalloc = { version = "0.2.3", features = ['rustc-dep-of-std'] }
library/std/Cargo.toml:45:fortanix-sgx-abi = { version = "0.5.0", features = ['rustc-dep-of-std'], public = true }
library/std/Cargo.toml:48:hermit-abi = { version = "0.3.2", features = ['rustc-dep-of-std'], public = true }
library/std/Cargo.toml:51:wasi = { version = "0.11.0", features = ['rustc-dep-of-std'], default-features = false }
library/std/Cargo.toml:53:[features]
library/std/Cargo.toml:75:# Enable std_detect default features for stdarch/crates/std_detect:
library/std/tests/run-time-detect.rs:9:    feature(stdsimd)
library/std/tests/run-time-detect.rs:15:    use std::arch::is_arm_feature_detected;
library/std/tests/run-time-detect.rs:17:    println!("aes: {}", is_arm_feature_detected!("aes"));
library/std/tests/run-time-detect.rs:18:    println!("crc: {}", is_arm_feature_detected!("crc"));
library/std/tests/run-time-detect.rs:19:    println!("neon: {}", is_arm_feature_detected!("neon"));
library/std/tests/run-time-detect.rs:20:    println!("pmull: {}", is_arm_feature_detected!("pmull"));
library/std/tests/run-time-detect.rs:21:    println!("sha2: {}", is_arm_feature_detected!("sha2"));
library/std/tests/run-time-detect.rs:28:    use std::arch::is_aarch64_feature_detected;
library/std/tests/run-time-detect.rs:30:    println!("aes: {}", is_aarch64_feature_detected!("aes"));
library/std/tests/run-time-detect.rs:31:    println!("asimd: {}", is_aarch64_feature_detected!("asimd"));
library/std/tests/run-time-detect.rs:32:    println!("bf16: {}", is_aarch64_feature_detected!("bf16"));
library/std/tests/run-time-detect.rs:33:    println!("bti: {}", is_aarch64_feature_detected!("bti"));
library/std/tests/run-time-detect.rs:34:    println!("crc: {}", is_aarch64_feature_detected!("crc"));
library/std/tests/run-time-detect.rs:35:    println!("dit: {}", is_aarch64_feature_detected!("dit"));
library/std/tests/run-time-detect.rs:36:    println!("dotprod: {}", is_aarch64_feature_detected!("dotprod"));
library/std/tests/run-time-detect.rs:37:    println!("dpb2: {}", is_aarch64_feature_detected!("dpb2"));
library/std/tests/run-time-detect.rs:38:    println!("dpb: {}", is_aarch64_feature_detected!("dpb"));
library/std/tests/run-time-detect.rs:39:    println!("f32mm: {}", is_aarch64_feature_detected!("f32mm"));
library/std/tests/run-time-detect.rs:40:    println!("f64mm: {}", is_aarch64_feature_detected!("f64mm"));
library/std/tests/run-time-detect.rs:41:    println!("fcma: {}", is_aarch64_feature_detected!("fcma"));
library/std/tests/run-time-detect.rs:42:    println!("fhm: {}", is_aarch64_feature_detected!("fhm"));
library/std/tests/run-time-detect.rs:43:    println!("flagm: {}", is_aarch64_feature_detected!("flagm"));
library/std/tests/run-time-detect.rs:44:    println!("fp16: {}", is_aarch64_feature_detected!("fp16"));
library/std/tests/run-time-detect.rs:45:    println!("frintts: {}", is_aarch64_feature_detected!("frintts"));
library/std/tests/run-time-detect.rs:46:    println!("i8mm: {}", is_aarch64_feature_detected!("i8mm"));
library/std/tests/run-time-detect.rs:47:    println!("jsconv: {}", is_aarch64_feature_detected!("jsconv"));
library/std/tests/run-time-detect.rs:48:    println!("lse2: {}", is_aarch64_feature_detected!("lse2"));
library/std/tests/run-time-detect.rs:49:    println!("lse: {}", is_aarch64_feature_detected!("lse"));
library/std/tests/run-time-detect.rs:50:    println!("mte: {}", is_aarch64_feature_detected!("mte"));
library/std/tests/run-time-detect.rs:51:    println!("neon: {}", is_aarch64_feature_detected!("neon"));
library/std/tests/run-time-detect.rs:52:    println!("paca: {}", is_aarch64_feature_detected!("paca"));
library/std/tests/run-time-detect.rs:53:    println!("pacg: {}", is_aarch64_feature_detected!("pacg"));
library/std/tests/run-time-detect.rs:54:    println!("pmull: {}", is_aarch64_feature_detected!("pmull"));
library/std/tests/run-time-detect.rs:55:    println!("rand: {}", is_aarch64_feature_detected!("rand"));
library/std/tests/run-time-detect.rs:56:    println!("rcpc2: {}", is_aarch64_feature_detected!("rcpc2"));
library/std/tests/run-time-detect.rs:57:    println!("rcpc: {}", is_aarch64_feature_detected!("rcpc"));
library/std/tests/run-time-detect.rs:58:    println!("rdm: {}", is_aarch64_feature_detected!("rdm"));
library/std/tests/run-time-detect.rs:59:    println!("sb: {}", is_aarch64_feature_detected!("sb"));
library/std/tests/run-time-detect.rs:60:    println!("sha2: {}", is_aarch64_feature_detected!("sha2"));
library/std/tests/run-time-detect.rs:61:    println!("sha3: {}", is_aarch64_feature_detected!("sha3"));
library/std/tests/run-time-detect.rs:62:    println!("sm4: {}", is_aarch64_feature_detected!("sm4"));
library/std/tests/run-time-detect.rs:63:    println!("ssbs: {}", is_aarch64_feature_detected!("ssbs"));
library/std/tests/run-time-detect.rs:64:    println!("sve2-aes: {}", is_aarch64_feature_detected!("sve2-aes"));
library/std/tests/run-time-detect.rs:65:    println!("sve2-bitperm: {}", is_aarch64_feature_detected!("sve2-bitperm"));
library/std/tests/run-time-detect.rs:66:    println!("sve2-sha3: {}", is_aarch64_feature_detected!("sve2-sha3"));
library/std/tests/run-time-detect.rs:67:    println!("sve2-sm4: {}", is_aarch64_feature_detected!("sve2-sm4"));
library/std/tests/run-time-detect.rs:68:    println!("sve2: {}", is_aarch64_feature_detected!("sve2"));
library/std/tests/run-time-detect.rs:69:    println!("sve: {}", is_aarch64_feature_detected!("sve"));
library/std/tests/run-time-detect.rs:70:    println!("tme: {}", is_aarch64_feature_detected!("tme"));
library/std/tests/run-time-detect.rs:77:    use std::arch::is_powerpc_feature_detected;
library/std/tests/run-time-detect.rs:79:    println!("altivec: {}", is_powerpc_feature_detected!("altivec"));
library/std/tests/run-time-detect.rs:80:    println!("power8: {}", is_powerpc_feature_detected!("power8"));
library/std/tests/run-time-detect.rs:81:    println!("vsx: {}", is_powerpc_feature_detected!("vsx"));
library/std/tests/run-time-detect.rs:88:    use std::arch::is_powerpc64_feature_detected;
library/std/tests/run-time-detect.rs:90:    println!("altivec: {}", is_powerpc64_feature_detected!("altivec"));
library/std/tests/run-time-detect.rs:91:    println!("power8: {}", is_powerpc64_feature_detected!("power8"));
library/std/tests/run-time-detect.rs:92:    println!("vsx: {}", is_powerpc64_feature_detected!("vsx"));
library/std/tests/run-time-detect.rs:99:    use std::arch::is_x86_feature_detected;
library/std/tests/run-time-detect.rs:101:    // the below is the set of features we can test at runtime, but don't actually
library/std/tests/run-time-detect.rs:102:    // use to gate anything and are thus not part of the X86_ALLOWED_FEATURES list
library/std/tests/run-time-detect.rs:104:    println!("abm: {:?}", is_x86_feature_detected!("abm")); // this is a synonym for lzcnt but we test it anyways
library/std/tests/run-time-detect.rs:105:    println!("mmx: {:?}", is_x86_feature_detected!("mmx"));
library/std/tests/run-time-detect.rs:106:    println!("tsc: {:?}", is_x86_feature_detected!("tsc"));
library/std/tests/run-time-detect.rs:109:    // the order of X86_ALLOWED_FEATURES in rustc_codegen_ssa's target_features.rs
library/std/tests/run-time-detect.rs:112:    println!("adx: {:?}", is_x86_feature_detected!("adx"));
library/std/tests/run-time-detect.rs:113:    println!("aes: {:?}", is_x86_feature_detected!("aes"));
library/std/tests/run-time-detect.rs:114:    println!("avx2: {:?}", is_x86_feature_detected!("avx2"));
library/std/tests/run-time-detect.rs:115:    println!("avx512bf16: {:?}", is_x86_feature_detected!("avx512bf16"));
library/std/tests/run-time-detect.rs:116:    println!("avx512bitalg: {:?}", is_x86_feature_detected!("avx512bitalg"));
library/std/tests/run-time-detect.rs:117:    println!("avx512bw: {:?}", is_x86_feature_detected!("avx512bw"));
library/std/tests/run-time-detect.rs:118:    println!("avx512cd: {:?}", is_x86_feature_detected!("avx512cd"));
library/std/tests/run-time-detect.rs:119:    println!("avx512dq: {:?}", is_x86_feature_detected!("avx512dq"));
library/std/tests/run-time-detect.rs:120:    println!("avx512er: {:?}", is_x86_feature_detected!("avx512er"));
library/std/tests/run-time-detect.rs:121:    println!("avx512f: {:?}", is_x86_feature_detected!("avx512f"));
library/std/tests/run-time-detect.rs:122:    println!("avx512ifma: {:?}", is_x86_feature_detected!("avx512ifma"));
library/std/tests/run-time-detect.rs:123:    println!("avx512pf: {:?}", is_x86_feature_detected!("avx512pf"));
library/std/tests/run-time-detect.rs:124:    println!("avx512vbmi2: {:?}", is_x86_feature_detected!("avx512vbmi2"));
library/std/tests/run-time-detect.rs:125:    println!("avx512vbmi: {:?}", is_x86_feature_detected!("avx512vbmi"));
library/std/tests/run-time-detect.rs:126:    println!("avx512vl: {:?}", is_x86_feature_detected!("avx512vl"));
library/std/tests/run-time-detect.rs:127:    println!("avx512vnni: {:?}", is_x86_feature_detected!("avx512vnni"));
library/std/tests/run-time-detect.rs:128:    println!("avx512vp2intersect: {:?}", is_x86_feature_detected!("avx512vp2intersect"));
library/std/tests/run-time-detect.rs:129:    println!("avx512vpopcntdq: {:?}", is_x86_feature_detected!("avx512vpopcntdq"));
library/std/tests/run-time-detect.rs:130:    println!("avx: {:?}", is_x86_feature_detected!("avx"));
library/std/tests/run-time-detect.rs:131:    println!("bmi1: {:?}", is_x86_feature_detected!("bmi1"));
library/std/tests/run-time-detect.rs:132:    println!("bmi2: {:?}", is_x86_feature_detected!("bmi2"));
library/std/tests/run-time-detect.rs:133:    println!("cmpxchg16b: {:?}", is_x86_feature_detected!("cmpxchg16b"));
library/std/tests/run-time-detect.rs:134:    println!("f16c: {:?}", is_x86_feature_detected!("f16c"));
library/std/tests/run-time-detect.rs:135:    println!("fma: {:?}", is_x86_feature_detected!("fma"));
library/std/tests/run-time-detect.rs:136:    println!("fxsr: {:?}", is_x86_feature_detected!("fxsr"));
library/std/tests/run-time-detect.rs:137:    println!("gfni: {:?}", is_x86_feature_detected!("gfni"));
library/std/tests/run-time-detect.rs:138:    println!("lzcnt: {:?}", is_x86_feature_detected!("lzcnt"));
library/std/tests/run-time-detect.rs:139:    //println!("movbe: {:?}", is_x86_feature_detected!("movbe")); // movbe is unsupported as a target feature
library/std/tests/run-time-detect.rs:140:    println!("pclmulqdq: {:?}", is_x86_feature_detected!("pclmulqdq"));
library/std/tests/run-time-detect.rs:141:    println!("popcnt: {:?}", is_x86_feature_detected!("popcnt"));
library/std/tests/run-time-detect.rs:142:    println!("rdrand: {:?}", is_x86_feature_detected!("rdrand"));
library/std/tests/run-time-detect.rs:143:    println!("rdseed: {:?}", is_x86_feature_detected!("rdseed"));
library/std/tests/run-time-detect.rs:144:    println!("rtm: {:?}", is_x86_feature_detected!("rtm"));
library/std/tests/run-time-detect.rs:145:    println!("sha: {:?}", is_x86_feature_detected!("sha"));
library/std/tests/run-time-detect.rs:146:    println!("sse2: {:?}", is_x86_feature_detected!("sse2"));
library/std/tests/run-time-detect.rs:147:    println!("sse3: {:?}", is_x86_feature_detected!("sse3"));
library/std/tests/run-time-detect.rs:148:    println!("sse4.1: {:?}", is_x86_feature_detected!("sse4.1"));
library/std/tests/run-time-detect.rs:149:    println!("sse4.2: {:?}", is_x86_feature_detected!("sse4.2"));
library/std/tests/run-time-detect.rs:150:    println!("sse4a: {:?}", is_x86_feature_detected!("sse4a"));
library/std/tests/run-time-detect.rs:151:    println!("sse: {:?}", is_x86_feature_detected!("sse"));
library/std/tests/run-time-detect.rs:152:    println!("ssse3: {:?}", is_x86_feature_detected!("ssse3"));
library/std/tests/run-time-detect.rs:153:    println!("tbm: {:?}", is_x86_feature_detected!("tbm"));
library/std/tests/run-time-detect.rs:154:    println!("vaes: {:?}", is_x86_feature_detected!("vaes"));
library/std/tests/run-time-detect.rs:155:    println!("vpclmulqdq: {:?}", is_x86_feature_detected!("vpclmulqdq"));
library/std/tests/run-time-detect.rs:156:    println!("xsave: {:?}", is_x86_feature_detected!("xsave"));
library/std/tests/run-time-detect.rs:157:    println!("xsavec: {:?}", is_x86_feature_detected!("xsavec"));
library/std/tests/run-time-detect.rs:158:    println!("xsaveopt: {:?}", is_x86_feature_detected!("xsaveopt"));
library/std/tests/run-time-detect.rs:159:    println!("xsaves: {:?}", is_x86_feature_detected!("xsaves"));
library/std/build.rs:55:        println!("cargo:rustc-cfg=feature=\"restricted-std\"");
library/std/benches/lib.rs:1:#![feature(test)]
library/std/src/f32.rs:12:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:47:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:66:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:92:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:104:    /// #![feature(round_ties_even)]
library/std/src/f32.rs:118:    #[unstable(feature = "round_ties_even", issue = "96710")]
library/std/src/f32.rs:140:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:161:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:185:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:209:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:239:    #[stable(feature = "copysign", since = "1.35.0")]
library/std/src/f32.rs:266:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:292:    #[stable(feature = "euclidean_division", since = "1.38.0")]
library/std/src/f32.rs:327:    #[stable(feature = "euclidean_division", since = "1.38.0")]
library/std/src/f32.rs:349:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:367:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:392:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:414:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:434:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:456:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:480:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:500:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:520:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:545:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:575:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:599:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:618:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:637:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:655:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:677:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:699:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:720:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:754:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:776:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:798:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:820:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:843:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:866:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:889:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:909:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:931:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f32.rs:955:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/panic.rs:3:#![stable(feature = "std_panic", since = "1.9.0")]
library/std/src/panic.rs:13:#[unstable(feature = "edition_panic", issue = "none", reason = "use panic!() instead")]
library/std/src/panic.rs:36:#[unstable(feature = "edition_panic", issue = "none", reason = "use panic!() instead")]
library/std/src/panic.rs:39:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/std/src/panic.rs:42:#[unstable(feature = "panic_update_hook", issue = "92649")]
library/std/src/panic.rs:45:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/std/src/panic.rs:48:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/std/src/panic.rs:59:#[stable(feature = "panic_any", since = "1.51.0")]
library/std/src/panic.rs:66:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/std/src/panic.rs:68:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/std/src/panic.rs:71:#[stable(feature = "unwind_safe_lock_refs", since = "1.12.0")]
library/std/src/panic.rs:73:#[stable(feature = "unwind_safe_lock_refs", since = "1.12.0")]
library/std/src/panic.rs:77:#[stable(feature = "hashbrown", since = "1.36.0")]
library/std/src/panic.rs:140:#[stable(feature = "catch_unwind", since = "1.9.0")]
library/std/src/panic.rs:170:#[stable(feature = "resume_unwind", since = "1.9.0")]
library/std/src/panic.rs:194:/// #![feature(panic_always_abort)]
library/std/src/panic.rs:206:#[unstable(feature = "panic_always_abort", issue = "84438")]
library/std/src/panic.rs:214:#[unstable(feature = "panic_backtrace_config", issue = "93346")]
library/std/src/panic.rs:228:        if cfg!(feature = "backtrace") { Some(BacktraceStyle::Full) } else { None }
library/std/src/panic.rs:261:#[unstable(feature = "panic_backtrace_config", issue = "93346")]
library/std/src/panic.rs:263:    if !cfg!(feature = "backtrace") {
library/std/src/panic.rs:264:        // If the `backtrace` feature of this crate isn't enabled, skip setting.
library/std/src/panic.rs:291:#[unstable(feature = "panic_backtrace_config", issue = "93346")]
library/std/src/panic.rs:293:    if !cfg!(feature = "backtrace") {
library/std/src/panic.rs:294:        // If the `backtrace` feature of this crate isn't enabled quickly return
library/std/src/num.rs:6:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/num.rs:15:#[unstable(feature = "saturating_int_impl", issue = "87920")]
library/std/src/num.rs:17:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/num.rs:19:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/num.rs:22:#[stable(feature = "signed_nonzero", since = "1.34.0")]
library/std/src/num.rs:24:#[stable(feature = "nonzero", since = "1.28.0")]
library/std/src/num.rs:27:#[stable(feature = "int_error_matching", since = "1.55.0")]
library/std/src/ascii.rs:14:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:19:#[unstable(feature = "ascii_char", issue = "110998")]
library/std/src/ascii.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:48:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:57:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:76:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:96:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:109:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:126:    #[stable(feature = "ascii", since = "1.9.0")]
library/std/src/ascii.rs:143:    #[stable(feature = "ascii", since = "1.9.0")]
library/std/src/ascii.rs:181:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:189:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:197:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ascii.rs:205:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:22:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:26:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:28:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:30:#[unstable(feature = "tcplistener_into_incoming", issue = "88339")]
library/std/src/net/mod.rs:32:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:48:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:55:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:62:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/mod.rs:67:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:167:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:171:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:181:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:185:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:193:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:201:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:209:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:221:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:230:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:250:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:270:#[stable(feature = "string_u16_to_socket_addrs", since = "1.46.0")]
library/std/src/net/socket_addr.rs:279:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:292:#[stable(feature = "slice_to_socket_addrs", since = "1.8.0")]
library/std/src/net/socket_addr.rs:301:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/socket_addr.rs:309:#[stable(feature = "string_to_socket_addrs", since = "1.16.0")]
library/std/src/net/ip_addr.rs:8:#[stable(feature = "ip_addr", since = "1.7.0")]
library/std/src/net/ip_addr.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/ip_addr.rs:14:#[unstable(feature = "ip", issue = "27709")]
library/std/src/net/tcp.rs:49:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:85:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:95:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:108:#[unstable(feature = "tcplistener_into_incoming", issue = "88339")]
library/std/src/net/tcp.rs:155:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:171:    #[stable(feature = "tcpstream_connect_timeout", since = "1.21.0")]
library/std/src/net/tcp.rs:188:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:205:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:232:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:253:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:297:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/tcp.rs:341:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/tcp.rs:366:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/tcp.rs:391:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/tcp.rs:413:    #[stable(feature = "peek", since = "1.18.0")]
library/std/src/net/tcp.rs:429:    /// #![feature(tcp_linger)]
library/std/src/net/tcp.rs:438:    #[unstable(feature = "tcp_linger", issue = "88494")]
library/std/src/net/tcp.rs:450:    /// #![feature(tcp_linger)]
library/std/src/net/tcp.rs:460:    #[unstable(feature = "tcp_linger", issue = "88494")]
library/std/src/net/tcp.rs:482:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:501:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:520:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:539:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:559:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:604:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:616:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:635:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:654:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:673:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:712:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:768:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:784:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:803:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:825:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:863:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:878:    /// #![feature(tcplistener_into_incoming)]
library/std/src/net/tcp.rs:895:    #[unstable(feature = "tcplistener_into_incoming", issue = "88339")]
library/std/src/net/tcp.rs:913:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:931:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:936:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:943:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:964:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:1011:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/tcp.rs:1023:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/tcp.rs:1031:#[stable(feature = "tcp_listener_incoming_fused_iterator", since = "1.64.0")]
library/std/src/net/tcp.rs:1034:#[unstable(feature = "tcplistener_into_incoming", issue = "88339")]
library/std/src/net/tcp.rs:1042:#[unstable(feature = "tcplistener_into_incoming", issue = "88339")]
library/std/src/net/tcp.rs:1064:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:57:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:102:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:125:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:154:    #[stable(feature = "peek", since = "1.18.0")]
library/std/src/net/udp.rs:183:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:217:    #[stable(feature = "udp_peer_addr", since = "1.40.0")]
library/std/src/net/udp.rs:233:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:252:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/net/udp.rs:295:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/udp.rs:338:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/udp.rs:358:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/udp.rs:378:    #[stable(feature = "socket_timeout", since = "1.4.0")]
library/std/src/net/udp.rs:396:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:414:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:432:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:450:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:471:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:489:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:507:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:525:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:543:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:561:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:573:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:583:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:591:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:599:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:622:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:655:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:674:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:702:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:742:    #[stable(feature = "peek", since = "1.18.0")]
library/std/src/net/udp.rs:787:    #[stable(feature = "net2_mutators", since = "1.9.0")]
library/std/src/net/udp.rs:818:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sys_common/thread_local_key.rs:48:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys_common/thread_local_key.rs:106:    #[rustc_const_unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys_common/wtf8.rs:922:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sys_common/wtf8.rs:930:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sys_common/wtf8.rs:963:#[stable(feature = "encode_wide_fused_iterator", since = "1.62.0")]
library/std/src/sys_common/thread_parking/mod.rs:5:        all(target_arch = "wasm32", target_feature = "atomics"),
library/std/src/sys_common/once/queue.rs:111:    #[rustc_const_stable(feature = "const_once_new", since = "1.32.0")]
library/std/src/sys_common/once/queue.rs:246:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sys_common/once/mod.rs:14:        all(target_arch = "wasm32", target_feature = "atomics"),
library/std/src/sys_common/thread_local_dtor.rs:13:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys_common/mod.rs:47:                 feature = "restricted-std",
library/std/src/sys_common/backtrace.rs:130:#[cfg_attr(feature = "backtrace", inline(never))]
library/std/src/sys_common/backtrace.rs:146:#[cfg_attr(feature = "backtrace", inline(never))]
library/std/src/sys_common/process.rs:2:#![unstable(feature = "process_internals", issue = "none")]
library/std/src/sys_common/process.rs:105:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/sys_common/process.rs:111:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/sys_common/process.rs:122:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/rt.rs:10:    feature = "rt",
library/std/src/panicking.rs:132:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/std/src/panicking.rs:176:#[stable(feature = "panic_hooks", since = "1.10.0")]
library/std/src/panicking.rs:204:/// #![feature(panic_update_hook)]
library/std/src/panicking.rs:220:#[unstable(feature = "panic_update_hook", issue = "92649")]
library/std/src/panicking.rs:294:#[unstable(feature = "update_panic_count", issue = "none")]
library/std/src/panicking.rs:610:#[unstable(feature = "libstd_sys_internals", reason = "used by the panic! macro", issue = "none")]
library/std/src/panicking.rs:615:#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
library/std/src/panicking.rs:616:#[cfg_attr(feature = "panic_immediate_abort", inline)]
library/std/src/panicking.rs:620:    if cfg!(feature = "panic_immediate_abort") {
library/std/src/error.rs:2:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/error.rs:10:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/error.rs:16:    #[unstable(feature = "error_type_id", issue = "60784")]
library/std/src/error.rs:32:/// #![feature(error_reporter)]
library/std/src/error.rs:88:/// #![feature(error_reporter)]
library/std/src/error.rs:135:/// #![feature(error_reporter)]
library/std/src/error.rs:182:/// #![feature(error_reporter)]
library/std/src/error.rs:228:#[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:243:    #[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:255:    /// #![feature(error_reporter)]
library/std/src/error.rs:300:    /// #![feature(error_reporter)]
library/std/src/error.rs:357:    #[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:372:    /// #![feature(error_reporter)]
library/std/src/error.rs:373:    /// #![feature(provide_any)]
library/std/src/error.rs:374:    /// #![feature(error_generic_member_access)]
library/std/src/error.rs:447:    #[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:472:    #[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:486:    #[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:523:#[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:533:#[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/error.rs:545:#[unstable(feature = "error_reporter", issue = "90172")]
library/std/src/env.rs:11:#![stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:55:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:82:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:92:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:102:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:134:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:162:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:167:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:178:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/env.rs:185:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:196:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/env.rs:226:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:260:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:274:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:278:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:284:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:285:    NotUnicode(#[stable(feature = "env", since = "1.0.0")] OsString),
library/std/src/env.rs:288:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:300:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:339:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:381:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:401:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:427:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:432:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:443:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/env.rs:455:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:521:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:530:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:537:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:589:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:626:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:684:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:701:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:718:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:755:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:790:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:795:#[stable(feature = "env_unimpl_send_sync", since = "1.26.0")]
library/std/src/env.rs:798:#[stable(feature = "env_unimpl_send_sync", since = "1.26.0")]
library/std/src/env.rs:801:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:812:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:822:#[stable(feature = "env_iterators", since = "1.12.0")]
library/std/src/env.rs:829:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/env.rs:836:#[stable(feature = "env_unimpl_send_sync", since = "1.26.0")]
library/std/src/env.rs:839:#[stable(feature = "env_unimpl_send_sync", since = "1.26.0")]
library/std/src/env.rs:842:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:853:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:863:#[stable(feature = "env_iterators", since = "1.12.0")]
library/std/src/env.rs:870:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/env.rs:878:#[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:900:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:909:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:927:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:937:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:948:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:959:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:971:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/env.rs:981:    #[stable(feature = "env", since = "1.0.0")]
library/std/src/lib.rs:101://! features of The Rust Standard Library.
library/std/src/lib.rs:193:// rustc itself never sets the feature, so this line has no affect there.
library/std/src/lib.rs:194:#![cfg(any(not(feature = "miri-test-libstd"), test, doctest))]
library/std/src/lib.rs:196:#![cfg_attr(feature = "miri-test-libstd", feature(rustc_private))]
library/std/src/lib.rs:198:#![cfg_attr(not(feature = "restricted-std"), stable(feature = "rust1", since = "1.0.0"))]
library/std/src/lib.rs:199:#![cfg_attr(feature = "restricted-std", unstable(feature = "restricted_std", issue = "none"))]
library/std/src/lib.rs:227:// std may use features in a platform-specific way
library/std/src/lib.rs:228:#![allow(unused_features)]
library/std/src/lib.rs:230:// Features:
library/std/src/lib.rs:231:#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count, rt))]
library/std/src/lib.rs:234:    feature(slice_index_methods, coerce_unsized, sgx_platform)
library/std/src/lib.rs:236:#![cfg_attr(windows, feature(round_char_boundary))]
library/std/src/lib.rs:238:// Language features:
library/std/src/lib.rs:240:#![feature(alloc_error_handler)]
library/std/src/lib.rs:241:#![feature(allocator_internals)]
library/std/src/lib.rs:242:#![feature(allow_internal_unsafe)]
library/std/src/lib.rs:243:#![feature(allow_internal_unstable)]
library/std/src/lib.rs:244:#![feature(c_unwind)]
library/std/src/lib.rs:245:#![feature(cfg_target_thread_local)]
library/std/src/lib.rs:246:#![feature(concat_idents)]
library/std/src/lib.rs:247:#![feature(const_mut_refs)]
library/std/src/lib.rs:248:#![feature(const_trait_impl)]
library/std/src/lib.rs:249:#![feature(decl_macro)]
library/std/src/lib.rs:250:#![feature(deprecated_suggestion)]
library/std/src/lib.rs:251:#![feature(doc_cfg)]
library/std/src/lib.rs:252:#![feature(doc_cfg_hide)]
library/std/src/lib.rs:253:#![feature(doc_masked)]
library/std/src/lib.rs:254:#![feature(doc_notable_trait)]
library/std/src/lib.rs:255:#![feature(dropck_eyepatch)]
library/std/src/lib.rs:256:#![feature(exhaustive_patterns)]
library/std/src/lib.rs:257:#![feature(if_let_guard)]
library/std/src/lib.rs:258:#![feature(intra_doc_pointers)]
library/std/src/lib.rs:259:#![feature(lang_items)]
library/std/src/lib.rs:260:#![feature(let_chains)]
library/std/src/lib.rs:261:#![feature(link_cfg)]
library/std/src/lib.rs:262:#![feature(linkage)]
library/std/src/lib.rs:263:#![feature(min_specialization)]
library/std/src/lib.rs:264:#![feature(must_not_suspend)]
library/std/src/lib.rs:265:#![feature(needs_panic_runtime)]
library/std/src/lib.rs:266:#![feature(negative_impls)]
library/std/src/lib.rs:267:#![feature(never_type)]
library/std/src/lib.rs:268:#![feature(platform_intrinsics)]
library/std/src/lib.rs:269:#![feature(prelude_import)]
library/std/src/lib.rs:270:#![feature(rustc_attrs)]
library/std/src/lib.rs:271:#![feature(rustdoc_internals)]
library/std/src/lib.rs:272:#![feature(staged_api)]
library/std/src/lib.rs:273:#![feature(thread_local)]
library/std/src/lib.rs:274:#![feature(try_blocks)]
library/std/src/lib.rs:275:#![feature(utf8_chunks)]
library/std/src/lib.rs:278:// Library features (core):
library/std/src/lib.rs:280:#![feature(char_internals)]
library/std/src/lib.rs:281:#![feature(core_intrinsics)]
library/std/src/lib.rs:282:#![feature(duration_constants)]
library/std/src/lib.rs:283:#![feature(error_generic_member_access)]
library/std/src/lib.rs:284:#![feature(error_in_core)]
library/std/src/lib.rs:285:#![feature(error_iter)]
library/std/src/lib.rs:286:#![feature(exact_size_is_empty)]
library/std/src/lib.rs:287:#![feature(exclusive_wrapper)]
library/std/src/lib.rs:288:#![feature(extend_one)]
library/std/src/lib.rs:289:#![feature(float_minimum_maximum)]
library/std/src/lib.rs:290:#![feature(float_next_up_down)]
library/std/src/lib.rs:291:#![feature(hasher_prefixfree_extras)]
library/std/src/lib.rs:292:#![feature(hashmap_internals)]
library/std/src/lib.rs:293:#![feature(int_roundings)]
library/std/src/lib.rs:294:#![feature(ip)]
library/std/src/lib.rs:295:#![feature(ip_in_core)]
library/std/src/lib.rs:296:#![feature(maybe_uninit_slice)]
library/std/src/lib.rs:297:#![feature(maybe_uninit_uninit_array)]
library/std/src/lib.rs:298:#![feature(maybe_uninit_write_slice)]
library/std/src/lib.rs:299:#![feature(panic_can_unwind)]
library/std/src/lib.rs:300:#![feature(panic_info_message)]
library/std/src/lib.rs:301:#![feature(panic_internals)]
library/std/src/lib.rs:302:#![feature(pointer_byte_offsets)]
library/std/src/lib.rs:303:#![feature(pointer_is_aligned)]
library/std/src/lib.rs:304:#![feature(portable_simd)]
library/std/src/lib.rs:305:#![feature(prelude_2024)]
library/std/src/lib.rs:306:#![feature(provide_any)]
library/std/src/lib.rs:307:#![feature(ptr_as_uninit)]
library/std/src/lib.rs:308:#![feature(raw_os_nonzero)]
library/std/src/lib.rs:309:#![feature(round_ties_even)]
library/std/src/lib.rs:310:#![feature(slice_internals)]
library/std/src/lib.rs:311:#![feature(slice_ptr_get)]
library/std/src/lib.rs:312:#![feature(std_internals)]
library/std/src/lib.rs:313:#![feature(str_internals)]
library/std/src/lib.rs:314:#![feature(strict_provenance)]
library/std/src/lib.rs:317:// Library features (alloc):
library/std/src/lib.rs:319:#![feature(alloc_layout_extra)]
library/std/src/lib.rs:320:#![feature(allocator_api)]
library/std/src/lib.rs:321:#![feature(get_mut_unchecked)]
library/std/src/lib.rs:322:#![feature(map_try_insert)]
library/std/src/lib.rs:323:#![feature(new_uninit)]
library/std/src/lib.rs:324:#![feature(slice_concat_trait)]
library/std/src/lib.rs:325:#![feature(thin_box)]
library/std/src/lib.rs:326:#![feature(try_reserve_kind)]
library/std/src/lib.rs:327:#![feature(vec_into_raw_parts)]
library/std/src/lib.rs:330:// Library features (unwind):
library/std/src/lib.rs:332:#![feature(panic_unwind)]
library/std/src/lib.rs:337:#![feature(assert_matches)]
library/std/src/lib.rs:338:#![feature(async_iterator)]
library/std/src/lib.rs:339:#![feature(c_variadic)]
library/std/src/lib.rs:340:#![feature(cfg_accessible)]
library/std/src/lib.rs:341:#![feature(cfg_eval)]
library/std/src/lib.rs:342:#![feature(concat_bytes)]
library/std/src/lib.rs:343:#![feature(const_format_args)]
library/std/src/lib.rs:344:#![feature(core_panic)]
library/std/src/lib.rs:345:#![feature(custom_test_frameworks)]
library/std/src/lib.rs:346:#![feature(edition_panic)]
library/std/src/lib.rs:347:#![feature(format_args_nl)]
library/std/src/lib.rs:348:#![feature(get_many_mut)]
library/std/src/lib.rs:349:#![feature(lazy_cell)]
library/std/src/lib.rs:350:#![feature(log_syntax)]
library/std/src/lib.rs:351:#![feature(saturating_int_impl)]
library/std/src/lib.rs:352:#![feature(stdsimd)]
library/std/src/lib.rs:353:#![feature(test)]
library/std/src/lib.rs:354:#![feature(trace_macros)]
library/std/src/lib.rs:361:#![feature(const_collections_with_hasher)]
library/std/src/lib.rs:362:#![feature(const_hash)]
library/std/src/lib.rs:363:#![feature(const_io_structs)]
library/std/src/lib.rs:364:#![feature(const_ip)]
library/std/src/lib.rs:365:#![feature(const_ipv4)]
library/std/src/lib.rs:366:#![feature(const_ipv6)]
library/std/src/lib.rs:367:#![feature(const_maybe_uninit_uninit_array)]
library/std/src/lib.rs:368:#![feature(const_waker)]
library/std/src/lib.rs:369:#![feature(thread_local_internals)]
library/std/src/lib.rs:398:#[cfg(feature = "miniz_oxide")]
library/std/src/lib.rs:423:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:425:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:427:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:429:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:431:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:433:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:435:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:437:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:439:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:441:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:443:#[stable(feature = "core_array", since = "1.36.0")]
library/std/src/lib.rs:445:#[unstable(feature = "async_iterator", issue = "79024")]
library/std/src/lib.rs:447:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:449:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:451:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:453:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:455:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:457:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:459:#[stable(feature = "futures_api", since = "1.36.0")]
library/std/src/lib.rs:461:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:463:#[stable(feature = "core_hint", since = "1.27.0")]
library/std/src/lib.rs:465:#[stable(feature = "i128", since = "1.26.0")]
library/std/src/lib.rs:468:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:471:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:474:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:477:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:480:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:482:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:485:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:487:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:489:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:491:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:493:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:495:#[stable(feature = "pin", since = "1.33.0")]
library/std/src/lib.rs:497:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:499:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:501:#[stable(feature = "i128", since = "1.26.0")]
library/std/src/lib.rs:504:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:507:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:510:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:513:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:516:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:547:#[unstable(feature = "portable_simd", issue = "86656")]
library/std/src/lib.rs:551:#[unstable(feature = "portable_simd", issue = "86656")]
library/std/src/lib.rs:559:#[stable(feature = "futures_api", since = "1.36.0")]
library/std/src/lib.rs:564:    #[stable(feature = "futures_api", since = "1.36.0")]
library/std/src/lib.rs:568:    #[stable(feature = "wake_trait", since = "1.51.0")]
library/std/src/lib.rs:573:#[stable(feature = "simd_arch", since = "1.27.0")]
library/std/src/lib.rs:575:    #[stable(feature = "simd_arch", since = "1.27.0")]
library/std/src/lib.rs:583:    #[stable(feature = "simd_aarch64", since = "1.60.0")]
library/std/src/lib.rs:584:    pub use std_detect::is_aarch64_feature_detected;
library/std/src/lib.rs:585:    #[stable(feature = "simd_x86", since = "1.27.0")]
library/std/src/lib.rs:586:    pub use std_detect::is_x86_feature_detected;
library/std/src/lib.rs:587:    #[unstable(feature = "stdsimd", issue = "48556")]
library/std/src/lib.rs:589:        is_arm_feature_detected, is_mips64_feature_detected, is_mips_feature_detected,
library/std/src/lib.rs:590:        is_powerpc64_feature_detected, is_powerpc_feature_detected, is_riscv_feature_detected,
library/std/src/lib.rs:595:#[stable(feature = "simd_x86", since = "1.27.0")]
library/std/src/lib.rs:596:pub use std_detect::is_x86_feature_detected;
library/std/src/lib.rs:612:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/lib.rs:620:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/std/src/lib.rs:629:    feature = "concat_bytes",
library/std/src/lib.rs:635:#[stable(feature = "core_primitive", since = "1.43.0")]
library/std/src/lib.rs:649:// enabled. The use of #![feature(restricted_std)] in rustc-std-workspace-std
library/std/src/lib.rs:650:// is unconditional, so the unstable feature needs to be defined somewhere.
library/std/src/lib.rs:651:#[unstable(feature = "restricted_std", issue = "none")]
library/std/src/lib.rs:658:    #[unstable(feature = "sealed", issue = "none")]
library/std/src/lib.rs:675:    /// times, given that even under a perma-unstable feature, I don't think we
library/std/src/io/copy.rs:59:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:15:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:37:#[rustc_const_unstable(feature = "const_io_structs", issue = "78812")]
library/std/src/io/util.rs:42:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:64:#[stable(feature = "empty_seek", since = "1.51.0")]
library/std/src/io/util.rs:79:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/util.rs:97:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:117:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:118:#[rustc_const_unstable(feature = "const_io_structs", issue = "78812")]
library/std/src/io/util.rs:123:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:176:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/util.rs:187:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:209:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:210:#[rustc_const_unstable(feature = "const_io_structs", issue = "78812")]
library/std/src/io/util.rs:215:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/util.rs:239:#[stable(feature = "write_mt", since = "1.48.0")]
library/std/src/io/util.rs:263:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/error.rs:53:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:66:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:71:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:78:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:104:#[unstable(feature = "raw_os_error_ty", issue = "107792")]
library/std/src/io/error.rs:176:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:181:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:184:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:187:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:190:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:193:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:196:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:199:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:202:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:206:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:210:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:213:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:216:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:219:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:223:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:229:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:234:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:237:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:240:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:249:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:255:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:258:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:270:    #[stable(feature = "io_invalid_data", since = "1.2.0")]
library/std/src/io/error.rs:273:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:284:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:289:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:295:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:298:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:305:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:308:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:314:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:320:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:323:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:328:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:333:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:339:    #[unstable(feature = "io_error_more", issue = "86442")]
library/std/src/io/error.rs:344:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:350:    #[stable(feature = "unsupported_error", since = "1.53.0")]
library/std/src/io/error.rs:362:    #[stable(feature = "read_exact", since = "1.6.0")]
library/std/src/io/error.rs:367:    #[stable(feature = "out_of_memory_error", since = "1.54.0")]
library/std/src/io/error.rs:384:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:392:    #[unstable(feature = "io_error_uncategorized", issue = "none")]
library/std/src/io/error.rs:448:#[stable(feature = "io_errorkind_display", since = "1.60.0")]
library/std/src/io/error.rs:466:#[stable(feature = "io_error_from_errorkind", since = "1.14.0")]
library/std/src/io/error.rs:513:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:530:    /// #![feature(io_error_other)]
library/std/src/io/error.rs:540:    #[unstable(feature = "io_error_other", issue = "91946")]
library/std/src/io/error.rs:586:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:620:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:656:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:695:    #[stable(feature = "io_error_inner", since = "1.3.0")]
library/std/src/io/error.rs:769:    #[stable(feature = "io_error_inner", since = "1.3.0")]
library/std/src/io/error.rs:808:    #[stable(feature = "io_error_inner", since = "1.3.0")]
library/std/src/io/error.rs:833:    /// #![feature(io_error_downcast)]
library/std/src/io/error.rs:861:    #[unstable(feature = "io_error_downcast", issue = "99262")]
library/std/src/io/error.rs:908:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:941:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/error.rs:956:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:192://! features. For example, we can use three of these functions to copy everything
library/std/src/io/mod.rs:249:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:263:#[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/mod.rs:265:#[unstable(feature = "raw_os_error_ty", issue = "107792")]
library/std/src/io/mod.rs:268:#[unstable(feature = "internal_output_capture", issue = "none")]
library/std/src/io/mod.rs:271:#[stable(feature = "is_terminal", since = "1.70.0")]
library/std/src/io/mod.rs:273:#[unstable(feature = "print_internals", issue = "none")]
library/std/src/io/mod.rs:275:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:285:#[unstable(feature = "read_buf", issue = "78485")]
library/std/src/io/mod.rs:565:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:649:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:661:    #[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:674:    #[unstable(feature = "can_vector", issue = "69941")]
library/std/src/io/mod.rs:725:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:768:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:823:    #[stable(feature = "read_exact", since = "1.6.0")]
library/std/src/io/mod.rs:834:    #[unstable(feature = "read_buf", issue = "78485")]
library/std/src/io/mod.rs:857:    #[unstable(feature = "read_buf", issue = "78485")]
library/std/src/io/mod.rs:909:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:952:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:990:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1029:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1082:#[stable(feature = "io_read_to_string", since = "1.65.0")]
library/std/src/io/mod.rs:1094:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1098:#[stable(feature = "iovec-send-sync", since = "1.44.0")]
library/std/src/io/mod.rs:1101:#[stable(feature = "iovec-send-sync", since = "1.44.0")]
library/std/src/io/mod.rs:1104:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1117:    #[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1135:    /// #![feature(io_slice_advance)]
library/std/src/io/mod.rs:1147:    #[unstable(feature = "io_slice_advance", issue = "62726")]
library/std/src/io/mod.rs:1169:    /// #![feature(io_slice_advance)]
library/std/src/io/mod.rs:1188:    #[unstable(feature = "io_slice_advance", issue = "62726")]
library/std/src/io/mod.rs:1213:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1223:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1236:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1241:#[stable(feature = "iovec-send-sync", since = "1.44.0")]
library/std/src/io/mod.rs:1244:#[stable(feature = "iovec-send-sync", since = "1.44.0")]
library/std/src/io/mod.rs:1247:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1260:    #[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1279:    /// #![feature(io_slice_advance)]
library/std/src/io/mod.rs:1291:    #[unstable(feature = "io_slice_advance", issue = "62726")]
library/std/src/io/mod.rs:1313:    /// #![feature(io_slice_advance)]
library/std/src/io/mod.rs:1331:    #[unstable(feature = "io_slice_advance", issue = "62726")]
library/std/src/io/mod.rs:1356:#[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1411:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1460:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1494:    #[stable(feature = "iovec", since = "1.36.0")]
library/std/src/io/mod.rs:1509:    #[unstable(feature = "can_vector", issue = "69941")]
library/std/src/io/mod.rs:1537:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1571:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1618:    /// #![feature(write_all_vectored)]
library/std/src/io/mod.rs:1636:    #[unstable(feature = "write_all_vectored", issue = "70436")]
library/std/src/io/mod.rs:1692:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1748:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1783:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1799:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1830:    #[stable(feature = "seek_rewind", since = "1.55.0")]
library/std/src/io/mod.rs:1856:    /// #![feature(seek_stream_len)]
library/std/src/io/mod.rs:1870:    #[unstable(feature = "seek_stream_len", issue = "59359")]
library/std/src/io/mod.rs:1907:    #[stable(feature = "seek_convenience", since = "1.51.0")]
library/std/src/io/mod.rs:1917:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1920:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1921:    Start(#[stable(feature = "rust1", since = "1.0.0")] u64),
library/std/src/io/mod.rs:1928:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1929:    End(#[stable(feature = "rust1", since = "1.0.0")] i64),
library/std/src/io/mod.rs:1936:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:1937:    Current(#[stable(feature = "rust1", since = "1.0.0")] i64),
library/std/src/io/mod.rs:2015:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2056:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2078:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2093:    /// #![feature(buf_read_has_data_left)]
library/std/src/io/mod.rs:2107:    #[unstable(feature = "buf_read_has_data_left", reason = "recently added", issue = "86423")]
library/std/src/io/mod.rs:2166:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2234:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2272:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2309:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2324:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2351:    #[stable(feature = "more_io_inner_methods", since = "1.20.0")]
library/std/src/io/mod.rs:2374:    #[stable(feature = "more_io_inner_methods", since = "1.20.0")]
library/std/src/io/mod.rs:2401:    #[stable(feature = "more_io_inner_methods", since = "1.20.0")]
library/std/src/io/mod.rs:2407:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2430:#[stable(feature = "chain_bufread", since = "1.9.0")]
library/std/src/io/mod.rs:2470:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2503:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2531:    #[stable(feature = "take_set_limit", since = "1.27.0")]
library/std/src/io/mod.rs:2556:    #[stable(feature = "io_take_into_inner", since = "1.15.0")]
library/std/src/io/mod.rs:2581:    #[stable(feature = "more_io_inner_methods", since = "1.20.0")]
library/std/src/io/mod.rs:2610:    #[stable(feature = "more_io_inner_methods", since = "1.20.0")]
library/std/src/io/mod.rs:2616:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2679:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2721:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2727:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2813:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2820:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2845:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/mod.rs:2851:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:17:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:86:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:98:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:121:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:158:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:190:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:202:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:232:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:324:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:346:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:392:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/impls.rs:428:#[stable(feature = "vecdeque_read_write", since = "1.63.0")]
library/std/src/io/impls.rs:479:#[stable(feature = "vecdeque_read_write", since = "1.63.0")]
library/std/src/io/cursor.rs:72:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:95:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:96:    #[rustc_const_unstable(feature = "const_io_structs", issue = "78812")]
library/std/src/io/cursor.rs:114:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:132:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:133:    #[rustc_const_unstable(feature = "const_io_structs", issue = "78812")]
library/std/src/io/cursor.rs:154:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:178:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:179:    #[rustc_const_unstable(feature = "const_io_structs", issue = "78812")]
library/std/src/io/cursor.rs:201:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:216:    /// #![feature(cursor_remaining)]
library/std/src/io/cursor.rs:232:    #[unstable(feature = "cursor_remaining", issue = "86369")]
library/std/src/io/cursor.rs:243:    /// #![feature(cursor_remaining)]
library/std/src/io/cursor.rs:257:    #[unstable(feature = "cursor_remaining", issue = "86369")]
library/std/src/io/cursor.rs:263:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:280:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:315:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:360:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:522:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:545:#[stable(feature = "cursor_mut_vec", since = "1.25.0")]
library/std/src/io/cursor.rs:569:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/cursor.rs:593:#[stable(feature = "cursor_box_slice", since = "1.5.0")]
library/std/src/io/cursor.rs:619:#[stable(feature = "cursor_array", since = "1.61.0")]
library/std/src/io/stdio.rs:64:#[unstable(feature = "libstd_sys_internals", issue = "none")]
library/std/src/io/stdio.rs:78:#[unstable(feature = "libstd_sys_internals", issue = "none")]
library/std/src/io/stdio.rs:90:#[unstable(feature = "libstd_sys_internals", issue = "none")]
library/std/src/io/stdio.rs:231:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:269:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:321:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:353:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:386:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:407:    #[stable(feature = "stdin_forwarders", since = "1.62.0")]
library/std/src/io/stdio.rs:413:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/stdio.rs:420:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:454:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:486:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:505:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/stdio.rs:534:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:559:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:613:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:662:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:671:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/stdio.rs:678:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:704:#[stable(feature = "write_mt", since = "1.48.0")]
library/std/src/io/stdio.rs:730:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:753:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/stdio.rs:777:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:799:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:849:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:881:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:890:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/stdio.rs:897:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:923:#[stable(feature = "write_mt", since = "1.48.0")]
library/std/src/io/stdio.rs:949:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/stdio.rs:972:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/io/stdio.rs:981:    feature = "internal_output_capture",
library/std/src/io/stdio.rs:1050:#[stable(feature = "is_terminal", since = "1.70.0")]
library/std/src/io/stdio.rs:1066:    #[stable(feature = "is_terminal", since = "1.70.0")]
library/std/src/io/stdio.rs:1072:        #[unstable(feature = "sealed", issue = "none")]
library/std/src/io/stdio.rs:1075:        #[stable(feature = "is_terminal", since = "1.70.0")]
library/std/src/io/stdio.rs:1088:    feature = "print_internals",
library/std/src/io/stdio.rs:1099:    feature = "print_internals",
library/std/src/io/readbuf.rs:1:#![unstable(feature = "read_buf", issue = "78485")]
library/std/src/io/prelude.rs:11:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/prelude.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:69:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:95:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:113:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:137:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:167:    #[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/bufwriter.rs:275:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:295:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:313:    #[stable(feature = "bufreader_buffer", since = "1.37.0")]
library/std/src/io/buffered/bufwriter.rs:345:    #[stable(feature = "buffered_io_capacity", since = "1.46.0")]
library/std/src/io/buffered/bufwriter.rs:448:#[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/bufwriter.rs:482:    #[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/bufwriter.rs:491:#[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/bufwriter.rs:499:#[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/bufwriter.rs:506:#[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/bufwriter.rs:515:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:644:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:657:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufwriter.rs:668:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:49:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:71:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:92:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:117:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:140:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:168:    #[stable(feature = "bufreader_buffer", since = "1.37.0")]
library/std/src/io/buffered/bufreader.rs:191:    #[stable(feature = "buffered_io_capacity", since = "1.46.0")]
library/std/src/io/buffered/bufreader.rs:215:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:243:    #[stable(feature = "bufreader_seek_relative", since = "1.53.0")]
library/std/src/io/buffered/bufreader.rs:262:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:376:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:387:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/bufreader.rs:403:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:66:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:86:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:107:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:132:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:160:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:183:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:189:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/linewriter.rs:220:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:15:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:19:#[stable(feature = "bufwriter_into_parts", since = "1.56.0")]
library/std/src/io/buffered/mod.rs:47:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:92:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:127:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:147:    #[stable(feature = "io_into_inner_error_parts", since = "1.55.0")]
library/std/src/io/buffered/mod.rs:170:    #[stable(feature = "io_into_inner_error_parts", since = "1.55.0")]
library/std/src/io/buffered/mod.rs:176:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:183:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/io/buffered/mod.rs:191:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/time.rs:32:#![stable(feature = "time", since = "1.3.0")]
library/std/src/time.rs:43:#[stable(feature = "time", since = "1.3.0")]
library/std/src/time.rs:46:#[stable(feature = "duration_checked_float", since = "1.66.0")]
library/std/src/time.rs:153:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:238:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:260:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:274:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:303:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:329:    #[stable(feature = "checked_duration_since", since = "1.39.0")]
library/std/src/time.rs:350:    #[stable(feature = "checked_duration_since", since = "1.39.0")]
library/std/src/time.rs:377:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:385:    #[stable(feature = "time_checked_add", since = "1.34.0")]
library/std/src/time.rs:393:    #[stable(feature = "time_checked_add", since = "1.34.0")]
library/std/src/time.rs:399:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:412:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/std/src/time.rs:419:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:428:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/std/src/time.rs:435:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:454:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:481:    #[stable(feature = "assoc_unix_epoch", since = "1.28.0")]
library/std/src/time.rs:494:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:523:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:553:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:561:    #[stable(feature = "time_checked_add", since = "1.34.0")]
library/std/src/time.rs:569:    #[stable(feature = "time_checked_add", since = "1.34.0")]
library/std/src/time.rs:575:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:588:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/std/src/time.rs:595:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:604:#[stable(feature = "time_augmented_assignment", since = "1.9.0")]
library/std/src/time.rs:611:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:637:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:663:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:669:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/time.rs:677:#[stable(feature = "time2", since = "1.8.0")]
library/std/src/path.rs:67:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:142:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:148:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:149:    Verbatim(#[stable(feature = "rust1", since = "1.0.0")] &'a OsStr),
library/std/src/path.rs:156:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:158:        #[stable(feature = "rust1", since = "1.0.0")] &'a OsStr,
library/std/src/path.rs:159:        #[stable(feature = "rust1", since = "1.0.0")] &'a OsStr,
library/std/src/path.rs:166:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:167:    VerbatimDisk(#[stable(feature = "rust1", since = "1.0.0")] u8),
library/std/src/path.rs:173:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:174:    DeviceNS(#[stable(feature = "rust1", since = "1.0.0")] &'a OsStr),
library/std/src/path.rs:180:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:182:        #[stable(feature = "rust1", since = "1.0.0")] &'a OsStr,
library/std/src/path.rs:183:        #[stable(feature = "rust1", since = "1.0.0")] &'a OsStr,
library/std/src/path.rs:187:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:188:    Disk(#[stable(feature = "rust1", since = "1.0.0")] u8),
library/std/src/path.rs:227:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:260:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:268:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:274:#[stable(feature = "main_separator_str", since = "1.68.0")]
library/std/src/path.rs:417:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:432:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:440:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:448:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:456:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:464:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:472:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:502:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:510:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:511:    Prefix(#[stable(feature = "rust1", since = "1.0.0")] PrefixComponent<'a>),
library/std/src/path.rs:516:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:520:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:524:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:531:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:532:    Normal(#[stable(feature = "rust1", since = "1.0.0")] &'a OsStr),
library/std/src/path.rs:548:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:560:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:568:#[stable(feature = "path_component_asref", since = "1.25.0")]
library/std/src/path.rs:596:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:623:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:628:#[stable(feature = "path_components_debug", since = "1.13.0")]
library/std/src/path.rs:694:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:796:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:804:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:812:#[stable(feature = "path_iter_debug", since = "1.13.0")]
library/std/src/path.rs:841:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:849:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:857:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:865:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:875:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:883:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/path.rs:886:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:939:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:986:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/path.rs:989:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1016:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1019:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1027:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1087:#[stable(feature = "path_ancestors", since = "1.28.0")]
library/std/src/path.rs:1092:#[stable(feature = "path_ancestors", since = "1.28.0")]
library/std/src/path.rs:1104:#[stable(feature = "path_ancestors", since = "1.28.0")]
library/std/src/path.rs:1160:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1186:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1211:    #[stable(feature = "path_buf_capacity", since = "1.44.0")]
library/std/src/path.rs:1228:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1272:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1367:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1408:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1472:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1516:    #[stable(feature = "path_as_mut_os_str", since = "1.70.0")]
library/std/src/path.rs:1533:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1541:    #[stable(feature = "into_boxed_path", since = "1.20.0")]
library/std/src/path.rs:1552:    #[stable(feature = "path_buf_capacity", since = "1.44.0")]
library/std/src/path.rs:1562:    #[stable(feature = "path_buf_capacity", since = "1.44.0")]
library/std/src/path.rs:1571:    #[stable(feature = "path_buf_capacity", since = "1.44.0")]
library/std/src/path.rs:1580:    #[stable(feature = "try_reserve_2", since = "1.63.0")]
library/std/src/path.rs:1589:    #[stable(feature = "path_buf_capacity", since = "1.44.0")]
library/std/src/path.rs:1598:    #[stable(feature = "try_reserve_2", since = "1.63.0")]
library/std/src/path.rs:1607:    #[stable(feature = "path_buf_capacity", since = "1.44.0")]
library/std/src/path.rs:1616:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/std/src/path.rs:1623:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1636:#[stable(feature = "box_from_path", since = "1.17.0")]
library/std/src/path.rs:1648:#[stable(feature = "box_from_cow", since = "1.45.0")]
library/std/src/path.rs:1662:#[stable(feature = "path_buf_from_box", since = "1.18.0")]
library/std/src/path.rs:1673:#[stable(feature = "box_from_path_buf", since = "1.20.0")]
library/std/src/path.rs:1685:#[stable(feature = "more_box_slice_clone", since = "1.29.0")]
library/std/src/path.rs:1693:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1704:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1715:#[stable(feature = "from_path_buf_for_os_string", since = "1.14.0")]
library/std/src/path.rs:1726:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1737:#[stable(feature = "path_from_str", since = "1.32.0")]
library/std/src/path.rs:1747:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1756:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1768:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1775:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1784:#[stable(feature = "path_buf_deref_mut", since = "1.68.0")]
library/std/src/path.rs:1792:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1800:#[stable(feature = "default_for_pathbuf", since = "1.17.0")]
library/std/src/path.rs:1808:#[stable(feature = "cow_from_path", since = "1.6.0")]
library/std/src/path.rs:1820:#[stable(feature = "cow_from_path", since = "1.6.0")]
library/std/src/path.rs:1832:#[stable(feature = "cow_from_pathbuf_ref", since = "1.28.0")]
library/std/src/path.rs:1844:#[stable(feature = "pathbuf_from_cow_path", since = "1.28.0")]
library/std/src/path.rs:1855:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/path.rs:1866:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/path.rs:1876:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/path.rs:1887:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/path.rs:1897:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1910:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1918:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1925:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1928:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1936:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1944:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:1985:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2003:#[stable(since = "1.7.0", feature = "strip_prefix")]
library/std/src/path.rs:2039:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2060:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2081:    #[stable(feature = "path_as_mut_os_str", since = "1.70.0")]
library/std/src/path.rs:2104:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2132:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2153:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2176:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2201:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2228:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2263:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2305:    #[stable(feature = "path_ancestors", since = "1.28.0")]
library/std/src/path.rs:2331:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2369:    #[stable(since = "1.7.0", feature = "path_strip_prefix")]
library/std/src/path.rs:2405:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2433:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2469:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2490:    /// # #![feature(path_file_prefix)]
library/std/src/path.rs:2503:    #[unstable(feature = "path_file_prefix", issue = "86319")]
library/std/src/path.rs:2528:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2548:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2576:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2605:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2649:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2682:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2705:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2729:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2748:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2767:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2785:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2810:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2840:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2871:    #[stable(feature = "path_try_exists", since = "1.63.0")]
library/std/src/path.rs:2904:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2931:    #[stable(feature = "path_ext", since = "1.5.0")]
library/std/src/path.rs:2964:    #[stable(feature = "is_symlink", since = "1.58.0")]
library/std/src/path.rs:2971:    #[stable(feature = "into_boxed_path", since = "1.20.0")]
library/std/src/path.rs:2980:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:2988:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3015:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3020:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3027:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3034:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3042:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3093:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3096:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3104:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3112:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3120:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3128:#[stable(feature = "cow_os_str_as_ref_path", since = "1.8.0")]
library/std/src/path.rs:3136:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3144:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3152:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3160:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/path.rs:3168:#[stable(feature = "path_into_iter", since = "1.6.0")]
library/std/src/path.rs:3178:#[stable(feature = "path_into_iter", since = "1.6.0")]
library/std/src/path.rs:3190:        #[stable(feature = "partialeq_path", since = "1.6.0")]
library/std/src/path.rs:3198:        #[stable(feature = "partialeq_path", since = "1.6.0")]
library/std/src/path.rs:3206:        #[stable(feature = "cmp_path", since = "1.8.0")]
library/std/src/path.rs:3214:        #[stable(feature = "cmp_path", since = "1.8.0")]
library/std/src/path.rs:3232:        #[stable(feature = "cmp_path", since = "1.8.0")]
library/std/src/path.rs:3240:        #[stable(feature = "cmp_path", since = "1.8.0")]
library/std/src/path.rs:3248:        #[stable(feature = "cmp_path", since = "1.8.0")]
library/std/src/path.rs:3256:        #[stable(feature = "cmp_path", since = "1.8.0")]
library/std/src/path.rs:3281:#[stable(since = "1.7.0", feature = "strip_prefix")]
library/std/src/path.rs:3289:#[stable(since = "1.7.0", feature = "strip_prefix")]
library/std/src/path.rs:3313:/// #![feature(absolute_path)]
library/std/src/path.rs:3338:/// #![feature(absolute_path)]
library/std/src/path.rs:3363:#[unstable(feature = "absolute_path", issue = "92750")]
library/std/src/sys/hermit/time.rs:108:    #[stable(feature = "time2", since = "1.8.0")]
library/std/src/sys/hermit/thread_local_dtor.rs:2:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/hermit/alloc.rs:5:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/hermit/fd.rs:1:#![unstable(reason = "not public", issue = "none", feature = "fd")]
library/std/src/sys/wasm/mod.rs:51:    if #[cfg(target_feature = "atomics")] {
library/std/src/sys/wasm/alloc.rs:23:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/wasm/alloc.rs:58:#[cfg(target_feature = "atomics")]
library/std/src/sys/wasm/alloc.rs:162:#[cfg(not(target_feature = "atomics"))]
library/std/src/sys/unsupported/locks/condvar.rs:8:    #[rustc_const_stable(feature = "const_locks", since = "1.63.0")]
library/std/src/sys/unsupported/locks/rwlock.rs:13:    #[rustc_const_stable(feature = "const_locks", since = "1.63.0")]
library/std/src/sys/unsupported/locks/mutex.rs:13:    #[rustc_const_stable(feature = "const_locks", since = "1.63.0")]
library/std/src/sys/unsupported/thread_local_dtor.rs:1:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/unsupported/alloc.rs:4:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/unsupported/once.rs:38:    #[rustc_const_stable(feature = "const_once_new", since = "1.32.0")]
library/std/src/sys/solid/thread_local_dtor.rs:2:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/solid/alloc.rs:6:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/unix/locks/mod.rs:5:        all(target_os = "emscripten", target_feature = "atomics"),
library/std/src/sys/unix/thread_parking/mod.rs:6:    all(target_os = "emscripten", target_feature = "atomics"),
library/std/src/sys/unix/futex.rs:4:    all(target_os = "emscripten", target_feature = "atomics"),
library/std/src/sys/unix/thread_local_dtor.rs:2:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/unix/mod.rs:359:            cfg(target_feature = "crt-static"))]
library/std/src/sys/unix/mod.rs:360:        #[link(name = "dl", cfg(not(target_feature = "crt-static")))]
library/std/src/sys/unix/mod.rs:361:        #[link(name = "log", cfg(not(target_feature = "crt-static")))]
library/std/src/sys/unix/alloc.rs:5:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/unix/fd.rs:1:#![unstable(reason = "not public", issue = "none", feature = "fd")]
library/std/src/sys/unix/kernel_copy.rs:650:    // Android builds use feature level 14, but the libc wrapper for splice is
library/std/src/sys/unix/kernel_copy.rs:651:    // gated on feature level 21+, so we have to invoke the syscall directly.
library/std/src/sys/unix/process/process_unix.rs:1003:#[unstable(feature = "linux_pidfd", issue = "82971")]
library/std/src/sys/common/thread_local/static_local.rs:7:#[unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/common/thread_local/mod.rs:1:#![unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
library/std/src/sys/common/thread_local/mod.rs:9:    if #[cfg(all(target_family = "wasm", not(target_feature = "atomics")))] {
library/std/src/sys/common/thread_local/fast_local.rs:9:#[unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/common/thread_local/os_local.rs:9:#[unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/common/thread_local/os_local.rs:113:    #[rustc_const_unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/sgx/abi/thread.rs:7:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:3:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:26:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:41:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:45:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:54:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:64:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:80:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:91:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:102:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:127:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:137:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:147:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:154:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:163:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:171:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:193:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:209:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:225:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:240:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/raw.rs:254:        #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:18:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:40:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:54:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:74:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:80:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:91:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:104:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:120:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:142:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:149:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:155:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:181:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:245:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:251:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:258:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:263:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:296:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:305:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/mod.rs:318:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:44:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:47:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:49:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:51:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:53:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:55:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:57:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:59:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:63:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:127:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:139:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:176:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:183:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:204:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:267:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:278:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:521:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:604:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:619:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:721:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:724:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:737:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:740:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:750:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:762:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:772:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:785:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:788:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:809:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/usercalls/alloc.rs:828:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/mod.rs:7:// runtime features
library/std/src/sys/sgx/abi/mod.rs:11:// library features
library/std/src/sys/sgx/abi/mem.rs:36:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/mem.rs:53:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/abi/mem.rs:76:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/sys/sgx/alloc.rs:59:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/wasi/os.rs:29:    if #[cfg(target_feature = "atomics")] {
library/std/src/sys/wasi/mod.rs:55:    if #[cfg(not(target_feature = "atomics"))] {
library/std/src/sys/windows/thread_local_key.rs:187:// gist of it is that this is leveraging a feature of Microsoft's PE format
library/std/src/sys/windows/thread_local_key.rs:192:// So after all that, we use the compiler's #[link_section] feature to place
library/std/src/sys/windows/handle.rs:1:#![unstable(issue = "none", feature = "windows_handle")]
library/std/src/sys/windows/net.rs:1:#![unstable(issue = "none", feature = "windows_net")]
library/std/src/sys/windows/net.rs:441:#[unstable(reason = "not public", issue = "none", feature = "fd_read")]
library/std/src/sys/windows/thread_local_dtor.rs:4:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/sys/windows/mod.rs:322:            } else if #[cfg(all(target_arch = "arm", target_feature = "thumb-mode"))] {
library/std/src/sys/windows/alloc.rs:191:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/sys/windows/stdio.rs:1:#![unstable(issue = "none", feature = "windows_stdio")]
library/std/src/sys/windows/fs.rs:811:    // win32 functions. It is however a fundamental feature of the NT kernel.
library/std/src/sys/windows/process.rs:1:#![unstable(feature = "process_internals", issue = "none")]
library/std/src/sys/windows/args.rs:27:/// See the `const_option` feature (#67441).
library/std/src/sys/windows/c/windows_sys.lst:515:Windows.Win32.Foundation.ERROR_DEVICE_FEATURE_NOT_SUPPORTED
library/std/src/sys/windows/c/windows_sys.lst:1839:Windows.Win32.Foundation.ERROR_UNKNOWN_FEATURE
library/std/src/sys/windows/c/windows_sys.rs:1625:pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED: WIN32_ERROR = 316u32;
library/std/src/sys/windows/c/windows_sys.rs:2950:pub const ERROR_UNKNOWN_FEATURE: WIN32_ERROR = 1606u32;
library/std/src/sys/windows/c.rs:5:#![unstable(issue = "none", feature = "windows_c")]
library/std/src/alloc.rs:57:#![stable(feature = "alloc_module", since = "1.28.0")]
library/std/src/alloc.rs:64:#[stable(feature = "alloc_module", since = "1.28.0")]
library/std/src/alloc.rs:129:#[stable(feature = "alloc_system_type", since = "1.28.0")]
library/std/src/alloc.rs:202:#[unstable(feature = "allocator_api", issue = "32838")]
library/std/src/alloc.rs:306:/// #![feature(alloc_error_hook)]
library/std/src/alloc.rs:316:#[unstable(feature = "alloc_error_hook", issue = "51245")]
library/std/src/alloc.rs:326:#[unstable(feature = "alloc_error_hook", issue = "51245")]
library/std/src/alloc.rs:350:#[unstable(feature = "alloc_internals", issue = "none")]
library/std/src/alloc.rs:362:#[unstable(feature = "alloc_internals", issue = "none")]
library/std/src/backtrace.rs:61:#![stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:107:#[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:115:#[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:121:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:125:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:129:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:151:#[unstable(feature = "backtrace_frames", issue = "79676")]
library/std/src/backtrace.rs:176:#[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:203:#[unstable(feature = "backtrace_frames", issue = "79676")]
library/std/src/backtrace.rs:292:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:311:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:319:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:320:    #[rustc_const_stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:363:    #[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/backtrace.rs:377:    #[unstable(feature = "backtrace_frames", issue = "79676")]
library/std/src/backtrace.rs:383:#[stable(feature = "backtrace", since = "1.65.0")]
library/std/src/ffi/os_str.rs:90:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:96:#[unstable(feature = "sealed", issue = "none")]
library/std/src/ffi/os_str.rs:112:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:124:#[unstable(feature = "sealed", issue = "none")]
library/std/src/ffi/os_str.rs:137:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:155:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:175:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:192:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:220:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:240:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:258:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:282:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:321:    #[stable(feature = "try_reserve_2", since = "1.63.0")]
library/std/src/ffi/os_str.rs:348:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:392:    #[stable(feature = "try_reserve_2", since = "1.63.0")]
library/std/src/ffi/os_str.rs:415:    #[stable(feature = "osstring_shrink_to_fit", since = "1.19.0")]
library/std/src/ffi/os_str.rs:446:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/std/src/ffi/os_str.rs:463:    #[stable(feature = "into_boxed_os_str", since = "1.20.0")]
library/std/src/ffi/os_str.rs:470:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:481:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:490:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:500:#[stable(feature = "mut_osstr", since = "1.44.0")]
library/std/src/ffi/os_str.rs:508:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:518:#[stable(feature = "mut_osstr", since = "1.44.0")]
library/std/src/ffi/os_str.rs:526:#[stable(feature = "osstring_default", since = "1.9.0")]
library/std/src/ffi/os_str.rs:535:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:548:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:555:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:563:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:571:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:579:#[stable(feature = "os_str_str_ref_eq", since = "1.29.0")]
library/std/src/ffi/os_str.rs:587:#[stable(feature = "os_str_str_ref_eq", since = "1.29.0")]
library/std/src/ffi/os_str.rs:595:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:598:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:622:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:630:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:638:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:646:#[stable(feature = "os_string_fmt_write", since = "1.64.0")]
library/std/src/ffi/os_str.rs:665:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:693:    /// #![feature(os_str_bytes)]
library/std/src/ffi/os_str.rs:710:    #[unstable(feature = "os_str_bytes", issue = "111544")]
library/std/src/ffi/os_str.rs:743:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:796:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:815:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:836:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:870:    #[stable(feature = "osstring_simple_functions", since = "1.9.0")]
library/std/src/ffi/os_str.rs:878:    #[stable(feature = "into_boxed_os_str", since = "1.20.0")]
library/std/src/ffi/os_str.rs:900:    #[unstable(feature = "os_str_bytes", issue = "111544")]
library/std/src/ffi/os_str.rs:924:    #[stable(feature = "osstring_ascii", since = "1.53.0")]
library/std/src/ffi/os_str.rs:949:    #[stable(feature = "osstring_ascii", since = "1.53.0")]
library/std/src/ffi/os_str.rs:972:    #[stable(feature = "osstring_ascii", since = "1.53.0")]
library/std/src/ffi/os_str.rs:994:    #[stable(feature = "osstring_ascii", since = "1.53.0")]
library/std/src/ffi/os_str.rs:1012:    #[stable(feature = "osstring_ascii", since = "1.53.0")]
library/std/src/ffi/os_str.rs:1033:    #[stable(feature = "osstring_ascii", since = "1.53.0")]
library/std/src/ffi/os_str.rs:1039:#[stable(feature = "box_from_os_str", since = "1.17.0")]
library/std/src/ffi/os_str.rs:1049:#[stable(feature = "box_from_cow", since = "1.45.0")]
library/std/src/ffi/os_str.rs:1062:#[stable(feature = "os_string_from_box", since = "1.18.0")]
library/std/src/ffi/os_str.rs:1072:#[stable(feature = "box_from_os_string", since = "1.20.0")]
library/std/src/ffi/os_str.rs:1081:#[stable(feature = "more_box_slice_clone", since = "1.29.0")]
library/std/src/ffi/os_str.rs:1089:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/ffi/os_str.rs:1100:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/ffi/os_str.rs:1110:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/ffi/os_str.rs:1121:#[stable(feature = "shared_from_slice2", since = "1.24.0")]
library/std/src/ffi/os_str.rs:1131:#[stable(feature = "cow_from_osstr", since = "1.28.0")]
library/std/src/ffi/os_str.rs:1140:#[stable(feature = "cow_from_osstr", since = "1.28.0")]
library/std/src/ffi/os_str.rs:1149:#[stable(feature = "cow_from_osstr", since = "1.28.0")]
library/std/src/ffi/os_str.rs:1158:#[stable(feature = "osstring_from_cow_osstr", since = "1.28.0")]
library/std/src/ffi/os_str.rs:1168:#[stable(feature = "str_tryfrom_osstr_impl", since = "1.72.0")]
library/std/src/ffi/os_str.rs:1186:#[stable(feature = "box_default_extra", since = "1.17.0")]
library/std/src/ffi/os_str.rs:1195:#[stable(feature = "osstring_default", since = "1.9.0")]
library/std/src/ffi/os_str.rs:1204:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1212:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1220:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1228:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1231:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1255:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1266:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1276:        #[stable(feature = "cmp_os_str", since = "1.8.0")]
library/std/src/ffi/os_str.rs:1284:        #[stable(feature = "cmp_os_str", since = "1.8.0")]
library/std/src/ffi/os_str.rs:1292:        #[stable(feature = "cmp_os_str", since = "1.8.0")]
library/std/src/ffi/os_str.rs:1300:        #[stable(feature = "cmp_os_str", since = "1.8.0")]
library/std/src/ffi/os_str.rs:1316:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1324:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1337:#[unstable(feature = "slice_concat_ext", issue = "27747")]
library/std/src/ffi/os_str.rs:1354:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1362:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1375:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1383:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1391:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1399:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/os_str.rs:1428:#[stable(feature = "osstring_from_str", since = "1.45.0")]
library/std/src/ffi/os_str.rs:1438:#[stable(feature = "osstring_extend", since = "1.52.0")]
library/std/src/ffi/os_str.rs:1448:#[stable(feature = "osstring_extend", since = "1.52.0")]
library/std/src/ffi/os_str.rs:1458:#[stable(feature = "osstring_extend", since = "1.52.0")]
library/std/src/ffi/os_str.rs:1468:#[stable(feature = "osstring_extend", since = "1.52.0")]
library/std/src/ffi/os_str.rs:1487:#[stable(feature = "osstring_extend", since = "1.52.0")]
library/std/src/ffi/os_str.rs:1499:#[stable(feature = "osstring_extend", since = "1.52.0")]
library/std/src/ffi/mod.rs:155:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/mod.rs:157:#[stable(feature = "alloc_c_string", since = "1.64.0")]
library/std/src/ffi/mod.rs:159:#[stable(feature = "core_c_str", since = "1.64.0")]
library/std/src/ffi/mod.rs:162:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/ffi/mod.rs:165:#[stable(feature = "core_ffi_c", since = "1.64.0")]
library/std/src/ffi/mod.rs:171:#[stable(feature = "core_c_void", since = "1.30.0")]
library/std/src/ffi/mod.rs:175:    feature = "c_variadic",
library/std/src/ffi/mod.rs:176:    reason = "the `c_variadic` feature has not been properly tested on \
library/std/src/os/nto/raw.rs:1:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:13:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:18:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/nto/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:28:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:30:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:32:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:34:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:36:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/raw.rs:38:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/mod.rs:1:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/nto/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/nto/fs.rs:6:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/nto/fs.rs:8:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:10:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:12:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:14:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:16:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:18:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:20:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:22:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:24:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:26:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:28:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:30:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:32:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:34:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:36:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:38:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/nto/fs.rs:42:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:31:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:34:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/dragonfly/raw.rs:39:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:79:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/raw.rs:81:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/dragonfly/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/dragonfly/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/dragonfly/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/dragonfly/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/dragonfly/fs.rs:69:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:14:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:16:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:18:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:20:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:26:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:28:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:30:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:33:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/illumos/raw.rs:38:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:40:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:70:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/raw.rs:72:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/illumos/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/illumos/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/illumos/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/illumos/fs.rs:28:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:30:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:32:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:34:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:36:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:38:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:40:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:42:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:44:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:46:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:48:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:50:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:52:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:54:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:56:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:58:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/illumos/fs.rs:62:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:16:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/vita/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:26:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:28:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:30:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:32:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:35:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:40:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vita/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/vita/fs.rs:9:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/vita/fs.rs:11:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:13:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:15:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:17:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:19:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:21:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:23:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:25:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:27:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vita/fs.rs:45:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:32:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/macos/raw.rs:37:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:39:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:79:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/raw.rs:81:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/macos/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/macos/fs.rs:14:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/macos/fs.rs:22:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/macos/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:67:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:69:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:71:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:73:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/macos/fs.rs:77:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/macos/fs.rs:153:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/macos/fs.rs:156:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/macos/fs.rs:160:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/net/linux_ext/addr.rs:7:#[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/net/linux_ext/addr.rs:40:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/net/linux_ext/addr.rs:62:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/net/linux_ext/mod.rs:5:#[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/net/linux_ext/mod.rs:8:#[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/net/linux_ext/tcp.rs:13:#[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/net/linux_ext/tcp.rs:27:    /// #![feature(tcp_quickack)]
library/std/src/os/net/linux_ext/tcp.rs:35:    #[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/net/linux_ext/tcp.rs:45:    /// #![feature(tcp_quickack)]
library/std/src/os/net/linux_ext/tcp.rs:54:    #[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/net/linux_ext/tcp.rs:58:#[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/net/linux_ext/tcp.rs:61:#[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/redox/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:24:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/redox/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:31:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:33:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:35:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:37:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:42:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:70:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:72:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:74:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/raw.rs:76:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/redox/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/redox/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/redox/fs.rs:36:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/redox/fs.rs:60:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:77:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:94:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:111:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:128:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:145:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:162:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:182:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:199:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:218:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:235:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:254:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:271:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:290:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:307:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:324:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/redox/fs.rs:328:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:32:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/watchos/raw.rs:37:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:39:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:79:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/raw.rs:81:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/watchos/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/watchos/fs.rs:14:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/watchos/fs.rs:22:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/watchos/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:67:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:69:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:71:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/watchos/fs.rs:75:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/watchos/fs.rs:147:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/watchos/fs.rs:150:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/watchos/fs.rs:154:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/vxworks/raw.rs:2:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/vxworks/raw.rs:6:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/vxworks/raw.rs:9:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vxworks/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/vxworks/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/vxworks/fs.rs:8:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/vxworks/fs.rs:10:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:12:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:14:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:16:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:18:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:20:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:22:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:24:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:26:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:28:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:30:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:32:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:34:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:36:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:38:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:40:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:42:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/vxworks/fs.rs:46:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/fd/net.rs:8:        #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/net.rs:21:        #[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/fd/net.rs:37:        #[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/fd/owned.rs:3:#![stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:37:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:58:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:71:    #[rustc_const_stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:72:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:83:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:93:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:116:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:125:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:133:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:141:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:151:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:167:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:185:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:192:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:201:        #[unstable(feature = "sealed", issue = "none")]
library/std/src/os/fd/owned.rs:204:        #[stable(feature = "is_terminal", since = "1.70.0")]
library/std/src/os/fd/owned.rs:221:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:238:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:242:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:250:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:258:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:266:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:277:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:285:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:293:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:301:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:309:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:317:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:327:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:335:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:343:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:353:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:361:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:369:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:379:#[stable(feature = "asfd_ptrs", since = "1.64.0")]
library/std/src/os/fd/owned.rs:402:#[stable(feature = "asfd_rc", since = "1.69.0")]
library/std/src/os/fd/owned.rs:410:#[stable(feature = "asfd_ptrs", since = "1.64.0")]
library/std/src/os/fd/owned.rs:418:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:426:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:435:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:443:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:452:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/owned.rs:460:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/fd/raw.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/raw.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/raw.rs:27:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/raw.rs:37:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/raw.rs:64:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/raw.rs:71:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/fd/raw.rs:106:    #[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/fd/raw.rs:113:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/fd/raw.rs:138:    #[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/fd/raw.rs:142:#[stable(feature = "raw_fd_reflexive_traits", since = "1.48.0")]
library/std/src/os/fd/raw.rs:149:#[stable(feature = "raw_fd_reflexive_traits", since = "1.48.0")]
library/std/src/os/fd/raw.rs:156:#[stable(feature = "raw_fd_reflexive_traits", since = "1.48.0")]
library/std/src/os/fd/raw.rs:164:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fd/raw.rs:171:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/fd/raw.rs:178:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/fd/raw.rs:186:#[stable(feature = "asraw_stdio", since = "1.21.0")]
library/std/src/os/fd/raw.rs:194:#[stable(feature = "asraw_stdio", since = "1.21.0")]
library/std/src/os/fd/raw.rs:202:#[stable(feature = "asraw_stdio", since = "1.21.0")]
library/std/src/os/fd/raw.rs:210:#[stable(feature = "asraw_stdio_locks", since = "1.35.0")]
library/std/src/os/fd/raw.rs:218:#[stable(feature = "asraw_stdio_locks", since = "1.35.0")]
library/std/src/os/fd/raw.rs:226:#[stable(feature = "asraw_stdio_locks", since = "1.35.0")]
library/std/src/os/fd/raw.rs:249:#[stable(feature = "asrawfd_ptrs", since = "1.63.0")]
library/std/src/os/fd/raw.rs:257:#[stable(feature = "asfd_rc", since = "1.69.0")]
library/std/src/os/fd/raw.rs:265:#[stable(feature = "asrawfd_ptrs", since = "1.63.0")]
library/std/src/os/fd/mod.rs:6:#![stable(feature = "os_fd", since = "1.66.0")]
library/std/src/os/fd/mod.rs:22:#[stable(feature = "os_fd", since = "1.66.0")]
library/std/src/os/fd/mod.rs:24:#[stable(feature = "os_fd", since = "1.66.0")]
library/std/src/os/hermit/io/net.rs:8:        #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/hermit/io/net.rs:21:        #[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/hermit/io/net.rs:37:        #[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/hermit/io/mod.rs:1:#![stable(feature = "os_fd", since = "1.66.0")]
library/std/src/os/hermit/io/mod.rs:10:#[stable(feature = "os_fd", since = "1.66.0")]
library/std/src/os/hermit/io/mod.rs:12:#[stable(feature = "os_fd", since = "1.66.0")]
library/std/src/os/hermit/ffi.rs:35:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/hermit/ffi.rs:40:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/hermit/mod.rs:1:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/hermit/mod.rs:4:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/hermit/mod.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/hermit/mod.rs:16:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/fuchsia/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:20:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/fuchsia/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:31:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:33:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:35:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:37:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:39:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:48:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:50:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:52:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:54:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:56:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:58:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:60:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:62:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:64:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:66:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:68:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:70:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:72:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:74:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:76:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:78:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:80:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:82:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:84:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:94:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:97:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:99:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:102:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:105:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:107:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:110:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:113:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:115:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:120:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:122:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:124:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:126:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:128:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:130:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:132:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:134:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:136:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:138:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:140:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:142:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:144:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:146:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:148:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:150:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:152:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:154:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:156:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:158:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:172:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:174:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:176:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:178:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:180:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:182:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:187:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:189:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:191:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:193:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:195:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:197:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:199:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:201:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:203:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:205:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:207:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:209:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:211:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:213:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:215:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:217:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:219:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:221:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:223:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:225:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:234:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:236:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:238:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:240:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:242:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:244:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:249:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:251:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:253:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:255:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:257:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:259:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:261:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:263:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:265:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:267:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:269:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:271:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:273:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:275:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:277:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:279:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:281:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:283:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:285:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/raw.rs:292:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/fuchsia/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/fuchsia/fs.rs:9:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/fuchsia/fs.rs:11:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:13:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:15:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:17:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:19:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:21:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:23:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:25:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:27:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/fuchsia/fs.rs:45:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:16:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:18:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:20:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:26:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:28:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:30:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:32:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:35:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/netbsd/raw.rs:40:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:70:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:72:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:74:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:76:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:78:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/raw.rs:80:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/netbsd/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/netbsd/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/netbsd/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/netbsd/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:67:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/netbsd/fs.rs:71:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/solid/io.rs:4:#![unstable(feature = "solid_ext", issue = "none")]
library/std/src/os/solid/io.rs:53:#[stable(feature = "raw_fd_reflexive_traits", since = "1.48.0")]
library/std/src/os/solid/io.rs:60:#[stable(feature = "raw_fd_reflexive_traits", since = "1.48.0")]
library/std/src/os/solid/io.rs:67:#[stable(feature = "raw_fd_reflexive_traits", since = "1.48.0")]
library/std/src/os/solid/io.rs:77:        #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/solid/io.rs:90:        #[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/solid/io.rs:104:        #[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/solid/ffi.rs:35:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/solid/ffi.rs:40:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/solid/mod.rs:1:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/solid/mod.rs:9:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/solid/mod.rs:12:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/solid/mod.rs:15:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/haiku/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:17:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/haiku/raw.rs:20:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:26:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:28:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:30:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:32:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:34:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:39:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/haiku/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/haiku/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/haiku/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/haiku/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/haiku/fs.rs:67:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:32:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/ios/raw.rs:37:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:39:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:79:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/raw.rs:81:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/ios/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/ios/fs.rs:14:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/ios/fs.rs:22:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/ios/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:67:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:69:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:71:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/ios/fs.rs:75:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/ios/fs.rs:147:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/ios/fs.rs:150:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/ios/fs.rs:154:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/horizon/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:16:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/horizon/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:26:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:28:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:30:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:32:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:35:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:40:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/horizon/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/horizon/fs.rs:9:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/horizon/fs.rs:11:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:13:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:15:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:17:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:19:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:21:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:23:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:25:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:27:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/horizon/fs.rs:45:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:31:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:34:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/freebsd/raw.rs:39:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:79:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:81:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/raw.rs:84:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/freebsd/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/freebsd/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/freebsd/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/freebsd/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:67:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:69:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/freebsd/fs.rs:73:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/net/addr.rs:87:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/addr.rs:151:    #[stable(feature = "unix_socket_creation", since = "1.61.0")]
library/std/src/os/unix/net/addr.rs:189:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/addr.rs:224:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/addr.rs:248:#[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/addr.rs:253:#[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/addr.rs:286:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:27:#[unstable(feature = "peer_credentials_unix_socket", issue = "42839", reason = "unstable")]
library/std/src/os/unix/net/stream.rs:59:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:62:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:93:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:127:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/stream.rs:157:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:181:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:199:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:217:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:227:    /// #![feature(peer_credentials_unix_socket)]
library/std/src/os/unix/net/stream.rs:236:    #[unstable(feature = "peer_credentials_unix_socket", issue = "42839", reason = "unstable")]
library/std/src/os/unix/net/stream.rs:290:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:333:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:353:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:374:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:392:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:421:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/stream.rs:437:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/stream.rs:455:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/stream.rs:470:    /// #![feature(unix_set_mark)]
library/std/src/os/unix/net/stream.rs:480:    #[unstable(feature = "unix_set_mark", issue = "96467")]
library/std/src/os/unix/net/stream.rs:503:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:526:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:541:    /// #![feature(unix_socket_peek)]
library/std/src/os/unix/net/stream.rs:552:    #[unstable(feature = "unix_socket_peek", issue = "76923")]
library/std/src/os/unix/net/stream.rs:565:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/stream.rs:595:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/stream.rs:614:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/stream.rs:638:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/stream.rs:648:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:664:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:680:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:700:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:720:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:728:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:736:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/stream.rs:744:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/stream.rs:752:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/stream.rs:760:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/mod.rs:4:#![stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/mod.rs:16:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/mod.rs:19:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/mod.rs:21:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/mod.rs:23:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/mod.rs:25:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:40:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:43:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:71:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:109:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/listener.rs:150:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:176:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:194:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:218:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:242:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:278:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:284:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:292:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:300:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:308:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/listener.rs:316:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/listener.rs:324:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/listener.rs:332:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:374:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/listener.rs:379:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:54:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:57:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:88:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:121:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/datagram.rs:149:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:172:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:204:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:236:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/datagram.rs:265:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:283:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:307:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:357:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:378:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:391:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/datagram.rs:421:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/datagram.rs:441:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/datagram.rs:471:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/datagram.rs:498:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:535:    #[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/unix/net/datagram.rs:569:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:582:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/datagram.rs:606:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/datagram.rs:624:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/datagram.rs:648:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/datagram.rs:696:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:740:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:761:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:782:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:800:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:829:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/datagram.rs:845:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/datagram.rs:863:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/datagram.rs:878:    /// #![feature(unix_set_mark)]
library/std/src/os/unix/net/datagram.rs:888:    #[unstable(feature = "unix_set_mark", issue = "96467")]
library/std/src/os/unix/net/datagram.rs:908:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:929:    #[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:944:    /// #![feature(unix_socket_peek)]
library/std/src/os/unix/net/datagram.rs:955:    #[unstable(feature = "unix_socket_peek", issue = "76923")]
library/std/src/os/unix/net/datagram.rs:976:    /// #![feature(unix_socket_peek)]
library/std/src/os/unix/net/datagram.rs:987:    #[unstable(feature = "unix_socket_peek", issue = "76923")]
library/std/src/os/unix/net/datagram.rs:993:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:1001:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:1009:#[stable(feature = "unix_socket", since = "1.10.0")]
library/std/src/os/unix/net/datagram.rs:1017:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/datagram.rs:1025:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/datagram.rs:1033:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/net/ancillary.rs:200:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:206:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:211:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:216:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:226:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:233:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:240:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:246:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:253:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:259:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:266:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:277:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:293:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:300:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:306:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:313:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:319:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:326:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:337:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:351:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:358:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:364:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:371:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:377:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:384:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:393:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:396:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:412:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:419:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:423:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:427:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:437:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:449:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:455:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:530:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:536:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:574:/// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/ancillary.rs:599:#[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:614:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/ancillary.rs:619:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:626:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:633:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:640:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:646:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:656:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/ancillary.rs:675:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:690:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/ancillary.rs:708:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:734:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/net/ancillary.rs:756:    /// #![feature(unix_socket_ancillary_data)]
library/std/src/os/unix/net/ancillary.rs:793:    #[unstable(feature = "unix_socket_ancillary_data", issue = "76915")]
library/std/src/os/unix/thread.rs:5:#![stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/unix/thread.rs:12:#[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/unix/thread.rs:17:#[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/unix/thread.rs:20:    #[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/unix/thread.rs:28:    #[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/unix/thread.rs:32:#[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/unix/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/unix/raw.rs:13:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/unix/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/unix/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/unix/raw.rs:26:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/unix/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/unix/raw.rs:32:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/unix/io/mod.rs:21://! `io_safety` feature is stable, libraries will be encouraged to migrate,
library/std/src/os/unix/io/mod.rs:57://! ## `/proc/self/mem` and similar OS features
library/std/src/os/unix/io/mod.rs:78:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/io/mod.rs:80:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ucred.rs:12:#[unstable(feature = "peer_credentials_unix_socket", issue = "42839", reason = "unstable")]
library/std/src/os/unix/mod.rs:31:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:94:#[unstable(feature = "peer_credentials_unix_socket", issue = "42839", reason = "unstable")]
library/std/src/os/unix/mod.rs:113:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:116:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:119:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:122:    #[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/unix/mod.rs:125:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:128:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:131:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/mod.rs:134:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:14:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:19:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:25:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:29:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:45:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:47:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:56:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/os_str.rs:60:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/mod.rs:37:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/ffi/mod.rs:41:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/fs.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/fs.rs:25:#[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/unix/fs.rs:58:    #[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/unix/fs.rs:66:    #[unstable(feature = "unix_file_vectored_at", issue = "89517")]
library/std/src/os/unix/fs.rs:116:    #[stable(feature = "rw_exact_all_at", since = "1.33.0")]
library/std/src/os/unix/fs.rs:169:    #[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/unix/fs.rs:177:    #[unstable(feature = "unix_file_vectored_at", issue = "89517")]
library/std/src/os/unix/fs.rs:218:    #[stable(feature = "rw_exact_all_at", since = "1.33.0")]
library/std/src/os/unix/fs.rs:240:#[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/unix/fs.rs:257:#[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:277:    #[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:298:    #[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:314:    #[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:318:#[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:334:#[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:356:    #[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:370:    /// # #![feature(rustc_private)]
library/std/src/os/unix/fs.rs:384:    #[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/unix/fs.rs:388:#[stable(feature = "fs_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:402:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:419:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:436:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:457:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:474:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:491:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:508:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:525:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:542:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:559:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:578:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:595:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:614:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:631:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:650:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:667:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:686:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:689:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:693:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:753:#[stable(feature = "file_type_ext", since = "1.5.0")]
library/std/src/os/unix/fs.rs:771:    #[stable(feature = "file_type_ext", since = "1.5.0")]
library/std/src/os/unix/fs.rs:789:    #[stable(feature = "file_type_ext", since = "1.5.0")]
library/std/src/os/unix/fs.rs:807:    #[stable(feature = "file_type_ext", since = "1.5.0")]
library/std/src/os/unix/fs.rs:825:    #[stable(feature = "file_type_ext", since = "1.5.0")]
library/std/src/os/unix/fs.rs:829:#[stable(feature = "file_type_ext", since = "1.5.0")]
library/std/src/os/unix/fs.rs:846:#[stable(feature = "dir_entry_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:866:    #[stable(feature = "dir_entry_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:870:#[stable(feature = "dir_entry_ext", since = "1.1.0")]
library/std/src/os/unix/fs.rs:878:#[unstable(feature = "dir_entry_ext2", issue = "85573")]
library/std/src/os/unix/fs.rs:885:    /// #![feature(dir_entry_ext2)]
library/std/src/os/unix/fs.rs:904:#[unstable(feature = "sealed", issue = "none")]
library/std/src/os/unix/fs.rs:907:#[unstable(feature = "dir_entry_ext2", issue = "85573")]
library/std/src/os/unix/fs.rs:928:#[stable(feature = "symlink", since = "1.1.0")]
library/std/src/os/unix/fs.rs:934:#[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/os/unix/fs.rs:948:    #[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/os/unix/fs.rs:952:#[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/os/unix/fs.rs:974:/// #![feature(unix_chown)]
library/std/src/os/unix/fs.rs:982:#[unstable(feature = "unix_chown", issue = "88989")]
library/std/src/os/unix/fs.rs:994:/// #![feature(unix_chown)]
library/std/src/os/unix/fs.rs:1003:#[unstable(feature = "unix_chown", issue = "88989")]
library/std/src/os/unix/fs.rs:1016:/// #![feature(unix_chown)]
library/std/src/os/unix/fs.rs:1024:#[unstable(feature = "unix_chown", issue = "88989")]
library/std/src/os/unix/fs.rs:1048:#[stable(feature = "unix_chroot", since = "1.56.0")]
library/std/src/os/unix/process.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:37:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:42:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:47:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:52:    #[unstable(feature = "setgroups", issue = "90747")]
library/std/src/os/unix/process.rs:99:    #[stable(feature = "process_pre_exec", since = "1.34.0")]
library/std/src/os/unix/process.rs:111:    #[stable(feature = "process_exec", since = "1.15.0")]
library/std/src/os/unix/process.rs:147:    #[stable(feature = "process_exec2", since = "1.9.0")]
library/std/src/os/unix/process.rs:154:    #[stable(feature = "process_set_argv0", since = "1.45.0")]
library/std/src/os/unix/process.rs:188:    #[stable(feature = "process_set_process_group", since = "1.64.0")]
library/std/src/os/unix/process.rs:192:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:251:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:263:    #[stable(feature = "exit_status_from", since = "1.12.0")]
library/std/src/os/unix/process.rs:269:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:273:    #[stable(feature = "unix_process_wait_more", since = "1.58.0")]
library/std/src/os/unix/process.rs:280:    #[stable(feature = "unix_process_wait_more", since = "1.58.0")]
library/std/src/os/unix/process.rs:287:    #[stable(feature = "unix_process_wait_more", since = "1.58.0")]
library/std/src/os/unix/process.rs:293:    #[stable(feature = "unix_process_wait_more", since = "1.58.0")]
library/std/src/os/unix/process.rs:297:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/unix/process.rs:324:#[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/os/unix/process.rs:353:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/unix/process.rs:363:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:373:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/unix/process.rs:381:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/unix/process.rs:389:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/unix/process.rs:397:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/unix/process.rs:405:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/unix/process.rs:413:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/unix/process.rs:421:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:429:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:437:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:445:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:453:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:461:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/unix/process.rs:471:#[stable(feature = "unix_ppid", since = "1.27.0")]
library/std/src/os/mod.rs:3:#![stable(feature = "os", since = "1.0.0")]
library/std/src/os/mod.rs:25:#[unstable(issue = "none", feature = "std_internals")]
library/std/src/os/mod.rs:34:#[unstable(issue = "none", feature = "std_internals")]
library/std/src/os/mod.rs:43:#[unstable(issue = "none", feature = "std_internals")]
library/std/src/os/mod.rs:52:#[unstable(issue = "none", feature = "std_internals")]
library/std/src/os/emscripten/raw.rs:5:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:22:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/emscripten/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:31:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:33:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:35:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:40:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:70:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:72:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:74:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:76:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/raw.rs:78:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/emscripten/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/emscripten/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/emscripten/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/emscripten/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/emscripten/fs.rs:63:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/linux/net.rs:3:#![stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/linux/net.rs:5:#[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/linux/net.rs:8:#[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/linux/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:20:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/linux/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:39:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:56:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:58:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:60:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:62:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:64:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:66:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:68:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:70:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:72:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:74:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:76:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:78:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:80:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:82:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:84:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:86:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:88:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:90:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:92:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:102:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:105:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:107:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:110:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:113:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:115:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:118:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:121:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:123:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:128:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:130:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:132:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:134:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:136:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:138:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:140:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:142:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:144:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:146:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:148:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:150:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:152:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:154:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:156:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:158:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:160:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:162:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:164:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:166:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:175:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:177:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:179:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:181:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:183:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:185:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:190:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:192:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:194:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:196:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:198:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:200:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:202:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:204:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:206:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:208:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:210:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:212:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:214:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:216:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:218:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:220:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:222:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:224:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:226:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:228:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:243:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:251:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:253:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:255:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:257:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:259:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:261:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:266:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:268:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:270:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:272:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:274:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:276:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:278:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:280:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:282:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:284:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:286:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:288:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:290:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:292:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:294:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:296:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:298:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:300:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:302:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:304:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:313:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:315:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:317:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:319:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:321:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:323:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:328:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:330:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:332:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:334:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:336:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:338:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:340:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:342:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:344:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:346:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:348:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:350:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:352:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:354:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:356:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:358:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:360:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:362:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/raw.rs:364:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/linux/fs.rs:5:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/linux/fs.rs:16:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/linux/fs.rs:40:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/linux/fs.rs:60:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:77:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:94:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:111:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:128:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:145:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:162:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:182:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:199:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:218:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:235:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:254:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:271:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:290:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:307:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:324:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/linux/fs.rs:328:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/linux/process.rs:5:#![unstable(feature = "linux_pidfd", issue = "82971")]
library/std/src/os/linux/process.rs:26:/// #![feature(linux_pidfd)]
library/std/src/os/android/net.rs:3:#![stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/android/net.rs:5:#[stable(feature = "unix_socket_abstract", since = "1.70.0")]
library/std/src/os/android/net.rs:8:#[unstable(feature = "tcp_quickack", issue = "96256")]
library/std/src/os/android/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:15:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/android/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:27:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:29:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:32:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:34:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:36:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:38:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:40:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:49:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:51:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:53:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:55:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:57:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:59:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:61:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:63:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:65:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:67:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:69:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:71:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:74:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:76:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:78:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:80:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:82:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:84:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:87:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:97:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:99:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:102:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:104:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:106:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:108:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:110:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:112:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:117:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:119:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:121:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:123:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:125:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:127:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:129:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:131:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:133:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:135:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:137:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:139:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:141:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:144:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:146:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:148:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:150:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:152:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:154:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:157:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:159:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:169:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:171:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:174:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:176:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:178:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:180:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:182:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:184:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:189:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:191:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:193:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:195:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:197:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:199:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:201:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:203:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:205:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:207:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:209:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:211:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:214:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:216:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:218:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:220:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:222:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:224:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/raw.rs:227:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/android/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/android/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/android/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/android/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/android/fs.rs:63:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:19:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:31:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:34:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/openbsd/raw.rs:39:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:69:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:71:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:73:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:75:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:77:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/raw.rs:79:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/openbsd/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/openbsd/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/openbsd/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/openbsd/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:61:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:63:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:65:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:67:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/openbsd/fs.rs:71:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/fortanix_sgx/arch.rs:1://! SGX-specific access to architectural features.
library/std/src/os/fortanix_sgx/arch.rs:5:#![unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/arch.rs:12:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/arch.rs:17:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/arch.rs:22:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/arch.rs:29:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/arch.rs:58:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:5:#![unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:13:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:20:    #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:26:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:43:    #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:49:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:61:    #[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:81:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/io.rs:102:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/ffi.rs:35:#![unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/ffi.rs:40:#[unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/fortanix_sgx/mod.rs:7:#![unstable(feature = "sgx_platform", issue = "56975")]
library/std/src/os/l4re/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:17:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:20:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/l4re/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:39:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:56:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:58:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:60:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:62:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:64:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:66:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:68:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:70:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:72:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:74:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:76:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:78:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:80:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:82:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:84:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:86:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:88:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:90:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:92:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:102:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:105:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:107:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:110:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:113:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:115:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:118:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:121:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:123:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:128:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:130:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:132:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:134:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:136:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:138:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:140:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:142:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:144:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:146:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:148:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:150:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:152:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:154:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:156:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:158:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:160:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:162:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:164:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:166:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:175:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:177:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:179:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:181:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:183:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:185:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:190:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:192:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:194:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:196:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:198:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:200:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:202:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:204:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:206:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:208:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:210:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:212:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:214:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:216:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:218:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:220:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:222:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:224:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:226:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:228:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:248:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:250:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:252:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:254:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:256:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:258:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:263:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:265:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:267:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:269:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:271:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:273:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:275:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:277:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:279:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:281:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:283:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:285:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:287:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:289:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:291:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:293:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:295:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:297:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:299:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:301:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:310:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:312:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:314:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:316:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:318:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:320:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:325:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:327:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:329:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:331:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:333:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:335:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:337:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:339:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:341:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:343:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:345:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:347:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:349:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:351:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:353:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:355:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:357:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:359:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/raw.rs:361:        #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/l4re/fs.rs:5:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/l4re/fs.rs:16:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/l4re/fs.rs:40:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/l4re/fs.rs:60:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:77:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:94:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:111:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:128:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:145:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:162:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:182:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:199:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:218:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:235:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:254:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:271:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:290:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:307:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:324:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/l4re/fs.rs:328:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/wasi/net/mod.rs:3:#![unstable(feature = "wasi_ext", issue = "71213")]
library/std/src/os/wasi/io/raw.rs:3:#![unstable(feature = "wasi_ext", issue = "71213")]
library/std/src/os/wasi/io/mod.rs:3:#![stable(feature = "io_safety_wasi", since = "1.65.0")]
library/std/src/os/wasi/io/mod.rs:5:#[stable(feature = "io_safety_wasi", since = "1.65.0")]
library/std/src/os/wasi/io/fd.rs:3:#![unstable(feature = "wasi_ext", issue = "71213")]
library/std/src/os/wasi/ffi.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/ffi.rs:10:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/mod.rs:31:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/mod.rs:43:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/mod.rs:46:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/mod.rs:49:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/mod.rs:52:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/mod.rs:55:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/wasi/fs.rs:6:#![unstable(feature = "wasi_ext", issue = "71213")]
library/std/src/os/wasi/fs.rs:75:    #[stable(feature = "rw_exact_all_at", since = "1.33.0")]
library/std/src/os/wasi/fs.rs:151:    #[stable(feature = "rw_exact_all_at", since = "1.33.0")]
library/std/src/os/windows/thread.rs:5:#![stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/windows/thread.rs:11:#[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/windows/thread.rs:19:#[stable(feature = "thread_extensions", since = "1.9.0")]
library/std/src/os/windows/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/windows/raw.rs:7:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/windows/raw.rs:11:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/windows/raw.rs:15:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/windows/io/handle.rs:3:#![stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:41:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:69:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:92:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:111:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:120:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:122:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:124:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:126:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:128:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:130:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:132:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:134:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:153:    #[rustc_const_stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:154:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:160:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:182:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:191:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:229:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:251:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:255:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:262:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:269:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:273:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:281:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:284:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:292:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:300:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:310:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:333:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:356:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:363:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:373:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:380:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:389:        #[unstable(feature = "sealed", issue = "none")]
library/std/src/os/windows/io/handle.rs:392:        #[stable(feature = "is_terminal", since = "1.70.0")]
library/std/src/os/windows/io/handle.rs:405:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:420:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:424:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:432:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:440:#[stable(feature = "as_windows_ptrs", since = "1.71.0")]
library/std/src/os/windows/io/handle.rs:460:#[stable(feature = "as_windows_ptrs", since = "1.71.0")]
library/std/src/os/windows/io/handle.rs:468:#[stable(feature = "as_windows_ptrs", since = "1.71.0")]
library/std/src/os/windows/io/handle.rs:476:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:484:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:495:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:503:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:511:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:519:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:527:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:535:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:543:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:551:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:559:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:567:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:575:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:583:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:591:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:599:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:607:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:615:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/handle.rs:623:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/raw.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:17:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:21:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:25:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:43:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:48:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:74:    #[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:80:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:91:    #[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:95:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:103:#[stable(feature = "asraw_stdio", since = "1.21.0")]
library/std/src/os/windows/io/raw.rs:110:#[stable(feature = "asraw_stdio", since = "1.21.0")]
library/std/src/os/windows/io/raw.rs:117:#[stable(feature = "asraw_stdio", since = "1.21.0")]
library/std/src/os/windows/io/raw.rs:124:#[stable(feature = "asraw_stdio_locks", since = "1.35.0")]
library/std/src/os/windows/io/raw.rs:131:#[stable(feature = "asraw_stdio_locks", since = "1.35.0")]
library/std/src/os/windows/io/raw.rs:138:#[stable(feature = "asraw_stdio_locks", since = "1.35.0")]
library/std/src/os/windows/io/raw.rs:157:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:168:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:177:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:188:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:193:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:214:    #[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:220:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:231:    #[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:235:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:242:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:249:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/raw.rs:257:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:265:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:273:#[stable(feature = "from_raw_os", since = "1.1.0")]
library/std/src/os/windows/io/raw.rs:282:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:290:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/raw.rs:298:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/io/mod.rs:26://! `RawSocket` usage as unsafe. Once the `io_safety` feature is stable,
library/std/src/os/windows/io/mod.rs:51:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/mod.rs:57:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/mod.rs:59:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/io/mod.rs:61:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:3:#![stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:38:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:61:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:75:    #[rustc_const_stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:76:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:86:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:114:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:174:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:182:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:190:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:200:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:209:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:219:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:226:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:234:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:237:    #[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:241:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:249:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:257:#[stable(feature = "as_windows_ptrs", since = "1.71.0")]
library/std/src/os/windows/io/socket.rs:277:#[stable(feature = "as_windows_ptrs", since = "1.71.0")]
library/std/src/os/windows/io/socket.rs:285:#[stable(feature = "as_windows_ptrs", since = "1.71.0")]
library/std/src/os/windows/io/socket.rs:293:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:301:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:312:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:320:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:328:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:336:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:344:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:352:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:360:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:368:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/io/socket.rs:376:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/ffi.rs:54:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:62:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:69:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:88:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:92:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:103:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:126:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/ffi.rs:130:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/mod.rs:25:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/mod.rs:38:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/mod.rs:41:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/mod.rs:44:    #[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/windows/mod.rs:47:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/mod.rs:50:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/mod.rs:56:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/fs.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/os/windows/fs.rs:16:#[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/windows/fs.rs:50:    #[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/windows/fs.rs:83:    #[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/windows/fs.rs:87:#[stable(feature = "file_offset", since = "1.15.0")]
library/std/src/os/windows/fs.rs:99:#[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:121:    #[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:149:    #[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:180:    #[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:218:    #[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:264:    #[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:268:#[stable(feature = "open_options_ext", since = "1.10.0")]
library/std/src/os/windows/fs.rs:303:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:327:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:356:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:391:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:424:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:445:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:454:    #[unstable(feature = "windows_by_handle", issue = "63010")]
library/std/src/os/windows/fs.rs:463:    #[unstable(feature = "windows_by_handle", issue = "63010")]
library/std/src/os/windows/fs.rs:472:    #[unstable(feature = "windows_by_handle", issue = "63010")]
library/std/src/os/windows/fs.rs:476:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/windows/fs.rs:507:#[stable(feature = "windows_file_type_ext", since = "1.64.0")]
library/std/src/os/windows/fs.rs:510:    #[stable(feature = "windows_file_type_ext", since = "1.64.0")]
library/std/src/os/windows/fs.rs:513:    #[stable(feature = "windows_file_type_ext", since = "1.64.0")]
library/std/src/os/windows/fs.rs:517:#[stable(feature = "windows_file_type_ext", since = "1.64.0")]
library/std/src/os/windows/fs.rs:520:#[stable(feature = "windows_file_type_ext", since = "1.64.0")]
library/std/src/os/windows/fs.rs:531:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/windows/fs.rs:534:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/windows/fs.rs:538:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/os/windows/fs.rs:580:#[stable(feature = "symlink", since = "1.1.0")]
library/std/src/os/windows/fs.rs:619:#[stable(feature = "symlink", since = "1.1.0")]
library/std/src/os/windows/process.rs:5:#![stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/windows/process.rs:16:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/windows/process.rs:25:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/process.rs:34:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/windows/process.rs:42:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/process.rs:50:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/process.rs:57:#[stable(feature = "io_safety", since = "1.63.0")]
library/std/src/os/windows/process.rs:64:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/windows/process.rs:72:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/windows/process.rs:80:#[stable(feature = "process_extensions", since = "1.2.0")]
library/std/src/os/windows/process.rs:88:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/process.rs:95:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/process.rs:102:#[stable(feature = "into_raw_os", since = "1.4.0")]
library/std/src/os/windows/process.rs:113:#[stable(feature = "exit_status_from", since = "1.12.0")]
library/std/src/os/windows/process.rs:117:    #[stable(feature = "exit_status_from", since = "1.12.0")]
library/std/src/os/windows/process.rs:121:#[stable(feature = "exit_status_from", since = "1.12.0")]
library/std/src/os/windows/process.rs:132:#[stable(feature = "windows_process_extensions", since = "1.16.0")]
library/std/src/os/windows/process.rs:139:    #[stable(feature = "windows_process_extensions", since = "1.16.0")]
library/std/src/os/windows/process.rs:155:    #[unstable(feature = "windows_process_extensions_force_quotes", issue = "82227")]
library/std/src/os/windows/process.rs:162:    #[stable(feature = "windows_process_extensions_raw_arg", since = "1.62.0")]
library/std/src/os/windows/process.rs:181:    /// #![feature(windows_process_extensions_async_pipes)]
library/std/src/os/windows/process.rs:193:    #[unstable(feature = "windows_process_extensions_async_pipes", issue = "98289")]
library/std/src/os/windows/process.rs:197:#[stable(feature = "windows_process_extensions", since = "1.16.0")]
library/std/src/os/windows/process.rs:224:#[unstable(feature = "windows_process_extensions_main_thread_handle", issue = "96723")]
library/std/src/os/windows/process.rs:227:    #[unstable(feature = "windows_process_extensions_main_thread_handle", issue = "96723")]
library/std/src/os/windows/process.rs:231:#[unstable(feature = "windows_process_extensions_main_thread_handle", issue = "96723")]
library/std/src/os/windows/process.rs:242:#[unstable(feature = "windows_process_exit_code_from", issue = "none")]
library/std/src/os/windows/process.rs:250:    #[unstable(feature = "windows_process_exit_code_from", issue = "none")]
library/std/src/os/windows/process.rs:254:#[unstable(feature = "windows_process_exit_code_from", issue = "none")]
library/std/src/os/solaris/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:16:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:18:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:20:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:22:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:24:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:26:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:28:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:30:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:32:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:35:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/solaris/raw.rs:40:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:42:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:44:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:46:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:48:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:50:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:52:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:54:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:56:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:58:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:60:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:62:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:64:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:66:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:68:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:70:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:72:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/raw.rs:74:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/solaris/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/solaris/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/solaris/fs.rs:20:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/solaris/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:57:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:59:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/solaris/fs.rs:63:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:15:#[stable(feature = "pthread_t", since = "1.8.0")]
library/std/src/os/espidf/raw.rs:18:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:21:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:23:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:25:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:27:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:29:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:31:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:34:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:39:#[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:41:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:43:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:45:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:47:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:49:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:51:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:53:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:55:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:57:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:59:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:61:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:63:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:65:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/raw.rs:67:    #[stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/mod.rs:3:#![stable(feature = "raw_ext", since = "1.1.0")]
library/std/src/os/espidf/fs.rs:1:#![stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/espidf/fs.rs:12:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/espidf/fs.rs:14:    #[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/espidf/fs.rs:23:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:25:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:27:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:29:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:31:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:33:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:35:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:37:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:39:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:41:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:43:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:45:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:47:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:49:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:51:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:53:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:55:    #[stable(feature = "metadata_ext2", since = "1.8.0")]
library/std/src/os/espidf/fs.rs:59:#[stable(feature = "metadata_ext", since = "1.1.0")]
library/std/src/os/raw/mod.rs:3:#![stable(feature = "raw_os", since = "1.1.0")]
library/std/src/os/raw/mod.rs:10:        #[stable(feature = "raw_os", since = "1.1.0")]
library/std/src/keyword_docs.rs:663:/// method-call syntax, a familiar feature to any object oriented programmer, like `foo.bar()`.
library/std/src/keyword_docs.rs:2053:/// # #![feature(never_type)]
library/std/src/keyword_docs.rs:2154:///     This can also be used with the last two features: `use a::b::{self as ab, c as abc}`.
library/std/src/keyword_docs.rs:2157:///   * Nesting groups of the previous features multiple times,
library/std/src/fs.rs:8:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:98:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:110:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:128:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:147:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:186:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:191:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:203:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:208:#[stable(feature = "file_type", since = "1.1.0")]
library/std/src/fs.rs:216:#[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/fs.rs:250:#[stable(feature = "fs_read_write_bytes", since = "1.26.0")]
library/std/src/fs.rs:290:#[stable(feature = "fs_read_write", since = "1.26.0")]
library/std/src/fs.rs:326:#[stable(feature = "fs_read_write_bytes", since = "1.26.0")]
library/std/src/fs.rs:361:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:390:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:410:    /// #![feature(file_create_new)]
library/std/src/fs.rs:421:    #[unstable(feature = "file_create_new", issue = "105135")]
library/std/src/fs.rs:453:    #[stable(feature = "with_options", since = "1.58.0")]
library/std/src/fs.rs:481:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:512:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:550:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:568:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:612:    #[stable(feature = "file_try_clone", since = "1.9.0")]
library/std/src/fs.rs:649:    #[stable(feature = "set_permissions_atomic", since = "1.16.0")]
library/std/src/fs.rs:675:    /// #![feature(file_set_times)]
library/std/src/fs.rs:689:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:700:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:730:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:746:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:779:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:798:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:805:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:827:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:843:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:850:#[stable(feature = "io_traits_arc", since = "CURRENT_RUSTC_VERSION")]
library/std/src/fs.rs:872:#[stable(feature = "io_traits_arc", since = "CURRENT_RUSTC_VERSION")]
library/std/src/fs.rs:888:#[stable(feature = "io_traits_arc", since = "CURRENT_RUSTC_VERSION")]
library/std/src/fs.rs:908:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:926:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:947:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:992:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1012:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1033:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1066:    #[stable(feature = "expand_open_options2", since = "1.9.0")]
library/std/src/fs.rs:1114:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1154:    #[stable(feature = "file_type", since = "1.1.0")]
library/std/src/fs.rs:1177:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1206:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1232:    #[stable(feature = "is_symlink", since = "1.58.0")]
library/std/src/fs.rs:1252:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1272:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1303:    #[stable(feature = "fs_time", since = "1.10.0")]
library/std/src/fs.rs:1338:    #[stable(feature = "fs_time", since = "1.10.0")]
library/std/src/fs.rs:1370:    #[stable(feature = "fs_time", since = "1.10.0")]
library/std/src/fs.rs:1376:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/fs.rs:1408:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:1414:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:1421:    #[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:1435:#[unstable(feature = "file_set_times", issue = "98245")]
library/std/src/fs.rs:1483:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1550:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1579:    #[stable(feature = "file_type", since = "1.1.0")]
library/std/src/fs.rs:1612:    #[stable(feature = "file_type", since = "1.1.0")]
library/std/src/fs.rs:1648:    #[stable(feature = "file_type", since = "1.1.0")]
library/std/src/fs.rs:1674:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1713:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1751:    #[stable(feature = "dir_entry_ext", since = "1.1.0")]
library/std/src/fs.rs:1786:    #[stable(feature = "dir_entry_ext", since = "1.1.0")]
library/std/src/fs.rs:1815:    #[stable(feature = "dir_entry_ext", since = "1.1.0")]
library/std/src/fs.rs:1821:#[stable(feature = "dir_entry_debug", since = "1.13.0")]
library/std/src/fs.rs:1868:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1906:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:1940:#[stable(feature = "symlink_metadata", since = "1.1.0")]
library/std/src/fs.rs:1983:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2041:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2085:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2112:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2151:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2194:#[stable(feature = "fs_canonicalize", since = "1.5.0")]
library/std/src/fs.rs:2235:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2279:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2315:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2362:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2437:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/fs.rs:2472:#[stable(feature = "set_permissions", since = "1.1.0")]
library/std/src/fs.rs:2488:    #[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/fs.rs:2508:    #[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/fs.rs:2532:    #[stable(feature = "dir_builder", since = "1.6.0")]
library/std/src/fs.rs:2593:/// #![feature(fs_try_exists)]
library/std/src/fs.rs:2603:#[unstable(feature = "fs_try_exists", issue = "83186")]
library/std/src/macros.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/macros.rs:76:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/macros.rs:129:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/macros.rs:166:#[stable(feature = "eprint", since = "1.19.0")]
library/std/src/macros.rs:201:#[stable(feature = "eprint", since = "1.19.0")]
library/std/src/macros.rs:339:#[stable(feature = "dbg_macro", since = "1.32.0")]
library/std/src/process.rs:101:#![stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:119:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:168:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:181:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:193:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:205:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:210:#[unstable(feature = "sealed", issue = "none")]
library/std/src/process.rs:237:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/process.rs:258:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:269:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:288:#[stable(feature = "write_mt", since = "1.48.0")]
library/std/src/process.rs:326:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/process.rs:342:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:353:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:396:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/process.rs:412:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:423:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:462:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/process.rs:528:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:534:#[unstable(feature = "sealed", issue = "none")]
library/std/src/process.rs:572:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:618:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:647:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:685:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:731:    #[stable(feature = "command_envs", since = "1.19.0")]
library/std/src/process.rs:769:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:799:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:829:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:858:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:887:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:916:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:937:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:966:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:991:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1010:    #[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1032:    #[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1067:    #[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1088:    #[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1094:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/process.rs:1132:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1138:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1149:#[stable(feature = "command_access", since = "1.57.0")]
library/std/src/process.rs:1168:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1171:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1174:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1177:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1183:#[stable(feature = "process_output_debug", since = "1.7.0")]
library/std/src/process.rs:1212:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1263:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1303:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1343:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1353:    /// #![feature(stdio_makes_pipe)]
library/std/src/process.rs:1359:    #[unstable(feature = "stdio_makes_pipe", issue = "98288")]
library/std/src/process.rs:1371:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/process.rs:1378:#[stable(feature = "stdio_from", since = "1.20.0")]
library/std/src/process.rs:1407:#[stable(feature = "stdio_from", since = "1.20.0")]
library/std/src/process.rs:1436:#[stable(feature = "stdio_from", since = "1.20.0")]
library/std/src/process.rs:1467:#[stable(feature = "stdio_from", since = "1.20.0")]
library/std/src/process.rs:1524:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1528:#[unstable(feature = "sealed", issue = "none")]
library/std/src/process.rs:1537:    /// #![feature(exit_status_error)]
library/std/src/process.rs:1550:    #[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/process.rs:1575:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1607:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1626:#[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1634:#[unstable(feature = "sealed", issue = "none")]
library/std/src/process.rs:1644:/// #![feature(exit_status_error)]
library/std/src/process.rs:1658:#[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/process.rs:1663:#[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/process.rs:1687:    /// #![feature(exit_status_error)]
library/std/src/process.rs:1711:    /// #![feature(exit_status_error)]
library/std/src/process.rs:1732:#[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/process.rs:1739:#[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/process.rs:1746:#[unstable(feature = "exit_status_error", issue = "84908")]
library/std/src/process.rs:1796:#[stable(feature = "process_exitcode", since = "1.61.0")]
library/std/src/process.rs:1800:#[unstable(feature = "sealed", issue = "none")]
library/std/src/process.rs:1803:#[stable(feature = "process_exitcode", since = "1.61.0")]
library/std/src/process.rs:1810:    #[stable(feature = "process_exitcode", since = "1.61.0")]
library/std/src/process.rs:1818:    #[stable(feature = "process_exitcode", since = "1.61.0")]
library/std/src/process.rs:1840:    /// #![feature(exitcode_exit_method)]
library/std/src/process.rs:1859:    #[unstable(feature = "exitcode_exit_method", issue = "97100")]
library/std/src/process.rs:1874:        feature = "process_exitcode_internals",
library/std/src/process.rs:1885:#[stable(feature = "process_exitcode", since = "1.61.0")]
library/std/src/process.rs:1931:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:1953:    #[stable(feature = "process_id", since = "1.3.0")]
library/std/src/process.rs:1982:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:2022:    #[stable(feature = "process_try_wait", since = "1.18.0")]
library/std/src/process.rs:2059:    #[stable(feature = "process", since = "1.0.0")]
library/std/src/process.rs:2121:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/process.rs:2189:#[stable(feature = "process_abort", since = "1.17.0")]
library/std/src/process.rs:2209:#[stable(feature = "getpid", since = "1.26.0")]
library/std/src/process.rs:2228:#[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/process.rs:2237:    #[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/process.rs:2241:#[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/process.rs:2249:#[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/process.rs:2256:#[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/process.rs:2263:#[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/process.rs:2271:#[stable(feature = "termination_trait_lib", since = "1.61.0")]
library/std/src/sync/condvar.rs:16:#[stable(feature = "wait_timeout", since = "1.5.0")]
library/std/src/sync/condvar.rs:65:    #[stable(feature = "wait_timeout", since = "1.5.0")]
library/std/src/sync/condvar.rs:108:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/condvar.rs:124:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/condvar.rs:125:    #[rustc_const_stable(feature = "const_locks", since = "1.63.0")]
library/std/src/sync/condvar.rs:187:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/condvar.rs:239:    #[stable(feature = "wait_until", since = "1.42.0")]
library/std/src/sync/condvar.rs:307:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/condvar.rs:379:    #[stable(feature = "wait_timeout", since = "1.5.0")]
library/std/src/sync/condvar.rs:445:    #[stable(feature = "wait_timeout_until", since = "1.42.0")]
library/std/src/sync/condvar.rs:505:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/condvar.rs:545:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/condvar.rs:551:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/condvar.rs:558:#[stable(feature = "condvar_default", since = "1.10.0")]
library/std/src/sync/poison.rs:95:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:109:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:113:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:114:    Poisoned(#[stable(feature = "rust1", since = "1.0.0")] PoisonError<T>),
library/std/src/sync/poison.rs:117:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:130:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:138:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:141:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:148:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:155:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:168:    #[stable(feature = "sync_poison", since = "1.2.0")]
library/std/src/sync/poison.rs:197:    #[stable(feature = "sync_poison", since = "1.2.0")]
library/std/src/sync/poison.rs:204:    #[stable(feature = "sync_poison", since = "1.2.0")]
library/std/src/sync/poison.rs:211:    #[stable(feature = "sync_poison", since = "1.2.0")]
library/std/src/sync/poison.rs:217:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:224:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:234:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/poison.rs:245:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/barrier.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/barrier.rs:58:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/barrier.rs:61:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/barrier.rs:83:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/barrier.rs:127:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/barrier.rs:148:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/barrier.rs:171:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:78:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:86:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:88:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:103:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:115:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:118:#[stable(feature = "rwlock_guard_sync", since = "1.23.0")]
library/std/src/sync/rwlock.rs:133:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:141:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:144:#[stable(feature = "rwlock_guard_sync", since = "1.23.0")]
library/std/src/sync/rwlock.rs:157:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:158:    #[rustc_const_stable(feature = "const_locks", since = "1.63.0")]
library/std/src/sync/rwlock.rs:207:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:252:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:295:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:341:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:374:    #[stable(feature = "sync_poison", since = "1.2.0")]
library/std/src/sync/rwlock.rs:390:    /// #![feature(mutex_unpoison)]
library/std/src/sync/rwlock.rs:413:    #[unstable(feature = "mutex_unpoison", issue = "96469")]
library/std/src/sync/rwlock.rs:439:    #[stable(feature = "rwlock_into_inner", since = "1.6.0")]
library/std/src/sync/rwlock.rs:469:    #[stable(feature = "rwlock_get_mut", since = "1.6.0")]
library/std/src/sync/rwlock.rs:476:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:502:#[stable(feature = "rw_lock_default", since = "1.10.0")]
library/std/src/sync/rwlock.rs:510:#[stable(feature = "rw_lock_from", since = "1.24.0")]
library/std/src/sync/rwlock.rs:540:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/rwlock.rs:547:#[stable(feature = "std_guard_impls", since = "1.20.0")]
library/std/src/sync/rwlock.rs:554:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/rwlock.rs:561:#[stable(feature = "std_guard_impls", since = "1.20.0")]
library/std/src/sync/rwlock.rs:568:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:578:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:588:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:596:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/rwlock.rs:606:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:155:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:157:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:159:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:161:#[unstable(feature = "exclusive_wrapper", issue = "98407")]
library/std/src/sync/mod.rs:164:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:166:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:168:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:170:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:173:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:175:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mod.rs:178:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/mod.rs:180:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/mutex.rs:173:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:183:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:185:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:203:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:211:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:213:#[stable(feature = "mutexguard", since = "1.19.0")]
library/std/src/sync/mutex.rs:226:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:227:    #[rustc_const_stable(feature = "const_locks", since = "1.63.0")]
library/std/src/sync/mutex.rs:270:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:317:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:334:    /// #![feature(mutex_unlock)]
library/std/src/sync/mutex.rs:343:    #[unstable(feature = "mutex_unlock", issue = "81872")]
library/std/src/sync/mutex.rs:370:    #[stable(feature = "sync_poison", since = "1.2.0")]
library/std/src/sync/mutex.rs:386:    /// #![feature(mutex_unpoison)]
library/std/src/sync/mutex.rs:409:    #[unstable(feature = "mutex_unpoison", issue = "96469")]
library/std/src/sync/mutex.rs:429:    #[stable(feature = "mutex_into_inner", since = "1.6.0")]
library/std/src/sync/mutex.rs:457:    #[stable(feature = "mutex_get_mut", since = "1.6.0")]
library/std/src/sync/mutex.rs:464:#[stable(feature = "mutex_from", since = "1.24.0")]
library/std/src/sync/mutex.rs:473:#[stable(feature = "mutex_default", since = "1.10.0")]
library/std/src/sync/mutex.rs:481:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:513:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:522:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:529:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mutex.rs:540:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/mutex.rs:547:#[stable(feature = "std_guard_impls", since = "1.20.0")]
library/std/src/sync/once_lock.rs:33:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:62:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:63:    #[rustc_const_stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:77:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:91:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:127:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:165:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:191:    /// #![feature(once_cell_try)]
library/std/src/sync/once_lock.rs:205:    #[unstable(feature = "once_cell_try", issue = "109737")]
library/std/src/sync/once_lock.rs:242:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:267:    #[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:336:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:338:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:341:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:343:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:346:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:365:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:375:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:390:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:417:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:425:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once_lock.rs:428:#[stable(feature = "once_cell", since = "1.70.0")]
library/std/src/sync/once.rs:28:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/once.rs:33:#[stable(feature = "sync_once_unwind_safe", since = "1.59.0")]
library/std/src/sync/once.rs:36:#[stable(feature = "sync_once_unwind_safe", since = "1.59.0")]
library/std/src/sync/once.rs:41:#[stable(feature = "once_poison", since = "1.51.0")]
library/std/src/sync/once.rs:61:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/once.rs:72:    #[stable(feature = "once_new", since = "1.2.0")]
library/std/src/sync/once.rs:73:    #[rustc_const_stable(feature = "const_once_new", since = "1.32.0")]
library/std/src/sync/once.rs:137:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/once.rs:197:    #[stable(feature = "once_poison", since = "1.51.0")]
library/std/src/sync/once.rs:252:    #[stable(feature = "once_is_completed", since = "1.43.0")]
library/std/src/sync/once.rs:269:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/once.rs:311:    #[stable(feature = "once_poison", since = "1.51.0")]
library/std/src/sync/once.rs:325:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/sync/mpsc/mod.rs:138:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:182:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:190:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:193:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:223:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:266:#[stable(feature = "receiver_try_iter", since = "1.15.0")]
library/std/src/sync/mpsc/mod.rs:300:#[stable(feature = "receiver_into_iter", since = "1.1.0")]
library/std/src/sync/mpsc/mod.rs:340:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:347:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:350:#[stable(feature = "mpsc_sender_sync", since = "1.72.0")]
library/std/src/sync/mpsc/mod.rs:399:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:404:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:413:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:415:pub struct SendError<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);
library/std/src/sync/mpsc/mod.rs:425:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:434:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:438:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:443:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:453:#[stable(feature = "mpsc_recv_timeout", since = "1.12.0")]
library/std/src/sync/mpsc/mod.rs:457:    #[stable(feature = "mpsc_recv_timeout", since = "1.12.0")]
library/std/src/sync/mpsc/mod.rs:461:    #[stable(feature = "mpsc_recv_timeout", since = "1.12.0")]
library/std/src/sync/mpsc/mod.rs:469:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:478:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:479:    Full(#[stable(feature = "rust1", since = "1.0.0")] T),
library/std/src/sync/mpsc/mod.rs:483:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:484:    Disconnected(#[stable(feature = "rust1", since = "1.0.0")] T),
library/std/src/sync/mpsc/mod.rs:525:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:574:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:612:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:618:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:630:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:635:#[stable(feature = "mpsc_debug", since = "1.8.0")]
library/std/src/sync/mpsc/mod.rs:683:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:737:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:752:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:759:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:764:#[stable(feature = "mpsc_debug", since = "1.8.0")]
library/std/src/sync/mpsc/mod.rs:799:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:858:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:918:    #[stable(feature = "mpsc_recv_timeout", since = "1.12.0")]
library/std/src/sync/mpsc/mod.rs:942:    /// #![feature(deadline_api)]
library/std/src/sync/mpsc/mod.rs:962:    /// #![feature(deadline_api)]
library/std/src/sync/mpsc/mod.rs:979:    #[unstable(feature = "deadline_api", issue = "46316")]
library/std/src/sync/mpsc/mod.rs:1007:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1048:    #[stable(feature = "receiver_try_iter", since = "1.15.0")]
library/std/src/sync/mpsc/mod.rs:1054:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1063:#[stable(feature = "receiver_try_iter", since = "1.15.0")]
library/std/src/sync/mpsc/mod.rs:1072:#[stable(feature = "receiver_into_iter", since = "1.1.0")]
library/std/src/sync/mpsc/mod.rs:1082:#[stable(feature = "receiver_into_iter", since = "1.1.0")]
library/std/src/sync/mpsc/mod.rs:1090:#[stable(feature = "receiver_into_iter", since = "1.1.0")]
library/std/src/sync/mpsc/mod.rs:1100:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1105:#[stable(feature = "mpsc_debug", since = "1.8.0")]
library/std/src/sync/mpsc/mod.rs:1112:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1119:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1126:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1134:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1144:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1154:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1165:#[stable(feature = "mpsc_error_conversions", since = "1.24.0")]
library/std/src/sync/mpsc/mod.rs:1179:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1186:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1194:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1204:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/sync/mpsc/mod.rs:1215:#[stable(feature = "mpsc_error_conversions", since = "1.24.0")]
library/std/src/sync/mpsc/mod.rs:1229:#[stable(feature = "mpsc_recv_timeout_error", since = "1.15.0")]
library/std/src/sync/mpsc/mod.rs:1239:#[stable(feature = "mpsc_recv_timeout_error", since = "1.15.0")]
library/std/src/sync/mpsc/mod.rs:1250:#[stable(feature = "mpsc_error_conversions", since = "1.24.0")]
library/std/src/sync/lazy_lock.rs:29:/// #![feature(lazy_cell)]
library/std/src/sync/lazy_lock.rs:57:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:67:    #[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:79:    /// #![feature(lazy_cell)]
library/std/src/sync/lazy_lock.rs:80:    /// #![feature(lazy_cell_consume)]
library/std/src/sync/lazy_lock.rs:91:    #[unstable(feature = "lazy_cell_consume", issue = "109736")]
library/std/src/sync/lazy_lock.rs:115:    /// #![feature(lazy_cell)]
library/std/src/sync/lazy_lock.rs:125:    #[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:161:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:174:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:184:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:193:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:205:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:209:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/sync/lazy_lock.rs:211:#[unstable(feature = "lazy_cell", issue = "109736")]
library/std/src/prelude/v1.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:8:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:21:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:24:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:27:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:30:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:33:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:38:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/std/src/prelude/v1.rs:48:    feature = "concat_bytes",
library/std/src/prelude/v1.rs:56:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/std/src/prelude/v1.rs:62:#[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
library/std/src/prelude/v1.rs:67:#[unstable(feature = "derive_const", issue = "none")]
library/std/src/prelude/v1.rs:72:    feature = "cfg_accessible",
library/std/src/prelude/v1.rs:80:    feature = "cfg_eval",
library/std/src/prelude/v1.rs:82:    reason = "`cfg_eval` is a recently implemented feature"
library/std/src/prelude/v1.rs:88:    feature = "type_ascription",
library/std/src/prelude/v1.rs:99:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:102:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:105:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/v1.rs:108:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/mod.rs:94:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/prelude/mod.rs:101:#[stable(feature = "prelude_2015", since = "1.55.0")]
library/std/src/prelude/mod.rs:103:    #[stable(feature = "prelude_2015", since = "1.55.0")]
library/std/src/prelude/mod.rs:111:#[stable(feature = "prelude_2018", since = "1.55.0")]
library/std/src/prelude/mod.rs:113:    #[stable(feature = "prelude_2018", since = "1.55.0")]
library/std/src/prelude/mod.rs:121:#[stable(feature = "prelude_2021", since = "1.55.0")]
library/std/src/prelude/mod.rs:123:    #[stable(feature = "prelude_2021", since = "1.55.0")]
library/std/src/prelude/mod.rs:127:    #[stable(feature = "prelude_2021", since = "1.55.0")]
library/std/src/prelude/mod.rs:135:#[unstable(feature = "prelude_2024", issue = "none")]
library/std/src/prelude/mod.rs:137:    #[unstable(feature = "prelude_2024", issue = "none")]
library/std/src/prelude/mod.rs:141:    #[unstable(feature = "prelude_2024", issue = "none")]
library/std/src/collections/hash/set.rs:105:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:124:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:144:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:161:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:189:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:207:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:225:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:254:    #[stable(feature = "drain", since = "1.6.0")]
library/std/src/collections/hash/set.rs:276:    /// #![feature(hash_extract_if)]
library/std/src/collections/hash/set.rs:292:    #[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/set.rs:320:    #[stable(feature = "retain_hash_collection", since = "1.18.0")]
library/std/src/collections/hash/set.rs:341:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:370:    #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/set.rs:371:    #[rustc_const_unstable(feature = "const_collections_with_hasher", issue = "102575")]
library/std/src/collections/hash/set.rs:402:    #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/set.rs:420:    #[stable(feature = "hashmap_public_hasher", since = "1.9.0")]
library/std/src/collections/hash/set.rs:450:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:475:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/std/src/collections/hash/set.rs:497:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:522:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/std/src/collections/hash/set.rs:552:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:580:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:614:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:643:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:668:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:693:    #[stable(feature = "set_recovery", since = "1.9.0")]
library/std/src/collections/hash/set.rs:708:    /// #![feature(hash_set_entry)]
library/std/src/collections/hash/set.rs:719:    #[unstable(feature = "hash_set_entry", issue = "60896")]
library/std/src/collections/hash/set.rs:732:    /// #![feature(hash_set_entry)]
library/std/src/collections/hash/set.rs:747:    #[unstable(feature = "hash_set_entry", issue = "60896")]
library/std/src/collections/hash/set.rs:764:    /// #![feature(hash_set_entry)]
library/std/src/collections/hash/set.rs:779:    #[unstable(feature = "hash_set_entry", issue = "60896")]
library/std/src/collections/hash/set.rs:808:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:834:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:860:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:886:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:907:    #[stable(feature = "set_recovery", since = "1.9.0")]
library/std/src/collections/hash/set.rs:931:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:956:    #[stable(feature = "set_recovery", since = "1.9.0")]
library/std/src/collections/hash/set.rs:966:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:983:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:998:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1006:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1016:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1030:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/std/src/collections/hash/set.rs:1061:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1083:#[stable(feature = "hash_extend_copy", since = "1.4.0")]
library/std/src/collections/hash/set.rs:1105:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1117:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1150:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1183:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1216:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1265:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1286:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1307:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1321:/// #![feature(hash_extract_if)]
library/std/src/collections/hash/set.rs:1329:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/set.rs:1356:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1383:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1410:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1434:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1439:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1451:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1483:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1490:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1503:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1510:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1513:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1520:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1533:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1540:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1543:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1550:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1563:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1570:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1573:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1580:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/set.rs:1597:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/set.rs:1600:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/set.rs:1610:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1618:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1643:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1654:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1662:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1670:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1695:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1703:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1714:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1722:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1740:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1748:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1759:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/set.rs:1767:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/set.rs:1775:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/set.rs:1786:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:212:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:232:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:251:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:282:    #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/map.rs:283:    #[rustc_const_unstable(feature = "const_collections_with_hasher", issue = "102575")]
library/std/src/collections/hash/map.rs:314:    #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/map.rs:332:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:360:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:393:    #[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:421:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:453:    #[stable(feature = "map_values_mut", since = "1.10.0")]
library/std/src/collections/hash/map.rs:486:    #[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:515:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:550:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:567:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:585:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:615:    #[stable(feature = "drain", since = "1.6.0")]
library/std/src/collections/hash/map.rs:640:    /// #![feature(hash_extract_if)]
library/std/src/collections/hash/map.rs:656:    #[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/map.rs:685:    #[stable(feature = "retain_hash_collection", since = "1.18.0")]
library/std/src/collections/hash/map.rs:707:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:725:    #[stable(feature = "hashmap_public_hasher", since = "1.9.0")]
library/std/src/collections/hash/map.rs:754:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:780:    #[stable(feature = "try_reserve", since = "1.57.0")]
library/std/src/collections/hash/map.rs:802:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:828:    #[stable(feature = "shrink_to", since = "1.56.0")]
library/std/src/collections/hash/map.rs:852:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:873:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:900:    #[stable(feature = "map_get_key_value", since = "1.40.0")]
library/std/src/collections/hash/map.rs:918:    /// #![feature(map_many_mut)]
library/std/src/collections/hash/map.rs:954:    #[unstable(feature = "map_many_mut", issue = "97601")]
library/std/src/collections/hash/map.rs:981:    /// #![feature(map_many_mut)]
library/std/src/collections/hash/map.rs:1010:    #[unstable(feature = "map_many_mut", issue = "97601")]
library/std/src/collections/hash/map.rs:1039:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1067:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1101:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1117:    /// #![feature(map_try_insert)]
library/std/src/collections/hash/map.rs:1129:    #[unstable(feature = "map_try_insert", issue = "82766")]
library/std/src/collections/hash/map.rs:1155:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1184:    #[stable(feature = "hash_map_remove_entry", since = "1.27.0")]
library/std/src/collections/hash/map.rs:1230:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1251:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1257:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1275:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1291:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1300:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1311:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1323:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1343:#[stable(feature = "std_collections_from_array", since = "1.56.0")]
library/std/src/collections/hash/map.rs:1391:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1397:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1405:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:1429:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1459:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1489:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1495:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1503:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:1527:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1533:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:1541:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:1565:#[stable(feature = "drain", since = "1.6.0")]
library/std/src/collections/hash/map.rs:1587:/// #![feature(hash_extract_if)]
library/std/src/collections/hash/map.rs:1596:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/map.rs:1622:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/std/src/collections/hash/map.rs:1644:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:1666:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:1674:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1687:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1697:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1704:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1712:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1723:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1734:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1745:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1760:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1771:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1782:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1798:    /// #![feature(hash_raw_entry)]
library/std/src/collections/hash/map.rs:1810:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1828:    /// #![feature(hash_raw_entry)]
library/std/src/collections/hash/map.rs:1840:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1862:    /// #![feature(hash_raw_entry)]
library/std/src/collections/hash/map.rs:1880:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1902:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1910:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1919:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1927:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1936:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1944:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1952:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1959:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1968:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1975:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1982:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1989:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:1996:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2006:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2018:    #[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2028:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2035:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2045:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2055:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2062:#[unstable(feature = "hash_raw_entry", issue = "56167")]
library/std/src/collections/hash/map.rs:2074:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2078:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2079:    Occupied(#[stable(feature = "rust1", since = "1.0.0")] OccupiedEntry<'a, K, V>),
library/std/src/collections/hash/map.rs:2082:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2083:    Vacant(#[stable(feature = "rust1", since = "1.0.0")] VacantEntry<'a, K, V>),
library/std/src/collections/hash/map.rs:2086:#[stable(feature = "debug_hash_map", since = "1.12.0")]
library/std/src/collections/hash/map.rs:2098:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2103:#[stable(feature = "debug_hash_map", since = "1.12.0")]
library/std/src/collections/hash/map.rs:2115:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2120:#[stable(feature = "debug_hash_map", since = "1.12.0")]
library/std/src/collections/hash/map.rs:2130:#[unstable(feature = "map_try_insert", issue = "82766")]
library/std/src/collections/hash/map.rs:2138:#[unstable(feature = "map_try_insert", issue = "82766")]
library/std/src/collections/hash/map.rs:2149:#[unstable(feature = "map_try_insert", issue = "82766")]
library/std/src/collections/hash/map.rs:2162:#[unstable(feature = "map_try_insert", issue = "82766")]
library/std/src/collections/hash/map.rs:2170:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2182:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2194:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2224:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2237:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2245:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2248:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2261:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2268:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2271:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:2282:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2295:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2302:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2305:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:2312:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2325:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2332:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2335:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2348:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2355:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2358:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/std/src/collections/hash/map.rs:2371:#[stable(feature = "map_values_mut", since = "1.10.0")]
library/std/src/collections/hash/map.rs:2378:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2381:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:2388:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2401:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2408:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2411:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2418:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2431:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2438:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2441:#[stable(feature = "map_into_keys_values", since = "1.54.0")]
library/std/src/collections/hash/map.rs:2448:#[stable(feature = "drain", since = "1.6.0")]
library/std/src/collections/hash/map.rs:2461:#[stable(feature = "drain", since = "1.6.0")]
library/std/src/collections/hash/map.rs:2468:#[stable(feature = "fused", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2471:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/hash/map.rs:2482:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/map.rs:2499:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/map.rs:2502:#[unstable(feature = "hash_extract_if", issue = "59618")]
library/std/src/collections/hash/map.rs:2530:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2554:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2581:    #[stable(feature = "or_insert_with_key", since = "1.50.0")]
library/std/src/collections/hash/map.rs:2603:    #[stable(feature = "map_entry_keys", since = "1.10.0")]
library/std/src/collections/hash/map.rs:2632:    #[stable(feature = "entry_and_modify", since = "1.26.0")]
library/std/src/collections/hash/map.rs:2651:    /// #![feature(entry_insert)]
library/std/src/collections/hash/map.rs:2660:    #[unstable(feature = "entry_insert", issue = "65225")]
library/std/src/collections/hash/map.rs:2689:    #[stable(feature = "entry_or_default", since = "1.28.0")]
library/std/src/collections/hash/map.rs:2711:    #[stable(feature = "map_entry_keys", since = "1.10.0")]
library/std/src/collections/hash/map.rs:2735:    #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
library/std/src/collections/hash/map.rs:2756:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2789:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2818:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2841:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2864:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2875:    /// #![feature(map_entry_replace)]
library/std/src/collections/hash/map.rs:2891:    #[unstable(feature = "map_entry_replace", issue = "44286")]
library/std/src/collections/hash/map.rs:2901:    /// #![feature(map_entry_replace)]
library/std/src/collections/hash/map.rs:2922:    #[unstable(feature = "map_entry_replace", issue = "44286")]
library/std/src/collections/hash/map.rs:2941:    #[stable(feature = "map_entry_keys", since = "1.10.0")]
library/std/src/collections/hash/map.rs:2961:    #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
library/std/src/collections/hash/map.rs:2983:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:2994:    /// #![feature(entry_insert)]
library/std/src/collections/hash/map.rs:3006:    #[unstable(feature = "entry_insert", issue = "65225")]
library/std/src/collections/hash/map.rs:3013:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:3028:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/hash/map.rs:3050:#[stable(feature = "hash_extend_copy", since = "1.4.0")]
library/std/src/collections/hash/map.rs:3090:#[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/map.rs:3110:    #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/map.rs:3135:#[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/map.rs:3149:#[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
library/std/src/collections/hash/map.rs:3160:    #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
library/std/src/collections/hash/map.rs:3163:    #[rustc_const_unstable(feature = "const_hash", issue = "104061")]
library/std/src/collections/hash/map.rs:3170:#[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
library/std/src/collections/hash/map.rs:3182:#[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
library/std/src/collections/hash/map.rs:3203:#[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
library/std/src/collections/hash/map.rs:3212:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/collections/mod.rs:402:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:404:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:410:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:412:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:414:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:416:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:419:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:422:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:426:#[stable(feature = "try_reserve", since = "1.57.0")]
library/std/src/collections/mod.rs:429:    feature = "try_reserve_kind",
library/std/src/collections/mod.rs:437:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:440:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:444:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/collections/mod.rs:447:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/scoped.rs:12:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:35:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:128:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:188:    #[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:245:    #[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:275:    #[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:306:    #[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:321:    #[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:327:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/scoped.rs:338:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/local.rs:3:#![unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/thread/local.rs:99:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/local.rs:118:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/thread/local.rs:166:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/local.rs:195:#[stable(feature = "thread_local_try_with", since = "1.26.0")]
library/std/src/thread/local.rs:200:#[stable(feature = "thread_local_try_with", since = "1.26.0")]
library/std/src/thread/local.rs:207:#[stable(feature = "thread_local_try_with", since = "1.26.0")]
library/std/src/thread/local.rs:214:#[stable(feature = "thread_local_try_with", since = "1.26.0")]
library/std/src/thread/local.rs:220:        feature = "thread_local_internals",
library/std/src/thread/local.rs:224:    #[rustc_const_unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/thread/local.rs:241:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/local.rs:262:    #[stable(feature = "thread_local_try_with", since = "1.26.0")]
library/std/src/thread/local.rs:316:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:329:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:354:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:363:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:384:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:394:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:415:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:425:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:447:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:456:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:479:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:490:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:514:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:527:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:554:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:569:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/local.rs:589:    /// #![feature(local_key_cell_methods)]
library/std/src/thread/local.rs:601:    #[unstable(feature = "local_key_cell_methods", issue = "92122")]
library/std/src/thread/mod.rs:153:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:183:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/mod.rs:186:#[stable(feature = "scoped_threads", since = "1.63.0")]
library/std/src/thread/mod.rs:202:        #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:207:        #[unstable(feature = "thread_local_internals", issue = "none")]
library/std/src/thread/mod.rs:261:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:289:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:318:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:341:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:382:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:429:    /// #![feature(thread_spawn_unchecked)]
library/std/src/thread/mod.rs:450:    #[unstable(feature = "thread_spawn_unchecked", issue = "55132")]
library/std/src/thread/mod.rs:679:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:709:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:749:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:756:/// A common use of this feature is to poison shared resources when writing
library/std/src/thread/mod.rs:798:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:827:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:870:#[stable(feature = "thread_sleep", since = "1.4.0")]
library/std/src/thread/mod.rs:983:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1006:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1050:#[stable(feature = "park_timeout", since = "1.4.0")]
library/std/src/thread/mod.rs:1089:#[stable(feature = "thread_id", since = "1.19.0")]
library/std/src/thread/mod.rs:1147:    #[unstable(feature = "thread_id_value", issue = "67939")]
library/std/src/thread/mod.rs:1171:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1245:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1265:    #[stable(feature = "thread_id", since = "1.19.0")]
library/std/src/thread/mod.rs:1308:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1319:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1375:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1505:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1508:#[stable(feature = "joinhandle_impl_send_sync", since = "1.29.0")]
library/std/src/thread/mod.rs:1510:#[stable(feature = "joinhandle_impl_send_sync", since = "1.29.0")]
library/std/src/thread/mod.rs:1530:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1569:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/thread/mod.rs:1584:    #[stable(feature = "thread_is_running", since = "1.61.0")]
library/std/src/thread/mod.rs:1602:#[stable(feature = "std_debug", since = "1.16.0")]
library/std/src/thread/mod.rs:1699:#[stable(feature = "available_parallelism", since = "1.59.0")]
library/std/src/f64.rs:12:#![stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:47:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:66:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:92:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:104:    /// #![feature(round_ties_even)]
library/std/src/f64.rs:118:    #[unstable(feature = "round_ties_even", issue = "96710")]
library/std/src/f64.rs:140:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:161:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:185:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:209:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:238:    #[stable(feature = "copysign", since = "1.35.0")]
library/std/src/f64.rs:266:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:292:    #[stable(feature = "euclidean_division", since = "1.38.0")]
library/std/src/f64.rs:327:    #[stable(feature = "euclidean_division", since = "1.38.0")]
library/std/src/f64.rs:349:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:367:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:392:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:414:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:434:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:456:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:480:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:500:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:520:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:545:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:575:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:599:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:618:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:637:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:655:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:677:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:699:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:720:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:754:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:776:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:798:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:820:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:843:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:866:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:889:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:909:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:931:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/f64.rs:955:    #[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:63:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:79:/// #![feature(never_type)]
library/std/src/primitive_docs.rs:133:/// #![feature(exhaustive_patterns)]
library/std/src/primitive_docs.rs:139:/// feature is present this means we can exhaustively match on [`Result<T, !>`] by just taking the
library/std/src/primitive_docs.rs:238:/// #![feature(never_type)]
library/std/src/primitive_docs.rs:274:#[unstable(feature = "never_type", issue = "35121")]
library/std/src/primitive_docs.rs:398:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:439:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:449:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:458:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:552:/// # #![feature(rustc_private)]
library/std/src/primitive_docs.rs:577:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:789:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:881:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:948:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1023:/// missing language features.
library/std/src/primitive_docs.rs:1075:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1085:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1096:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1166:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1181:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1187:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1193:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1199:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1205:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1211:#[stable(feature = "i128", since = "1.26.0")]
library/std/src/primitive_docs.rs:1217:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1223:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1229:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1235:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1241:#[stable(feature = "i128", since = "1.26.0")]
library/std/src/primitive_docs.rs:1251:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1261:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1393:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1550:/// so are not limited by missing language features:
library/std/src/primitive_docs.rs:1567:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1577:#[stable(feature = "rust1", since = "1.0.0")]
library/std/src/primitive_docs.rs:1588:#[stable(feature = "rust1", since = "1.0.0")]
library/rustc-std-workspace-core/lib.rs:1:#![feature(no_core)]
library/proc_macro/src/quote.rs:62:#[unstable(feature = "proc_macro_quote", issue = "54722")]
library/proc_macro/src/quote.rs:137:#[unstable(feature = "proc_macro_quote", issue = "54722")]
library/proc_macro/src/bridge/client.rs:51:                // way of doing this, but that requires unstable features.
library/proc_macro/src/bridge/client.rs:52:                // rust-analyzer uses this code and avoids unstable features.
library/proc_macro/src/bridge/client.rs:136:                // way of doing this, but that requires unstable features.
library/proc_macro/src/bridge/client.rs:137:                // rust-analyzer uses this code and avoids unstable features.
library/proc_macro/src/bridge/mod.rs:181:    // this, but that requires unstable features. rust-analyzer uses this code
library/proc_macro/src/bridge/mod.rs:182:    // and avoids unstable features.
library/proc_macro/src/bridge/closure.rs:10:    // this, but that requires unstable features. rust-analyzer uses this code
library/proc_macro/src/bridge/closure.rs:11:    // and avoids unstable features.
library/proc_macro/src/lib.rs:12:#![stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:21:// Please avoid unstable features where possible to minimize the amount of changes necessary
library/proc_macro/src/lib.rs:23:#![feature(rustc_allow_const_fn_unstable)]
library/proc_macro/src/lib.rs:24:#![feature(staged_api)]
library/proc_macro/src/lib.rs:25:#![feature(allow_internal_unstable)]
library/proc_macro/src/lib.rs:26:#![feature(decl_macro)]
library/proc_macro/src/lib.rs:27:#![feature(local_key_cell_methods)]
library/proc_macro/src/lib.rs:28:#![feature(maybe_uninit_write_slice)]
library/proc_macro/src/lib.rs:29:#![feature(negative_impls)]
library/proc_macro/src/lib.rs:30:#![feature(new_uninit)]
library/proc_macro/src/lib.rs:31:#![feature(restricted_std)]
library/proc_macro/src/lib.rs:32:#![feature(rustc_attrs)]
library/proc_macro/src/lib.rs:33:#![feature(min_specialization)]
library/proc_macro/src/lib.rs:34:#![feature(strict_provenance)]
library/proc_macro/src/lib.rs:37:#[unstable(feature = "proc_macro_internals", issue = "27812")]
library/proc_macro/src/lib.rs:43:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/lib.rs:64:#[stable(feature = "proc_macro_is_available", since = "1.57.0")]
library/proc_macro/src/lib.rs:77:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:81:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:83:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:87:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:92:#[stable(feature = "proc_macro_lexerror_impls", since = "1.44.0")]
library/proc_macro/src/lib.rs:99:#[stable(feature = "proc_macro_lexerror_impls", since = "1.44.0")]
library/proc_macro/src/lib.rs:102:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:104:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:108:#[unstable(feature = "proc_macro_expand", issue = "90765")]
library/proc_macro/src/lib.rs:113:#[unstable(feature = "proc_macro_expand", issue = "90765")]
library/proc_macro/src/lib.rs:120:#[unstable(feature = "proc_macro_expand", issue = "90765")]
library/proc_macro/src/lib.rs:123:#[unstable(feature = "proc_macro_expand", issue = "90765")]
library/proc_macro/src/lib.rs:126:#[unstable(feature = "proc_macro_expand", issue = "90765")]
library/proc_macro/src/lib.rs:131:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:137:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:152:    #[unstable(feature = "proc_macro_expand", issue = "90765")]
library/proc_macro/src/lib.rs:169:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:180:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:190:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:198:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:206:#[stable(feature = "proc_macro_token_stream_default", since = "1.45.0")]
library/proc_macro/src/lib.rs:213:#[unstable(feature = "proc_macro_quote", issue = "54722")]
library/proc_macro/src/lib.rs:228:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:311:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:323:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:333:#[stable(feature = "token_stream_extend", since = "1.30.0")]
library/proc_macro/src/lib.rs:343:#[stable(feature = "token_stream_extend", since = "1.30.0")]
library/proc_macro/src/lib.rs:354:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:362:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:373:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:395:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:412:#[unstable(feature = "proc_macro_quote", issue = "54722")]
library/proc_macro/src/lib.rs:419:#[unstable(feature = "proc_macro_internals", issue = "27812")]
library/proc_macro/src/lib.rs:424:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:428:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:430:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:437:        #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/lib.rs:446:    #[unstable(feature = "proc_macro_def_site", issue = "54724")]
library/proc_macro/src/lib.rs:455:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:464:    #[stable(feature = "proc_macro_mixed_site", since = "1.45.0")]
library/proc_macro/src/lib.rs:470:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:477:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:485:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:491:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:497:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:503:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:511:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:519:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:527:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:534:    #[stable(feature = "proc_macro_span_resolved_at", since = "1.45.0")]
library/proc_macro/src/lib.rs:541:    #[stable(feature = "proc_macro_span_located_at", since = "1.45.0")]
library/proc_macro/src/lib.rs:547:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:559:    #[stable(feature = "proc_macro_source_text", since = "1.66.0")]
library/proc_macro/src/lib.rs:566:    #[unstable(feature = "proc_macro_internals", issue = "27812")]
library/proc_macro/src/lib.rs:573:    #[unstable(feature = "proc_macro_internals", issue = "27812")]
library/proc_macro/src/lib.rs:585:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:593:#[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:608:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:615:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:624:#[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:634:#[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:641:#[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:645:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:649:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:650:    Group(#[stable(feature = "proc_macro_lib2", since = "1.29.0")] Group),
library/proc_macro/src/lib.rs:652:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:653:    Ident(#[stable(feature = "proc_macro_lib2", since = "1.29.0")] Ident),
library/proc_macro/src/lib.rs:655:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:656:    Punct(#[stable(feature = "proc_macro_lib2", since = "1.29.0")] Punct),
library/proc_macro/src/lib.rs:658:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:659:    Literal(#[stable(feature = "proc_macro_lib2", since = "1.29.0")] Literal),
library/proc_macro/src/lib.rs:662:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:664:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:670:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:685:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:697:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:711:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:718:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:725:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:732:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:741:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:756:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:767:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:770:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:772:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:777:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:780:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:783:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:786:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:793:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:803:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:813:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:822:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:834:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:845:    #[stable(feature = "proc_macro_group_span", since = "1.55.0")]
library/proc_macro/src/lib.rs:856:    #[stable(feature = "proc_macro_group_span", since = "1.55.0")]
library/proc_macro/src/lib.rs:867:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:875:#[stable(feature = "proc_macro_lib", since = "1.15.0")]
library/proc_macro/src/lib.rs:885:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:892:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:907:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:911:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:913:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:919:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:923:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:929:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:940:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:957:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:966:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:972:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:978:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:984:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:993:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1000:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1011:#[stable(feature = "proc_macro_punct_eq", since = "1.50.0")]
library/proc_macro/src/lib.rs:1018:#[stable(feature = "proc_macro_punct_eq_flipped", since = "1.52.0")]
library/proc_macro/src/lib.rs:1027:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1050:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1063:    #[stable(feature = "proc_macro_raw_ident", since = "1.47.0")]
library/proc_macro/src/lib.rs:1074:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1080:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1088:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1097:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1107:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1122:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1138:        #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1165:        #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1229:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1254:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1274:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1299:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1308:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1317:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1326:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1333:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1339:    #[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1355:    #[unstable(feature = "proc_macro_span", issue = "54725")]
library/proc_macro/src/lib.rs:1414:#[stable(feature = "proc_macro_literal_parse", since = "1.54.0")]
library/proc_macro/src/lib.rs:1426:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1435:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1447:#[stable(feature = "proc_macro_lib2", since = "1.29.0")]
library/proc_macro/src/lib.rs:1462:#[unstable(feature = "proc_macro_tracked_env", issue = "99515")]
library/proc_macro/src/lib.rs:1472:    #[unstable(feature = "proc_macro_tracked_env", issue = "99515")]
library/proc_macro/src/lib.rs:1482:#[unstable(feature = "track_path", issue = "99515")]
library/proc_macro/src/lib.rs:1488:    #[unstable(feature = "track_path", issue = "99515")]
library/proc_macro/src/diagnostic.rs:4:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:19:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:25:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:32:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:39:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:48:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:59:        #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:71:        #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:83:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:86:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:95:#[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:98:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:105:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:120:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:126:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:132:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:138:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:144:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:150:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:156:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/proc_macro/src/diagnostic.rs:162:    #[unstable(feature = "proc_macro_diagnostic", issue = "54140")]
library/rustc-std-workspace-alloc/lib.rs:1:#![feature(no_core)]
library/portable-simd/crates/core_simd/Cargo.toml:11:[features]
library/portable-simd/crates/core_simd/Cargo.toml:24:default-features = false
library/portable-simd/crates/core_simd/Cargo.toml:25:features = ["alloc"]
library/portable-simd/crates/core_simd/Cargo.toml:31:std_float = { path = "../std_float/", features = ["as_crate"] }
library/portable-simd/crates/core_simd/tests/f32_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/swizzle.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/isize_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/ops_macros.rs:582:            #[cfg(feature = "std")]
library/portable-simd/crates/core_simd/tests/u16_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/u32_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/usize_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/pointers.rs:1:#![feature(portable_simd, strict_provenance)]
library/portable-simd/crates/core_simd/tests/i64_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/to_bytes.rs:1:#![feature(portable_simd, generic_const_exprs, adt_const_params)]
library/portable-simd/crates/core_simd/tests/to_bytes.rs:2:#![allow(incomplete_features)]
library/portable-simd/crates/core_simd/tests/to_bytes.rs:3:#![cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/tests/autoderef.rs:2:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/cast.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/f64_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/i32_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/i16_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/masks.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/masks.rs:128:            #[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/tests/mask_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/swizzle_dyn.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/u8_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/u64_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/round.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/i8_ops.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/tests/try_from_slice.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/examples/matrix_inversion.rs:4:#![feature(array_chunks, portable_simd)]
library/portable-simd/crates/core_simd/examples/nbody.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/examples/spectral_norm.rs:1:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/examples/dot_product.rs:5:#![feature(array_chunks)]
library/portable-simd/crates/core_simd/examples/dot_product.rs:6:#![feature(slice_as_chunks)]
library/portable-simd/crates/core_simd/examples/dot_product.rs:8:#![feature(portable_simd)]
library/portable-simd/crates/core_simd/webdriver.json:4:            "--enable-features=WebAssemblySimd"
library/portable-simd/crates/core_simd/src/swizzle.rs:16:/// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/swizzle.rs:31:/// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/swizzle.rs:274:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/swizzle.rs:327:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:20:/// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:53:/// # ABI "Features"
library/portable-simd/crates/core_simd/src/vector.rs:120:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:135:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:156:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:263:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:291:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:292:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:293:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:317:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:337:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:360:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:394:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:395:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:396:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:434:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:435:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:436:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:467:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:468:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:469:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:497:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:519:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:520:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:521:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:550:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:551:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:552:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:604:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:605:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:606:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/vector.rs:631:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/vector.rs:632:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/vector.rs:633:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/lib.rs:2:#![feature(
library/portable-simd/crates/core_simd/src/lib.rs:17:#![cfg_attr(feature = "generic_const_exprs", feature(generic_const_exprs))]
library/portable-simd/crates/core_simd/src/lib.rs:18:#![cfg_attr(feature = "generic_const_exprs", allow(incomplete_features))]
library/portable-simd/crates/core_simd/src/lib.rs:21:#![unstable(feature = "portable_simd", issue = "86656")]
library/portable-simd/crates/core_simd/src/fmt.rs:11:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/fmt.rs:12:    /// # #[cfg(feature = "as_crate")] use core_simd::simd::Simd;
library/portable-simd/crates/core_simd/src/fmt.rs:13:    /// # #[cfg(not(feature = "as_crate"))] use core::simd::Simd;
library/portable-simd/crates/core_simd/src/lane_count.rs:37:#[cfg(feature = "all_lane_counts")]
library/portable-simd/crates/core_simd/src/mod.rs:6:#[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/elements/float.rs:28:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/float.rs:29:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:30:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:162:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/float.rs:163:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:164:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:176:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/float.rs:177:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:178:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:195:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/float.rs:196:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:197:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:222:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/float.rs:223:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:224:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/float.rs:387:                if cfg!(all(target_arch = "x86", not(target_feature = "sse2"))) {
library/portable-simd/crates/core_simd/src/elements/float.rs:398:                if cfg!(all(target_arch = "x86", not(target_feature = "sse2"))) {
library/portable-simd/crates/core_simd/src/elements/int.rs:28:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:29:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:30:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:46:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:47:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:48:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:64:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:65:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:66:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:79:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:80:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:81:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:97:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:98:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:99:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:127:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:128:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:129:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:145:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:146:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:147:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:163:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:164:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:165:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:177:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/int.rs:178:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/int.rs:179:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/uint.rs:23:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/uint.rs:24:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/uint.rs:25:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/elements/uint.rs:41:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/elements/uint.rs:42:    /// # #[cfg(feature = "as_crate")] use core_simd::simd;
library/portable-simd/crates/core_simd/src/elements/uint.rs:43:    /// # #[cfg(not(feature = "as_crate"))] use core::simd;
library/portable-simd/crates/core_simd/src/select.rs:16:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/select.rs:46:    /// # #![feature(portable_simd)]
library/portable-simd/crates/core_simd/src/masks.rs:6:    not(all(target_arch = "x86_64", target_feature = "avx512f")),
library/portable-simd/crates/core_simd/src/masks.rs:10:    all(target_arch = "x86_64", target_feature = "avx512f"),
library/portable-simd/crates/core_simd/src/masks.rs:18:#[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:15:    /// A planned compiler improvement will enable using `#[target_feature]` instead.
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:23:            target_feature = "v7",
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:24:            target_feature = "neon",
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:40:                        all(target_arch = "arm", target_feature = "v7")
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:42:                    target_feature = "neon",
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:46:                #[cfg(target_feature = "ssse3")]
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:48:                #[cfg(target_feature = "simd128")]
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:52:                    target_feature = "neon",
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:56:                #[cfg(all(target_feature = "avx2", not(target_feature = "avx512vbmi")))]
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:58:                #[cfg(target_feature = "avx512vl,avx512vbmi")]
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:63:                // #[cfg(target_feature = "avx512vbmi")]
library/portable-simd/crates/core_simd/src/swizzle_dyn.rs:84:#[target_feature(enable = "avx2")]
library/portable-simd/crates/core_simd/src/masks/full_masks.rs:7:#[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/full_masks.rs:148:    #[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/full_masks.rs:178:    #[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/to_bitmask.rs:33:#[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/to_bitmask.rs:76:#[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/to_bitmask.rs:81:#[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/bitmask.rs:122:    #[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/masks/bitmask.rs:132:    #[cfg(feature = "generic_const_exprs")]
library/portable-simd/crates/core_simd/src/vendor/arm.rs:12:    all(target_arch = "arm", target_feature = "v7"),
library/portable-simd/crates/core_simd/src/vendor/arm.rs:48:    all(target_feature = "v5te", not(target_feature = "mclass")),
library/portable-simd/crates/core_simd/src/vendor/arm.rs:49:    all(target_feature = "mclass", target_feature = "dsp"),
library/portable-simd/crates/core_simd/src/vendor/arm.rs:59:    all(target_feature = "v6", not(target_feature = "mclass")),
library/portable-simd/crates/core_simd/src/vendor/arm.rs:60:    all(target_feature = "mclass", target_feature = "dsp"),
library/portable-simd/crates/std_float/Cargo.toml:9:core_simd = { path = "../core_simd", default-features = false }
library/portable-simd/crates/std_float/Cargo.toml:11:[features]
library/portable-simd/crates/std_float/src/lib.rs:1:#![cfg_attr(feature = "as_crate", no_std)] // We are std!
library/portable-simd/crates/std_float/src/lib.rs:2:#![cfg_attr(feature = "as_crate", feature(platform_intrinsics), feature(portable_simd))]
library/portable-simd/crates/std_float/src/lib.rs:3:#[cfg(not(feature = "as_crate"))]
library/portable-simd/crates/std_float/src/lib.rs:5:#[cfg(feature = "as_crate")]
library/portable-simd/crates/std_float/src/lib.rs:10:#[cfg(feature = "as_crate")]
library/portable-simd/crates/std_float/src/lib.rs:15:#[cfg(feature = "as_crate")]
library/portable-simd/crates/test_helpers/Cargo.toml:9:default-features = false
library/portable-simd/crates/test_helpers/Cargo.toml:10:features = ["alloc"]
library/portable-simd/crates/test_helpers/Cargo.toml:12:[features]
library/portable-simd/crates/test_helpers/src/lib.rs:426:                #[cfg(feature = "all_lane_counts")]
library/portable-simd/crates/test_helpers/src/lib.rs:435:                #[cfg(feature = "all_lane_counts")]
library/portable-simd/crates/test_helpers/src/lib.rs:530:                #[cfg(feature = "all_lane_counts")]
library/portable-simd/crates/test_helpers/src/lib.rs:539:                #[cfg(feature = "all_lane_counts")]
library/portable-simd/README.md:29:#![feature(portable_simd)]
library/portable-simd/CONTRIBUTING.md:5:2. Create your feature branch: `git checkout -b my-branch`
library/portable-simd/CONTRIBUTING.md:7:4. Test it: `cargo test`. Remember to enable whatever SIMD features you intend to test by setting `RUSTFLAGS`.
library/portable-simd/beginners-guide.md:32:* **Vector Register:** The extra-wide registers that are used for SIMD operations are commonly called vector registers, though you may also see "SIMD registers", vendor names for specific features, or even "floating-point register" as it is common for the same registers to be used with both scalar and vectorized floating-point operations.
library/portable-simd/beginners-guide.md:38:* **Target Feature:** Rust calls a CPU architecture extension a `target_feature`. Proper SIMD requires various CPU extensions to be enabled (details below). Don't confuse this with `feature`, which is a Cargo crate concept.
library/portable-simd/beginners-guide.md:40:## Target Features
library/portable-simd/beginners-guide.md:42:When using SIMD, you should be familiar with the CPU feature set that you're targeting.
library/portable-simd/beginners-guide.md:44:On `arm` and `aarch64` it's fairly simple. There's just one CPU feature that controls if SIMD is available: `neon` (or "NEON", all caps, as the ARM docs often put it). Neon registers can be used as 64-bit or 128-bit. When doing 128-bit operations it just uses two 64-bit registers as a single 128-bit register.
library/portable-simd/beginners-guide.md:53:The list notes the bit widths available at each feature level, though the operations of the more advanced features can generally be used with the smaller register sizes as well. For example, new operations introduced in `avx` generally have a 128-bit form as well as a 256-bit form. This means that even if you only do 128-bit work you can still benefit from the later feature levels.
library/portable-simd/beginners-guide.md:57:### Selecting Additional Target Features
library/portable-simd/beginners-guide.md:59:If you want to enable support for a target feature within your build, generally you should use a [target-feature](https://rust-lang.github.io/packed_simd/perf-guide/target-feature/rustflags.html#target-feature) setting within you `RUSTFLAGS` setting.
library/portable-simd/beginners-guide.md:61:If you know that you're targeting a specific CPU you can instead use the [target-cpu](https://rust-lang.github.io/packed_simd/perf-guide/target-feature/rustflags.html#target-cpu) flag and the compiler will enable the correct set of features for that CPU.
library/portable-simd/beginners-guide.md:63:The [Steam Hardware Survey](https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam) is one of the few places with data on how common various CPU features are. The dataset is limited to "the kinds of computers owned by people who play computer games", so the info only covers `x86`/`x86_64`, and it also probably skews to slightly higher quality computers than average. Still, we can see that the `sse` levels have very high support, `avx` and `avx2` are quite common as well, and the `avx-512` family is still so early in adoption you can barely find it in consumer grade stuff.
library/portable-simd/beginners-guide.md:65:## Running a program compiled for a CPU feature level that the CPU doesn't support is automatic undefined behavior.
library/portable-simd/beginners-guide.md:73:This is why the various Rust targets *don't* enable many CPU feature flags by default: requiring a more advanced CPU makes the final binary *less* portable.
library/portable-simd/beginners-guide.md:75:So please select an appropriate CPU feature level when building your programs.
library/portable-simd/.github/workflows/ci.yml:63:    name: "${{ matrix.target_feature }} on ${{ matrix.target }}"
library/portable-simd/.github/workflows/ci.yml:71:        # an arg to `-Ctarget-feature`
library/portable-simd/.github/workflows/ci.yml:72:        target_feature: [default, native, +sse3, +ssse3, +sse4.1, +sse4.2, +avx, +avx2]
library/portable-simd/.github/workflows/ci.yml:76:          - { target: x86_64-apple-darwin, target_feature: +avx2 }
library/portable-simd/.github/workflows/ci.yml:77:          # These features are statically known to be present for all 64 bit
library/portable-simd/.github/workflows/ci.yml:79:          - { target: x86_64-apple-darwin, target_feature: +sse3 }
library/portable-simd/.github/workflows/ci.yml:80:          - { target: x86_64-apple-darwin, target_feature: +ssse3 }
library/portable-simd/.github/workflows/ci.yml:82:          - { target: i686-pc-windows-msvc, target_feature: native }
library/portable-simd/.github/workflows/ci.yml:83:          - { target: i586-pc-windows-msvc, target_feature: native }
library/portable-simd/.github/workflows/ci.yml:94:          - { target: i586-pc-windows-msvc, target_feature: +sse, os: windows-latest }
library/portable-simd/.github/workflows/ci.yml:95:          - { target: i586-pc-windows-msvc, target_feature: +sse2, os: windows-latest }
library/portable-simd/.github/workflows/ci.yml:111:          case "${{ matrix.target_feature }}" in
library/portable-simd/.github/workflows/ci.yml:118:              echo "RUSTFLAGS=-Dwarnings -Ctarget-feature=${{ matrix.target_feature }}" >> $GITHUB_ENV
library/portable-simd/.github/workflows/ci.yml:127:          echo "Caveat: not all target features are expected to be logged"
library/portable-simd/.github/workflows/ci.yml:151:          - { name: simd128, RUSTFLAGS: "-C target-feature=+simd128" }
library/portable-simd/.github/workflows/ci.yml:174:      # TODO: Sadly, we cant configure target-feature in a meaningful way
library/portable-simd/.github/workflows/ci.yml:176:      # features, nor does it give us a way to do so.
library/portable-simd/.github/workflows/ci.yml:231:  features:
library/portable-simd/.github/workflows/ci.yml:232:    name: "Check cargo features (${{ matrix.simd }} × ${{ matrix.features }})"
library/portable-simd/.github/workflows/ci.yml:240:        features:
library/portable-simd/.github/workflows/ci.yml:242:          - "--features std"
library/portable-simd/.github/workflows/ci.yml:243:          - "--features generic_const_exprs"
library/portable-simd/.github/workflows/ci.yml:244:          - "--features std --features generic_const_exprs"
library/portable-simd/.github/workflows/ci.yml:245:          - "--features all_lane_counts"
library/portable-simd/.github/workflows/ci.yml:246:          - "--features all_lane_counts --features std"
library/portable-simd/.github/workflows/ci.yml:247:          - "--features all_lane_counts --features generic_const_exprs"
library/portable-simd/.github/workflows/ci.yml:248:          - "--features all_lane_counts --features std --features generic_const_exprs"
library/portable-simd/.github/workflows/ci.yml:257:        run: echo "CPU_FEATURE=$(lscpu | grep -o avx512[a-z]* | sed s/avx/+avx/ | tr '\n' ',' )" >> $GITHUB_ENV
library/portable-simd/.github/workflows/ci.yml:260:        run: RUSTFLAGS="-Dwarnings" cargo check --all-targets --no-default-features ${{ matrix.features }}
library/portable-simd/.github/workflows/ci.yml:262:        if: ${{ matrix.simd == 'avx512' && contains(env.CPU_FEATURE, 'avx512') }}
library/portable-simd/.github/workflows/ci.yml:264:          echo "Found AVX features: $CPU_FEATURE"
library/portable-simd/.github/workflows/ci.yml:265:          RUSTFLAGS="-Dwarnings -Ctarget-feature=$CPU_FEATURE" cargo check --all-targets --no-default-features ${{ matrix.features }}
library/portable-simd/.github/ISSUE_TEMPLATE/feature_request.md:2:name: Feature Request
library/portable-simd/.github/ISSUE_TEMPLATE/feature_request.md:4:labels: C-feature-request
library/portable-simd/.github/ISSUE_TEMPLATE/feature_request.md:9:  We are very interested in any feature requests you may have.
library/portable-simd/.github/ISSUE_TEMPLATE/feature_request.md:12:  Requests for extensions to compiler features, such as `target_feature`, binary versioning for SIMD APIs, or
library/panic_unwind/Cargo.toml:17:libc = { version = "0.2", default-features = false }
library/panic_unwind/src/lib.rs:15:#![unstable(feature = "panic_unwind", issue = "32837")]
library/panic_unwind/src/lib.rs:17:#![feature(core_intrinsics)]
library/panic_unwind/src/lib.rs:18:#![feature(lang_items)]
library/panic_unwind/src/lib.rs:19:#![feature(panic_unwind)]
library/panic_unwind/src/lib.rs:20:#![feature(staged_api)]
library/panic_unwind/src/lib.rs:21:#![feature(std_internals)]
library/panic_unwind/src/lib.rs:22:#![feature(abi_thiscall)]
library/panic_unwind/src/lib.rs:23:#![feature(rustc_attrs)]
library/panic_unwind/src/lib.rs:25:#![feature(panic_runtime)]
library/panic_unwind/src/lib.rs:26:#![feature(c_unwind)]
library/unwind/Cargo.toml:18:libc = { version = "0.2.79", features = ['rustc-dep-of-std'], default-features = false }
library/unwind/Cargo.toml:25:[features]
library/unwind/build.rs:22:            println!("cargo:rustc-cfg=feature=\"system-llvm-libunwind\"");
library/unwind/src/lib.rs:2:#![unstable(feature = "panic_unwind", issue = "32837")]
library/unwind/src/lib.rs:3:#![feature(link_cfg)]
library/unwind/src/lib.rs:4:#![feature(staged_api)]
library/unwind/src/lib.rs:5:#![feature(c_unwind)]
library/unwind/src/lib.rs:6:#![feature(cfg_target_abi)]
library/unwind/src/lib.rs:7:#![cfg_attr(not(target_env = "msvc"), feature(libc))]
library/unwind/src/lib.rs:41:    if #[cfg(all(feature = "llvm-libunwind", feature = "system-llvm-libunwind"))] {
library/unwind/src/lib.rs:43:    } else if #[cfg(feature = "llvm-libunwind")] {
library/unwind/src/lib.rs:46:    } else if #[cfg(feature = "system-llvm-libunwind")] {
library/unwind/src/lib.rs:47:        #[link(name = "unwind", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:48:        #[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:51:        #[link(name = "unwind", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:52:        #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:61:    if #[cfg(all(feature = "llvm-libunwind", feature = "system-llvm-libunwind"))] {
library/unwind/src/lib.rs:63:    } else if #[cfg(feature = "llvm-libunwind")] {
library/unwind/src/lib.rs:67:        #[link(name = "unwind", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:68:        #[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:75:    if #[cfg(feature = "llvm-libunwind")] {
library/unwind/src/lib.rs:77:    } else if #[cfg(feature = "system-llvm-libunwind")] {
library/unwind/src/lib.rs:78:        #[link(name = "unwind", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:79:        #[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:82:        #[link(name = "gcc", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:83:        #[link(name = "gcc", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:89:#[link(name = "dl", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:90:#[link(name = "dl", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:99:    not(feature = "llvm-libunwind"),
library/unwind/src/lib.rs:100:    not(feature = "system-llvm-libunwind")
library/unwind/src/lib.rs:102:#[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:108:    not(feature = "llvm-libunwind"),
library/unwind/src/lib.rs:109:    feature = "system-llvm-libunwind"
library/unwind/src/lib.rs:111:#[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
library/unwind/src/lib.rs:115:#[link(name = "gcc_eh", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
library/unwind/src/lib.rs:116:#[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
library/unwind/src/libunwind.rs:95:// feature `llvm-libunwind`, as no other cdylib will provided those _Unwind_* symbols.
library/unwind/src/libunwind.rs:103:        all(feature = "llvm-libunwind", any(target_os = "fuchsia", target_os = "linux")),
library/unwind/src/libunwind.rs:134:        all(feature = "llvm-libunwind", any(target_os = "fuchsia", target_os = "linux")),
library/unwind/src/libunwind.rs:192:        all(feature = "llvm-libunwind", any(target_os = "fuchsia", target_os = "linux")),
library/unwind/src/libunwind.rs:258:        all(feature = "llvm-libunwind", any(target_os = "fuchsia", target_os = "linux")),
library/unwind/src/libunwind.rs:265:        all(feature = "llvm-libunwind", any(target_os = "fuchsia", target_os = "linux")),
library/rtstartup/rsend.rs:3:#![feature(no_core)]
library/rtstartup/rsend.rs:4:#![feature(lang_items)]
library/rtstartup/rsend.rs:5:#![feature(auto_traits)]
library/rtstartup/rsbegin.rs:15:#![feature(no_core)]
library/rtstartup/rsbegin.rs:16:#![feature(lang_items)]
library/rtstartup/rsbegin.rs:17:#![feature(auto_traits)]
library/rustc-std-workspace-std/lib.rs:1:#![feature(restricted_std)]
library/profiler_builtins/Cargo.toml:13:compiler_builtins = { version = "0.1.0", features = ['rustc-dep-of-std'] }
library/profiler_builtins/build.rs:47:        // Turn off various features of gcc and such, mostly copying
library/profiler_builtins/build.rs:68:        .map(|features| features.to_string_lossy().to_lowercase().contains("ptr"))
library/profiler_builtins/src/lib.rs:2:#![feature(profiler_runtime)]
library/profiler_builtins/src/lib.rs:5:    feature = "profiler_runtime_lib",
library/profiler_builtins/src/lib.rs:9:#![allow(unused_features)]
library/profiler_builtins/src/lib.rs:10:#![feature(staged_api)]
library/panic_abort/Cargo.toml:16:cfg-if = { version = "1.0", features = ['rustc-dep-of-std'] }
library/panic_abort/Cargo.toml:18:libc = { version = "0.2", default-features = false }
library/panic_abort/src/lib.rs:7:#![unstable(feature = "panic_abort", issue = "32837")]
library/panic_abort/src/lib.rs:10:#![allow(unused_features)]
library/panic_abort/src/lib.rs:11:#![feature(core_intrinsics)]
library/panic_abort/src/lib.rs:12:#![feature(panic_runtime)]
library/panic_abort/src/lib.rs:13:#![feature(std_internals)]
library/panic_abort/src/lib.rs:14:#![feature(staged_api)]
library/panic_abort/src/lib.rs:15:#![feature(rustc_attrs)]
library/panic_abort/src/lib.rs:16:#![feature(c_unwind)]
library/panic_abort/src/lib.rs:71:                    } else if #[cfg(all(target_arch = "arm", target_feature = "thumb-mode"))] {
library/sysroot/Cargo.toml:12:# Forward features to the `std` crate as necessary
library/sysroot/Cargo.toml:13:[features]
src/tools/rust-installer/Cargo.toml:22:features = ["derive"]
src/tools/rust-installer/make-tarballs.sh:15:# which uses the unstable `public-dependency` feature.
src/tools/rust-installer/combine-installers.sh:15:# which uses the unstable `public-dependency` feature.
src/tools/rust-installer/gen-installer.sh:15:# which uses the unstable `public-dependency` feature.
src/tools/rust-installer/install-template.sh:591:            # contents of those directories are _not_ disjoint. Since this feature
src/tools/opt-dist/Cargo.toml:10:anyhow = { version = "1", features = ["backtrace"] }
src/tools/opt-dist/Cargo.toml:13:sysinfo = { version = "0.29", default-features = false }
src/tools/opt-dist/Cargo.toml:16:reqwest = { version = "0.11", features = ["blocking"] }
src/tools/opt-dist/Cargo.toml:17:zip = { version = "0.6", default-features = false, features = ["deflate"] }
src/tools/opt-dist/Cargo.toml:20:serde = { version = "1", features = ["derive"] }
src/tools/rustdoc/Cargo.toml:16:[features]
src/tools/rustdoc/main.rs:1:#![feature(unix_sigpipe)]
src/tools/compiletest/Cargo.toml:17:tracing-subscriber = { version = "0.3.3", default-features = false, features = ["fmt", "env-filter", "smallvec", "parking_lot", "ansi"] }
src/tools/compiletest/Cargo.toml:19:serde = { version = "1.0", features = ["derive"] }
src/tools/compiletest/Cargo.toml:36:features = [
src/tools/compiletest/src/lib.rs:2:// The `test` crate is the only unstable feature
src/tools/compiletest/src/lib.rs:4:#![feature(test)]
src/tools/compiletest/src/runtest.rs:2472:            rustc.arg("-Ctarget-feature=-crt-static");
src/tools/compiletest/src/runtest.rs:3459:            cmd.env("RUSTFLAGS", "-Ctarget-feature=-crt-static").env("IS_MUSL_HOST", "1");
src/tools/compiletest/src/common.rs:419:            // These targets require an additional asm_experimental_arch feature.
src/tools/rust-analyzer/Cargo.toml:92:smallvec = { version = "1.10.0", features = [
src/tools/rust-analyzer/Cargo.toml:100:serde = { version = "1.0.156", features = ["derive"] }
src/tools/rust-analyzer/Cargo.toml:102:triomphe = { version = "0.1.8", default-features = false, features = ["std"] }
src/tools/rust-analyzer/Cargo.toml:104:hashbrown = { version = "0.12.3", features = ["inline-more"], default-features = false }
src/tools/rust-analyzer/crates/hir-def/Cargo.toml:19:# We need to freeze the version of the crate, as the raw-api feature is considered unstable
src/tools/rust-analyzer/crates/hir-def/Cargo.toml:20:dashmap = { version = "=5.4.0", features = ["raw-api"] }
src/tools/rust-analyzer/crates/hir-def/Cargo.toml:23:fst = { version = "0.4.7", default-features = false }
src/tools/rust-analyzer/crates/hir-def/Cargo.toml:34:rustc_abi = { version = "0.0.20221221", package = "hkalbasi-rustc-ap-rustc_abi", default-features = false }
src/tools/rust-analyzer/crates/hir-def/Cargo.toml:35:rustc_index = { version = "0.0.20221221", package = "hkalbasi-rustc-ap-rustc_index", default-features = false }
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:69:        #[cfg(feature = "impl-default")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:95:        #[cfg(feature = "impl-default")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:112:#[cfg(feature = "impl-default")] impl Default for D3DVSHADERCAPS2_0 {
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:130:#[cfg(feature = "impl-default")] impl Default for D3DCONTENTPROTECTIONCAPS {
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:147:        #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:160:        #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:168:#[stable(feature = "rust1", since = "1.0.0")] impl fmt::Binary for isize {
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:188:generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = "rust1" , since = "1.0.0" ) ] , Split , RSplit , & 'a str );
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:366:    #[stable(feature= "nonzero",since="1.28.0")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:394:           #[ stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:398:           #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:897:    ($($i:item)*) => ($(#[cfg(feature = "std")]$i)*)
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:904:    ($($i:item)*) => ($(#[cfg(feature = "std")]$i)*)
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:907:#[cfg(feature = "std")] mod m;
src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/mbe/regression.rs:908:#[cfg(feature = "std")] mod f;
src/tools/rust-analyzer/crates/hir-def/src/body/lower.rs:572:                // so we insert a missing expression at the beginning for IDE features
src/tools/rust-analyzer/crates/hir-def/src/body/lower.rs:1403:        // so we insert a missing pattern at the beginning for IDE features
src/tools/rust-analyzer/crates/hir-def/src/item_tree.rs:20://! syntax-level Rust features are already desugared to simpler forms in the `ItemTree`, but name
src/tools/rust-analyzer/crates/hir-def/src/path.rs:84:    /// feature.)
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:3://! The actual definitions were copied from rustc's `compiler/rustc_feature/src/builtin_attrs.rs`.
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:107:        concat!("the `#[", stringify!($attr), "]` attribute is an experimental feature")
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:232:        target_feature, Normal, template!(List: r#"enable = "name""#),
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:285:        "custom test frameworks are an unstable feature",
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:294:        "`#[thread_local]` is an experimental feature, and does not currently handle destructors",
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:350:        feature, CrateLevel,
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:356:        template!(List: r#"feature = "name", since = "version""#), DuplicatesOk, @only_local: true,
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:360:        template!(List: r#"feature = "name", reason = "...", issue = "N""#), DuplicatesOk,
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:362:    ungated!(rustc_const_unstable, Normal, template!(List: r#"feature = "name""#), DuplicatesOk),
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:365:        template!(List: r#"feature = "name""#), DuplicatesOk, @only_local: true,
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:369:        template!(List: r#"feature = "name", reason = "...", issue = "N""#), DuplicatesOk
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:373:        "allow_internal_unstable side-steps feature gating and stability checks",
src/tools/rust-analyzer/crates/hir-def/src/attr/builtin.rs:378:        "rustc_allow_const_fn_unstable side-steps feature gating and stability checks"
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:140:    /// Unstable features of Rust enabled with `#![feature(A, B)]`.
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:141:    unstable_features: FxHashSet<SmolStr>,
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:159:            unstable_features,
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:172:        unstable_features.shrink_to_fit();
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:366:                unstable_features: FxHashSet::default(),
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:402:    pub fn is_unstable_feature_enabled(&self, feature: &str) -> bool {
src/tools/rust-analyzer/crates/hir-def/src/nameres.rs:403:        self.data.unstable_features.contains(feature)
src/tools/rust-analyzer/crates/hir-def/src/nameres/collector.rs:330:            if *attr_name == hir_expand::name![feature] {
src/tools/rust-analyzer/crates/hir-def/src/nameres/collector.rs:332:                let features = attr
src/tools/rust-analyzer/crates/hir-def/src/nameres/collector.rs:340:                crate_data.unstable_features.extend(features);
src/tools/rust-analyzer/crates/hir-def/src/nameres/tests.rs:586:        #[cfg(all(not(any()), feature = "foo", feature = "bar", opt = "42"))]
src/tools/rust-analyzer/crates/hir-def/src/nameres/tests.rs:607://- /lib.rs crate:std cfg:test,feature=foo,feature=bar,opt=42
src/tools/rust-analyzer/crates/hir-def/src/nameres/tests.rs:614:        #[cfg(all(not(any()), feature = "foo", feature = "bar", opt = "42"))]
src/tools/rust-analyzer/crates/hir-def/src/lang_item.rs:4://! features, such as Fn family of traits.
src/tools/rust-analyzer/crates/hir-ty/Cargo.toml:26:chalk-solve = { version = "0.92.0", default-features = false }
src/tools/rust-analyzer/crates/hir-ty/Cargo.toml:28:chalk-recursive = { version = "0.92.0", default-features = false }
src/tools/rust-analyzer/crates/hir-ty/Cargo.toml:35:rustc_index = { version = "0.0.20221221", package = "hkalbasi-rustc-ap-rustc_index", default-features = false }
src/tools/rust-analyzer/crates/hir-ty/Cargo.toml:50:tracing-subscriber = { version = "0.3.16", default-features = false, features = [
src/tools/rust-analyzer/crates/hir-ty/src/tests/patterns.rs:1099:fn my_fn(#[cfg(feature = "feature")] u8: u8, u32: u32) {}
src/tools/rust-analyzer/crates/hir-ty/src/tests/macros.rs:1280://- /lib.rs crate:foo cfg:feature=foo
src/tools/rust-analyzer/crates/hir-ty/src/tests/macros.rs:1285:        #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/hir-ty/src/tests/macros.rs:1287:        #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/hir-ty/src/tests/traits.rs:2672:#[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/decl_check/case_conv.rs:85:// Modified by replacing the use of unstable feature `array_windows`.
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs:554:        // If the `exhaustive_patterns` feature is enabled, we make sure to omit constructors that
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs:584:                let is_exhaustive_pat_feature = cx.feature_exhaustive_patterns();
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs:591:                    && !is_exhaustive_pat_feature
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs:601:                        let is_uninhabited = is_exhaustive_pat_feature
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs:615:            TyKind::Never if !cx.feature_exhaustive_patterns() && !pcx.is_top_level => {
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs:997:                    // of `std`). So this branch is only reachable when the feature is enabled and
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/usefulness.rs:303:        let exhaustive_patterns = def_map.is_unstable_feature_enabled("exhaustive_patterns");
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/usefulness.rs:308:        if self.feature_exhaustive_patterns() {
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/usefulness.rs:328:    // Rust's unstable feature described as "Allows exhaustive pattern matching on types that contain uninhabited types."
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/usefulness.rs:329:    pub(super) fn feature_exhaustive_patterns(&self) -> bool {
src/tools/rust-analyzer/crates/hir-ty/src/diagnostics/match_check/usefulness.rs:517:                        // `doc(hidden)` or they are unstable feature gate (only stdlib types).
src/tools/rust-analyzer/crates/hir-ty/src/infer/coerce.rs:471:                // FIXME Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396)
src/tools/rust-analyzer/crates/hir-ty/src/mir/eval.rs:2219:                // try to execute the manual impl of `FnTrait` for structs (nightly feature used in std)
src/tools/rust-analyzer/crates/ide/Cargo.toml:22:pulldown-cmark = { version = "0.9.1", default-features = false }
src/tools/rust-analyzer/crates/ide/Cargo.toml:53:[features]
src/tools/rust-analyzer/crates/ide/src/highlight_related.rs:39:// Feature: Highlight Related
src/tools/rust-analyzer/crates/ide/src/matching_brace.rs:6:// Feature: Matching Brace
src/tools/rust-analyzer/crates/ide/src/view_hir.rs:6:// Feature: View Hir
src/tools/rust-analyzer/crates/ide/src/goto_declaration.rs:13:// Feature: Go to Declaration
src/tools/rust-analyzer/crates/ide/src/hover/render.rs:13:    generated::lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},
src/tools/rust-analyzer/crates/ide/src/hover/render.rs:316:        "feature" => (false, FEATURES),
src/tools/rust-analyzer/crates/ide/src/hover/tests.rs:5163:fn hover_feature() {
src/tools/rust-analyzer/crates/ide/src/hover/tests.rs:5165:        r#"#![feature(box_syntax$0)]"#,
src/tools/rust-analyzer/crates/ide/src/hover/tests.rs:5175:                The tracking issue for this feature is: [#49733]
src/tools/rust-analyzer/crates/ide/src/hover/tests.rs:5189:                #![feature(box_syntax)]
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html:162:<span class="attribute_bracket attribute">#</span><span class="attribute_bracket attribute">[</span><span class="builtin_attr attribute library">cfg_attr</span><span class="parenthesis attribute">(</span><span class="none attribute">not</span><span class="parenthesis attribute">(</span><span class="none attribute">feature</span> <span class="operator attribute">=</span> <span class="string_literal attribute">"false"</span><span class="parenthesis attribute">)</span><span class="comma attribute">,</span> <span class="none attribute">doc</span> <span class="operator attribute">=</span> <span class="string_literal attribute">"</span><span class="keyword control injected">loop</span><span class="none injected"> </span><span class="brace injected">{</span><span class="brace injected">}</span><span class="string_literal attribute">"</span><span class="parenthesis attribute">)</span><span class="attribute_bracket attribute">]</span>
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html:166:<span class="attribute_bracket attribute">#</span><span class="attribute_bracket attribute">[</span><span class="builtin_attr attribute library">cfg_attr</span><span class="parenthesis attribute">(</span><span class="none attribute">feature</span> <span class="operator attribute">=</span> <span class="string_literal attribute">"alloc"</span><span class="comma attribute">,</span> <span class="none attribute">doc</span> <span class="operator attribute">=</span> <span class="string_literal attribute">"```rust"</span><span class="parenthesis attribute">)</span><span class="attribute_bracket attribute">]</span>
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html:167:<span class="attribute_bracket attribute">#</span><span class="attribute_bracket attribute">[</span><span class="builtin_attr attribute library">cfg_attr</span><span class="parenthesis attribute">(</span><span class="none attribute">not</span><span class="parenthesis attribute">(</span><span class="none attribute">feature</span> <span class="operator attribute">=</span> <span class="string_literal attribute">"alloc"</span><span class="parenthesis attribute">)</span><span class="comma attribute">,</span> <span class="none attribute">doc</span> <span class="operator attribute">=</span> <span class="string_literal attribute">"```ignore"</span><span class="parenthesis attribute">)</span><span class="attribute_bracket attribute">]</span>
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/tags.rs:43:// Don't forget to adjust the feature description in crates/ide/src/syntax_highlighting.rs.
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/tests.rs:744:#[cfg_attr(not(feature = "false"), doc = "loop {}")]
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/tests.rs:748:#[cfg_attr(feature = "alloc", doc = "```rust")]
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/tests.rs:749:#[cfg_attr(not(feature = "alloc"), doc = "```ignore")]
src/tools/rust-analyzer/crates/ide/src/doc_links.rs:120:// Feature: Open Docs
src/tools/rust-analyzer/crates/ide/src/doc_links.rs:124:// The simplest way to use this feature is via the context menu. Right-click on
src/tools/rust-analyzer/crates/ide/src/goto_type_definition.rs:6:// Feature: Go to Type Definition
src/tools/rust-analyzer/crates/ide/src/folding_ranges.rs:36:// Feature: Folding
src/tools/rust-analyzer/crates/ide/src/goto_implementation.rs:12:// Feature: Go to Implementation
src/tools/rust-analyzer/crates/ide/src/references.rs:43:// Feature: Find All References
src/tools/rust-analyzer/crates/ide/src/lib.rs:228:    // `AnalysisHost` for creating a fully-featured analysis.
src/tools/rust-analyzer/crates/ide/src/rename.rs:73:// Feature: Rename
src/tools/rust-analyzer/crates/ide/src/goto_definition.rs:14:// Feature: Go to Definition
src/tools/rust-analyzer/crates/ide/src/goto_definition.rs:1693:#[cfg_attr(feature = "false", derive)]
src/tools/rust-analyzer/crates/ide/src/interpret_function.rs:9:// Feature: Interpret Function
src/tools/rust-analyzer/crates/ide/src/parent_module.rs:14:// Feature: Parent Module
src/tools/rust-analyzer/crates/ide/src/typing/on_enter.rs:16:// Feature: On Enter
src/tools/rust-analyzer/crates/ide/src/typing/on_enter.rs:27:// Note that, depending on the other installed extensions, this feature can visibly slow down typing.
src/tools/rust-analyzer/crates/ide/src/status.rs:28:// Feature: Status
src/tools/rust-analyzer/crates/ide/src/annotations.rs:20:// Feature: Annotations
src/tools/rust-analyzer/crates/ide/src/view_mir.rs:6:// Feature: View Mir
src/tools/rust-analyzer/crates/ide/src/hover.rs:97:// Feature: Hover
src/tools/rust-analyzer/crates/ide/src/move_item.rs:15:// Feature: Move Item
src/tools/rust-analyzer/crates/ide/src/expand_macro.rs:15:// Feature: Expand Macro Recursively
src/tools/rust-analyzer/crates/ide/src/typing.rs:42:// Feature: On Typing Assists
src/tools/rust-analyzer/crates/ide/src/typing.rs:44:// Some features trigger on typing certain characters:
src/tools/rust-analyzer/crates/ide/src/view_item_tree.rs:5:// Feature: Debug ItemTree
src/tools/rust-analyzer/crates/ide/src/syntax_highlighting.rs:65:// Feature: Semantic Syntax Highlighting
src/tools/rust-analyzer/crates/ide/src/join_lines.rs:20:// Feature: Join Lines
src/tools/rust-analyzer/crates/ide/src/file_structure.rs:25:// Feature: File Structure
src/tools/rust-analyzer/crates/ide/src/fetch_crates.rs:13:// Feature: Show Dependency Tree
src/tools/rust-analyzer/crates/ide/src/view_memory_layout.rs:83:// Feature: View Memory Layout
src/tools/rust-analyzer/crates/ide/src/inlay_hints.rs:392:// Feature: Inlay Hints
src/tools/rust-analyzer/crates/ide/src/extend_selection.rs:15:// Feature: Expand and Shrink Selection
src/tools/rust-analyzer/crates/ide/src/extend_selection.rs:20:// This is a standard LSP feature and not a protocol extension.
src/tools/rust-analyzer/crates/ide/src/runnables.rs:110:// Feature: Run
src/tools/rust-analyzer/crates/ide/src/runnables.rs:194:// Feature: Related Tests
src/tools/rust-analyzer/crates/ide/src/runnables.rs:198:// The simplest way to use this feature is via the context menu. Right-click on
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1450:    fn test_runnables_with_feature() {
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1453://- /lib.rs crate:foo cfg:feature=foo
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1456:#[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1499:                                    key: "feature",
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1511:    fn test_runnables_with_features() {
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1514://- /lib.rs crate:foo cfg:feature=foo,feature=bar
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1517:#[cfg(all(feature = "foo", feature = "bar"))]
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1562:                                            key: "feature",
src/tools/rust-analyzer/crates/ide/src/runnables.rs:1568:                                            key: "feature",
src/tools/rust-analyzer/crates/ide/src/shuffle_crate_graph.rs:7:// Feature: Shuffle Crate Graph
src/tools/rust-analyzer/crates/ide/src/syntax_tree.rs:9:// Feature: Show Syntax Tree
src/tools/rust-analyzer/crates/ide/src/view_crate_graph.rs:8:// Feature: View Crate Graph
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:598:            #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:599:            #[rustc_const_unstable(feature = "const_fn_trait_ref_impls", issue = "101803")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:609:            #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:610:            #[rustc_const_unstable(feature = "const_fn_trait_ref_impls", issue = "101803")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:620:            #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:621:            #[rustc_const_unstable(feature = "const_fn_trait_ref_impls", issue = "101803")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:633:            #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:634:            #[rustc_const_unstable(feature = "const_fn_trait_ref_impls", issue = "101803")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:644:            #[stable(feature = "rust1", since = "1.0.0")]
src/tools/rust-analyzer/crates/test-utils/src/minicore.rs:645:            #[rustc_const_unstable(feature = "const_fn_trait_ref_impls", issue = "101803")]
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:45:        no_default_features: bool,
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:46:        all_features: bool,
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:47:        features: Vec<String>,
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:302:                no_default_features,
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:304:                all_features,
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:306:                features,
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:330:                if *all_features {
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:331:                    cmd.arg("--all-features");
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:333:                    if *no_default_features {
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:334:                        cmd.arg("--no-default-features");
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:336:                    if !features.is_empty() {
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:337:                        cmd.arg("--features");
src/tools/rust-analyzer/crates/flycheck/src/lib.rs:338:                        cmd.arg(features.join(" "));
src/tools/rust-analyzer/crates/ide-assists/Cargo.toml:36:[features]
src/tools/rust-analyzer/crates/ide-assists/src/lib.rs:10://! Assists are the main mechanism to deliver advanced IDE features to the user,
src/tools/rust-analyzer/crates/ide-assists/src/lib.rs:14://! with IDE features is that there are a lot of them, and it's hard to teach
src/tools/rust-analyzer/crates/ide-assists/src/lib.rs:18://! all the features.
src/tools/rust-analyzer/crates/ide-assists/src/lib.rs:32://! * Rarely useful actions are tricky. Sometimes there are features which are
src/tools/rust-analyzer/crates/ide-assists/src/lib.rs:87:// NOTE: We don't have a `Feature: ` section for assists, they are special-cased
src/tools/rust-analyzer/crates/ide-assists/src/tests.rs:2:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/destructure_tuple_binding.rs:1241:#![feature(bindings_after_at)]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/destructure_tuple_binding.rs:1248:#![feature(bindings_after_at)]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/auto_import.rs:15:// Feature: Auto Import
src/tools/rust-analyzer/crates/ide-assists/src/handlers/generate_impl.rs:166:                #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/generate_impl.rs:170:                #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/generate_impl.rs:173:                #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/generate_impl.rs:334:                #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/generate_impl.rs:338:                #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-assists/src/handlers/generate_impl.rs:341:                #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-assists/src/utils.rs:364:/// `find_struct_impl` looks for impl of a struct, but this also has additional feature
src/tools/rust-analyzer/crates/limit/Cargo.toml:11:[features]
src/tools/rust-analyzer/crates/limit/src/lib.rs:5:#[cfg(feature = "tracking")]
src/tools/rust-analyzer/crates/limit/src/lib.rs:12:    #[cfg(feature = "tracking")]
src/tools/rust-analyzer/crates/limit/src/lib.rs:22:            #[cfg(feature = "tracking")]
src/tools/rust-analyzer/crates/limit/src/lib.rs:29:    #[cfg(feature = "tracking")]
src/tools/rust-analyzer/crates/limit/src/lib.rs:33:            #[cfg(feature = "tracking")]
src/tools/rust-analyzer/crates/limit/src/lib.rs:51:            #[cfg(feature = "tracking")]
src/tools/rust-analyzer/crates/hir/src/lib.rs:5://! to a particular crate instance. That is, it has cfg flags and features
src/tools/rust-analyzer/crates/hir/src/semantics/source_to_def.rs:10://! This problem is a part of more-or-less every IDE feature implemented. Every
src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml:27:lsp-types = { version = "=0.94", features = ["proposed"] }
src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml:32:serde_json = { workspace = true, features = ["preserve_order"] }
src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml:36:mimalloc = { version = "0.1.30", default-features = false, optional = true }
src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml:39:tracing-subscriber = { version = "0.3.16", default-features = false, features = [
src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml:89:[features]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:6:fn sourcegen_feature_docs() {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:7:    let features = Feature::collect().unwrap();
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:8:    let contents = features.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join("\n\n");
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:11:// Generated file, do not edit by hand, see `sourcegen_feature_docs`.
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:16:    let dst = sourcegen::project_root().join("docs/user/generated_features.adoc");
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:21:struct Feature {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:27:impl Feature {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:28:    fn collect() -> io::Result<Vec<Feature>> {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:38:        fn collect_file(acc: &mut Vec<Feature>, path: PathBuf) -> io::Result<()> {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:40:            let comment_blocks = sourcegen::CommentBlock::extract("Feature", &text);
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:44:                if let Err(msg) = is_valid_feature_name(&id) {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:45:                    panic!("invalid feature name: {id:?}:\n  {msg}")
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:49:                acc.push(Feature { id, location, doc })
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:57:fn is_valid_feature_name(feature: &str) -> Result<(), String> {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:58:    'word: for word in feature.split_whitespace() {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs:76:impl fmt::Display for Feature {
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/main.rs:13:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/main.rs:524:            "cfg": [ "cfg_atom_1", "feature=\"cfg_1\""],
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/main.rs:715:#![feature(rustc_attrs)]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/main.rs:835:#[cfg(feature = "sysroot-abi")]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/main.rs:864:#![feature(rustc_attrs, decl_macro)]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/tidy.rs:8:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/tidy.rs:11:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/tidy.rs:146:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/tidy.rs:351:            if text.contains("// Feature:")
src/tools/rust-analyzer/crates/rust-analyzer/src/bin/main.rs:17:#[cfg(all(feature = "mimalloc"))]
src/tools/rust-analyzer/crates/rust-analyzer/src/bin/main.rs:21:#[cfg(all(feature = "jemalloc", not(target_env = "msvc")))]
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:7:use project_model::{self, CargoFeatures, ManifestPath, TargetKind};
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:25:    pub(crate) required_features: Vec<String>,
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:26:    pub(crate) features: FxHashSet<String>,
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:79:        let (allowed_features, target_required_features) = if let Some(mut spec) = spec {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:80:            let allowed_features = mem::take(&mut spec.features);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:81:            let required_features = mem::take(&mut spec.required_features);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:83:            (allowed_features, required_features)
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:90:        match &cargo_config.features {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:91:            CargoFeatures::All => {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:92:                args.push("--all-features".to_owned());
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:93:                for feature in target_required_features {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:94:                    args.push("--features".to_owned());
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:95:                    args.push(feature);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:98:            CargoFeatures::Selected { features, no_default_features } => {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:101:                    required_features(cfg, &mut feats);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:105:                    features.iter().filter(|&feat| allowed_features.contains(feat)).cloned(),
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:107:                feats.extend(target_required_features);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:110:                for feature in feats {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:111:                    args.push("--features".to_owned());
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:112:                    args.push(feature);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:115:                if *no_default_features {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:116:                    args.push("--no-default-features".to_owned());
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:144:            required_features: target_data.required_features.clone(),
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:145:            features: package_data.features.keys().cloned().collect(),
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:185:/// Fill minimal features needed
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:186:fn required_features(cfg_expr: &CfgExpr, features: &mut Vec<String>) {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:188:        CfgExpr::Atom(CfgAtom::KeyValue { key, value }) if key == "feature" => {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:189:            features.push(value.to_string())
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:192:            preds.iter().for_each(|cfg| required_features(cfg, features));
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:196:                let len_features = features.len();
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:197:                required_features(cfg, features);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:198:                if len_features != features.len() {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:218:    fn check(cfg: &str, expected_features: &[&str]) {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:226:        let mut features = vec![];
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:227:        required_features(&cfg_expr, &mut features);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:229:        let expected_features =
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:230:            expected_features.iter().map(|&it| SmolStr::new(it)).collect::<Vec<_>>();
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:232:        assert_eq!(features, expected_features);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:236:    fn test_cfg_expr_minimal_features_needed() {
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:237:        check(r#"#![cfg(feature = "baz")]"#, &["baz"]);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:238:        check(r#"#![cfg(all(feature = "baz", feature = "foo"))]"#, &["baz", "foo"]);
src/tools/rust-analyzer/crates/rust-analyzer/src/cargo_target_spec.rs:239:        check(r#"#![cfg(any(feature = "baz", feature = "foo", unix))]"#, &["baz"]);
src/tools/rust-analyzer/crates/rust-analyzer/src/config/patch_old_style.rs:106:    // cargo_allFeatures, cargo_features -> cargo_features
src/tools/rust-analyzer/crates/rust-analyzer/src/config/patch_old_style.rs:107:    if let Some(Value::Bool(true)) = copy.pointer("/cargo/allFeatures") {
src/tools/rust-analyzer/crates/rust-analyzer/src/config/patch_old_style.rs:108:        merge(json, json!({ "cargo": { "features": "all" } }));
src/tools/rust-analyzer/crates/rust-analyzer/src/config/patch_old_style.rs:111:    // checkOnSave_allFeatures, checkOnSave_features -> check_features
src/tools/rust-analyzer/crates/rust-analyzer/src/config/patch_old_style.rs:112:    if let Some(Value::Bool(true)) = copy.pointer("/checkOnSave/allFeatures") {
src/tools/rust-analyzer/crates/rust-analyzer/src/config/patch_old_style.rs:113:        merge(json, json!({ "check": { "features": "all" } }));
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:6://! Of particular interest is the `feature_flags` hash map: while other fields
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:7://! configure the server itself, feature flags are passed into analysis, and
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:26:    CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustLibSource,
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:94:        /// targets and features, with the following base command line:
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:111:        /// List of features to activate.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:113:        /// Set this to `"all"` to pass `--all-features` to cargo.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:114:        cargo_features: CargoFeaturesDef      = "[]",
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:115:        /// Whether to pass `--no-default-features` to cargo.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:116:        cargo_noDefaultFeatures: bool    = "false",
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:148:        /// List of features to activate. Defaults to
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:149:        /// `#rust-analyzer.cargo.features#`.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:151:        /// Set to `"all"` to pass `--all-features` to Cargo.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:152:        check_features | checkOnSave_features: Option<CargoFeaturesDef>  = "null",
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:167:        /// Whether to pass `--no-default-features` to Cargo. Defaults to
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:168:        /// `#rust-analyzer.cargo.noDefaultFeatures#`.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:169:        check_noDefaultFeatures | checkOnSave_noDefaultFeatures: Option<bool>         = "null",
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:200:        /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:214:        // NOTE: Keep this list in sync with the feature docs of user snippets.
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1192:            features: match &self.data.cargo_features {
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1193:                CargoFeaturesDef::All => CargoFeatures::All,
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1194:                CargoFeaturesDef::Selected(features) => CargoFeatures::Selected {
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1195:                    features: features.clone(),
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1196:                    no_default_features: self.data.cargo_noDefaultFeatures,
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1297:                no_default_features: self
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1299:                    .check_noDefaultFeatures
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1300:                    .unwrap_or(self.data.cargo_noDefaultFeatures),
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1301:                all_features: matches!(
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1302:                    self.data.check_features.as_ref().unwrap_or(&self.data.cargo_features),
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1303:                    CargoFeaturesDef::All
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1305:                features: match self
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1307:                    .check_features
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1309:                    .unwrap_or_else(|| self.data.cargo_features.clone())
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1311:                    CargoFeaturesDef::All => vec![],
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1312:                    CargoFeaturesDef::Selected(it) => it,
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:1846:enum CargoFeaturesDef {
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:2293:        "CargoFeaturesDef" => set! {
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:2301:                        "Pass `--all-features` to cargo",
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:2310:        "Option<CargoFeaturesDef>" => set! {
src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs:2318:                        "Pass `--all-features` to cargo",
src/tools/rust-analyzer/crates/rust-analyzer/src/cli/flags.rs:91:            /// Runs several IDE features after analysis, including semantics highlighting, diagnostics
src/tools/rust-analyzer/crates/rust-analyzer/src/handlers/request.rs:343:    // feature off here, hoping that we'll enable it one day, 😿.
src/tools/rust-analyzer/crates/rust-analyzer/src/handlers/request.rs:1935:                cmd.arg("--unstable-features");
src/tools/rust-analyzer/crates/paths/Cargo.toml:16:# serde-derive crate. Even though we don't activate the derive feature here,
src/tools/rust-analyzer/crates/ide-diagnostics/Cargo.toml:37:[features]
src/tools/rust-analyzer/crates/ide-diagnostics/src/tests.rs:1:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:135:    fn no_such_field_with_feature_flag_diagnostics() {
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:138://- /lib.rs crate:foo cfg:feature=foo
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:141:    #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:146:    #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:150:    #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:160:    fn no_such_field_enum_with_feature_flag_diagnostics() {
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:163://- /lib.rs crate:foo cfg:feature=foo
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:165:    #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:167:    #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:183:    fn no_such_field_with_feature_flag_diagnostics_on_struct_lit() {
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:186://- /lib.rs crate:foo cfg:feature=foo
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:188:    #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:190:    #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:195:    #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:199:    #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:204:        #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:206:        #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:211:            #[cfg(feature = "foo")]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/no_such_field.rs:213:            #[cfg(not(feature = "foo"))]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/inactive_code.rs:97:    #[cfg(feature = "std")] use std;
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/inactive_code.rs:98:  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: feature = "std" is disabled
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/unlinked_file.rs:22:// crates rust-analyzer failed to discover. The file will not have IDE features available.
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/missing_match_arms.rs:960:#![feature(exhaustive_patterns)]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/missing_match_arms.rs:980:#![feature(exhaustive_patterns)]
src/tools/rust-analyzer/crates/ide-diagnostics/src/handlers/missing_match_arms.rs:987:#![feature(exhaustive_patterns)]
src/tools/rust-analyzer/crates/parser/test_data/parser/ok/0044_let_attrs.rs:3:    #[cfg(feature = "backtrace")]
src/tools/rust-analyzer/crates/parser/test_data/parser/ok/0044_let_attrs.rast:28:                IDENT "feature"
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rast:36:                    IDENT "feature"
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rast:65:                    IDENT "feature"
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rast:94:                    IDENT "feature"
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rast:112:                    IDENT "feature"
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rast:130:                    IDENT "feature"
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rs:3:        #[cfg(feature = "some")]
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rs:5:        #[cfg(feature = "other")]
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rs:7:        #[cfg(feature = "many")]
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rs:8:        #[cfg(feature = "attributes")]
src/tools/rust-analyzer/crates/parser/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rs:9:        #[cfg(feature = "before")]
src/tools/rust-analyzer/crates/parser/src/grammar/expressions/atom.rs:464:    //         #[cfg(feature = "some")]
src/tools/rust-analyzer/crates/parser/src/grammar/expressions/atom.rs:466:    //         #[cfg(feature = "other")]
src/tools/rust-analyzer/crates/parser/src/grammar/expressions/atom.rs:468:    //         #[cfg(feature = "many")]
src/tools/rust-analyzer/crates/parser/src/grammar/expressions/atom.rs:469:    //         #[cfg(feature = "attributes")]
src/tools/rust-analyzer/crates/parser/src/grammar/expressions/atom.rs:470:    //         #[cfg(feature = "before")]
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:19:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:20:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:41:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:90:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:91:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:102:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:103:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:194:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:239:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:240:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:251:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:252:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:287:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:332:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:333:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:344:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:345:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:380:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:425:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:426:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:437:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:438:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:452:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:453:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:466:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:467:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:586:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:627:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:628:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:639:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:640:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:651:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:652:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:663:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:664:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:675:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:676:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:687:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:688:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:699:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:700:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:711:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:712:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:789:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:821:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:866:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:867:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:878:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:879:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:928:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:977:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:978:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1027:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1050:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1098:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1099:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1110:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1111:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1122:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1123:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1134:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1135:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1170:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1232:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1233:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1244:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1245:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1256:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1257:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1299:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1338:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1339:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1374:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1410:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1411:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1422:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1423:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1434:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1435:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1476:                    "name": "features",
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1477:                    "src_path": "$ROOT$.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/features.rs",
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1554:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1582:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1624:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1625:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1636:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1637:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1648:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1649:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1757:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1817:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1818:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1829:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1830:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1841:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1842:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1907:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1961:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1962:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1973:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1974:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1987:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1988:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:1999:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2000:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2011:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2012:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2025:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2026:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2037:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2038:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2049:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2050:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2071:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2122:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2130:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2174:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2175:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2186:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2187:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2210:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2231:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2239:                    "all-features": true
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2280:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2281:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2292:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2293:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2304:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2305:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2317:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2318:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2329:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2330:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2341:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2342:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2576:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2677:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2678:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2689:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2690:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2701:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2702:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2713:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2714:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2725:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2726:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2737:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2738:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:2972:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3073:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3074:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3085:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3086:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3097:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3098:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3109:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3110:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3121:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3122:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3133:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3134:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3145:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3146:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3157:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3158:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3170:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3171:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3183:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3184:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3197:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3198:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3209:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3210:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3259:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3311:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3312:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3323:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3324:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3336:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3337:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3349:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3350:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3373:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3430:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3507:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3534:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3573:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3574:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3585:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3586:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3612:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3646:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3647:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3658:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3659:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3694:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3713:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3722:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3767:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3768:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3779:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3780:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3791:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3792:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3803:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3804:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3839:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3929:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3969:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3970:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3981:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3982:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3993:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:3994:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4005:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4006:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4017:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4018:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4029:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4030:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4041:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4042:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4053:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4054:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4065:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4066:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4077:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4078:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4089:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4090:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4103:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4104:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4115:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4116:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4127:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4128:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4139:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4140:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4151:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4152:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4560:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4578:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4587:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4612:                    "syn-test-suite/all-features"
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4621:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4632:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4678:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4679:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4690:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4691:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4702:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4703:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4716:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4717:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4728:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4729:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4740:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4741:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4804:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4852:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4853:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4864:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4865:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4876:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4877:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4898:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4957:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4958:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4969:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:4970:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5005:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5413:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5490:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5549:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5596:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5605:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5611:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5617:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5669:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5710:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5716:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5722:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5731:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5764:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5770:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5789:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5811:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5830:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5852:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5874:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5950:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:5987:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6115:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6167:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6173:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6189:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6228:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6247:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6293:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6301:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6342:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6356:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6362:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6392:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6405:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/regex-metadata.json:6411:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:294:                "feature=default",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:295:                "feature=std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:302:                    "feature=align",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:303:                    "feature=const-extern-fn",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:304:                    "feature=default",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:305:                    "feature=extra_traits",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:306:                    "feature=rustc-dep-of-std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:307:                    "feature=std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt:308:                    "feature=use_std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:294:                "feature=default",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:295:                "feature=std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:302:                    "feature=align",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:303:                    "feature=const-extern-fn",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:304:                    "feature=default",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:305:                    "feature=extra_traits",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:306:                    "feature=rustc-dep-of-std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:307:                    "feature=std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt:308:                    "feature=use_std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:290:                "feature=default",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:291:                "feature=std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:298:                    "feature=align",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:299:                    "feature=const-extern-fn",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:300:                    "feature=default",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:301:                    "feature=extra_traits",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:302:                    "feature=rustc-dep-of-std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:303:                    "feature=std",
src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt:304:                    "feature=use_std",
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:19:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:20:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:41:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:90:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:91:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:102:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:103:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:114:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:115:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:136:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:155:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:202:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:203:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:214:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:215:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:226:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:227:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:268:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:306:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:307:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:318:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:319:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:332:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:333:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:344:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:345:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:356:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:357:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:434:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:483:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:484:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:495:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:496:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:507:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:508:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:519:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:520:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:531:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:532:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:543:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:544:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:555:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:556:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:567:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:568:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:617:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:635:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:679:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:680:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:691:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:692:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:703:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:704:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:715:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:716:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:727:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:728:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:739:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:740:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:751:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:752:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:782:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:800:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:817:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:835:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:900:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:925:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:973:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:974:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:985:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:986:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:997:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:998:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1009:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1010:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1059:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1106:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1107:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1118:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1119:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1210:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1255:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1256:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1267:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1268:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1303:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1338:            "description": "A simple to use, efficient, and full-featured Command Line Argument Parser\n",
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1348:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1349:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1360:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1361:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1372:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1373:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1384:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1385:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1396:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1397:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1408:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1409:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1420:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1421:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1432:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1433:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1444:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1445:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1456:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1457:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1468:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1469:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1480:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1481:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1492:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1493:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1514:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1567:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1612:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1613:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1624:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1625:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1636:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1637:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1648:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1649:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1660:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1661:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1934:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1986:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1987:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1998:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:1999:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2010:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2011:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2022:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2023:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2156:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2207:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2208:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2219:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2220:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2231:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2232:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2243:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2244:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2255:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2256:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2267:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2268:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2289:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2363:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2364:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2385:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2439:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2478:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2479:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2490:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2491:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2526:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2562:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2563:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2574:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2575:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2588:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2589:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2600:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2601:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2612:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2613:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2627:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2628:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2639:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2640:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2651:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2652:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2663:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2664:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2699:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2753:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2754:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2766:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2767:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2779:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2780:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2792:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2793:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2805:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2806:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2818:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2819:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2831:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2832:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2843:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2844:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2879:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2930:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2931:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2942:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2943:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2954:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2955:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2967:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2968:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2979:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2980:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2991:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:2992:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3003:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3004:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3015:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3016:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3027:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3028:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3049:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3089:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3090:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3101:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3102:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3137:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3175:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3176:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3188:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3189:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3210:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3250:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3251:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3262:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3263:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3274:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3275:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3287:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3288:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3300:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3301:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3314:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3315:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3326:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3327:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3338:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3339:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3361:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3419:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3420:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3431:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3432:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3443:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3444:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3456:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3457:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3468:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3469:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3480:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3481:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3492:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3493:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3514:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3554:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3555:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3568:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3569:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3580:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3581:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3592:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3593:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3604:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3605:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3617:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3618:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3629:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3630:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3641:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3642:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3654:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3655:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3690:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3738:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3739:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3750:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3751:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3762:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3763:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3784:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3804:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3846:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3847:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3859:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3860:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3871:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3872:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3883:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3884:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3895:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3896:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3907:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3908:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3919:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3920:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3931:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3932:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3943:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3944:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3955:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:3956:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4005:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4049:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4050:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4099:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4150:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4151:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4162:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4163:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4240:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4301:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4302:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4313:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4314:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4325:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4326:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4487:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4518:                        "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4567:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4568:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4579:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4580:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4591:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4592:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4603:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4604:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4615:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4616:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4627:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4628:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4719:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4753:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4754:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4765:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4766:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4815:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4864:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4865:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4914:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4937:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4985:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4986:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4997:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:4998:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5009:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5010:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5021:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5022:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5033:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5034:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5045:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5046:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5059:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5060:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5071:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5072:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5085:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5086:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5165:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5211:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5256:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5257:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5268:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5269:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5280:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5281:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5292:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5293:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5328:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5390:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5391:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5402:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5403:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5414:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5415:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5426:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5427:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5462:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5506:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5507:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5518:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5519:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5530:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5531:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5542:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5543:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5556:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5557:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5568:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5569:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5580:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5581:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5611:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5628:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5645:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5662:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5679:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5696:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5713:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5735:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5771:                        "all-features": true
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5812:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5813:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5824:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5825:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5836:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5837:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5848:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5849:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5870:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5912:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5913:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5924:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5925:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5938:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5939:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:5974:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6015:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6016:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6051:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6087:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6088:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6099:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6100:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6111:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6112:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6153:                    "name": "features",
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6154:                    "src_path": "$ROOT$.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/features.rs",
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6231:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6259:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6301:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6302:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6313:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6314:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6325:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6326:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6391:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6445:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6446:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6457:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6458:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6469:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6470:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6481:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6482:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6493:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6494:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6505:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6506:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6740:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6841:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6842:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6853:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6854:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6865:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6866:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6879:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6880:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6891:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6892:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6903:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6904:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6915:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6916:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6927:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6928:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6939:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6940:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:6975:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7057:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7134:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7161:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7200:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7201:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7212:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7213:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7226:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7227:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7239:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7240:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7252:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7253:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7264:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7265:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7276:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7277:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7288:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7289:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7300:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7301:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7312:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7313:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7324:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7325:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7336:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7337:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7348:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7349:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7362:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7363:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7374:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7375:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7424:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7493:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7539:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7540:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7551:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7552:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7563:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7564:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7575:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7576:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7723:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7775:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7776:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7787:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7788:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7837:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7876:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7877:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7888:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7889:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7924:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7943:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7952:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7997:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:7998:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8009:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8010:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8021:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8022:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8033:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8034:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8069:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8122:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8123:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8136:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8137:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8148:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8149:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8160:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8161:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8172:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8173:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8184:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8185:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8196:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8197:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8208:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8209:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8220:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8221:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8234:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8235:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8246:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8247:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8258:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8259:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8270:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8271:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8406:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8432:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8446:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8528:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8568:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8569:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8580:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8581:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8592:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8593:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8604:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8605:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8616:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8617:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8628:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8629:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8640:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8641:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8652:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8653:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8664:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8665:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8676:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8677:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8688:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8689:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8702:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8703:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8714:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8715:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8726:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8727:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8738:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8739:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8750:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:8751:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9159:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9177:                    "required-features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9186:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9211:                    "syn-test-suite/all-features"
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9220:                        "all-features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9231:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9277:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9278:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9299:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9339:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9340:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9353:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9354:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9365:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9366:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9377:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9378:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9389:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9390:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9401:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9402:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9413:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9414:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9491:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9503:                        "all-features": true
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9547:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9548:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9559:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9560:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9571:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9572:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9607:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9647:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9648:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9659:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9660:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9671:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9672:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9685:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9686:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9697:                    "uses_default_features": false,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9698:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9709:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9710:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9773:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9821:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9822:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9833:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9834:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9845:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9846:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9867:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9924:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9925:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9936:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9937:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9948:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9949:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:9970:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10011:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10012:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10023:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10024:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10059:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10467:                        "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10544:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10580:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10581:                    "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10613:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10686:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10738:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10760:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10805:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10811:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10820:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10874:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10885:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10906:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10915:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:10967:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11000:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11023:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11044:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11066:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11072:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11081:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11177:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11265:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11372:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11402:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11432:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11528:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11619:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11726:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11747:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11867:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11873:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11903:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11935:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11957:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11963:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11969:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11991:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:11997:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12019:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12025:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12082:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12123:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12129:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12148:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12170:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12214:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12238:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12244:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12260:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12430:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12436:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12455:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12474:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12521:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12564:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12573:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12614:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12641:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12660:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12690:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12696:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12702:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12734:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12764:                "features": [
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12782:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12801:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/ripgrep-metadata.json:12807:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:19:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:20:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:83:            "features": {},
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:113:                    "uses_default_features": true,
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:114:                    "features": [],
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:163:            "features": {
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:227:                "features": []
src/tools/rust-analyzer/crates/project-model/test_data/hello-world-metadata.json:233:                "features": [
src/tools/rust-analyzer/crates/project-model/src/cfg_flag.rs:3://! rustc main.rs --cfg foo --cfg 'feature="bar"'
src/tools/rust-analyzer/crates/project-model/src/lib.rs:47:        CargoConfig, CargoFeatures, CargoWorkspace, Package, PackageData, PackageDependency,
src/tools/rust-analyzer/crates/project-model/src/target_data_layout.rs:28:        // using unstable cargo features failed, fall back to using plain rustc
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:85:    // Ideally, you should be able to just open a random detached file in existing cargo projects, and get the basic features working.
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:255:                            features: crate::CargoFeatures::default(),
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:1206:    let potential_cfg_options = if pkg.features.is_empty() {
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:1211:            pkg.features
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:1213:                .map(|feat| CfgFlag::KeyValue { key: "feature".into(), value: feat.0.into() }),
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:1219:        for feature in pkg.active_features.iter() {
src/tools/rust-analyzer/crates/project-model/src/workspace.rs:1220:            opts.insert_key_value("feature".into(), feature.into());
src/tools/rust-analyzer/crates/project-model/src/rustc_cfg.rs:65:    // using unstable cargo features failed, fall back to using plain rustc
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:61:pub enum CargoFeatures {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:64:        /// List of features to activate.
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:65:        features: Vec<String>,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:66:        /// Do not activate the `default` feature.
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:67:        no_default_features: bool,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:71:impl Default for CargoFeatures {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:73:        CargoFeatures::Selected { features: vec![], no_default_features: false }
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:79:    /// List of features to activate.
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:80:    pub features: CargoFeatures,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:126:    /// Features provided by the crate, mapped to the features required by that feature.
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:127:    pub features: FxHashMap<String, Vec<String>>,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:128:    /// List of features enabled on this package
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:129:    pub active_features: Vec<String>,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:192:    /// Required features of the target without which it won't build
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:193:    pub required_features: Vec<String>,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:245:        match &config.features {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:246:            CargoFeatures::All => {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:247:                meta.features(CargoOpt::AllFeatures);
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:249:            CargoFeatures::Selected { features, no_default_features } => {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:250:                if *no_default_features {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:251:                    meta.features(CargoOpt::NoDefaultFeatures);
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:253:                if !features.is_empty() {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:254:                    meta.features(CargoOpt::SomeFeatures(features.clone()));
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:322:                features,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:355:                features: features.into_iter().collect(),
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:356:                active_features: Vec::new(),
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:362:                let cargo_metadata::Target { name, kind, required_features, src_path, .. } =
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:370:                    required_features,
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:388:            packages[source].active_features.extend(node.features);
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:457:    /// Returns the union of the features of all member crates in this workspace.
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:458:    pub fn workspace_features(&self) -> FxHashSet<String> {
src/tools/rust-analyzer/crates/project-model/src/cargo_workspace.rs:463:                    Some(package.features.keys().cloned())
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:25:    cfg_flag::CfgFlag, utf8_stdout, CargoConfig, CargoFeatures, CargoWorkspace, InvocationLocation,
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:62:        allowed_features: &FxHashSet<String>,
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:85:                match &config.features {
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:86:                    CargoFeatures::All => {
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:87:                        cmd.arg("--all-features");
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:89:                    CargoFeatures::Selected { features, no_default_features } => {
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:90:                        if *no_default_features {
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:91:                            cmd.arg("--no-default-features");
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:93:                        if !features.is_empty() {
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:94:                            cmd.arg("--features");
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:96:                                features
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:98:                                    .filter(|&feat| allowed_features.contains(feat))
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:139:        let allowed_features = workspace.workspace_features();
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:142:            Self::build_command(config, &allowed_features)?,
src/tools/rust-analyzer/crates/project-model/src/build_scripts.rs:152:                let mut cmd = Self::build_command(config, &allowed_features)?;
src/tools/rust-analyzer/crates/cfg/Cargo.toml:23:# We depend on both individually instead of using `features = ["derive"]` to microoptimize the
src/tools/rust-analyzer/crates/cfg/Cargo.toml:24:# build graph: if the feature was enabled, syn would be built early on in the graph if `smolstr`
src/tools/rust-analyzer/crates/cfg/Cargo.toml:25:# supports `arbitrary`. This way, we avoid feature unification.
src/tools/rust-analyzer/crates/cfg/src/lib.rs:23:/// `feature` is an example. We have both `feature="foo"` and `feature="bar"` if features
src/tools/rust-analyzer/crates/cfg/src/cfg_expr.rs:17:    /// For example, `#[cfg(target_feature = "sse")]` and `#[cfg(target_feature = "sse2")]`.
src/tools/rust-analyzer/crates/cfg/src/cfg_expr.rs:37:                    | "target_vendor" // NOTE: `target_feature` is left out since it can be configured via `-Ctarget-feature`
src/tools/rust-analyzer/crates/ide-db/Cargo.toml:18:fst = { version = "0.4.7", default-features = false }
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:142:        label: "incomplete_features",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:143:        description: r##"incomplete features that may function improperly in some or all cases"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:359:        description: r##"a feature gate that doesn't break dependent crates"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:362:        label: "stable_features",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:363:        description: r##"stable features found in `#[feature]` directive"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:435:        label: "unstable_features",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:436:        description: r##"enabling unstable features (deprecated. do not use)"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:452:        description: r##"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:481:        label: "unused_features",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:482:        description: r##"unused features found in crate-level `#[feature]` directives"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:639:            description: r##"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:657:            "unused_features",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:730:pub const FEATURES: &[Lint] = &[
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:735:The tracking issue for this feature is: [#81391]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:742:feature](https://developer.arm.com/documentation/100690/latest/) is available
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:747:TrustZone-M feature.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:749:One of the things provided, with this unstable feature, is the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:770:#![feature(abi_c_cmse_nonsecure_call)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:827:The tracking issue for this feature is: [#38487]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:840:#![feature(abi_msp430_interrupt)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:873:The tracking issue for this feature is: [#38788]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:890:#![feature(abi_ptx)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:937:The tracking issue for this feature is: [#42202]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:953:The tracking issue for this feature is [#32838]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:972:This feature does not have a tracking issue, it is an unstable implementation
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:973:detail of the `global_allocator` feature not intended for use outside the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:983:The tracking issue for this feature is: [#60553]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:989:The `arbitrary_enum_discriminant` feature permits tuple-like and
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:995:#![feature(arbitrary_enum_discriminant)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1024:The tracking issue for this feature is: [#72016]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1030:This feature adds a `const <expr>` operand type to `asm!` and `global_asm!`.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1039:The tracking issue for this feature is: [#72016]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1045:This feature tracks `asm!` and `global_asm!` support for the following architectures:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1086:| Architecture | Register class                  | Target feature | Allowed types                           |
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1160:The tracking issue for this feature is: [#72016]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1166:This feature adds a `sym <path>` operand type to `asm!` and `global_asm!`.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1177:The tracking issue for this feature is: [#72016]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1183:This feature adds a `may_unwind` option to `asm!` which allows an `asm` block to unwind stack and be part of the stack unwinding process. This option is only supported by the LLVM backend right now.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1190:The tracking issue for this feature is [#13231]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1196:The `auto_traits` feature gate allows you to define auto traits.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1201:by the `negative_impls` feature.)
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1213:#![feature(negative_impls)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1214:#![feature(auto_traits)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1300:The tracking issue for this feature is: [#29641]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1312:#![feature(box_patterns)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1336:The tracking issue for this feature is: [#49733]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1350:#![feature(box_syntax)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1362:The tracking issue for this feature is: [#74990]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1381:The tracking issue for this feature is: [#44930]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1387:The `c_variadic` language feature enables C-variadic functions to be
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1393:#![feature(c_variadic)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1409:The tracking issue for this feature is: [#44930]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1415:The `c_variadic` library feature exposes the `VaList` structure,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1421:#![feature(c_variadic)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1439:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1448:The tracking issue for this feature is: [#77443]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1454:The `cfg_panic` feature makes it possible to execute different code
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1464:#![feature(cfg_panic)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1490:The tracking issue for this feature is: [#39699]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1496:The `cfg_sanitize` feature makes it possible to execute different code
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1502:#![feature(cfg_sanitize)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1528:The tracking issue for this feature is: [#64796]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1534:The `cfg_version` feature makes it possible to execute different code
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1541:#![feature(cfg_version)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1567:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1576:The tracking issue for this feature is: [#87417]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1592:The tracking issue for this feature is: [#75835]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1599:feature](https://developer.arm.com/documentation/100690/latest/) is available
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1604:TrustZone-M feature.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1606:One of the things provided, with this unstable feature, is the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1630:#![feature(cmse_nonsecure_entry)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1677:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1686:The tracking issue for this feature is: [#29599]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1692:The `concat_idents` feature adds a macro for concatenating multiple identifiers
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1698:#![feature(concat_idents)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1712:The tracking issue for this feature is: [#67217]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1723:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1732:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1741:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1750:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1759:The tracking issue for this feature is: [#53120]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1765:The `crate_visibility_modifier` feature allows the `crate` keyword to be used
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1771:#![feature(crate_visibility_modifier)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1783:The tracking issue for this feature is: [#50297]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1789:The `custom_test_frameworks` feature allows the use of `#[test_case]` and `#![test_runner]`.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1794:#![feature(custom_test_frameworks)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1819:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1828:The tracking issue for this feature is: [#73014]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1843:#![feature(default_free_fn)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1879:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1888:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1897:The tracking issue for this feature is: [#43781]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1901:The `doc_cfg` feature allows an API be documented as only available in some specific platforms.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1909:In addition to allowing the use of the `#[doc(cfg)]` attribute, this feature enables the use of a
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1913:This feature was introduced as part of PR [#43348] to allow the platform-specific parts of the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1917:#![feature(doc_cfg)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1947:The tracking issue for this feature is: [#44027]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1951:The `doc_masked` feature allows a crate to exclude types from a given crate from appearing in lists
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1952:of trait implementations. The specifics of the feature are as follows:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1963:This feature was introduced in PR [#44026] to ensure that compiler-internal and
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1975:The tracking issue for this feature is: [#45040]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1977:The `doc_notable_trait` feature allows the use of the `#[doc(notable_trait)]`
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1986:#![feature(doc_notable_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:1999:This feature was originally implemented in PR [#45039].
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2005:[rustdoc-book-notable_trait]: ../../rustdoc/unstable-features.html#adding-your-trait-to-the-notable-traits-dialog
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2012:The tracking issue for this feature is: [#37854].
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2019:The `exclusive_range_pattern` feature allows non-inclusive range
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2021:contexts. It also can be combined with `#![feature(half_open_range_patterns]`
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2028:#![feature(exclusive_range_pattern)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2042:The tracking issue for this feature is: [#83701]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2048:The `explicit_generic_args_with_impl_trait` feature gate lets you specify generic arguments even
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2054:#![feature(explicit_generic_args_with_impl_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2080:#![feature(explicit_generic_args_with_impl_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2099:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2108:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2117:The tracking issue for this feature is: [#58328]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2173:The tracking issue for this feature is: [#58329]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2233:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2242:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2251:The tracking issue for this feature is [#29625]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2253:See Also: [`unboxed_closures`](../language-features/unboxed-closures.md)
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2259:The `fn_traits` feature allows for implementation of the [`Fn*`] traits
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2265:#![feature(unboxed_closures)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2266:#![feature(fn_traits)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2290:The tracking issue for this feature is: [#43122]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2296:The `generators` feature gate in Rust allows you to define generator or
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2299:itself. The primary feature of a generator is that it can be suspended during
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2304:Generators are an extra-unstable feature in the compiler right now. Added in
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2316:#![feature(generators, generator_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2348:#![feature(generators, generator_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2378:# #![feature(arbitrary_self_types, generator_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2453:#![feature(generators, generator_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2473:#![feature(arbitrary_self_types, generators, generator_trait)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2540:The tracking issue for this feature is: [#67264]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2541:It is part of the `#![exclusive_range_pattern]` feature,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2548:The `half_open_range_patterns` feature allows RangeTo patterns
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2550:This requires also enabling the `exclusive_range_pattern` feature.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2556:#![feature(half_open_range_patterns)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2557:#![feature(exclusive_range_pattern)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2571:The tracking issue for this feature is: [#54185]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2576:The `infer_static_outlives_requirements` feature indicates that certain
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2580:Note: It is an accompanying feature to `infer_outlives_requirements`,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2585:this feature the outlives predicates will be inferred, although
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2601:#![feature(infer_outlives_requirements)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2602:#![feature(infer_static_outlives_requirements)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2619:The tracking issue for this feature is: [#76001]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2625:This feature allows you to use inline constant expressions. For example, you can
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2640:#![feature(inline_const)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2655:The tracking issue for this feature is: [#76001]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2661:This feature allows you to use inline constant expressions in pattern position:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2664:#![feature(inline_const_pat)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2683:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2692:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2701:The tracking issue for this feature is: [#80896]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2711:#![feature(intra_doc_pointers)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2720:The tracking issue for this feature is: None.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2736:#![feature(intrinsics)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2753:The tracking issue for this feature is: [#53485]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2768:The tracking issue for this feature is: None.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2784:#![feature(lang_items, box_syntax, start, libc, core_intrinsics, rustc_private)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2827:Other features provided by lang items include:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2858:libc = { version = "0.2.14", default-features = false }
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2861:Note that the default features have been disabled. This is a critical step -
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2862:**the default features of libc include the standard library and so must be
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2874:#![feature(lang_items, core_intrinsics, rustc_private)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2875:#![feature(start)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2910:#![feature(lang_items, core_intrinsics, rustc_private)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:2911:#![feature(start)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3067:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3076:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3085:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3094:The tracking issue for this feature is: [#70173]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3113:Any use of `llvm_asm` is feature gated (requires `#![feature(llvm_asm)]` on the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3125:#![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3145:(The `feature(llvm_asm)` and `#[cfg]`s are omitted from now on.)
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3151:# #![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3167:# #![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3183:# #![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3210:# #![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3227:# #![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3261:# #![feature(llvm_asm)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3288:The tracking issue for this feature is: [#29864]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3296:feature, however, carves out an exception to that rule: a trait can
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3303:#![feature(marker_trait_attr)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3320:feature, which applied to all empty traits (without needing an opt-in).
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3327:The `more_qualified_paths` feature can be used in order to enable the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3333:#![feature(more_qualified_paths)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3360:The tracking issue for this feature is: [#81490]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3366:The `native_link_modifiers` feature allows you to use the `modifiers` syntax with the `#[link(..)]` attribute.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3375:The tracking issue for this feature is: [#81490]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3381:The `native_link_modifiers_as_needed` feature allows you to use the `as-needed` modifier.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3397:The tracking issue for this feature is: [#81490]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3403:The `native_link_modifiers_bundle` feature allows you to use the `bundle` modifier.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3420:The tracking issue for this feature is: [#81490]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3426:The `native_link_modifiers_verbatim` feature allows you to use the `verbatim` modifier.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3444:The tracking issue for this feature is: [#81490]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3450:The `native_link_modifiers_whole_archive` feature allows you to use the `whole-archive` modifier.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3466:The tracking issue for this feature is [#68318].
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3472:With the feature gate `negative_impls`, you can write negative impls as well as positive ones:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3475:#![feature(negative_impls)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3527:The tracking issue for this feature is: [#84605]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3543:#![feature(no_coverage)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3561:The tracking issue for this feature is: [#39699]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3581:#![feature(no_sanitize)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3594:The tracking issue for this feature is: [#29597]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3599:This feature is part of "compiler plugins." It will often be used with the
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3600:`rustc_private` feature.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3631:#![feature(box_syntax, rustc_private)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3669:#![feature(plugin)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3714:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3723:The tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3732:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3741:The tracking issue for this feature is: [#58713]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3747:The `raw_dylib` feature allows you to link against the implementations of functions in an `extern`
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3751:#![feature(raw_dylib)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3767:Currently, this feature is only supported on `-windows-msvc` targets.  Non-Windows platforms don't have import
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3771:On the `i686-pc-windows-msvc` target, this feature supports only the `cdecl`, `stdcall`, `system`, and `fastcall`
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3779:The tracking issue for this feature is: [#56071]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3785:The `repr128` feature adds support for `#[repr(u128)]` on `enum`s.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3788:#![feature(repr128)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3801:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3810:This feature has no tracking issue, and is therefore internal to
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3818:The `rustc_attrs` feature allows debugging rustc type layouts by using
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3829:#![feature(rustc_attrs)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3867:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3876:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3885:The tracking issue for this feature is: None.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3895:#![feature(test)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3920:Note the `test` feature gate, which enables this unstable feature.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:3969:#![feature(test)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4011:#![feature(test)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4047:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4056:The tracking issue for this feature is [#29598].
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4067:#![feature(trace_macros)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4099:The tracking issue for this feature is: [#41517]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4105:The `trait_alias` feature adds support for trait aliases. These allow aliases
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4111:#![feature(trait_alias)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4137:The tracking issue for this feature is: [#65991]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4143:The `trait_upcasting` feature adds support for trait upcasting coercion. This allows a
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4148:#![feature(trait_upcasting)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4149:#![allow(incomplete_features)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4168:The tracking issue for this feature is [#60405]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4174:The `transparent_unions` feature allows you mark `union`s as
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4181:#![feature(transparent_unions)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4202:#![feature(transparent_unions)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4220:#![feature(transparent_unions)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4255:The tracking issue for this feature is: [#31436]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4261:The `try_blocks` feature adds support for `try` blocks. A `try`
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4265:#![feature(try_blocks)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4289:The tracking issue for this feature is: [#86555]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4302:#![feature(type_changing_struct_update)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4326:The tracking issue for this feature is [#29625]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4328:See Also: [`fn_traits`](../library-features/fn-traits.md)
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4334:The `unboxed_closures` feature allows you to write functions using the `"rust-call"` ABI,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4341:#![feature(unboxed_closures)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4355:The tracking issue for this feature is: [#48055]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4366:#![allow(incomplete_features)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4367:#![feature(unsized_locals, unsized_fn_params)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4386:#![feature(unsized_locals)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4438:With this feature, you can have by-value `self` arguments without `Self: Sized` bounds.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4441:#![feature(unsized_fn_params)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4458:#![feature(unsized_fn_params)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4473:One of the objectives of this feature is to allow `Box<dyn FnOnce>`.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4480:#![feature(unsized_locals)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4498:It's advised not to casually use the `#![feature(unsized_locals)]` feature. Typical use-cases are:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4506:#![feature(unsized_locals)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4517:#![feature(unsized_locals)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4534:The tracking issue for this feature is: [#42877]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4546:This implementation is currently gated behind `#[feature(unsized_tuple_coercion)]` to avoid insta-stability. Therefore you can use it like this:
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4549:#![feature(unsized_tuple_coercion)]
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4565:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4574:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4583:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4592:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:4601:This feature is internal to the Rust compiler and is not intended for general use.
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:5990:        label: "clippy::negative_feature_names",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:5991:        description: r##"Checks for negative feature names with prefix `no-` or `not-`"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:6270:        label: "clippy::redundant_feature_names",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:6271:        description: r##"Checks for feature names with prefix `use-`, `with-` or suffix `-support`"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:7092:            description: r##"lint group for: clippy::cargo_common_metadata, clippy::multiple_crate_versions, clippy::negative_feature_names, clippy::redundant_feature_names, clippy::wildcard_dependencies"##,
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:7097:            "clippy::negative_feature_names",
src/tools/rust-analyzer/crates/ide-db/src/generated/lints.rs:7098:            "clippy::redundant_feature_names",
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:1://! Generates descriptors structure for unstable feature from Unstable Book
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:40:    generate_feature_descriptor(&mut contents, &rust_repo.join("src/doc/unstable-book/src"));
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:160:fn generate_feature_descriptor(buf: &mut String, src_dir: &Path) {
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:161:    let mut features = ["language-features", "library-features"]
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:169:            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace('-', "_");
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:171:            (feature_ident, doc)
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:174:    features.sort_by(|(feature_ident, _), (feature_ident2, _)| feature_ident.cmp(feature_ident2));
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:176:    buf.push_str(r#"pub const FEATURES: &[Lint] = &["#);
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:177:    for (feature_ident, doc) in features.into_iter() {
src/tools/rust-analyzer/crates/ide-db/src/tests/sourcegen_lints.rs:178:        push_lint_completion(buf, &feature_ident, &doc)
src/tools/rust-analyzer/crates/ide-db/src/apply_change.rs:43:    // Feature: Memory Usage
src/tools/rust-analyzer/crates/ide-db/src/imports/insert_use/tests.rs:700:#[cfg(feature = "gated")] use std::fmt::{Result, Display};
src/tools/rust-analyzer/crates/ide-db/src/imports/insert_use/tests.rs:703:#[cfg(feature = "gated")] use std::fmt::{Result, Display};
src/tools/rust-analyzer/crates/ide-db/src/helpers.rs:1://! Random assortment of ide helpers for high-level ide features that don't fit in any other module.
src/tools/rust-analyzer/crates/ide-db/src/symbol_index.rs:166:// Feature: Workspace Symbol
src/tools/rust-analyzer/crates/ide-db/src/symbol_index.rs:169:// project and dependencies. This is **the** most useful feature, which improves code
src/tools/rust-analyzer/crates/stdx/Cargo.toml:17:always-assert = { version = "0.1.2", features = ["log"] }
src/tools/rust-analyzer/crates/stdx/Cargo.toml:24:winapi = { version = "0.3.9", features = ["winerror"] }
src/tools/rust-analyzer/crates/stdx/Cargo.toml:26:[features]
src/tools/rust-analyzer/crates/stdx/src/lib.rs:31:    #[cfg(feature = "backtrace")]
src/tools/rust-analyzer/crates/stdx/src/lib.rs:34:    #[cfg(not(feature = "backtrace"))]
src/tools/rust-analyzer/crates/stdx/src/lib.rs:36:        r#"Enable the backtrace feature.
src/tools/rust-analyzer/crates/stdx/src/lib.rs:184:// feature: iter_order_by
src/tools/rust-analyzer/crates/hir-expand/src/name.rs:389:        feature,
src/tools/rust-analyzer/crates/ide-completion/src/snippet.rs:5:// Feature: User Snippet Completions
src/tools/rust-analyzer/crates/ide-completion/src/completions/snippet.rs:99:fn ${1:feature}() {
src/tools/rust-analyzer/crates/ide-completion/src/completions/extern_abi.rs:11:// Most of these are feature gated, we should filter/add feature gate completions once we have them.
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:7:        Lint, CLIPPY_LINTS, CLIPPY_LINT_GROUPS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS,
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:51:        "feature" => {
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:52:            lint::complete_lint(acc, ctx, colon_prefix, &parse_tt_as_comma_sep_paths(tt)?, FEATURES)
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:222:                "crate_name", "feature", "no_implicit_prelude", "no_main", "no_std",
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:242:                "proc_macro_derive", "proc_macro_attribute", "should_panic", "target_feature",
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:296:    attr("feature(…)", Some("feature"), Some("feature(${0:flag})")).prefer_inner(),
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:331:        r#"target_feature(enable = "…")"#,
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:332:        Some("target_feature"),
src/tools/rust-analyzer/crates/ide-completion/src/completions/attribute.rs:333:        Some(r#"target_feature(enable = "${0:feature}")"#),
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:20:// Feature: Completion With Autoimport
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:96:// Mimics the corresponding behavior of the `Auto Import` feature.
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:100:// The feature is enabled only if the LSP client supports LSP protocol version 3.16+ and reports the `additionalTextEdits`
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:104:// which might be slow ergo the feature is automatically disabled.
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:106:// .Feature toggle
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:108:// The feature can be forcefully turned off in the settings with the `rust-analyzer.completion.autoimport.enable` flag.
src/tools/rust-analyzer/crates/ide-completion/src/completions/flyimport.rs:109:// Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corresponding
src/tools/rust-analyzer/crates/ide-completion/src/completions/postfix/format_like.rs:1:// Feature: Format String Completion
src/tools/rust-analyzer/crates/ide-completion/src/lib.rs:43://FIXME: split the following feature into fine-grained features.
src/tools/rust-analyzer/crates/ide-completion/src/lib.rs:45:// Feature: Magic Completions
src/tools/rust-analyzer/crates/ide-completion/src/lib.rs:80:// - `tfn` -> `#[test] fn feature(){}`
src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs:105:            at feature(…)
src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs:554:            at target_feature(enable = "…")
src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs:600:            at target_feature(enable = "…")
src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs:859:    fn lint_feature() {
src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs:862:            r#"#[feature(box_$0)] struct Test;"#,
src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs:863:            r#"#[feature(box_patterns)] struct Test;"#,
src/tools/rust-analyzer/crates/proc-macro-srv/Cargo.toml:15:object = { version = "0.31.0", default-features = false, features = [
src/tools/rust-analyzer/crates/proc-macro-srv/Cargo.toml:37:[features]
src/tools/rust-analyzer/crates/proc-macro-srv/src/lib.rs:13:#![cfg(feature = "sysroot-abi")]
src/tools/rust-analyzer/crates/proc-macro-srv/src/lib.rs:14:#![feature(proc_macro_internals, proc_macro_diagnostic, proc_macro_span)]
src/tools/rust-analyzer/crates/proc-macro-srv/src/server.rs:284:    /// Recent feature, not yet in the proc_macro
src/tools/rust-analyzer/crates/profile/Cargo.toml:19:countme = { version = "3.0.1", features = ["enable"] }
src/tools/rust-analyzer/crates/profile/Cargo.toml:26:winapi = { version = "0.3.9", features = ["processthreadsapi", "psapi"] }
src/tools/rust-analyzer/crates/profile/Cargo.toml:28:[features]
src/tools/rust-analyzer/crates/profile/src/lib.rs:7:#[cfg(feature = "cpu_profiler")]
src/tools/rust-analyzer/crates/profile/src/lib.rs:56:/// 2. Build with `cpu_profiler` feature.
src/tools/rust-analyzer/crates/profile/src/lib.rs:88:    #[cfg(feature = "cpu_profiler")]
src/tools/rust-analyzer/crates/profile/src/lib.rs:93:    #[cfg(not(feature = "cpu_profiler"))]
src/tools/rust-analyzer/crates/profile/src/lib.rs:105:        #[cfg(feature = "cpu_profiler")]
src/tools/rust-analyzer/crates/profile/src/memory_usage.rs:29:            if #[cfg(all(feature = "jemalloc", not(target_env = "msvc")))] {
src/tools/rust-analyzer/crates/profile/src/memory_usage.rs:59:#[cfg(all(target_os = "linux", target_env = "gnu", not(feature = "jemalloc")))]
src/tools/rust-analyzer/crates/intern/Cargo.toml:16:# We need to freeze the version of the crate, as the raw-api feature is considered unstable
src/tools/rust-analyzer/crates/intern/Cargo.toml:17:dashmap = { version = "=5.4.0", features = ["raw-api"] }
src/tools/rust-analyzer/crates/proc-macro-srv-cli/Cargo.toml:15:[features]
src/tools/rust-analyzer/crates/proc-macro-srv-cli/src/main.rs:21:#[cfg(not(feature = "sysroot-abi"))]
src/tools/rust-analyzer/crates/proc-macro-srv-cli/src/main.rs:23:    panic!("proc-macro-srv-cli requires the `sysroot-abi` feature to be enabled");
src/tools/rust-analyzer/crates/proc-macro-srv-cli/src/main.rs:26:#[cfg(feature = "sysroot-abi")]
src/tools/rust-analyzer/crates/proc-macro-api/Cargo.toml:15:object = { version = "0.31.0", default-features = false, features = [
src/tools/rust-analyzer/crates/proc-macro-api/Cargo.toml:23:serde_json = { workspace = true, features = ["unbounded_depth"] }
src/tools/rust-analyzer/crates/syntax/Cargo.toml:43:[features]
src/tools/rust-analyzer/crates/syntax/src/tests.rs:1:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/syntax/src/tests.rs:3:#[cfg(not(feature = "in-rust-tree"))]
src/tools/rust-analyzer/crates/ide-ssr/src/lib.rs:8:// Feature: Structural Search and Replace
src/tools/rust-analyzer/crates/sourcegen/src/lib.rs:3://! Things like feature documentation or assist tests are implemented by
src/tools/rust-analyzer/bench_data/glorious_old_parser:7174:                features: None, // don't perform gated feature checking
src/tools/rust-analyzer/bench_data/numerous_macro_rules:1:macro_rules! __ra_macro_fixture0 {($T :  ident )=>( int_module ! ($T , # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]);); ($T :  ident , # [$attr :  meta ])=>( doc_comment ! { concat ! ( "The smallest value that can be represented by this integer type.\nUse [`" ,  stringify ! ($T ),  "::MIN" ,  "`](../../std/primitive." ,  stringify ! ($T ),  ".html#associatedconstant.MIN) instead.\n\n# Examples\n\n```rust\n// deprecated way\nlet min = std::" ,  stringify ! ($T ),  "::MIN;\n\n// intended way\nlet min = " ,  stringify ! ($T ),  "::MIN;\n```\n" ), # [$attr ] pub  const  MIN : $T = $T ::  MIN ; } doc_comment ! { concat ! ( "The largest value that can be represented by this integer type.\nUse [`" ,  stringify ! ($T ),  "::MAX" ,  "`](../../std/primitive." ,  stringify ! ($T ),  ".html#associatedconstant.MAX) instead.\n\n# Examples\n\n```rust\n// deprecated way\nlet max = std::" ,  stringify ! ($T ),  "::MAX;\n\n// intended way\nlet max = " ,  stringify ! ($T ),  "::MAX;\n```\n" ), # [$attr ] pub  const  MAX : $T = $T ::  MAX ; })}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:4:macro_rules! __ra_macro_fixture3 {($t :  ty )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  FromStr  for $t { type  Err =  ParseFloatError ; # [ doc =  " Converts a string in base 10 to a float." ]# [ doc =  " Accepts an optional decimal exponent." ]# [ doc =  "" ]# [ doc =  " This function accepts strings such as" ]# [ doc =  "" ]# [ doc =  " * \\\'3.14\\\'" ]# [ doc =  " * \\\'-3.14\\\'" ]# [ doc =  " * \\\'2.5E10\\\', or equivalently, \\\'2.5e10\\\'" ]# [ doc =  " * \\\'2.5E-10\\\'" ]# [ doc =  " * \\\'5.\\\'" ]# [ doc =  " * \\\'.5\\\', or, equivalently, \\\'0.5\\\'" ]# [ doc =  " * \\\'inf\\\', \\\'-inf\\\', \\\'NaN\\\'" ]# [ doc =  "" ]# [ doc =  " Leading and trailing whitespace represent an error." ]# [ doc =  "" ]# [ doc =  " # Grammar" ]# [ doc =  "" ]# [ doc =  " All strings that adhere to the following [EBNF] grammar" ]# [ doc =  " will result in an [`Ok`] being returned:" ]# [ doc =  "" ]# [ doc =  " ```txt" ]# [ doc =  " Float  ::= Sign? ( \\\'inf\\\' | \\\'NaN\\\' | Number )" ]# [ doc =  " Number ::= ( Digit+ |" ]# [ doc =  "              Digit+ \\\'.\\\' Digit* |" ]# [ doc =  "              Digit* \\\'.\\\' Digit+ ) Exp?" ]# [ doc =  " Exp    ::= [eE] Sign? Digit+" ]# [ doc =  " Sign   ::= [+-]" ]# [ doc =  " Digit  ::= [0-9]" ]# [ doc =  " ```" ]# [ doc =  "" ]# [ doc =  " [EBNF]: https://www.w3.org/TR/REC-xml/#sec-notation" ]# [ doc =  "" ]# [ doc =  " # Known bugs" ]# [ doc =  "" ]# [ doc =  " In some situations, some strings that should create a valid float" ]# [ doc =  " instead return an error. See [issue #31407] for details." ]# [ doc =  "" ]# [ doc =  " [issue #31407]: https://github.com/rust-lang/rust/issues/31407" ]# [ doc =  "" ]# [ doc =  " # Arguments" ]# [ doc =  "" ]# [ doc =  " * src - A string" ]# [ doc =  "" ]# [ doc =  " # Return value" ]# [ doc =  "" ]# [ doc =  " `Err(ParseFloatError)` if the string did not represent a valid" ]# [ doc =  " number. Otherwise, `Ok(n)` where `n` is the floating-point" ]# [ doc =  " number represented by `src`." ]# [ inline ] fn  from_str ( src : &  str )->  Result <  Self ,  ParseFloatError > { dec2flt ( src )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:5:macro_rules! __ra_macro_fixture4 {($(# [$stability :  meta ]$Ty :  ident ($Int :  ty ); )+ )=>{$(doc_comment ! { concat ! ( "An integer that is known not to equal zero.\n\nThis enables some memory layout optimization.\nFor example, `Option<" ,  stringify ! ($Ty ),  ">` is the same size as `" ,  stringify ! ($Int ),  "`:\n\n```rust\nuse std::mem::size_of;\nassert_eq!(size_of::<Option<core::num::" ,  stringify ! ($Ty ),  ">>(), size_of::<" ,  stringify ! ($Int ),  ">());\n```" ), # [$stability ]# [ derive ( Copy ,  Clone ,  Eq ,  PartialEq ,  Ord ,  PartialOrd ,  Hash )]# [ repr ( transparent )]# [ rustc_layout_scalar_valid_range_start ( 1 )]# [ rustc_nonnull_optimization_guaranteed ] pub  struct $Ty ($Int ); } impl $Ty {# [ doc =  " Creates a non-zero without checking the value." ]# [ doc =  "" ]# [ doc =  " # Safety" ]# [ doc =  "" ]# [ doc =  " The value must not be zero." ]# [$stability ]# [ rustc_const_stable ( feature =  "nonzero" ,  since =  "1.34.0" )]# [ inline ] pub  const  unsafe  fn  new_unchecked ( n : $Int )->  Self { unsafe { Self ( n )}}# [ doc =  " Creates a non-zero if the given value is not zero." ]# [$stability ]# [ rustc_const_stable ( feature =  "const_nonzero_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  new ( n : $Int )->  Option <  Self > { if  n !=  0 { Some ( unsafe { Self ( n )})} else { None }}# [ doc =  " Returns the value as a primitive type." ]# [$stability ]# [ inline ]# [ rustc_const_stable ( feature =  "nonzero" ,  since =  "1.34.0" )] pub  const  fn  get ( self )-> $Int { self .  0 }}# [ stable ( feature =  "from_nonzero" ,  since =  "1.31.0" )] impl  From <$Ty >  for $Int { doc_comment ! { concat ! ( "Converts a `" ,  stringify ! ($Ty ),  "` into an `" ,  stringify ! ($Int ),  "`" ), # [ inline ] fn  from ( nonzero : $Ty )->  Self { nonzero .  0 }}}# [ stable ( feature =  "nonzero_bitor" ,  since =  "1.45.0" )] impl  BitOr  for $Ty { type  Output =  Self ; # [ inline ] fn  bitor ( self ,  rhs :  Self )->  Self ::  Output { unsafe {$Ty ::  new_unchecked ( self .  get ()|  rhs .  get ())}}}# [ stable ( feature =  "nonzero_bitor" ,  since =  "1.45.0" )] impl  BitOr <$Int >  for $Ty { type  Output =  Self ; # [ inline ] fn  bitor ( self ,  rhs : $Int )->  Self ::  Output { unsafe {$Ty ::  new_unchecked ( self .  get ()|  rhs )}}}# [ stable ( feature =  "nonzero_bitor" ,  since =  "1.45.0" )] impl  BitOr <$Ty >  for $Int { type  Output = $Ty ; # [ inline ] fn  bitor ( self ,  rhs : $Ty )->  Self ::  Output { unsafe {$Ty ::  new_unchecked ( self |  rhs .  get ())}}}# [ stable ( feature =  "nonzero_bitor" ,  since =  "1.45.0" )] impl  BitOrAssign  for $Ty {# [ inline ] fn  bitor_assign (&  mut  self ,  rhs :  Self ){*  self = *  self |  rhs ; }}# [ stable ( feature =  "nonzero_bitor" ,  since =  "1.45.0" )] impl  BitOrAssign <$Int >  for $Ty {# [ inline ] fn  bitor_assign (&  mut  self ,  rhs : $Int ){*  self = *  self |  rhs ; }} impl_nonzero_fmt ! {# [$stability ]( Debug ,  Display ,  Binary ,  Octal ,  LowerHex ,  UpperHex ) for $Ty })+ }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:6:macro_rules! __ra_macro_fixture5 {($($t :  ty )*)=>{$(# [ stable ( feature =  "nonzero_parse" ,  since =  "1.35.0" )] impl  FromStr  for $t { type  Err =  ParseIntError ;  fn  from_str ( src : &  str )->  Result <  Self ,  Self ::  Err > { Self ::  new ( from_str_radix ( src ,  10 )?).  ok_or ( ParseIntError { kind :  IntErrorKind ::  Zero })}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:8:macro_rules! __ra_macro_fixture7 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Add  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  add ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_add ( other .  0 ))}} forward_ref_binop ! { impl  Add ,  add  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  AddAssign  for  Wrapping <$t > {# [ inline ] fn  add_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self +  other ; }} forward_ref_op_assign ! { impl  AddAssign ,  add_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Sub  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  sub ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_sub ( other .  0 ))}} forward_ref_binop ! { impl  Sub ,  sub  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  SubAssign  for  Wrapping <$t > {# [ inline ] fn  sub_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self -  other ; }} forward_ref_op_assign ! { impl  SubAssign ,  sub_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Mul  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  mul ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_mul ( other .  0 ))}} forward_ref_binop ! { impl  Mul ,  mul  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  MulAssign  for  Wrapping <$t > {# [ inline ] fn  mul_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self *  other ; }} forward_ref_op_assign ! { impl  MulAssign ,  mul_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "wrapping_div" ,  since =  "1.3.0" )] impl  Div  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  div ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_div ( other .  0 ))}} forward_ref_binop ! { impl  Div ,  div  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  DivAssign  for  Wrapping <$t > {# [ inline ] fn  div_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self /  other ; }} forward_ref_op_assign ! { impl  DivAssign ,  div_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "wrapping_impls" ,  since =  "1.7.0" )] impl  Rem  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  rem ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_rem ( other .  0 ))}} forward_ref_binop ! { impl  Rem ,  rem  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  RemAssign  for  Wrapping <$t > {# [ inline ] fn  rem_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self %  other ; }} forward_ref_op_assign ! { impl  RemAssign ,  rem_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Not  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  not ( self )->  Wrapping <$t > { Wrapping (!  self .  0 )}} forward_ref_unop ! { impl  Not ,  not  for  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  BitXor  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  bitxor ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 ^  other .  0 )}} forward_ref_binop ! { impl  BitXor ,  bitxor  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  BitXorAssign  for  Wrapping <$t > {# [ inline ] fn  bitxor_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self ^  other ; }} forward_ref_op_assign ! { impl  BitXorAssign ,  bitxor_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  BitOr  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  bitor ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 |  other .  0 )}} forward_ref_binop ! { impl  BitOr ,  bitor  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  BitOrAssign  for  Wrapping <$t > {# [ inline ] fn  bitor_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self |  other ; }} forward_ref_op_assign ! { impl  BitOrAssign ,  bitor_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  BitAnd  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  bitand ( self ,  other :  Wrapping <$t >)->  Wrapping <$t > { Wrapping ( self .  0 &  other .  0 )}} forward_ref_binop ! { impl  BitAnd ,  bitand  for  Wrapping <$t >,  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  BitAndAssign  for  Wrapping <$t > {# [ inline ] fn  bitand_assign (&  mut  self ,  other :  Wrapping <$t >){*  self = *  self &  other ; }} forward_ref_op_assign ! { impl  BitAndAssign ,  bitand_assign  for  Wrapping <$t >,  Wrapping <$t > }# [ stable ( feature =  "wrapping_neg" ,  since =  "1.10.0" )] impl  Neg  for  Wrapping <$t > { type  Output =  Self ; # [ inline ] fn  neg ( self )->  Self { Wrapping ( 0 )-  self }} forward_ref_unop ! { impl  Neg ,  neg  for  Wrapping <$t >, # [ stable ( feature =  "wrapping_ref" ,  since =  "1.14.0" )]})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:9:macro_rules! __ra_macro_fixture8 {($($t :  ty )*)=>($(impl  Wrapping <$t > { doc_comment ! { concat ! ( "Returns the smallest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(<Wrapping<" ,  stringify ! ($t ),  ">>::MIN, Wrapping(" ,  stringify ! ($t ),  "::MIN));\n```" ), # [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  MIN :  Self =  Self (<$t >::  MIN ); } doc_comment ! { concat ! ( "Returns the largest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(<Wrapping<" ,  stringify ! ($t ),  ">>::MAX, Wrapping(" ,  stringify ! ($t ),  "::MAX));\n```" ), # [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  MAX :  Self =  Self (<$t >::  MAX ); } doc_comment ! { concat ! ( "Returns the number of ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(0b01001100" ,  stringify ! ($t ),  ");\n\nassert_eq!(n.count_ones(), 3);\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  count_ones ( self )->  u32 { self .  0 .  count_ones ()}} doc_comment ! { concat ! ( "Returns the number of zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(Wrapping(!0" ,  stringify ! ($t ),  ").count_zeros(), 0);\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  count_zeros ( self )->  u32 { self .  0 .  count_zeros ()}} doc_comment ! { concat ! ( "Returns the number of trailing zeros in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(0b0101000" ,  stringify ! ($t ),  ");\n\nassert_eq!(n.trailing_zeros(), 3);\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  trailing_zeros ( self )->  u32 { self .  0 .  trailing_zeros ()}}# [ doc =  " Shifts the bits to the left by a specified amount, `n`," ]# [ doc =  " wrapping the truncated bits to the end of the resulting" ]# [ doc =  " integer." ]# [ doc =  "" ]# [ doc =  " Please note this isn\\\'t the same operation as the `<<` shifting" ]# [ doc =  " operator!" ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " #![feature(wrapping_int_impl)]" ]# [ doc =  " use std::num::Wrapping;" ]# [ doc =  "" ]# [ doc =  " let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);" ]# [ doc =  " let m: Wrapping<i64> = Wrapping(-0x76543210FEDCBA99);" ]# [ doc =  "" ]# [ doc =  " assert_eq!(n.rotate_left(32), m);" ]# [ doc =  " ```" ]# [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  rotate_left ( self ,  n :  u32 )->  Self { Wrapping ( self .  0 .  rotate_left ( n ))}# [ doc =  " Shifts the bits to the right by a specified amount, `n`," ]# [ doc =  " wrapping the truncated bits to the beginning of the resulting" ]# [ doc =  " integer." ]# [ doc =  "" ]# [ doc =  " Please note this isn\\\'t the same operation as the `>>` shifting" ]# [ doc =  " operator!" ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " #![feature(wrapping_int_impl)]" ]# [ doc =  " use std::num::Wrapping;" ]# [ doc =  "" ]# [ doc =  " let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);" ]# [ doc =  " let m: Wrapping<i64> = Wrapping(-0xFEDCBA987654322);" ]# [ doc =  "" ]# [ doc =  " assert_eq!(n.rotate_right(4), m);" ]# [ doc =  " ```" ]# [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  rotate_right ( self ,  n :  u32 )->  Self { Wrapping ( self .  0 .  rotate_right ( n ))}# [ doc =  " Reverses the byte order of the integer." ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " #![feature(wrapping_int_impl)]" ]# [ doc =  " use std::num::Wrapping;" ]# [ doc =  "" ]# [ doc =  " let n: Wrapping<i16> = Wrapping(0b0000000_01010101);" ]# [ doc =  " assert_eq!(n, Wrapping(85));" ]# [ doc =  "" ]# [ doc =  " let m = n.swap_bytes();" ]# [ doc =  "" ]# [ doc =  " assert_eq!(m, Wrapping(0b01010101_00000000));" ]# [ doc =  " assert_eq!(m, Wrapping(21760));" ]# [ doc =  " ```" ]# [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  swap_bytes ( self )->  Self { Wrapping ( self .  0 .  swap_bytes ())}# [ doc =  " Reverses the bit pattern of the integer." ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Please note that this example is shared between integer types." ]# [ doc =  " Which explains why `i16` is used here." ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " use std::num::Wrapping;" ]# [ doc =  "" ]# [ doc =  " let n = Wrapping(0b0000000_01010101i16);" ]# [ doc =  " assert_eq!(n, Wrapping(85));" ]# [ doc =  "" ]# [ doc =  " let m = n.reverse_bits();" ]# [ doc =  "" ]# [ doc =  " assert_eq!(m.0 as u16, 0b10101010_00000000);" ]# [ doc =  " assert_eq!(m, Wrapping(-22016));" ]# [ doc =  " ```" ]# [ stable ( feature =  "reverse_bits" ,  since =  "1.37.0" )]# [ rustc_const_stable ( feature =  "const_reverse_bits" ,  since =  "1.37.0" )]# [ inline ]# [ must_use ] pub  const  fn  reverse_bits ( self )->  Self { Wrapping ( self .  0 .  reverse_bits ())} doc_comment ! { concat ! ( "Converts an integer from big endian to the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(0x1A" ,  stringify ! ($t ),  ");\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(<Wrapping<" ,  stringify ! ($t ),  ">>::from_be(n), n)\n} else {\n    assert_eq!(<Wrapping<" ,  stringify ! ($t ),  ">>::from_be(n), n.swap_bytes())\n}\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  from_be ( x :  Self )->  Self { Wrapping (<$t >::  from_be ( x .  0 ))}} doc_comment ! { concat ! ( "Converts an integer from little endian to the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(0x1A" ,  stringify ! ($t ),  ");\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(<Wrapping<" ,  stringify ! ($t ),  ">>::from_le(n), n)\n} else {\n    assert_eq!(<Wrapping<" ,  stringify ! ($t ),  ">>::from_le(n), n.swap_bytes())\n}\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  from_le ( x :  Self )->  Self { Wrapping (<$t >::  from_le ( x .  0 ))}} doc_comment ! { concat ! ( "Converts `self` to big endian from the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(0x1A" ,  stringify ! ($t ),  ");\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  to_be ( self )->  Self { Wrapping ( self .  0 .  to_be ())}} doc_comment ! { concat ! ( "Converts `self` to little endian from the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(0x1A" ,  stringify ! ($t ),  ");\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  to_le ( self )->  Self { Wrapping ( self .  0 .  to_le ())}} doc_comment ! { concat ! ( "Raises self to the power of `exp`, using exponentiation by squaring.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(Wrapping(3" ,  stringify ! ($t ),  ").pow(4), Wrapping(81));\n```\n\nResults that are too large are wrapped:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(Wrapping(3i8).pow(5), Wrapping(-13));\nassert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  fn  pow ( self ,  exp :  u32 )->  Self { Wrapping ( self .  0 .  wrapping_pow ( exp ))}}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:10:macro_rules! __ra_macro_fixture9 {($($t :  ty )*)=>($(impl  Wrapping <$t > { doc_comment ! { concat ! ( "Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(" ,  stringify ! ($t ),  "::MAX) >> 2;\n\nassert_eq!(n.leading_zeros(), 3);\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  leading_zeros ( self )->  u32 { self .  0 .  leading_zeros ()}} doc_comment ! { concat ! ( "Computes the absolute value of `self`, wrapping around at\nthe boundary of the type.\n\nThe only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns `MIN` itself.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(Wrapping(100" ,  stringify ! ($t ),  ").abs(), Wrapping(100));\nassert_eq!(Wrapping(-100" ,  stringify ! ($t ),  ").abs(), Wrapping(100));\nassert_eq!(Wrapping(" ,  stringify ! ($t ),  "::MIN).abs(), Wrapping(" ,  stringify ! ($t ),  "::MIN));\nassert_eq!(Wrapping(-128i8).abs().0 as u8, 128u8);\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  fn  abs ( self )->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_abs ())}} doc_comment ! { concat ! ( "Returns a number representing sign of `self`.\n\n - `0` if the number is zero\n - `1` if the number is positive\n - `-1` if the number is negative\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert_eq!(Wrapping(10" ,  stringify ! ($t ),  ").signum(), Wrapping(1));\nassert_eq!(Wrapping(0" ,  stringify ! ($t ),  ").signum(), Wrapping(0));\nassert_eq!(Wrapping(-10" ,  stringify ! ($t ),  ").signum(), Wrapping(-1));\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  fn  signum ( self )->  Wrapping <$t > { Wrapping ( self .  0 .  signum ())}} doc_comment ! { concat ! ( "Returns `true` if `self` is positive and `false` if the number is zero or\nnegative.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert!(Wrapping(10" ,  stringify ! ($t ),  ").is_positive());\nassert!(!Wrapping(-10" ,  stringify ! ($t ),  ").is_positive());\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  is_positive ( self )->  bool { self .  0 .  is_positive ()}} doc_comment ! { concat ! ( "Returns `true` if `self` is negative and `false` if the number is zero or\npositive.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert!(Wrapping(-10" ,  stringify ! ($t ),  ").is_negative());\nassert!(!Wrapping(10" ,  stringify ! ($t ),  ").is_negative());\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  is_negative ( self )->  bool { self .  0 .  is_negative ()}}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:11:macro_rules! __ra_macro_fixture10 {($($t :  ty )*)=>($(impl  Wrapping <$t > { doc_comment ! { concat ! ( "Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nlet n = Wrapping(" ,  stringify ! ($t ),  "::MAX) >> 2;\n\nassert_eq!(n.leading_zeros(), 2);\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  const  fn  leading_zeros ( self )->  u32 { self .  0 .  leading_zeros ()}} doc_comment ! { concat ! ( "Returns `true` if and only if `self == 2^k` for some `k`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_int_impl)]\nuse std::num::Wrapping;\n\nassert!(Wrapping(16" ,  stringify ! ($t ),  ").is_power_of_two());\nassert!(!Wrapping(10" ,  stringify ! ($t ),  ").is_power_of_two());\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_int_impl" ,  issue =  "32463" )] pub  fn  is_power_of_two ( self )->  bool { self .  0 .  is_power_of_two ()}} doc_comment ! { concat ! ( "Returns the smallest power of two greater than or equal to `self`.\n\nWhen return value overflows (i.e., `self > (1 << (N-1))` for type\n`uN`), overflows to `2^N = 0`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_next_power_of_two)]\nuse std::num::Wrapping;\n\nassert_eq!(Wrapping(2" ,  stringify ! ($t ),  ").next_power_of_two(), Wrapping(2));\nassert_eq!(Wrapping(3" ,  stringify ! ($t ),  ").next_power_of_two(), Wrapping(4));\nassert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n```" ), # [ inline ]# [ unstable ( feature =  "wrapping_next_power_of_two" ,  issue =  "32463" ,  reason =  "needs decision on wrapping behaviour" )] pub  fn  next_power_of_two ( self )->  Self { Wrapping ( self .  0 .  wrapping_next_power_of_two ())}}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:12:macro_rules! __ra_macro_fixture11 {($($t :  ty )*)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  FromStr  for $t { type  Err =  ParseIntError ;  fn  from_str ( src : &  str )->  Result <  Self ,  ParseIntError > { from_str_radix ( src ,  10 )}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:15:macro_rules! __ra_macro_fixture14 {($($t :  ty )*)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Clone  for $t {# [ inline ] fn  clone (&  self )->  Self {*  self }})* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:16:macro_rules! __ra_macro_fixture15 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  PartialEq  for $t {# [ inline ] fn  eq (&  self ,  other : &$t )->  bool {(*  self )== (*  other )}# [ inline ] fn  ne (&  self ,  other : &$t )->  bool {(*  self )!= (*  other )}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:17:macro_rules! __ra_macro_fixture16 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Eq  for $t {})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:18:macro_rules! __ra_macro_fixture17 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  PartialOrd  for $t {# [ inline ] fn  partial_cmp (&  self ,  other : &$t )->  Option <  Ordering > { match ( self <=  other ,  self >=  other ){( false ,  false )=> None , ( false ,  true )=> Some ( Greater ), ( true ,  false )=> Some ( Less ), ( true ,  true )=> Some ( Equal ), }}# [ inline ] fn  lt (&  self ,  other : &$t )->  bool {(*  self )< (*  other )}# [ inline ] fn  le (&  self ,  other : &$t )->  bool {(*  self )<= (*  other )}# [ inline ] fn  ge (&  self ,  other : &$t )->  bool {(*  self )>= (*  other )}# [ inline ] fn  gt (&  self ,  other : &$t )->  bool {(*  self )> (*  other )}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:19:macro_rules! __ra_macro_fixture18 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  PartialOrd  for $t {# [ inline ] fn  partial_cmp (&  self ,  other : &$t )->  Option <  Ordering > { Some ( self .  cmp ( other ))}# [ inline ] fn  lt (&  self ,  other : &$t )->  bool {(*  self )< (*  other )}# [ inline ] fn  le (&  self ,  other : &$t )->  bool {(*  self )<= (*  other )}# [ inline ] fn  ge (&  self ,  other : &$t )->  bool {(*  self )>= (*  other )}# [ inline ] fn  gt (&  self ,  other : &$t )->  bool {(*  self )> (*  other )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Ord  for $t {# [ inline ] fn  cmp (&  self ,  other : &$t )->  Ordering { if *  self < *  other { Less } else  if *  self == *  other { Equal } else { Greater }}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:20:macro_rules! __ra_macro_fixture19 {($Float :  ident =>$($Int :  ident )+ )=>{# [ unstable ( feature =  "convert_float_to_int" ,  issue =  "67057" )] impl  private ::  Sealed  for $Float {}$(# [ unstable ( feature =  "convert_float_to_int" ,  issue =  "67057" )] impl  FloatToInt <$Int >  for $Float {# [ doc ( hidden )]# [ inline ] unsafe  fn  to_int_unchecked ( self )-> $Int { unsafe { crate ::  intrinsics ::  float_to_int_unchecked ( self )}}})+ }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:23:macro_rules! __ra_macro_fixture22 {($source :  ty , $($target :  ty ),*)=>{$(# [ stable ( feature =  "try_from" ,  since =  "1.34.0" )] impl  TryFrom <$source >  for $target { type  Error =  TryFromIntError ; # [ doc =  " Try to create the target number type from a source" ]# [ doc =  " number type. This returns an error if the source value" ]# [ doc =  " is outside of the range of the target type." ]# [ inline ] fn  try_from ( u : $source )->  Result <  Self ,  Self ::  Error > { if  u > ( Self ::  MAX  as $source ){ Err ( TryFromIntError (()))} else { Ok ( u  as  Self )}}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:24:macro_rules! __ra_macro_fixture23 {($source :  ty , $($target :  ty ),*)=>{$(# [ stable ( feature =  "try_from" ,  since =  "1.34.0" )] impl  TryFrom <$source >  for $target { type  Error =  TryFromIntError ; # [ doc =  " Try to create the target number type from a source" ]# [ doc =  " number type. This returns an error if the source value" ]# [ doc =  " is outside of the range of the target type." ]# [ inline ] fn  try_from ( u : $source )->  Result <  Self ,  Self ::  Error > { let  min =  Self ::  MIN  as $source ;  let  max =  Self ::  MAX  as $source ;  if  u <  min ||  u >  max { Err ( TryFromIntError (()))} else { Ok ( u  as  Self )}}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:25:macro_rules! __ra_macro_fixture24 {($source :  ty , $($target :  ty ),*)=>{$(# [ stable ( feature =  "try_from" ,  since =  "1.34.0" )] impl  TryFrom <$source >  for $target { type  Error =  TryFromIntError ; # [ doc =  " Try to create the target number type from a source" ]# [ doc =  " number type. This returns an error if the source value" ]# [ doc =  " is outside of the range of the target type." ]# [ inline ] fn  try_from ( u : $source )->  Result <  Self ,  Self ::  Error > { if  u >=  0 { Ok ( u  as  Self )} else { Err ( TryFromIntError (()))}}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:26:macro_rules! __ra_macro_fixture25 {($source :  ty , $($target :  ty ),*)=>{$(# [ stable ( feature =  "try_from" ,  since =  "1.34.0" )] impl  TryFrom <$source >  for $target { type  Error =  TryFromIntError ; # [ doc =  " Try to create the target number type from a source" ]# [ doc =  " number type. This returns an error if the source value" ]# [ doc =  " is outside of the range of the target type." ]# [ inline ] fn  try_from ( value : $source )->  Result <  Self ,  Self ::  Error > { Ok ( value  as  Self )}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:30:macro_rules! __ra_macro_fixture29 {($From :  ty =>$To :  ty , $doc :  expr )=>{# [ stable ( feature =  "nzint_try_from_nzint_conv" ,  since =  "1.49.0" )]# [ doc = $doc ] impl  TryFrom <$From >  for $To { type  Error =  TryFromIntError ; # [ inline ] fn  try_from ( value : $From )->  Result <  Self ,  Self ::  Error > { TryFrom ::  try_from ( value .  get ()).  map (|  v | { unsafe { Self ::  new_unchecked ( v )}})}}}; ($To :  ty : $($From :  ty ),*)=>{$(nzint_impl_try_from_nzint ! ($From =>$To ,  concat ! ( "Attempts to convert `" ,  stringify ! ($From ),  "` to `" ,  stringify ! ($To ),  "`." , )); )*}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:31:macro_rules! __ra_macro_fixture30 {($t :  ty , $v :  expr , $doc :  tt )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Default  for $t {# [ inline ]# [ doc = $doc ] fn  default ()-> $t {$v }}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:32:macro_rules! __ra_macro_fixture31 {($t :  ident )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  Hash  for $t <  T > {# [ inline ] fn  hash <  H :  Hasher > (&  self , _: &  mut  H ){}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  cmp ::  PartialEq  for $t <  T > { fn  eq (&  self ,  _other : &$t <  T >)->  bool { true }}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  cmp ::  Eq  for $t <  T > {}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  cmp ::  PartialOrd  for $t <  T > { fn  partial_cmp (&  self ,  _other : &$t <  T >)->  Option <  cmp ::  Ordering > { Option ::  Some ( cmp ::  Ordering ::  Equal )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  cmp ::  Ord  for $t <  T > { fn  cmp (&  self ,  _other : &$t <  T >)->  cmp ::  Ordering { cmp ::  Ordering ::  Equal }}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  Copy  for $t <  T > {}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  Clone  for $t <  T > { fn  clone (&  self )->  Self { Self }}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized >  Default  for $t <  T > { fn  default ()->  Self { Self }}# [ unstable ( feature =  "structural_match" ,  issue =  "31434" )] impl <  T : ?  Sized >  StructuralPartialEq  for $t <  T > {}# [ unstable ( feature =  "structural_match" ,  issue =  "31434" )] impl <  T : ?  Sized >  StructuralEq  for $t <  T > {}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:33:macro_rules! __ra_macro_fixture32 {($($t :  ty )*)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Copy  for $t {})* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:34:macro_rules! __ra_macro_fixture33 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Add  for $t { type  Output = $t ; # [ inline ]# [ rustc_inherit_overflow_checks ] fn  add ( self ,  other : $t )-> $t { self +  other }} forward_ref_binop ! { impl  Add ,  add  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:35:macro_rules! __ra_macro_fixture34 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Sub  for $t { type  Output = $t ; # [ inline ]# [ rustc_inherit_overflow_checks ] fn  sub ( self ,  other : $t )-> $t { self -  other }} forward_ref_binop ! { impl  Sub ,  sub  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:36:macro_rules! __ra_macro_fixture35 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Mul  for $t { type  Output = $t ; # [ inline ]# [ rustc_inherit_overflow_checks ] fn  mul ( self ,  other : $t )-> $t { self *  other }} forward_ref_binop ! { impl  Mul ,  mul  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:37:macro_rules! __ra_macro_fixture36 {($($t :  ty )*)=>($(# [ doc =  " This operation rounds towards zero, truncating any" ]# [ doc =  " fractional part of the exact result." ]# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Div  for $t { type  Output = $t ; # [ inline ] fn  div ( self ,  other : $t )-> $t { self /  other }} forward_ref_binop ! { impl  Div ,  div  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:38:macro_rules! __ra_macro_fixture37 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Div  for $t { type  Output = $t ; # [ inline ] fn  div ( self ,  other : $t )-> $t { self /  other }} forward_ref_binop ! { impl  Div ,  div  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:39:macro_rules! __ra_macro_fixture38 {($($t :  ty )*)=>($(# [ doc =  " This operation satisfies `n % d == n - (n / d) * d`. The" ]# [ doc =  " result has the same sign as the left operand." ]# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Rem  for $t { type  Output = $t ; # [ inline ] fn  rem ( self ,  other : $t )-> $t { self %  other }} forward_ref_binop ! { impl  Rem ,  rem  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:40:macro_rules! __ra_macro_fixture39 {($($t :  ty )*)=>($(# [ doc =  " The remainder from the division of two floats." ]# [ doc =  "" ]# [ doc =  " The remainder has the same sign as the dividend and is computed as:" ]# [ doc =  " `x - (x / y).trunc() * y`." ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  " ```" ]# [ doc =  " let x: f32 = 50.50;" ]# [ doc =  " let y: f32 = 8.125;" ]# [ doc =  " let remainder = x - (x / y).trunc() * y;" ]# [ doc =  "" ]# [ doc =  " // The answer to both operations is 1.75" ]# [ doc =  " assert_eq!(x % y, remainder);" ]# [ doc =  " ```" ]# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Rem  for $t { type  Output = $t ; # [ inline ] fn  rem ( self ,  other : $t )-> $t { self %  other }} forward_ref_binop ! { impl  Rem ,  rem  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:41:macro_rules! __ra_macro_fixture40 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Neg  for $t { type  Output = $t ; # [ inline ]# [ rustc_inherit_overflow_checks ] fn  neg ( self )-> $t {-  self }} forward_ref_unop ! { impl  Neg ,  neg  for $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:42:macro_rules! __ra_macro_fixture41 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  AddAssign  for $t {# [ inline ]# [ rustc_inherit_overflow_checks ] fn  add_assign (&  mut  self ,  other : $t ){*  self +=  other }} forward_ref_op_assign ! { impl  AddAssign ,  add_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:43:macro_rules! __ra_macro_fixture42 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  SubAssign  for $t {# [ inline ]# [ rustc_inherit_overflow_checks ] fn  sub_assign (&  mut  self ,  other : $t ){*  self -=  other }} forward_ref_op_assign ! { impl  SubAssign ,  sub_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:44:macro_rules! __ra_macro_fixture43 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  MulAssign  for $t {# [ inline ]# [ rustc_inherit_overflow_checks ] fn  mul_assign (&  mut  self ,  other : $t ){*  self *=  other }} forward_ref_op_assign ! { impl  MulAssign ,  mul_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:45:macro_rules! __ra_macro_fixture44 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  DivAssign  for $t {# [ inline ] fn  div_assign (&  mut  self ,  other : $t ){*  self /=  other }} forward_ref_op_assign ! { impl  DivAssign ,  div_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:46:macro_rules! __ra_macro_fixture45 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  RemAssign  for $t {# [ inline ] fn  rem_assign (&  mut  self ,  other : $t ){*  self %=  other }} forward_ref_op_assign ! { impl  RemAssign ,  rem_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:47:macro_rules! __ra_macro_fixture46 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Not  for $t { type  Output = $t ; # [ inline ] fn  not ( self )-> $t {!  self }} forward_ref_unop ! { impl  Not ,  not  for $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:48:macro_rules! __ra_macro_fixture47 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  BitAnd  for $t { type  Output = $t ; # [ inline ] fn  bitand ( self ,  rhs : $t )-> $t { self &  rhs }} forward_ref_binop ! { impl  BitAnd ,  bitand  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:49:macro_rules! __ra_macro_fixture48 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  BitOr  for $t { type  Output = $t ; # [ inline ] fn  bitor ( self ,  rhs : $t )-> $t { self |  rhs }} forward_ref_binop ! { impl  BitOr ,  bitor  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:50:macro_rules! __ra_macro_fixture49 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  BitXor  for $t { type  Output = $t ; # [ inline ] fn  bitxor ( self ,  other : $t )-> $t { self ^  other }} forward_ref_binop ! { impl  BitXor ,  bitxor  for $t , $t })*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:53:macro_rules! __ra_macro_fixture52 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  BitAndAssign  for $t {# [ inline ] fn  bitand_assign (&  mut  self ,  other : $t ){*  self &=  other }} forward_ref_op_assign ! { impl  BitAndAssign ,  bitand_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:54:macro_rules! __ra_macro_fixture53 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  BitOrAssign  for $t {# [ inline ] fn  bitor_assign (&  mut  self ,  other : $t ){*  self |=  other }} forward_ref_op_assign ! { impl  BitOrAssign ,  bitor_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:55:macro_rules! __ra_macro_fixture54 {($($t :  ty )+)=>($(# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  BitXorAssign  for $t {# [ inline ] fn  bitxor_assign (&  mut  self ,  other : $t ){*  self ^=  other }} forward_ref_op_assign ! { impl  BitXorAssign ,  bitxor_assign  for $t , $t })+)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:58:macro_rules! __ra_macro_fixture57 {{$n :  expr , $t :  ident $($ts :  ident )*}=>{# [ stable ( since =  "1.4.0" ,  feature =  "array_default" )] impl <  T >  Default  for [ T ; $n ] where  T :  Default { fn  default ()-> [ T ; $n ]{[$t ::  default (), $($ts ::  default ()),*]}} array_impl_default ! {($n -  1 ), $($ts )*}}; {$n :  expr ,}=>{# [ stable ( since =  "1.4.0" ,  feature =  "array_default" )] impl <  T >  Default  for [ T ; $n ]{ fn  default ()-> [ T ; $n ]{[]}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:59:macro_rules! __ra_macro_fixture58 {($($t :  ty ),+)=>{$(# [ unstable ( feature =  "c_variadic" ,  reason =  "the `c_variadic` feature has not been properly tested on \\n                                 all supported platforms" ,  issue =  "44930" )] impl  sealed_trait ::  VaArgSafe  for $t {})+ }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:60:macro_rules! __ra_macro_fixture59 {{ narrower  than  or  same  width  as  usize : $([$u_narrower :  ident $i_narrower :  ident ]),+;  wider  than  usize : $([$u_wider :  ident $i_wider :  ident ]),+; }=>{$(# [ allow ( unreachable_patterns )]# [ unstable ( feature =  "step_trait" ,  reason =  "recently redesigned" ,  issue =  "42168" )] unsafe  impl  Step  for $u_narrower { step_identical_methods ! (); # [ inline ] fn  steps_between ( start : &  Self ,  end : &  Self )->  Option <  usize > { if *  start <= *  end { Some ((*  end - *  start ) as  usize )} else { None }}# [ inline ] fn  forward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { match  Self ::  try_from ( n ){ Ok ( n )=> start .  checked_add ( n ),  Err (_)=> None , }}# [ inline ] fn  backward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { match  Self ::  try_from ( n ){ Ok ( n )=> start .  checked_sub ( n ),  Err (_)=> None , }}}# [ allow ( unreachable_patterns )]# [ unstable ( feature =  "step_trait" ,  reason =  "recently redesigned" ,  issue =  "42168" )] unsafe  impl  Step  for $i_narrower { step_identical_methods ! (); # [ inline ] fn  steps_between ( start : &  Self ,  end : &  Self )->  Option <  usize > { if *  start <= *  end { Some ((*  end  as  isize ).  wrapping_sub (*  start  as  isize ) as  usize )} else { None }}# [ inline ] fn  forward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { match $u_narrower ::  try_from ( n ){ Ok ( n )=>{ let  wrapped =  start .  wrapping_add ( n  as  Self );  if  wrapped >=  start { Some ( wrapped )} else { None }} Err (_)=> None , }}# [ inline ] fn  backward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { match $u_narrower ::  try_from ( n ){ Ok ( n )=>{ let  wrapped =  start .  wrapping_sub ( n  as  Self );  if  wrapped <=  start { Some ( wrapped )} else { None }} Err (_)=> None , }}})+ $(# [ allow ( unreachable_patterns )]# [ unstable ( feature =  "step_trait" ,  reason =  "recently redesigned" ,  issue =  "42168" )] unsafe  impl  Step  for $u_wider { step_identical_methods ! (); # [ inline ] fn  steps_between ( start : &  Self ,  end : &  Self )->  Option <  usize > { if *  start <= *  end { usize ::  try_from (*  end - *  start ).  ok ()} else { None }}# [ inline ] fn  forward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { start .  checked_add ( n  as  Self )}# [ inline ] fn  backward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { start .  checked_sub ( n  as  Self )}}# [ allow ( unreachable_patterns )]# [ unstable ( feature =  "step_trait" ,  reason =  "recently redesigned" ,  issue =  "42168" )] unsafe  impl  Step  for $i_wider { step_identical_methods ! (); # [ inline ] fn  steps_between ( start : &  Self ,  end : &  Self )->  Option <  usize > { if *  start <= *  end { match  end .  checked_sub (*  start ){ Some ( result )=> usize ::  try_from ( result ).  ok (),  None => None , }} else { None }}# [ inline ] fn  forward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { start .  checked_add ( n  as  Self )}# [ inline ] fn  backward_checked ( start :  Self ,  n :  usize )->  Option <  Self > { start .  checked_sub ( n  as  Self )}})+ }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:61:macro_rules! __ra_macro_fixture60 {($($t :  ty )*)=>($(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  ExactSizeIterator  for  ops ::  Range <$t > {})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:62:macro_rules! __ra_macro_fixture61 {($($t :  ty )*)=>($(# [ stable ( feature =  "inclusive_range" ,  since =  "1.26.0" )] impl  ExactSizeIterator  for  ops ::  RangeInclusive <$t > {})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:63:macro_rules! __ra_macro_fixture62 {(@  impls $zero :  expr , $one :  expr , # [$attr :  meta ], $($a :  ty )*)=>($(# [$attr ] impl  Sum  for $a { fn  sum <  I :  Iterator <  Item =  Self >> ( iter :  I )->  Self { iter .  fold ($zero ,  Add ::  add )}}# [$attr ] impl  Product  for $a { fn  product <  I :  Iterator <  Item =  Self >> ( iter :  I )->  Self { iter .  fold ($one ,  Mul ::  mul )}}# [$attr ] impl < 'a >  Sum <& 'a $a >  for $a { fn  sum <  I :  Iterator <  Item =& 'a  Self >> ( iter :  I )->  Self { iter .  fold ($zero ,  Add ::  add )}}# [$attr ] impl < 'a >  Product <& 'a $a >  for $a { fn  product <  I :  Iterator <  Item =& 'a  Self >> ( iter :  I )->  Self { iter .  fold ($one ,  Mul ::  mul )}})*); ($($a :  ty )*)=>( integer_sum_product ! (@  impls  0 ,  1 , # [ stable ( feature =  "iter_arith_traits" ,  since =  "1.12.0" )], $($a )*);  integer_sum_product ! (@  impls  Wrapping ( 0 ),  Wrapping ( 1 ), # [ stable ( feature =  "wrapping_iter_arith" ,  since =  "1.14.0" )], $(Wrapping <$a >)*); ); }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:64:macro_rules! __ra_macro_fixture63 {($($a :  ident )*)=>($(# [ stable ( feature =  "iter_arith_traits" ,  since =  "1.12.0" )] impl  Sum  for $a { fn  sum <  I :  Iterator <  Item =  Self >> ( iter :  I )->  Self { iter .  fold ( 0.0 ,  Add ::  add )}}# [ stable ( feature =  "iter_arith_traits" ,  since =  "1.12.0" )] impl  Product  for $a { fn  product <  I :  Iterator <  Item =  Self >> ( iter :  I )->  Self { iter .  fold ( 1.0 ,  Mul ::  mul )}}# [ stable ( feature =  "iter_arith_traits" ,  since =  "1.12.0" )] impl < 'a >  Sum <& 'a $a >  for $a { fn  sum <  I :  Iterator <  Item =& 'a  Self >> ( iter :  I )->  Self { iter .  fold ( 0.0 ,  Add ::  add )}}# [ stable ( feature =  "iter_arith_traits" ,  since =  "1.12.0" )] impl < 'a >  Product <& 'a $a >  for $a { fn  product <  I :  Iterator <  Item =& 'a  Self >> ( iter :  I )->  Self { iter .  fold ( 1.0 ,  Mul ::  mul )}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:65:macro_rules! __ra_macro_fixture64 {($cfg_cas :  meta , $cfg_align :  meta , $stable :  meta , $stable_cxchg :  meta , $stable_debug :  meta , $stable_access :  meta , $stable_from :  meta , $stable_nand :  meta , $const_stable :  meta , $stable_init_const :  meta , $s_int_type :  literal , $int_ref :  expr , $extra_feature :  expr , $min_fn :  ident , $max_fn :  ident , $align :  expr , $atomic_new :  expr , $int_type :  ident $atomic_type :  ident $atomic_init :  ident )=>{# [ doc =  " An integer type which can be safely shared between threads." ]# [ doc =  "" ]# [ doc =  " This type has the same in-memory representation as the underlying" ]# [ doc =  " integer type, [`" ]# [ doc = $s_int_type ]# [ doc =  " `](" ]# [ doc = $int_ref ]# [ doc =  " ). For more about the differences between atomic types and" ]# [ doc =  " non-atomic types as well as information about the portability of" ]# [ doc =  " this type, please see the [module-level documentation]." ]# [ doc =  "" ]# [ doc =  " **Note:** This type is only available on platforms that support" ]# [ doc =  " atomic loads and stores of [`" ]# [ doc = $s_int_type ]# [ doc =  " `](" ]# [ doc = $int_ref ]# [ doc =  " )." ]# [ doc =  "" ]# [ doc =  " [module-level documentation]: crate::sync::atomic" ]# [$stable ]# [ repr ( C ,  align ($align ))] pub  struct $atomic_type { v :  UnsafeCell <$int_type >, }# [ doc =  " An atomic integer initialized to `0`." ]# [$stable_init_const ]# [ rustc_deprecated ( since =  "1.34.0" ,  reason =  "the `new` function is now preferred" ,  suggestion = $atomic_new , )] pub  const $atomic_init : $atomic_type = $atomic_type ::  new ( 0 ); # [$stable ] impl  Default  for $atomic_type {# [ inline ] fn  default ()->  Self { Self ::  new ( Default ::  default ())}}# [$stable_from ] impl  From <$int_type >  for $atomic_type { doc_comment ! { concat ! ( "Converts an `" ,  stringify ! ($int_type ),  "` into an `" ,  stringify ! ($atomic_type ),  "`." ), # [ inline ] fn  from ( v : $int_type )->  Self { Self ::  new ( v )}}}# [$stable_debug ] impl  fmt ::  Debug  for $atomic_type { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { fmt ::  Debug ::  fmt (&  self .  load ( Ordering ::  SeqCst ),  f )}}# [$stable ] unsafe  impl  Sync  for $atomic_type {} impl $atomic_type { doc_comment ! { concat ! ( "Creates a new atomic integer.\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::" ,  stringify ! ($atomic_type ),  ";\n\nlet atomic_forty_two = " ,  stringify ! ($atomic_type ),  "::new(42);\n```" ), # [ inline ]# [$stable ]# [$const_stable ] pub  const  fn  new ( v : $int_type )->  Self { Self { v :  UnsafeCell ::  new ( v )}}} doc_comment ! { concat ! ( "Returns a mutable reference to the underlying integer.\n\nThis is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet mut some_var = " ,  stringify ! ($atomic_type ),  "::new(10);\nassert_eq!(*some_var.get_mut(), 10);\n*some_var.get_mut() = 5;\nassert_eq!(some_var.load(Ordering::SeqCst), 5);\n```" ), # [ inline ]# [$stable_access ] pub  fn  get_mut (&  mut  self )-> &  mut $int_type { self .  v .  get_mut ()}} doc_comment ! { concat ! ( "Get atomic access to a `&mut " ,  stringify ! ($int_type ),  "`.\n\n" ,  if_not_8_bit ! {$int_type ,  concat ! ( "**Note:** This function is only available on targets where `" ,  stringify ! ($int_type ),  "` has an alignment of " , $align ,  " bytes." )},  "\n\n# Examples\n\n```\n#![feature(atomic_from_mut)]\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet mut some_int = 123;\nlet a = " ,  stringify ! ($atomic_type ),  "::from_mut(&mut some_int);\na.store(100, Ordering::Relaxed);\nassert_eq!(some_int, 100);\n```\n                " ), # [ inline ]# [$cfg_align ]# [ unstable ( feature =  "atomic_from_mut" ,  issue =  "76314" )] pub  fn  from_mut ( v : &  mut $int_type )-> &  Self { use  crate ::  mem ::  align_of ;  let []= [();  align_of ::<  Self > ()-  align_of ::<$int_type > ()];  unsafe {&* ( v  as *  mut $int_type  as *  mut  Self )}}} doc_comment ! { concat ! ( "Consumes the atomic and returns the contained value.\n\nThis is safe because passing `self` by value guarantees that no other threads are\nconcurrently accessing the atomic data.\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::" ,  stringify ! ($atomic_type ),  ";\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\nassert_eq!(some_var.into_inner(), 5);\n```" ), # [ inline ]# [$stable_access ]# [ rustc_const_unstable ( feature =  "const_cell_into_inner" ,  issue =  "78729" )] pub  const  fn  into_inner ( self )-> $int_type { self .  v .  into_inner ()}} doc_comment ! { concat ! ( "Loads a value from the atomic integer.\n\n`load` takes an [`Ordering`] argument which describes the memory ordering of this operation.\nPossible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n\n# Panics\n\nPanics if `order` is [`Release`] or [`AcqRel`].\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.load(Ordering::Relaxed), 5);\n```" ), # [ inline ]# [$stable ] pub  fn  load (&  self ,  order :  Ordering )-> $int_type { unsafe { atomic_load ( self .  v .  get (),  order )}}} doc_comment ! { concat ! ( "Stores a value into the atomic integer.\n\n`store` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n\n# Panics\n\nPanics if `order` is [`Acquire`] or [`AcqRel`].\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nsome_var.store(10, Ordering::Relaxed);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```" ), # [ inline ]# [$stable ] pub  fn  store (&  self ,  val : $int_type ,  order :  Ordering ){ unsafe { atomic_store ( self .  v .  get (),  val ,  order ); }}} doc_comment ! { concat ! ( "Stores a value into the atomic integer, returning the previous value.\n\n`swap` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  swap (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_swap ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Stores a value into the atomic integer if the current value is the same as\nthe `current` value.\n\nThe return value is always the previous value. If it is equal to `current`, then the\nvalue was updated.\n\n`compare_and_swap` also takes an [`Ordering`] argument which describes the memory\nordering of this operation. Notice that even when using [`AcqRel`], the operation\nmight fail and hence just perform an `Acquire` load, but not have `Release` semantics.\nUsing [`Acquire`] makes the store part of this operation [`Relaxed`] if it\nhappens, and using [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n\nassert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  compare_and_swap (&  self ,  current : $int_type ,  new : $int_type ,  order :  Ordering )-> $int_type { match  self .  compare_exchange ( current ,  new ,  order ,  strongest_failure_ordering ( order )){ Ok ( x )=> x ,  Err ( x )=> x , }}} doc_comment ! { concat ! ( "Stores a value into the atomic integer if the current value is the same as\nthe `current` value.\n\nThe return value is a result indicating whether the new value was written and\ncontaining the previous value. On success this value is guaranteed to be equal to\n`current`.\n\n`compare_exchange` takes two [`Ordering`] arguments to describe the memory\nordering of this operation. The first describes the required ordering if the\noperation succeeds while the second describes the required ordering when the\noperation fails. Using [`Acquire`] as success ordering makes the store part\nof this operation [`Relaxed`], and using [`Release`] makes the successful load\n[`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\nand must be equivalent to or weaker than the success ordering.\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.compare_exchange(5, 10,\n                                     Ordering::Acquire,\n                                     Ordering::Relaxed),\n           Ok(5));\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n\nassert_eq!(some_var.compare_exchange(6, 12,\n                                     Ordering::SeqCst,\n                                     Ordering::Acquire),\n           Err(10));\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```" ), # [ inline ]# [$stable_cxchg ]# [$cfg_cas ] pub  fn  compare_exchange (&  self ,  current : $int_type ,  new : $int_type ,  success :  Ordering ,  failure :  Ordering )->  Result <$int_type , $int_type > { unsafe { atomic_compare_exchange ( self .  v .  get (),  current ,  new ,  success ,  failure )}}} doc_comment ! { concat ! ( "Stores a value into the atomic integer if the current value is the same as\nthe `current` value.\n\nUnlike [`" ,  stringify ! ($atomic_type ),  "::compare_exchange`], this function is allowed to spuriously fail even\nwhen the comparison succeeds, which can result in more efficient code on some\nplatforms. The return value is a result indicating whether the new value was\nwritten and containing the previous value.\n\n`compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\nordering of this operation. The first describes the required ordering if the\noperation succeeds while the second describes the required ordering when the\noperation fails. Using [`Acquire`] as success ordering makes the store part\nof this operation [`Relaxed`], and using [`Release`] makes the successful load\n[`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\nand must be equivalent to or weaker than the success ordering.\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet val = " ,  stringify ! ($atomic_type ),  "::new(4);\n\nlet mut old = val.load(Ordering::Relaxed);\nloop {\n    let new = old * 2;\n    match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        Ok(_) => break,\n        Err(x) => old = x,\n    }\n}\n```" ), # [ inline ]# [$stable_cxchg ]# [$cfg_cas ] pub  fn  compare_exchange_weak (&  self ,  current : $int_type ,  new : $int_type ,  success :  Ordering ,  failure :  Ordering )->  Result <$int_type , $int_type > { unsafe { atomic_compare_exchange_weak ( self .  v .  get (),  current ,  new ,  success ,  failure )}}} doc_comment ! { concat ! ( "Adds to the current value, returning the previous value.\n\nThis operation wraps around on overflow.\n\n`fetch_add` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0);\nassert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\nassert_eq!(foo.load(Ordering::SeqCst), 10);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_add (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_add ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Subtracts from the current value, returning the previous value.\n\nThis operation wraps around on overflow.\n\n`fetch_sub` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(20);\nassert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\nassert_eq!(foo.load(Ordering::SeqCst), 10);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_sub (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_sub ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"and\" with the current value.\n\nPerforms a bitwise \"and\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_and` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0b101101);\nassert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_and (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_and ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"nand\" with the current value.\n\nPerforms a bitwise \"nand\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_nand` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "\nuse std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0x13);\nassert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\nassert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n```" ), # [ inline ]# [$stable_nand ]# [$cfg_cas ] pub  fn  fetch_nand (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_nand ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"or\" with the current value.\n\nPerforms a bitwise \"or\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_or` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0b101101);\nassert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_or (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_or ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"xor\" with the current value.\n\nPerforms a bitwise \"xor\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_xor` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0b101101);\nassert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_xor (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_xor ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n`Err(previous_value)`.\n\nNote: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, as long as the function returns `Some(_)`, but the function will have been applied\nonly once to the stored value.\n\n`fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n[`" ,  stringify ! ($atomic_type ),  "::compare_exchange`] respectively.\n\nUsing [`Acquire`] as success ordering makes the store part\nof this operation [`Relaxed`], and using [`Release`] makes the final successful load\n[`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\nand must be equivalent to or weaker than the success ordering.\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```rust\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet x = " ,  stringify ! ($atomic_type ),  "::new(7);\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\nassert_eq!(x.load(Ordering::SeqCst), 9);\n```" ), # [ inline ]# [ stable ( feature =  "no_more_cas" ,  since =  "1.45.0" )]# [$cfg_cas ] pub  fn  fetch_update <  F > (&  self ,  set_order :  Ordering ,  fetch_order :  Ordering ,  mut  f :  F )->  Result <$int_type , $int_type >  where  F :  FnMut ($int_type )->  Option <$int_type > { let  mut  prev =  self .  load ( fetch_order );  while  let  Some ( next )=  f ( prev ){ match  self .  compare_exchange_weak ( prev ,  next ,  set_order ,  fetch_order ){ x @  Ok (_)=> return  x ,  Err ( next_prev )=> prev =  next_prev }} Err ( prev )}} doc_comment ! { concat ! ( "Maximum with the current value.\n\nFinds the maximum of the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_max` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nassert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23);\nassert_eq!(foo.load(Ordering::SeqCst), 42);\n```\n\nIf you want to obtain the maximum value in one step, you can use the following:\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nlet bar = 42;\nlet max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\nassert!(max_foo == 42);\n```" ), # [ inline ]# [ stable ( feature =  "atomic_min_max" ,  since =  "1.45.0" )]# [$cfg_cas ] pub  fn  fetch_max (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe {$max_fn ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Minimum with the current value.\n\nFinds the minimum of the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_min` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nassert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23);\nassert_eq!(foo.load(Ordering::Relaxed), 23);\nassert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23);\nassert_eq!(foo.load(Ordering::Relaxed), 22);\n```\n\nIf you want to obtain the minimum value in one step, you can use the following:\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nlet bar = 12;\nlet min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\nassert_eq!(min_foo, 12);\n```" ), # [ inline ]# [ stable ( feature =  "atomic_min_max" ,  since =  "1.45.0" )]# [$cfg_cas ] pub  fn  fetch_min (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe {$min_fn ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Returns a mutable pointer to the underlying integer.\n\nDoing non-atomic reads and writes on the resulting integer can be a data race.\nThis method is mostly useful for FFI, where the function signature may use\n`*mut " ,  stringify ! ($int_type ),  "` instead of `&" ,  stringify ! ($atomic_type ),  "`.\n\nReturning an `*mut` pointer from a shared reference to this atomic is safe because the\natomic types work with interior mutability. All modifications of an atomic change the value\nthrough a shared reference, and can do so safely as long as they use atomic operations. Any\nuse of the returned raw pointer requires an `unsafe` block and still has to uphold the same\nrestriction: operations on it must be atomic.\n\n# Examples\n\n```ignore (extern-declaration)\n# fn main() {\n" , $extra_feature ,  "use std::sync::atomic::" ,  stringify ! ($atomic_type ),  ";\n\nextern {\n    fn my_atomic_op(arg: *mut " ,  stringify ! ($int_type ),  ");\n}\n\nlet mut atomic = " ,  stringify ! ($atomic_type ),  "::new(1);\n" ,  "unsafe {\n    my_atomic_op(atomic.as_mut_ptr());\n}\n# }\n```" ), # [ inline ]# [ unstable ( feature =  "atomic_mut_ptr" ,  reason =  "recently added" ,  issue =  "66893" )] pub  fn  as_mut_ptr (&  self )-> *  mut $int_type { self .  v .  get ()}}}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:66:macro_rules! __ra_macro_fixture65 {($($target_pointer_width :  literal $align :  literal )* )=>{$(# [ cfg ( target_has_atomic_load_store =  "ptr" )]# [ cfg ( target_pointer_width = $target_pointer_width )] atomic_int ! { cfg ( target_has_atomic =  "ptr" ),  cfg ( target_has_atomic_equal_alignment =  "ptr" ),  stable ( feature =  "rust1" ,  since =  "1.0.0" ),  stable ( feature =  "extended_compare_and_swap" ,  since =  "1.10.0" ),  stable ( feature =  "atomic_debug" ,  since =  "1.3.0" ),  stable ( feature =  "atomic_access" ,  since =  "1.15.0" ),  stable ( feature =  "atomic_from" ,  since =  "1.23.0" ),  stable ( feature =  "atomic_nand" ,  since =  "1.27.0" ),  rustc_const_stable ( feature =  "const_integer_atomics" ,  since =  "1.34.0" ),  stable ( feature =  "rust1" ,  since =  "1.0.0" ),  "isize" ,  "../../../std/primitive.isize.html" ,  "" ,  atomic_min ,  atomic_max , $align ,  "AtomicIsize::new(0)" ,  isize  AtomicIsize  ATOMIC_ISIZE_INIT }# [ cfg ( target_has_atomic_load_store =  "ptr" )]# [ cfg ( target_pointer_width = $target_pointer_width )] atomic_int ! { cfg ( target_has_atomic =  "ptr" ),  cfg ( target_has_atomic_equal_alignment =  "ptr" ),  stable ( feature =  "rust1" ,  since =  "1.0.0" ),  stable ( feature =  "extended_compare_and_swap" ,  since =  "1.10.0" ),  stable ( feature =  "atomic_debug" ,  since =  "1.3.0" ),  stable ( feature =  "atomic_access" ,  since =  "1.15.0" ),  stable ( feature =  "atomic_from" ,  since =  "1.23.0" ),  stable ( feature =  "atomic_nand" ,  since =  "1.27.0" ),  rustc_const_stable ( feature =  "const_integer_atomics" ,  since =  "1.34.0" ),  stable ( feature =  "rust1" ,  since =  "1.0.0" ),  "usize" ,  "../../../std/primitive.usize.html" ,  "" ,  atomic_umin ,  atomic_umax , $align ,  "AtomicUsize::new(0)" ,  usize  AtomicUsize  ATOMIC_USIZE_INIT })* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:67:macro_rules! __ra_macro_fixture66 {($ty :  ident )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Debug  for $ty { fn  fmt (&  self ,  fmt : &  mut  Formatter < '_ >)->  Result { float_to_decimal_common ( fmt ,  self ,  true ,  1 )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Display  for $ty { fn  fmt (&  self ,  fmt : &  mut  Formatter < '_ >)->  Result { float_to_decimal_common ( fmt ,  self ,  false ,  0 )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  LowerExp  for $ty { fn  fmt (&  self ,  fmt : &  mut  Formatter < '_ >)->  Result { float_to_exponential_common ( fmt ,  self ,  false )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  UpperExp  for $ty { fn  fmt (&  self ,  fmt : &  mut  Formatter < '_ >)->  Result { float_to_exponential_common ( fmt ,  self ,  true )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:72:macro_rules! __ra_macro_fixture71 {($($T :  ident )*)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  fmt ::  Debug  for $T {# [ inline ] fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { if  f .  debug_lower_hex (){ fmt ::  LowerHex ::  fmt ( self ,  f )} else  if  f .  debug_upper_hex (){ fmt ::  UpperHex ::  fmt ( self ,  f )} else { fmt ::  Display ::  fmt ( self ,  f )}}})*}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:73:macro_rules! __ra_macro_fixture72 {($($t :  ident ),*  as $u :  ident  via $conv_fn :  ident  named $name :  ident )=>{ fn $name ( mut  n : $u ,  is_nonnegative :  bool ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { let  mut  buf = [ MaybeUninit ::<  u8 >::  uninit ();  39 ];  let  mut  curr =  buf .  len () as  isize ;  let  buf_ptr =  MaybeUninit ::  slice_as_mut_ptr (&  mut  buf );  let  lut_ptr =  DEC_DIGITS_LUT .  as_ptr ();  unsafe { assert ! ( crate ::  mem ::  size_of ::<$u > ()>=  2 );  while  n >=  10000 { let  rem = ( n %  10000 ) as  isize ;  n /=  10000 ;  let  d1 = ( rem /  100 )<<  1 ;  let  d2 = ( rem %  100 )<<  1 ;  curr -=  4 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 );  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d2 ),  buf_ptr .  offset ( curr +  2 ),  2 ); } let  mut  n =  n  as  isize ;  if  n >=  100 { let  d1 = ( n %  100 )<<  1 ;  n /=  100 ;  curr -=  2 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 ); } if  n <  10 { curr -=  1 ; *  buf_ptr .  offset ( curr )= ( n  as  u8 )+  b'0' ; } else { let  d1 =  n <<  1 ;  curr -=  2 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 ); }} let  buf_slice =  unsafe { str ::  from_utf8_unchecked ( slice ::  from_raw_parts ( buf_ptr .  offset ( curr ),  buf .  len ()-  curr  as  usize ))};  f .  pad_integral ( is_nonnegative ,  "" ,  buf_slice )}$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  fmt ::  Display  for $t {# [ allow ( unused_comparisons )] fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { let  is_nonnegative = *  self >=  0 ;  let  n =  if  is_nonnegative { self .$conv_fn ()} else {(!  self .$conv_fn ()).  wrapping_add ( 1 )}; $name ( n ,  is_nonnegative ,  f )}})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:74:macro_rules! __ra_macro_fixture73 {($($t :  ident ),*  as $u :  ident  via $conv_fn :  ident  named $name :  ident )=>{ fn $name ( mut  n : $u ,  is_nonnegative :  bool ,  upper :  bool ,  f : &  mut  fmt ::  Formatter < '_ > )->  fmt ::  Result { let ( mut  n ,  mut  exponent ,  trailing_zeros ,  added_precision )= { let  mut  exponent =  0 ;  while  n %  10 ==  0 &&  n >=  10 { n /=  10 ;  exponent +=  1 ; } let  trailing_zeros =  exponent ;  let ( added_precision ,  subtracted_precision )=  match  f .  precision (){ Some ( fmt_prec )=>{ let  mut  tmp =  n ;  let  mut  prec =  0 ;  while  tmp >=  10 { tmp /=  10 ;  prec +=  1 ; }( fmt_prec .  saturating_sub ( prec ),  prec .  saturating_sub ( fmt_prec ))} None =>( 0 ,  0 )};  for _  in  1 ..  subtracted_precision { n /=  10 ;  exponent +=  1 ; } if  subtracted_precision !=  0 { let  rem =  n %  10 ;  n /=  10 ;  exponent +=  1 ;  if  rem >=  5 { n +=  1 ; }}( n ,  exponent ,  trailing_zeros ,  added_precision )};  let  mut  buf = [ MaybeUninit ::<  u8 >::  uninit ();  40 ];  let  mut  curr =  buf .  len () as  isize ;  let  buf_ptr =  MaybeUninit ::  slice_as_mut_ptr (&  mut  buf );  let  lut_ptr =  DEC_DIGITS_LUT .  as_ptr ();  while  n >=  100 { let  d1 = (( n %  100 ) as  isize )<<  1 ;  curr -=  2 ;  unsafe { ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 ); } n /=  100 ;  exponent +=  2 ; } let  mut  n =  n  as  isize ;  if  n >=  10 { curr -=  1 ;  unsafe {*  buf_ptr .  offset ( curr )= ( n  as  u8 %  10_u8 )+  b'0' ; } n /=  10 ;  exponent +=  1 ; } if  exponent !=  trailing_zeros ||  added_precision !=  0 { curr -=  1 ;  unsafe {*  buf_ptr .  offset ( curr )=  b'.' ; }} let  buf_slice =  unsafe { curr -=  1 ; *  buf_ptr .  offset ( curr )= ( n  as  u8 )+  b'0' ;  let  len =  buf .  len ()-  curr  as  usize ;  slice ::  from_raw_parts ( buf_ptr .  offset ( curr ),  len )};  let  mut  exp_buf = [ MaybeUninit ::<  u8 >::  uninit ();  3 ];  let  exp_ptr =  MaybeUninit ::  slice_as_mut_ptr (&  mut  exp_buf );  let  exp_slice =  unsafe {*  exp_ptr .  offset ( 0 )=  if  upper { b'E' } else { b'e' };  let  len =  if  exponent <  10 {*  exp_ptr .  offset ( 1 )= ( exponent  as  u8 )+  b'0' ;  2 } else { let  off =  exponent <<  1 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( off ),  exp_ptr .  offset ( 1 ),  2 );  3 };  slice ::  from_raw_parts ( exp_ptr ,  len )};  let  parts = & [ flt2dec ::  Part ::  Copy ( buf_slice ),  flt2dec ::  Part ::  Zero ( added_precision ),  flt2dec ::  Part ::  Copy ( exp_slice )];  let  sign =  if !  is_nonnegative { "-" } else  if  f .  sign_plus (){ "+" } else { "" };  let  formatted =  flt2dec ::  Formatted { sign ,  parts };  f .  pad_formatted_parts (&  formatted )}$(# [ stable ( feature =  "integer_exp_format" ,  since =  "1.42.0" )] impl  fmt ::  LowerExp  for $t {# [ allow ( unused_comparisons )] fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { let  is_nonnegative = *  self >=  0 ;  let  n =  if  is_nonnegative { self .$conv_fn ()} else {(!  self .$conv_fn ()).  wrapping_add ( 1 )}; $name ( n ,  is_nonnegative ,  false ,  f )}})* $(# [ stable ( feature =  "integer_exp_format" ,  since =  "1.42.0" )] impl  fmt ::  UpperExp  for $t {# [ allow ( unused_comparisons )] fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { let  is_nonnegative = *  self >=  0 ;  let  n =  if  is_nonnegative { self .$conv_fn ()} else {(!  self .$conv_fn ()).  wrapping_add ( 1 )}; $name ( n ,  is_nonnegative ,  true ,  f )}})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:75:macro_rules! __ra_macro_fixture74 {($($tr :  ident ),*)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized + $tr > $tr  for &  T { fn  fmt (&  self ,  f : &  mut  Formatter < '_ >)->  Result {$tr ::  fmt (&**  self ,  f )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T : ?  Sized + $tr > $tr  for &  mut  T { fn  fmt (&  self ,  f : &  mut  Formatter < '_ >)->  Result {$tr ::  fmt (&**  self ,  f )}})* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:76:macro_rules! __ra_macro_fixture75 {()=>(); ($($name :  ident ,)+ )=>(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($name :  Debug ),+>  Debug  for ($($name ,)+) where  last_type ! ($($name ,)+): ?  Sized {# [ allow ( non_snake_case ,  unused_assignments )] fn  fmt (&  self ,  f : &  mut  Formatter < '_ >)->  Result { let  mut  builder =  f .  debug_tuple ( "" );  let ($(ref $name ,)+)= *  self ; $(builder .  field (&$name ); )+  builder .  finish ()}} peel ! {$($name ,)+ })}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:77:macro_rules! __ra_macro_fixture76 {($(($ty :  ident , $meth :  ident ),)*)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Hash  for $ty { fn  hash <  H :  Hasher > (&  self ,  state : &  mut  H ){ state .$meth (*  self )} fn  hash_slice <  H :  Hasher > ( data : & [$ty ],  state : &  mut  H ){ let  newlen =  data .  len ()*  mem ::  size_of ::<$ty > ();  let  ptr =  data .  as_ptr () as *  const  u8 ;  state .  write ( unsafe { slice ::  from_raw_parts ( ptr ,  newlen )})}})*}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:78:macro_rules! __ra_macro_fixture77 {()=>(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Hash  for (){ fn  hash <  H :  Hasher > (&  self ,  _state : &  mut  H ){}}); ($($name :  ident )+)=>(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($name :  Hash ),+>  Hash  for ($($name ,)+) where  last_type ! ($($name ,)+): ?  Sized {# [ allow ( non_snake_case )] fn  hash <  S :  Hasher > (&  self ,  state : &  mut  S ){ let ($(ref $name ,)+)= *  self ; $($name .  hash ( state );)+ }}); }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:81:macro_rules! __ra_macro_fixture80 {( struct $name :  ident -> $ptr :  ty , $elem :  ty , $raw_mut :  tt , {$($mut_ :  tt )?}, {$($extra :  tt )*})=>{ macro_rules !  next_unchecked {($self :  ident )=>{& $($mut_ )? *$self .  post_inc_start ( 1 )}} macro_rules !  next_back_unchecked {($self :  ident )=>{& $($mut_ )? *$self .  pre_dec_end ( 1 )}} macro_rules !  zst_shrink {($self :  ident , $n :  ident )=>{$self .  end = ($self .  end  as * $raw_mut  u8 ).  wrapping_offset (-$n ) as * $raw_mut  T ; }} impl < 'a ,  T > $name < 'a ,  T > {# [ inline ( always )] fn  make_slice (&  self )-> & 'a [ T ]{ unsafe { from_raw_parts ( self .  ptr .  as_ptr (),  len ! ( self ))}}# [ inline ( always )] unsafe  fn  post_inc_start (&  mut  self ,  offset :  isize )-> * $raw_mut  T { if  mem ::  size_of ::<  T > ()==  0 { zst_shrink ! ( self ,  offset );  self .  ptr .  as_ptr ()} else { let  old =  self .  ptr .  as_ptr ();  self .  ptr =  unsafe { NonNull ::  new_unchecked ( self .  ptr .  as_ptr ().  offset ( offset ))};  old }}# [ inline ( always )] unsafe  fn  pre_dec_end (&  mut  self ,  offset :  isize )-> * $raw_mut  T { if  mem ::  size_of ::<  T > ()==  0 { zst_shrink ! ( self ,  offset );  self .  ptr .  as_ptr ()} else { self .  end =  unsafe { self .  end .  offset (-  offset )};  self .  end }}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <  T >  ExactSizeIterator  for $name < '_ ,  T > {# [ inline ( always )] fn  len (&  self )->  usize { len ! ( self )}# [ inline ( always )] fn  is_empty (&  self )->  bool { is_empty ! ( self )}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl < 'a ,  T >  Iterator  for $name < 'a ,  T > { type  Item = $elem ; # [ inline ] fn  next (&  mut  self )->  Option <$elem > { unsafe { assume (!  self .  ptr .  as_ptr ().  is_null ());  if  mem ::  size_of ::<  T > ()!=  0 { assume (!  self .  end .  is_null ()); } if  is_empty ! ( self ){ None } else { Some ( next_unchecked ! ( self ))}}}# [ inline ] fn  size_hint (&  self )-> ( usize ,  Option <  usize >){ let  exact =  len ! ( self ); ( exact ,  Some ( exact ))}# [ inline ] fn  count ( self )->  usize { len ! ( self )}# [ inline ] fn  nth (&  mut  self ,  n :  usize )->  Option <$elem > { if  n >=  len ! ( self ){ if  mem ::  size_of ::<  T > ()==  0 { self .  end =  self .  ptr .  as_ptr (); } else { unsafe { self .  ptr =  NonNull ::  new_unchecked ( self .  end  as *  mut  T ); }} return  None ; } unsafe { self .  post_inc_start ( n  as  isize );  Some ( next_unchecked ! ( self ))}}# [ inline ] fn  last ( mut  self )->  Option <$elem > { self .  next_back ()}# [ inline ] fn  for_each <  F > ( mut  self ,  mut  f :  F ) where  Self :  Sized ,  F :  FnMut ( Self ::  Item ), { while  let  Some ( x )=  self .  next (){ f ( x ); }}# [ inline ] fn  all <  F > (&  mut  self ,  mut  f :  F )->  bool  where  Self :  Sized ,  F :  FnMut ( Self ::  Item )->  bool , { while  let  Some ( x )=  self .  next (){ if !  f ( x ){ return  false ; }} true }# [ inline ] fn  any <  F > (&  mut  self ,  mut  f :  F )->  bool  where  Self :  Sized ,  F :  FnMut ( Self ::  Item )->  bool , { while  let  Some ( x )=  self .  next (){ if  f ( x ){ return  true ; }} false }# [ inline ] fn  find <  P > (&  mut  self ,  mut  predicate :  P )->  Option <  Self ::  Item >  where  Self :  Sized ,  P :  FnMut (&  Self ::  Item )->  bool , { while  let  Some ( x )=  self .  next (){ if  predicate (&  x ){ return  Some ( x ); }} None }# [ inline ] fn  find_map <  B ,  F > (&  mut  self ,  mut  f :  F )->  Option <  B >  where  Self :  Sized ,  F :  FnMut ( Self ::  Item )->  Option <  B >, { while  let  Some ( x )=  self .  next (){ if  let  Some ( y )=  f ( x ){ return  Some ( y ); }} None }# [ inline ]# [ rustc_inherit_overflow_checks ] fn  position <  P > (&  mut  self ,  mut  predicate :  P )->  Option <  usize >  where  Self :  Sized ,  P :  FnMut ( Self ::  Item )->  bool , { let  n =  len ! ( self );  let  mut  i =  0 ;  while  let  Some ( x )=  self .  next (){ if  predicate ( x ){ unsafe { assume ( i <  n )};  return  Some ( i ); } i +=  1 ; } None }# [ inline ] fn  rposition <  P > (&  mut  self ,  mut  predicate :  P )->  Option <  usize >  where  P :  FnMut ( Self ::  Item )->  bool ,  Self :  Sized +  ExactSizeIterator +  DoubleEndedIterator { let  n =  len ! ( self );  let  mut  i =  n ;  while  let  Some ( x )=  self .  next_back (){ i -=  1 ;  if  predicate ( x ){ unsafe { assume ( i <  n )};  return  Some ( i ); }} None }# [ doc ( hidden )] unsafe  fn  __iterator_get_unchecked (&  mut  self ,  idx :  usize )->  Self ::  Item { unsafe {& $($mut_ )? *  self .  ptr .  as_ptr ().  add ( idx )}}$($extra )* }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl < 'a ,  T >  DoubleEndedIterator  for $name < 'a ,  T > {# [ inline ] fn  next_back (&  mut  self )->  Option <$elem > { unsafe { assume (!  self .  ptr .  as_ptr ().  is_null ());  if  mem ::  size_of ::<  T > ()!=  0 { assume (!  self .  end .  is_null ()); } if  is_empty ! ( self ){ None } else { Some ( next_back_unchecked ! ( self ))}}}# [ inline ] fn  nth_back (&  mut  self ,  n :  usize )->  Option <$elem > { if  n >=  len ! ( self ){ self .  end =  self .  ptr .  as_ptr ();  return  None ; } unsafe { self .  pre_dec_end ( n  as  isize );  Some ( next_back_unchecked ! ( self ))}}}# [ stable ( feature =  "fused" ,  since =  "1.26.0" )] impl <  T >  FusedIterator  for $name < '_ ,  T > {}# [ unstable ( feature =  "trusted_len" ,  issue =  "37572" )] unsafe  impl <  T >  TrustedLen  for $name < '_ ,  T > {}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:82:macro_rules! __ra_macro_fixture81 {($name :  ident : $elem :  ident , $iter_of :  ty )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl < 'a , $elem ,  P >  Iterator  for $name < 'a , $elem ,  P >  where  P :  FnMut (&  T )->  bool , { type  Item = $iter_of ; # [ inline ] fn  next (&  mut  self )->  Option <$iter_of > { self .  inner .  next ()}# [ inline ] fn  size_hint (&  self )-> ( usize ,  Option <  usize >){ self .  inner .  size_hint ()}}# [ stable ( feature =  "fused" ,  since =  "1.26.0" )] impl < 'a , $elem ,  P >  FusedIterator  for $name < 'a , $elem ,  P >  where  P :  FnMut (&  T )->  bool {}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:84:macro_rules! __ra_macro_fixture83 {{ forward : $(# [$forward_iterator_attribute :  meta ])*  struct $forward_iterator :  ident ;  reverse : $(# [$reverse_iterator_attribute :  meta ])*  struct $reverse_iterator :  ident ;  stability : $(# [$common_stability_attribute :  meta ])*  internal : $internal_iterator :  ident  yielding ($iterty :  ty );  delegate $($t :  tt )* }=>{$(# [$forward_iterator_attribute ])* $(# [$common_stability_attribute ])*  pub  struct $forward_iterator < 'a ,  P :  Pattern < 'a >> ( pub ( super )$internal_iterator < 'a ,  P >); $(# [$common_stability_attribute ])*  impl < 'a ,  P >  fmt ::  Debug  for $forward_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  fmt ::  Debug >, { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { f .  debug_tuple ( stringify ! ($forward_iterator )).  field (&  self .  0 ).  finish ()}}$(# [$common_stability_attribute ])*  impl < 'a ,  P :  Pattern < 'a >>  Iterator  for $forward_iterator < 'a ,  P > { type  Item = $iterty ; # [ inline ] fn  next (&  mut  self )->  Option <$iterty > { self .  0 .  next ()}}$(# [$common_stability_attribute ])*  impl < 'a ,  P >  Clone  for $forward_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  Clone >, { fn  clone (&  self )->  Self {$forward_iterator ( self .  0 .  clone ())}}$(# [$reverse_iterator_attribute ])* $(# [$common_stability_attribute ])*  pub  struct $reverse_iterator < 'a ,  P :  Pattern < 'a >> ( pub ( super )$internal_iterator < 'a ,  P >); $(# [$common_stability_attribute ])*  impl < 'a ,  P >  fmt ::  Debug  for $reverse_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  fmt ::  Debug >, { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { f .  debug_tuple ( stringify ! ($reverse_iterator )).  field (&  self .  0 ).  finish ()}}$(# [$common_stability_attribute ])*  impl < 'a ,  P >  Iterator  for $reverse_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  ReverseSearcher < 'a >>, { type  Item = $iterty ; # [ inline ] fn  next (&  mut  self )->  Option <$iterty > { self .  0 .  next_back ()}}$(# [$common_stability_attribute ])*  impl < 'a ,  P >  Clone  for $reverse_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  Clone >, { fn  clone (&  self )->  Self {$reverse_iterator ( self .  0 .  clone ())}}# [ stable ( feature =  "fused" ,  since =  "1.26.0" )] impl < 'a ,  P :  Pattern < 'a >>  FusedIterator  for $forward_iterator < 'a ,  P > {}# [ stable ( feature =  "fused" ,  since =  "1.26.0" )] impl < 'a ,  P >  FusedIterator  for $reverse_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  ReverseSearcher < 'a >>, {} generate_pattern_iterators ! ($($t )*  with $(# [$common_stability_attribute ])*, $forward_iterator , $reverse_iterator , $iterty ); }; { double  ended ;  with $(# [$common_stability_attribute :  meta ])*, $forward_iterator :  ident , $reverse_iterator :  ident , $iterty :  ty }=>{$(# [$common_stability_attribute ])*  impl < 'a ,  P >  DoubleEndedIterator  for $forward_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  DoubleEndedSearcher < 'a >>, {# [ inline ] fn  next_back (&  mut  self )->  Option <$iterty > { self .  0 .  next_back ()}}$(# [$common_stability_attribute ])*  impl < 'a ,  P >  DoubleEndedIterator  for $reverse_iterator < 'a ,  P >  where  P :  Pattern < 'a ,  Searcher :  DoubleEndedSearcher < 'a >>, {# [ inline ] fn  next_back (&  mut  self )->  Option <$iterty > { self .  0 .  next ()}}}; { single  ended ;  with $(# [$common_stability_attribute :  meta ])*, $forward_iterator :  ident , $reverse_iterator :  ident , $iterty :  ty }=>{}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:85:macro_rules! __ra_macro_fixture84 {($($Name :  ident ),+)=>{$(# [ stable ( feature =  "str_escape" ,  since =  "1.34.0" )] impl < 'a >  fmt ::  Display  for $Name < 'a > { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { self .  clone ().  try_for_each (|  c |  f .  write_char ( c ))}}# [ stable ( feature =  "str_escape" ,  since =  "1.34.0" )] impl < 'a >  Iterator  for $Name < 'a > { type  Item =  char ; # [ inline ] fn  next (&  mut  self )->  Option <  char > { self .  inner .  next ()}# [ inline ] fn  size_hint (&  self )-> ( usize ,  Option <  usize >){ self .  inner .  size_hint ()}# [ inline ] fn  try_fold <  Acc ,  Fold ,  R > (&  mut  self ,  init :  Acc ,  fold :  Fold )->  R  where  Self :  Sized ,  Fold :  FnMut ( Acc ,  Self ::  Item )->  R ,  R :  Try <  Ok =  Acc >{ self .  inner .  try_fold ( init ,  fold )}# [ inline ] fn  fold <  Acc ,  Fold > ( self ,  init :  Acc ,  fold :  Fold )->  Acc  where  Fold :  FnMut ( Acc ,  Self ::  Item )->  Acc , { self .  inner .  fold ( init ,  fold )}}# [ stable ( feature =  "str_escape" ,  since =  "1.34.0" )] impl < 'a >  FusedIterator  for $Name < 'a > {})+}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:87:macro_rules! __ra_macro_fixture86 {($($Tuple :  ident {$(($idx :  tt )-> $T :  ident )+ })+)=>{$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($T :  PartialEq ),+>  PartialEq  for ($($T ,)+) where  last_type ! ($($T ,)+): ?  Sized {# [ inline ] fn  eq (&  self ,  other : & ($($T ,)+))->  bool {$(self .$idx ==  other .$idx )&&+ }# [ inline ] fn  ne (&  self ,  other : & ($($T ,)+))->  bool {$(self .$idx !=  other .$idx )||+ }}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($T :  Eq ),+>  Eq  for ($($T ,)+) where  last_type ! ($($T ,)+): ?  Sized {}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($T :  PartialOrd +  PartialEq ),+>  PartialOrd  for ($($T ,)+) where  last_type ! ($($T ,)+): ?  Sized {# [ inline ] fn  partial_cmp (&  self ,  other : & ($($T ,)+))->  Option <  Ordering > { lexical_partial_cmp ! ($(self .$idx ,  other .$idx ),+)}# [ inline ] fn  lt (&  self ,  other : & ($($T ,)+))->  bool { lexical_ord ! ( lt , $(self .$idx ,  other .$idx ),+)}# [ inline ] fn  le (&  self ,  other : & ($($T ,)+))->  bool { lexical_ord ! ( le , $(self .$idx ,  other .$idx ),+)}# [ inline ] fn  ge (&  self ,  other : & ($($T ,)+))->  bool { lexical_ord ! ( ge , $(self .$idx ,  other .$idx ),+)}# [ inline ] fn  gt (&  self ,  other : & ($($T ,)+))->  bool { lexical_ord ! ( gt , $(self .$idx ,  other .$idx ),+)}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($T :  Ord ),+>  Ord  for ($($T ,)+) where  last_type ! ($($T ,)+): ?  Sized {# [ inline ] fn  cmp (&  self ,  other : & ($($T ,)+))->  Ordering { lexical_cmp ! ($(self .$idx ,  other .$idx ),+)}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl <$($T :  Default ),+>  Default  for ($($T ,)+){# [ inline ] fn  default ()-> ($($T ,)+){($({let  x : $T =  Default ::  default ();  x },)+)}})+ }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:91:macro_rules! __ra_macro_fixture90 {($t :  ident , $f :  ident )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Shl <$f >  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  shl ( self ,  other : $f )->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_shl (( other &  self ::  shift_max ::$t  as $f ) as  u32 ))}} forward_ref_binop ! { impl  Shl ,  shl  for  Wrapping <$t >, $f , # [ stable ( feature =  "wrapping_ref_ops" ,  since =  "1.39.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  ShlAssign <$f >  for  Wrapping <$t > {# [ inline ] fn  shl_assign (&  mut  self ,  other : $f ){*  self = *  self <<  other ; }} forward_ref_op_assign ! { impl  ShlAssign ,  shl_assign  for  Wrapping <$t >, $f }# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Shr <$f >  for  Wrapping <$t > { type  Output =  Wrapping <$t >; # [ inline ] fn  shr ( self ,  other : $f )->  Wrapping <$t > { Wrapping ( self .  0 .  wrapping_shr (( other &  self ::  shift_max ::$t  as $f ) as  u32 ))}} forward_ref_binop ! { impl  Shr ,  shr  for  Wrapping <$t >, $f , # [ stable ( feature =  "wrapping_ref_ops" ,  since =  "1.39.0" )]}# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  ShrAssign <$f >  for  Wrapping <$t > {# [ inline ] fn  shr_assign (&  mut  self ,  other : $f ){*  self = *  self >>  other ; }} forward_ref_op_assign ! { impl  ShrAssign ,  shr_assign  for  Wrapping <$t >, $f }}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:92:macro_rules! __ra_macro_fixture91 {( impl $imp :  ident , $method :  ident  for $t :  ty , $u :  ty )=>{ forward_ref_binop ! ( impl $imp , $method  for $t , $u , # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]); }; ( impl $imp :  ident , $method :  ident  for $t :  ty , $u :  ty , # [$attr :  meta ])=>{# [$attr ] impl < 'a > $imp <$u >  for & 'a $t { type  Output = <$t  as $imp <$u >>::  Output ; # [ inline ] fn $method ( self ,  other : $u )-> <$t  as $imp <$u >>::  Output {$imp ::$method (*  self ,  other )}}# [$attr ] impl $imp <&$u >  for $t { type  Output = <$t  as $imp <$u >>::  Output ; # [ inline ] fn $method ( self ,  other : &$u )-> <$t  as $imp <$u >>::  Output {$imp ::$method ( self , *  other )}}# [$attr ] impl $imp <&$u >  for &$t { type  Output = <$t  as $imp <$u >>::  Output ; # [ inline ] fn $method ( self ,  other : &$u )-> <$t  as $imp <$u >>::  Output {$imp ::$method (*  self , *  other )}}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:93:macro_rules! __ra_macro_fixture92 {( impl $imp :  ident , $method :  ident  for $t :  ty , $u :  ty )=>{ forward_ref_op_assign ! ( impl $imp , $method  for $t , $u , # [ stable ( feature =  "op_assign_builtins_by_ref" ,  since =  "1.22.0" )]); }; ( impl $imp :  ident , $method :  ident  for $t :  ty , $u :  ty , # [$attr :  meta ])=>{# [$attr ] impl $imp <&$u >  for $t {# [ inline ] fn $method (&  mut  self ,  other : &$u ){$imp ::$method ( self , *  other ); }}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:94:macro_rules! __ra_macro_fixture93 {( impl $imp :  ident , $method :  ident  for $t :  ty )=>{ forward_ref_unop ! ( impl $imp , $method  for $t , # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]); }; ( impl $imp :  ident , $method :  ident  for $t :  ty , # [$attr :  meta ])=>{# [$attr ] impl $imp  for &$t { type  Output = <$t  as $imp >::  Output ; # [ inline ] fn $method ( self )-> <$t  as $imp >::  Output {$imp ::$method (*  self )}}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:95:macro_rules! __ra_macro_fixture94 {($FnTy :  ty , $($Arg :  ident ),*)=>{# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  PartialEq  for $FnTy {# [ inline ] fn  eq (&  self ,  other : &  Self )->  bool {*  self  as  usize == *  other  as  usize }}# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  Eq  for $FnTy {}# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  PartialOrd  for $FnTy {# [ inline ] fn  partial_cmp (&  self ,  other : &  Self )->  Option <  Ordering > {(*  self  as  usize ).  partial_cmp (& (*  other  as  usize ))}}# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  Ord  for $FnTy {# [ inline ] fn  cmp (&  self ,  other : &  Self )->  Ordering {(*  self  as  usize ).  cmp (& (*  other  as  usize ))}}# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  hash ::  Hash  for $FnTy { fn  hash <  HH :  hash ::  Hasher > (&  self ,  state : &  mut  HH ){ state .  write_usize (*  self  as  usize )}}# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  fmt ::  Pointer  for $FnTy { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { fmt ::  Pointer ::  fmt (& (*  self  as  usize  as *  const ()),  f )}}# [ stable ( feature =  "fnptr_impls" ,  since =  "1.4.0" )] impl <  Ret , $($Arg ),*>  fmt ::  Debug  for $FnTy { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { fmt ::  Pointer ::  fmt (& (*  self  as  usize  as *  const ()),  f )}}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:96:macro_rules! __ra_macro_fixture95 {($t :  ty , $f :  ty )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Shl <$f >  for $t { type  Output = $t ; # [ inline ]# [ rustc_inherit_overflow_checks ] fn  shl ( self ,  other : $f )-> $t { self <<  other }} forward_ref_binop ! { impl  Shl ,  shl  for $t , $f }}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:97:macro_rules! __ra_macro_fixture96 {($t :  ty , $f :  ty )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  Shr <$f >  for $t { type  Output = $t ; # [ inline ]# [ rustc_inherit_overflow_checks ] fn  shr ( self ,  other : $f )-> $t { self >>  other }} forward_ref_binop ! { impl  Shr ,  shr  for $t , $f }}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:98:macro_rules! __ra_macro_fixture97 {($t :  ty , $f :  ty )=>{# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  ShlAssign <$f >  for $t {# [ inline ]# [ rustc_inherit_overflow_checks ] fn  shl_assign (&  mut  self ,  other : $f ){*  self <<=  other }} forward_ref_op_assign ! { impl  ShlAssign ,  shl_assign  for $t , $f }}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:99:macro_rules! __ra_macro_fixture98 {($t :  ty , $f :  ty )=>{# [ stable ( feature =  "op_assign_traits" ,  since =  "1.8.0" )] impl  ShrAssign <$f >  for $t {# [ inline ]# [ rustc_inherit_overflow_checks ] fn  shr_assign (&  mut  self ,  other : $f ){*  self >>=  other }} forward_ref_op_assign ! { impl  ShrAssign ,  shr_assign  for $t , $f }}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:100:macro_rules! __ra_macro_fixture99 {( fmt ::$Trait :  ident  for $T :  ident  as $U :  ident -> $Radix :  ident )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  fmt ::$Trait  for $T { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result {$Radix .  fmt_int (*  self  as $U ,  f )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:103:macro_rules! __ra_macro_fixture102 {([$($vars :  tt )*]$lhs :  ty , $rhs :  ty , $($constraints :  tt )*)=>{# [ stable ( feature =  "vec_deque_partial_eq_slice" ,  since =  "1.17.0" )] impl <  A ,  B , $($vars )*>  PartialEq <$rhs >  for $lhs  where  A :  PartialEq <  B >, $($constraints )* { fn  eq (&  self ,  other : &$rhs )->  bool { if  self .  len ()!=  other .  len (){ return  false ; } let ( sa ,  sb )=  self .  as_slices ();  let ( oa ,  ob )=  other [..].  split_at ( sa .  len ());  sa ==  oa &&  sb ==  ob }}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:104:macro_rules! __ra_macro_fixture103 {($lhs :  ty , $rhs :  ty )=>{# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ allow ( unused_lifetimes )] impl < 'a , 'b >  PartialEq <$rhs >  for $lhs {# [ inline ] fn  eq (&  self ,  other : &$rhs )->  bool { PartialEq ::  eq (&  self [..], &  other [..])}# [ inline ] fn  ne (&  self ,  other : &$rhs )->  bool { PartialEq ::  ne (&  self [..], &  other [..])}}# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ allow ( unused_lifetimes )] impl < 'a , 'b >  PartialEq <$lhs >  for $rhs {# [ inline ] fn  eq (&  self ,  other : &$lhs )->  bool { PartialEq ::  eq (&  self [..], &  other [..])}# [ inline ] fn  ne (&  self ,  other : &$lhs )->  bool { PartialEq ::  ne (&  self [..], &  other [..])}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:117:macro_rules! __ra_macro_fixture116 {($lhs :  ty , $rhs :  ty )=>{# [ stable ( feature =  "cmp_os_str" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialEq <$rhs >  for $lhs {# [ inline ] fn  eq (&  self ,  other : &$rhs )->  bool {<  OsStr  as  PartialEq >::  eq ( self ,  other )}}# [ stable ( feature =  "cmp_os_str" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialEq <$lhs >  for $rhs {# [ inline ] fn  eq (&  self ,  other : &$lhs )->  bool {<  OsStr  as  PartialEq >::  eq ( self ,  other )}}# [ stable ( feature =  "cmp_os_str" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialOrd <$rhs >  for $lhs {# [ inline ] fn  partial_cmp (&  self ,  other : &$rhs )->  Option <  cmp ::  Ordering > {<  OsStr  as  PartialOrd >::  partial_cmp ( self ,  other )}}# [ stable ( feature =  "cmp_os_str" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialOrd <$lhs >  for $rhs {# [ inline ] fn  partial_cmp (&  self ,  other : &$lhs )->  Option <  cmp ::  Ordering > {<  OsStr  as  PartialOrd >::  partial_cmp ( self ,  other )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:120:macro_rules! __ra_macro_fixture119 {($lhs :  ty , $rhs :  ty )=>{# [ stable ( feature =  "partialeq_path" ,  since =  "1.6.0" )] impl < 'a , 'b >  PartialEq <$rhs >  for $lhs {# [ inline ] fn  eq (&  self ,  other : &$rhs )->  bool {<  Path  as  PartialEq >::  eq ( self ,  other )}}# [ stable ( feature =  "partialeq_path" ,  since =  "1.6.0" )] impl < 'a , 'b >  PartialEq <$lhs >  for $rhs {# [ inline ] fn  eq (&  self ,  other : &$lhs )->  bool {<  Path  as  PartialEq >::  eq ( self ,  other )}}# [ stable ( feature =  "cmp_path" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialOrd <$rhs >  for $lhs {# [ inline ] fn  partial_cmp (&  self ,  other : &$rhs )->  Option <  cmp ::  Ordering > {<  Path  as  PartialOrd >::  partial_cmp ( self ,  other )}}# [ stable ( feature =  "cmp_path" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialOrd <$lhs >  for $rhs {# [ inline ] fn  partial_cmp (&  self ,  other : &$lhs )->  Option <  cmp ::  Ordering > {<  Path  as  PartialOrd >::  partial_cmp ( self ,  other )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:121:macro_rules! __ra_macro_fixture120 {($lhs :  ty , $rhs :  ty )=>{# [ stable ( feature =  "cmp_path" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialEq <$rhs >  for $lhs {# [ inline ] fn  eq (&  self ,  other : &$rhs )->  bool {<  Path  as  PartialEq >::  eq ( self ,  other .  as_ref ())}}# [ stable ( feature =  "cmp_path" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialEq <$lhs >  for $rhs {# [ inline ] fn  eq (&  self ,  other : &$lhs )->  bool {<  Path  as  PartialEq >::  eq ( self .  as_ref (),  other )}}# [ stable ( feature =  "cmp_path" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialOrd <$rhs >  for $lhs {# [ inline ] fn  partial_cmp (&  self ,  other : &$rhs )->  Option <  cmp ::  Ordering > {<  Path  as  PartialOrd >::  partial_cmp ( self ,  other .  as_ref ())}}# [ stable ( feature =  "cmp_path" ,  since =  "1.8.0" )] impl < 'a , 'b >  PartialOrd <$lhs >  for $rhs {# [ inline ] fn  partial_cmp (&  self ,  other : &$lhs )->  Option <  cmp ::  Ordering > {<  Path  as  PartialOrd >::  partial_cmp ( self .  as_ref (),  other )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:122:macro_rules! __ra_macro_fixture121 {(@  key $t :  ty , $init :  expr )=>{{# [ inline ] fn  __init ()-> $t {$init } unsafe  fn  __getit ()-> $crate ::  option ::  Option <& 'static $t > {# [ cfg ( all ( target_arch =  "wasm32" ,  not ( target_feature =  "atomics" )))] static  __KEY : $crate ::  thread ::  __StaticLocalKeyInner <$t > = $crate ::  thread ::  __StaticLocalKeyInner ::  new (); # [ thread_local ]# [ cfg ( all ( target_thread_local ,  not ( all ( target_arch =  "wasm32" ,  not ( target_feature =  "atomics" ))), ))] static  __KEY : $crate ::  thread ::  __FastLocalKeyInner <$t > = $crate ::  thread ::  __FastLocalKeyInner ::  new (); # [ cfg ( all ( not ( target_thread_local ),  not ( all ( target_arch =  "wasm32" ,  not ( target_feature =  "atomics" ))), ))] static  __KEY : $crate ::  thread ::  __OsLocalKeyInner <$t > = $crate ::  thread ::  __OsLocalKeyInner ::  new (); # [ allow ( unused_unsafe )] unsafe { __KEY .  get ( __init )}} unsafe {$crate ::  thread ::  LocalKey ::  new ( __getit )}}}; ($(# [$attr :  meta ])* $vis :  vis $name :  ident , $t :  ty , $init :  expr )=>{$(# [$attr ])* $vis  const $name : $crate ::  thread ::  LocalKey <$t > = $crate ::  __thread_local_inner ! (@  key $t , $init ); }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:133:macro_rules! __ra_macro_fixture132 {($($(# [$attr :  meta ])*  pub $t :  ident $i :  ident {$($field :  tt )* })*)=>($(s ! ( it : $(# [$attr ])*  pub $t $i {$($field )* }); )*); ( it : $(# [$attr :  meta ])*  pub  union $i :  ident {$($field :  tt )* })=>( compile_error ! ( "unions cannot derive extra traits, use s_no_extra_traits instead" ); ); ( it : $(# [$attr :  meta ])*  pub  struct $i :  ident {$($field :  tt )* })=>( __item ! {# [ repr ( C )]# [ cfg_attr ( feature =  "extra_traits" ,  derive ( Debug ,  Eq ,  Hash ,  PartialEq ))]# [ allow ( deprecated )]$(# [$attr ])*  pub  struct $i {$($field )* }}# [ allow ( deprecated )] impl ::  Copy  for $i {}# [ allow ( deprecated )] impl ::  Clone  for $i { fn  clone (&  self )-> $i {*  self }}); }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:143:macro_rules! __ra_macro_fixture142 {($display :  tt $name :  ty )=>{# [ cfg ( feature =  "parsing" )] impl  Token  for $name { fn  peek ( cursor :  Cursor )->  bool { fn  peek ( input :  ParseStream )->  bool {<$name  as  Parse >::  parse ( input ).  is_ok ()} peek_impl ( cursor ,  peek )} fn  display ()-> & 'static  str {$display }}# [ cfg ( feature =  "parsing" )] impl  private ::  Sealed  for $name {}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:144:macro_rules! __ra_macro_fixture143 {($display :  tt $ty :  ident $get :  ident )=>{# [ cfg ( feature =  "parsing" )] impl  Token  for $ty { fn  peek ( cursor :  Cursor )->  bool { cursor .$get ().  is_some ()} fn  display ()-> & 'static  str {$display }}# [ cfg ( feature =  "parsing" )] impl  private ::  Sealed  for $ty {}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:145:macro_rules! __ra_macro_fixture144 {($($token :  tt  pub  struct $name :  ident /$len :  tt # [$doc :  meta ])*)=>{$(# [ repr ( C )]# [$doc ]# [ doc =  "" ]# [ doc =  " Don\\\'t try to remember the name of this type &mdash; use the" ]# [ doc =  " [`Token!`] macro instead." ]# [ doc =  "" ]# [ doc =  " [`Token!`]: crate::token" ] pub  struct $name { pub  spans : [ Span ; $len ], }# [ doc ( hidden )]# [ allow ( non_snake_case )] pub  fn $name <  S :  IntoSpans < [ Span ; $len ]>> ( spans :  S )-> $name {$name { spans :  spans .  into_spans (), }} impl  std ::  default ::  Default  for $name { fn  default ()->  Self {$name { spans : [ Span ::  call_site (); $len ], }}}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Copy  for $name {}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Clone  for $name { fn  clone (&  self )->  Self {*  self }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Debug  for $name { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter )->  fmt ::  Result { f .  write_str ( stringify ! ($name ))}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  cmp ::  Eq  for $name {}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  PartialEq  for $name { fn  eq (&  self ,  _other : &$name )->  bool { true }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Hash  for $name { fn  hash <  H :  Hasher > (&  self ,  _state : &  mut  H ){}} impl_deref_if_len_is_1 ! ($name /$len ); )* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:146:macro_rules! __ra_macro_fixture145 {($($token :  tt  pub  struct $name :  ident # [$doc :  meta ])*)=>{$(# [$doc ]# [ doc =  "" ]# [ doc =  " Don\\\'t try to remember the name of this type &mdash; use the" ]# [ doc =  " [`Token!`] macro instead." ]# [ doc =  "" ]# [ doc =  " [`Token!`]: crate::token" ] pub  struct $name { pub  span :  Span , }# [ doc ( hidden )]# [ allow ( non_snake_case )] pub  fn $name <  S :  IntoSpans < [ Span ;  1 ]>> ( span :  S )-> $name {$name { span :  span .  into_spans ()[ 0 ], }} impl  std ::  default ::  Default  for $name { fn  default ()->  Self {$name { span :  Span ::  call_site (), }}}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Copy  for $name {}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Clone  for $name { fn  clone (&  self )->  Self {*  self }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Debug  for $name { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter )->  fmt ::  Result { f .  write_str ( stringify ! ($name ))}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  cmp ::  Eq  for $name {}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  PartialEq  for $name { fn  eq (&  self ,  _other : &$name )->  bool { true }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Hash  for $name { fn  hash <  H :  Hasher > (&  self ,  _state : &  mut  H ){}}# [ cfg ( feature =  "printing" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "printing" )))] impl  ToTokens  for $name { fn  to_tokens (&  self ,  tokens : &  mut  TokenStream ){ printing ::  keyword ($token ,  self .  span ,  tokens ); }}# [ cfg ( feature =  "parsing" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "parsing" )))] impl  Parse  for $name { fn  parse ( input :  ParseStream )->  Result <  Self > { Ok ($name { span :  parsing ::  keyword ( input , $token )?, })}}# [ cfg ( feature =  "parsing" )] impl  Token  for $name { fn  peek ( cursor :  Cursor )->  bool { parsing ::  peek_keyword ( cursor , $token )} fn  display ()-> & 'static  str { concat ! ( "`" , $token ,  "`" )}}# [ cfg ( feature =  "parsing" )] impl  private ::  Sealed  for $name {})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:147:macro_rules! __ra_macro_fixture146 {($($token :  tt  pub  struct $name :  ident /$len :  tt # [$doc :  meta ])*)=>{$(define_punctuation_structs ! {$token  pub  struct $name /$len # [$doc ]}# [ cfg ( feature =  "printing" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "printing" )))] impl  ToTokens  for $name { fn  to_tokens (&  self ,  tokens : &  mut  TokenStream ){ printing ::  punct ($token , &  self .  spans ,  tokens ); }}# [ cfg ( feature =  "parsing" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "parsing" )))] impl  Parse  for $name { fn  parse ( input :  ParseStream )->  Result <  Self > { Ok ($name { spans :  parsing ::  punct ( input , $token )?, })}}# [ cfg ( feature =  "parsing" )] impl  Token  for $name { fn  peek ( cursor :  Cursor )->  bool { parsing ::  peek_punct ( cursor , $token )} fn  display ()-> & 'static  str { concat ! ( "`" , $token ,  "`" )}}# [ cfg ( feature =  "parsing" )] impl  private ::  Sealed  for $name {})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:148:macro_rules! __ra_macro_fixture147 {($($token :  tt  pub  struct $name :  ident # [$doc :  meta ])*)=>{$(# [$doc ] pub  struct $name { pub  span :  Span , }# [ doc ( hidden )]# [ allow ( non_snake_case )] pub  fn $name <  S :  IntoSpans < [ Span ;  1 ]>> ( span :  S )-> $name {$name { span :  span .  into_spans ()[ 0 ], }} impl  std ::  default ::  Default  for $name { fn  default ()->  Self {$name { span :  Span ::  call_site (), }}}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Copy  for $name {}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Clone  for $name { fn  clone (&  self )->  Self {*  self }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Debug  for $name { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter )->  fmt ::  Result { f .  write_str ( stringify ! ($name ))}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  cmp ::  Eq  for $name {}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  PartialEq  for $name { fn  eq (&  self ,  _other : &$name )->  bool { true }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Hash  for $name { fn  hash <  H :  Hasher > (&  self ,  _state : &  mut  H ){}} impl $name {# [ cfg ( feature =  "printing" )] pub  fn  surround <  F > (&  self ,  tokens : &  mut  TokenStream ,  f :  F ) where  F :  FnOnce (&  mut  TokenStream ), { printing ::  delim ($token ,  self .  span ,  tokens ,  f ); }}# [ cfg ( feature =  "parsing" )] impl  private ::  Sealed  for $name {})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:150:macro_rules! __ra_macro_fixture149 {([$($attrs_pub :  tt )*] struct $name :  ident #  full $($rest :  tt )* )=>{# [ cfg ( feature =  "full" )]$($attrs_pub )*  struct $name $($rest )* # [ cfg ( not ( feature =  "full" ))]$($attrs_pub )*  struct $name { _noconstruct : ::  std ::  marker ::  PhantomData <::  proc_macro2 ::  Span >, }# [ cfg ( all ( not ( feature =  "full" ),  feature =  "printing" ))] impl ::  quote ::  ToTokens  for $name { fn  to_tokens (&  self , _: &  mut ::  proc_macro2 ::  TokenStream ){ unreachable ! ()}}}; ([$($attrs_pub :  tt )*] struct $name :  ident $($rest :  tt )* )=>{$($attrs_pub )*  struct $name $($rest )* }; ($($t :  tt )*)=>{ strip_attrs_pub ! ( ast_struct ! ($($t )*)); }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:154:macro_rules! __ra_macro_fixture153 {($($expr_type :  ty , $variant :  ident , $msg :  expr , )* )=>{$(# [ cfg ( all ( feature =  "full" ,  feature =  "printing" ))]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "parsing" )))] impl  Parse  for $expr_type { fn  parse ( input :  ParseStream )->  Result <  Self > { let  mut  expr :  Expr =  input .  parse ()?;  loop { match  expr { Expr ::$variant ( inner )=> return  Ok ( inner ),  Expr ::  Group ( next )=> expr = *  next .  expr , _ => return  Err ( Error ::  new_spanned ( expr , $msg )), }}}})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:155:macro_rules! __ra_macro_fixture154 {($ty :  ident )=>{# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl < 'a >  Clone  for $ty < 'a > { fn  clone (&  self )->  Self {$ty ( self .  0 )}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl < 'a >  Debug  for $ty < 'a > { fn  fmt (&  self ,  formatter : &  mut  fmt ::  Formatter )->  fmt ::  Result { formatter .  debug_tuple ( stringify ! ($ty )).  field ( self .  0 ).  finish ()}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl < 'a >  Eq  for $ty < 'a > {}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl < 'a >  PartialEq  for $ty < 'a > { fn  eq (&  self ,  other : &  Self )->  bool { self .  0 ==  other .  0 }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl < 'a >  Hash  for $ty < 'a > { fn  hash <  H :  Hasher > (&  self ,  state : &  mut  H ){ self .  0 .  hash ( state ); }}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:156:macro_rules! __ra_macro_fixture155 {($ty :  ident )=>{# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Clone  for $ty { fn  clone (&  self )->  Self {$ty { repr :  self .  repr .  clone (), }}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  PartialEq  for $ty { fn  eq (&  self ,  other : &  Self )->  bool { self .  repr .  token .  to_string ()==  other .  repr .  token .  to_string ()}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Hash  for $ty { fn  hash <  H > (&  self ,  state : &  mut  H ) where  H :  Hasher , { self .  repr .  token .  to_string ().  hash ( state ); }}# [ cfg ( feature =  "parsing" )]# [ doc ( hidden )]# [ allow ( non_snake_case )] pub  fn $ty ( marker :  lookahead ::  TokenMarker )-> $ty { match  marker {}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:160:macro_rules! __ra_macro_fixture159 {($pub :  ident $enum :  ident $name :  ident {$($(# [$variant_attr :  meta ])* $variant :  ident $(($($member :  ident )::+))*, )* }$($remaining :  tt )* )=>{ check_keyword_matches ! ( pub $pub );  check_keyword_matches ! ( enum $enum ); $($(ast_enum_from_struct ! ($name ::$variant , $($member )::+); )*)* # [ cfg ( feature =  "printing" )] generate_to_tokens ! {$($remaining )* () tokens $name {$($variant $($($member )::+)*,)* }}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:167:macro_rules! __ra_macro_fixture166 {( do_not_generate_to_tokens $($foo :  tt )*)=>(); (($($arms :  tt )*)$tokens :  ident $name :  ident {$variant :  ident , $($next :  tt )*})=>{ generate_to_tokens ! (($($arms )* $name ::$variant =>{})$tokens $name {$($next )* }); }; (($($arms :  tt )*)$tokens :  ident $name :  ident {$variant :  ident $member :  ident , $($next :  tt )*})=>{ generate_to_tokens ! (($($arms )* $name ::$variant ( _e )=> _e .  to_tokens ($tokens ),)$tokens $name {$($next )* }); }; (($($arms :  tt )*)$tokens :  ident $name :  ident {$variant :  ident  crate ::  private , $($next :  tt )*})=>{ generate_to_tokens ! (($($arms )* $name ::$variant (_)=> unreachable ! (),)$tokens $name {$($next )* }); }; (($($arms :  tt )*)$tokens :  ident $name :  ident {})=>{# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "printing" )))] impl ::  quote ::  ToTokens  for $name { fn  to_tokens (&  self , $tokens : &  mut ::  proc_macro2 ::  TokenStream ){ match  self {$($arms )* }}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:206:macro_rules! __ra_macro_fixture205 {($name :  ident  for $($t :  ident )*)=>($(impl $name  for $t { type  FromStrRadixErr =  ParseFloatError ;  fn  from_str_radix ( src : &  str ,  radix :  u32 )->  Result <  Self ,  Self ::  FromStrRadixErr > { use  self ::  FloatErrorKind ::*;  use  self ::  ParseFloatError  as  PFE ;  match  src { "inf" => return  Ok ( core ::$t ::  INFINITY ),  "-inf" => return  Ok ( core ::$t ::  NEG_INFINITY ),  "NaN" => return  Ok ( core ::$t ::  NAN ), _ =>{}, } fn  slice_shift_char ( src : &  str )->  Option < ( char , &  str )> { let  mut  chars =  src .  chars ();  if  let  Some ( ch )=  chars .  next (){ Some (( ch ,  chars .  as_str ()))} else { None }} let ( is_positive ,  src )=  match  slice_shift_char ( src ){ None => return  Err ( PFE { kind :  Empty }),  Some (( '-' ,  "" ))=> return  Err ( PFE { kind :  Empty }),  Some (( '-' ,  src ))=>( false ,  src ),  Some ((_, _))=>( true ,  src ), };  let  mut  sig =  if  is_positive { 0.0 } else {-  0.0 };  let  mut  prev_sig =  sig ;  let  mut  cs =  src .  chars ().  enumerate ();  let  mut  exp_info =  None ::< ( char ,  usize )>;  for ( i ,  c ) in  cs .  by_ref (){ match  c .  to_digit ( radix ){ Some ( digit )=>{ sig =  sig * ( radix  as $t );  if  is_positive { sig =  sig + (( digit  as  isize ) as $t ); } else { sig =  sig - (( digit  as  isize ) as $t ); } if  prev_sig !=  0.0 { if  is_positive &&  sig <=  prev_sig { return  Ok ( core ::$t ::  INFINITY ); } if !  is_positive &&  sig >=  prev_sig { return  Ok ( core ::$t ::  NEG_INFINITY ); } if  is_positive && ( prev_sig != ( sig -  digit  as $t )/  radix  as $t ){ return  Ok ( core ::$t ::  INFINITY ); } if !  is_positive && ( prev_sig != ( sig +  digit  as $t )/  radix  as $t ){ return  Ok ( core ::$t ::  NEG_INFINITY ); }} prev_sig =  sig ; },  None => match  c { 'e' |  'E' |  'p' |  'P' =>{ exp_info =  Some (( c ,  i +  1 ));  break ; },  '.' =>{ break ; }, _ =>{ return  Err ( PFE { kind :  Invalid }); }, }, }} if  exp_info .  is_none (){ let  mut  power =  1.0 ;  for ( i ,  c ) in  cs .  by_ref (){ match  c .  to_digit ( radix ){ Some ( digit )=>{ power =  power / ( radix  as $t );  sig =  if  is_positive { sig + ( digit  as $t )*  power } else { sig - ( digit  as $t )*  power };  if  is_positive &&  sig <  prev_sig { return  Ok ( core ::$t ::  INFINITY ); } if !  is_positive &&  sig >  prev_sig { return  Ok ( core ::$t ::  NEG_INFINITY ); } prev_sig =  sig ; },  None => match  c { 'e' |  'E' |  'p' |  'P' =>{ exp_info =  Some (( c ,  i +  1 ));  break ; }, _ =>{ return  Err ( PFE { kind :  Invalid }); }, }, }}} let  exp =  match  exp_info { Some (( c ,  offset ))=>{ let  base =  match  c { 'E' |  'e'  if  radix ==  10 => 10.0 ,  'P' |  'p'  if  radix ==  16 => 2.0 , _ => return  Err ( PFE { kind :  Invalid }), };  let  src = &  src [ offset ..];  let ( is_positive ,  exp )=  match  slice_shift_char ( src ){ Some (( '-' ,  src ))=>( false ,  src .  parse ::<  usize > ()),  Some (( '+' ,  src ))=>( true ,  src .  parse ::<  usize > ()),  Some ((_, _))=>( true ,  src .  parse ::<  usize > ()),  None => return  Err ( PFE { kind :  Invalid }), }; # [ cfg ( feature =  "std" )] fn  pow ( base : $t ,  exp :  usize )-> $t { Float ::  powi ( base ,  exp  as  i32 )} match ( is_positive ,  exp ){( true ,  Ok ( exp ))=> pow ( base ,  exp ), ( false ,  Ok ( exp ))=> 1.0 /  pow ( base ,  exp ), (_,  Err (_))=> return  Err ( PFE { kind :  Invalid }), }},  None => 1.0 , };  Ok ( sig *  exp )}})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:210:macro_rules! __ra_macro_fixture209 {($T :  ident )=>{ impl  Roots  for $T {# [ inline ] fn  nth_root (&  self ,  n :  u32 )->  Self { fn  go ( a : $T ,  n :  u32 )-> $T { match  n { 0 => panic ! ( "can't find a root of degree 0!" ),  1 => return  a ,  2 => return  a .  sqrt (),  3 => return  a .  cbrt (), _ =>(), } if  bits ::<$T > ()<=  n ||  a < ( 1 <<  n ){ return ( a >  0 ) as $T ; } if  bits ::<$T > ()>  64 { return  if  a <=  core ::  u64 ::  MAX  as $T {( a  as  u64 ).  nth_root ( n ) as $T } else { let  lo = ( a >>  n ).  nth_root ( n )<<  1 ;  let  hi =  lo +  1 ;  if  hi .  next_power_of_two ().  trailing_zeros ()*  n >=  bits ::<$T > (){ match  checked_pow ( hi ,  n  as  usize ){ Some ( x ) if  x <=  a => hi , _ => lo , }} else { if  hi .  pow ( n )<=  a { hi } else { lo }}}; }# [ cfg ( feature =  "std" )]# [ inline ] fn  guess ( x : $T ,  n :  u32 )-> $T { if  bits ::<$T > ()<=  32 ||  x <=  core ::  u32 ::  MAX  as $T { 1 << (( log2 ( x )+  n -  1 )/  n )} else {(( x  as  f64 ).  ln ()/  f64 ::  from ( n )).  exp () as $T }}# [ cfg ( not ( feature =  "std" ))]# [ inline ] fn  guess ( x : $T ,  n :  u32 )-> $T { 1 << (( log2 ( x )+  n -  1 )/  n )} let  n1 =  n -  1 ;  let  next = |  x : $T | { let  y =  match  checked_pow ( x ,  n1  as  usize ){ Some ( ax )=> a /  ax ,  None => 0 , }; ( y +  x *  n1  as $T )/  n  as $T };  fixpoint ( guess ( a ,  n ),  next )} go (*  self ,  n )}# [ inline ] fn  sqrt (&  self )->  Self { fn  go ( a : $T )-> $T { if  bits ::<$T > ()>  64 { return  if  a <=  core ::  u64 ::  MAX  as $T {( a  as  u64 ).  sqrt () as $T } else { let  lo = ( a >>  2u32 ).  sqrt ()<<  1 ;  let  hi =  lo +  1 ;  if  hi *  hi <=  a { hi } else { lo }}; } if  a <  4 { return ( a >  0 ) as $T ; }# [ cfg ( feature =  "std" )]# [ inline ] fn  guess ( x : $T )-> $T {( x  as  f64 ).  sqrt () as $T }# [ cfg ( not ( feature =  "std" ))]# [ inline ] fn  guess ( x : $T )-> $T { 1 << (( log2 ( x )+  1 )/  2 )} let  next = |  x : $T | ( a /  x +  x )>>  1 ;  fixpoint ( guess ( a ),  next )} go (*  self )}# [ inline ] fn  cbrt (&  self )->  Self { fn  go ( a : $T )-> $T { if  bits ::<$T > ()>  64 { return  if  a <=  core ::  u64 ::  MAX  as $T {( a  as  u64 ).  cbrt () as $T } else { let  lo = ( a >>  3u32 ).  cbrt ()<<  1 ;  let  hi =  lo +  1 ;  if  hi *  hi *  hi <=  a { hi } else { lo }}; } if  bits ::<$T > ()<=  32 { let  mut  x =  a ;  let  mut  y2 =  0 ;  let  mut  y =  0 ;  let  smax =  bits ::<$T > ()/  3 ;  for  s  in ( 0 ..  smax +  1 ).  rev (){ let  s =  s *  3 ;  y2 *=  4 ;  y *=  2 ;  let  b =  3 * ( y2 +  y )+  1 ;  if  x >>  s >=  b { x -=  b <<  s ;  y2 +=  2 *  y +  1 ;  y +=  1 ; }} return  y ; } if  a <  8 { return ( a >  0 ) as $T ; } if  a <=  core ::  u32 ::  MAX  as $T { return ( a  as  u32 ).  cbrt () as $T ; }# [ cfg ( feature =  "std" )]# [ inline ] fn  guess ( x : $T )-> $T {( x  as  f64 ).  cbrt () as $T }# [ cfg ( not ( feature =  "std" ))]# [ inline ] fn  guess ( x : $T )-> $T { 1 << (( log2 ( x )+  2 )/  3 )} let  next = |  x : $T | ( a / ( x *  x )+  x *  2 )/  3 ;  fixpoint ( guess ( a ),  next )} go (*  self )}}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:275:macro_rules! __ra_macro_fixture274 {($name :  ident , $builder_mod :  ident , $text_ty :  ty , $as_bytes :  expr , $(# [$doc_regexset_example :  meta ])* )=>{ pub  mod $name { use  std ::  fmt ;  use  std ::  iter ;  use  std ::  slice ;  use  std ::  vec ;  use  error ::  Error ;  use  exec ::  Exec ;  use  re_builder ::$builder_mod ::  RegexSetBuilder ;  use  re_trait ::  RegularExpression ; # [ doc =  " Match multiple (possibly overlapping) regular expressions in a single scan." ]# [ doc =  "" ]# [ doc =  " A regex set corresponds to the union of two or more regular expressions." ]# [ doc =  " That is, a regex set will match text where at least one of its" ]# [ doc =  " constituent regular expressions matches. A regex set as its formulated here" ]# [ doc =  " provides a touch more power: it will also report *which* regular" ]# [ doc =  " expressions in the set match. Indeed, this is the key difference between" ]# [ doc =  " regex sets and a single `Regex` with many alternates, since only one" ]# [ doc =  " alternate can match at a time." ]# [ doc =  "" ]# [ doc =  " For example, consider regular expressions to match email addresses and" ]# [ doc =  " domains: `[a-z]+@[a-z]+\\\\.(com|org|net)` and `[a-z]+\\\\.(com|org|net)`. If a" ]# [ doc =  " regex set is constructed from those regexes, then searching the text" ]# [ doc =  " `foo@example.com` will report both regexes as matching. Of course, one" ]# [ doc =  " could accomplish this by compiling each regex on its own and doing two" ]# [ doc =  " searches over the text. The key advantage of using a regex set is that it" ]# [ doc =  " will report the matching regexes using a *single pass through the text*." ]# [ doc =  " If one has hundreds or thousands of regexes to match repeatedly (like a URL" ]# [ doc =  " router for a complex web application or a user agent matcher), then a regex" ]# [ doc =  " set can realize huge performance gains." ]# [ doc =  "" ]# [ doc =  " # Example" ]# [ doc =  "" ]# [ doc =  " This shows how the above two regexes (for matching email addresses and" ]# [ doc =  " domains) might work:" ]# [ doc =  "" ]$(# [$doc_regexset_example ])* # [ doc =  "" ]# [ doc =  " Note that it would be possible to adapt the above example to using `Regex`" ]# [ doc =  " with an expression like:" ]# [ doc =  "" ]# [ doc =  " ```ignore" ]# [ doc =  " (?P<email>[a-z]+@(?P<email_domain>[a-z]+[.](com|org|net)))|(?P<domain>[a-z]+[.](com|org|net))" ]# [ doc =  " ```" ]# [ doc =  "" ]# [ doc =  " After a match, one could then inspect the capture groups to figure out" ]# [ doc =  " which alternates matched. The problem is that it is hard to make this" ]# [ doc =  " approach scale when there are many regexes since the overlap between each" ]# [ doc =  " alternate isn\\\'t always obvious to reason about." ]# [ doc =  "" ]# [ doc =  " # Limitations" ]# [ doc =  "" ]# [ doc =  " Regex sets are limited to answering the following two questions:" ]# [ doc =  "" ]# [ doc =  " 1. Does any regex in the set match?" ]# [ doc =  " 2. If so, which regexes in the set match?" ]# [ doc =  "" ]# [ doc =  " As with the main `Regex` type, it is cheaper to ask (1) instead of (2)" ]# [ doc =  " since the matching engines can stop after the first match is found." ]# [ doc =  "" ]# [ doc =  " Other features like finding the location of successive matches or their" ]# [ doc =  " sub-captures aren\\\'t supported. If you need this functionality, the" ]# [ doc =  " recommended approach is to compile each regex in the set independently and" ]# [ doc =  " selectively match them based on which regexes in the set matched." ]# [ doc =  "" ]# [ doc =  " # Performance" ]# [ doc =  "" ]# [ doc =  " A `RegexSet` has the same performance characteristics as `Regex`. Namely," ]# [ doc =  " search takes `O(mn)` time, where `m` is proportional to the size of the" ]# [ doc =  " regex set and `n` is proportional to the length of the search text." ]# [ derive ( Clone )] pub  struct  RegexSet ( Exec );  impl  RegexSet {# [ doc =  " Create a new regex set with the given regular expressions." ]# [ doc =  "" ]# [ doc =  " This takes an iterator of `S`, where `S` is something that can produce" ]# [ doc =  " a `&str`. If any of the strings in the iterator are not valid regular" ]# [ doc =  " expressions, then an error is returned." ]# [ doc =  "" ]# [ doc =  " # Example" ]# [ doc =  "" ]# [ doc =  " Create a new regex set from an iterator of strings:" ]# [ doc =  "" ]# [ doc =  " ```rust" ]# [ doc =  " # use regex::RegexSet;" ]# [ doc =  " let set = RegexSet::new(&[r\\\"\\\\w+\\\", r\\\"\\\\d+\\\"]).unwrap();" ]# [ doc =  " assert!(set.is_match(\\\"foo\\\"));" ]# [ doc =  " ```" ] pub  fn  new <  I ,  S > ( exprs :  I )->  Result <  RegexSet ,  Error >  where  S :  AsRef <  str >,  I :  IntoIterator <  Item =  S >{ RegexSetBuilder ::  new ( exprs ).  build ()}# [ doc =  " Create a new empty regex set." ]# [ doc =  "" ]# [ doc =  " # Example" ]# [ doc =  "" ]# [ doc =  " ```rust" ]# [ doc =  " # use regex::RegexSet;" ]# [ doc =  " let set = RegexSet::empty();" ]# [ doc =  " assert!(set.is_empty());" ]# [ doc =  " ```" ] pub  fn  empty ()->  RegexSet { RegexSetBuilder ::  new (& [ "" ;  0 ]).  build ().  unwrap ()}# [ doc =  " Returns true if and only if one of the regexes in this set matches" ]# [ doc =  " the text given." ]# [ doc =  "" ]# [ doc =  " This method should be preferred if you only need to test whether any" ]# [ doc =  " of the regexes in the set should match, but don\\\'t care about *which*" ]# [ doc =  " regexes matched. This is because the underlying matching engine will" ]# [ doc =  " quit immediately after seeing the first match instead of continuing to" ]# [ doc =  " find all matches." ]# [ doc =  "" ]# [ doc =  " Note that as with searches using `Regex`, the expression is unanchored" ]# [ doc =  " by default. That is, if the regex does not start with `^` or `\\\\A`, or" ]# [ doc =  " end with `$` or `\\\\z`, then it is permitted to match anywhere in the" ]# [ doc =  " text." ]# [ doc =  "" ]# [ doc =  " # Example" ]# [ doc =  "" ]# [ doc =  " Tests whether a set matches some text:" ]# [ doc =  "" ]# [ doc =  " ```rust" ]# [ doc =  " # use regex::RegexSet;" ]# [ doc =  " let set = RegexSet::new(&[r\\\"\\\\w+\\\", r\\\"\\\\d+\\\"]).unwrap();" ]# [ doc =  " assert!(set.is_match(\\\"foo\\\"));" ]# [ doc =  " assert!(!set.is_match(\\\"\\u{2603}\\\"));" ]# [ doc =  " ```" ] pub  fn  is_match (&  self ,  text : $text_ty )->  bool { self .  is_match_at ( text ,  0 )}# [ doc =  " Returns the same as is_match, but starts the search at the given" ]# [ doc =  " offset." ]# [ doc =  "" ]# [ doc =  " The significance of the starting point is that it takes the surrounding" ]# [ doc =  " context into consideration. For example, the `\\\\A` anchor can only" ]# [ doc =  " match when `start == 0`." ]# [ doc ( hidden )] pub  fn  is_match_at (&  self ,  text : $text_ty ,  start :  usize )->  bool { self .  0 .  searcher ().  is_match_at ($as_bytes ( text ),  start )}# [ doc =  " Returns the set of regular expressions that match in the given text." ]# [ doc =  "" ]# [ doc =  " The set returned contains the index of each regular expression that" ]# [ doc =  " matches in the given text. The index is in correspondence with the" ]# [ doc =  " order of regular expressions given to `RegexSet`\\\'s constructor." ]# [ doc =  "" ]# [ doc =  " The set can also be used to iterate over the matched indices." ]# [ doc =  "" ]# [ doc =  " Note that as with searches using `Regex`, the expression is unanchored" ]# [ doc =  " by default. That is, if the regex does not start with `^` or `\\\\A`, or" ]# [ doc =  " end with `$` or `\\\\z`, then it is permitted to match anywhere in the" ]# [ doc =  " text." ]# [ doc =  "" ]# [ doc =  " # Example" ]# [ doc =  "" ]# [ doc =  " Tests which regular expressions match the given text:" ]# [ doc =  "" ]# [ doc =  " ```rust" ]# [ doc =  " # use regex::RegexSet;" ]# [ doc =  " let set = RegexSet::new(&[" ]# [ doc =  "     r\\\"\\\\w+\\\"," ]# [ doc =  "     r\\\"\\\\d+\\\"," ]# [ doc =  "     r\\\"\\\\pL+\\\"," ]# [ doc =  "     r\\\"foo\\\"," ]# [ doc =  "     r\\\"bar\\\"," ]# [ doc =  "     r\\\"barfoo\\\"," ]# [ doc =  "     r\\\"foobar\\\"," ]# [ doc =  " ]).unwrap();" ]# [ doc =  " let matches: Vec<_> = set.matches(\\\"foobar\\\").into_iter().collect();" ]# [ doc =  " assert_eq!(matches, vec![0, 2, 3, 4, 6]);" ]# [ doc =  "" ]# [ doc =  " // You can also test whether a particular regex matched:" ]# [ doc =  " let matches = set.matches(\\\"foobar\\\");" ]# [ doc =  " assert!(!matches.matched(5));" ]# [ doc =  " assert!(matches.matched(6));" ]# [ doc =  " ```" ] pub  fn  matches (&  self ,  text : $text_ty )->  SetMatches { let  mut  matches =  vec ! [ false ;  self .  0 .  regex_strings ().  len ()];  let  any =  self .  read_matches_at (&  mut  matches ,  text ,  0 );  SetMatches { matched_any :  any ,  matches :  matches , }}# [ doc =  " Returns the same as matches, but starts the search at the given" ]# [ doc =  " offset and stores the matches into the slice given." ]# [ doc =  "" ]# [ doc =  " The significance of the starting point is that it takes the surrounding" ]# [ doc =  " context into consideration. For example, the `\\\\A` anchor can only" ]# [ doc =  " match when `start == 0`." ]# [ doc =  "" ]# [ doc =  " `matches` must have a length that is at least the number of regexes" ]# [ doc =  " in this set." ]# [ doc =  "" ]# [ doc =  " This method returns true if and only if at least one member of" ]# [ doc =  " `matches` is true after executing the set against `text`." ]# [ doc ( hidden )] pub  fn  read_matches_at (&  self ,  matches : &  mut [ bool ],  text : $text_ty ,  start :  usize , )->  bool { self .  0 .  searcher ().  many_matches_at ( matches , $as_bytes ( text ),  start )}# [ doc =  " Returns the total number of regular expressions in this set." ] pub  fn  len (&  self )->  usize { self .  0 .  regex_strings ().  len ()}# [ doc =  " Returns `true` if this set contains no regular expressions." ] pub  fn  is_empty (&  self )->  bool { self .  0 .  regex_strings ().  is_empty ()}# [ doc =  " Returns the patterns that this set will match on." ]# [ doc =  "" ]# [ doc =  " This function can be used to determine the pattern for a match. The" ]# [ doc =  " slice returned has exactly as many patterns givens to this regex set," ]# [ doc =  " and the order of the slice is the same as the order of the patterns" ]# [ doc =  " provided to the set." ]# [ doc =  "" ]# [ doc =  " # Example" ]# [ doc =  "" ]# [ doc =  " ```rust" ]# [ doc =  " # use regex::RegexSet;" ]# [ doc =  " let set = RegexSet::new(&[" ]# [ doc =  "     r\\\"\\\\w+\\\"," ]# [ doc =  "     r\\\"\\\\d+\\\"," ]# [ doc =  "     r\\\"\\\\pL+\\\"," ]# [ doc =  "     r\\\"foo\\\"," ]# [ doc =  "     r\\\"bar\\\"," ]# [ doc =  "     r\\\"barfoo\\\"," ]# [ doc =  "     r\\\"foobar\\\"," ]# [ doc =  " ]).unwrap();" ]# [ doc =  " let matches: Vec<_> = set" ]# [ doc =  "     .matches(\\\"foobar\\\")" ]# [ doc =  "     .into_iter()" ]# [ doc =  "     .map(|match_idx| &set.patterns()[match_idx])" ]# [ doc =  "     .collect();" ]# [ doc =  " assert_eq!(matches, vec![r\\\"\\\\w+\\\", r\\\"\\\\pL+\\\", r\\\"foo\\\", r\\\"bar\\\", r\\\"foobar\\\"]);" ]# [ doc =  " ```" ] pub  fn  patterns (&  self )-> & [ String ]{ self .  0 .  regex_strings ()}}# [ doc =  " A set of matches returned by a regex set." ]# [ derive ( Clone ,  Debug )] pub  struct  SetMatches { matched_any :  bool ,  matches :  Vec <  bool >, } impl  SetMatches {# [ doc =  " Whether this set contains any matches." ] pub  fn  matched_any (&  self )->  bool { self .  matched_any }# [ doc =  " Whether the regex at the given index matched." ]# [ doc =  "" ]# [ doc =  " The index for a regex is determined by its insertion order upon the" ]# [ doc =  " initial construction of a `RegexSet`, starting at `0`." ]# [ doc =  "" ]# [ doc =  " # Panics" ]# [ doc =  "" ]# [ doc =  " If `regex_index` is greater than or equal to `self.len()`." ] pub  fn  matched (&  self ,  regex_index :  usize )->  bool { self .  matches [ regex_index ]}# [ doc =  " The total number of regexes in the set that created these matches." ] pub  fn  len (&  self )->  usize { self .  matches .  len ()}# [ doc =  " Returns an iterator over indexes in the regex that matched." ]# [ doc =  "" ]# [ doc =  " This will always produces matches in ascending order of index, where" ]# [ doc =  " the index corresponds to the index of the regex that matched with" ]# [ doc =  " respect to its position when initially building the set." ] pub  fn  iter (&  self )->  SetMatchesIter { SetMatchesIter ((&*  self .  matches ).  into_iter ().  enumerate ())}} impl  IntoIterator  for  SetMatches { type  IntoIter =  SetMatchesIntoIter ;  type  Item =  usize ;  fn  into_iter ( self )->  Self ::  IntoIter { SetMatchesIntoIter ( self .  matches .  into_iter ().  enumerate ())}} impl < 'a >  IntoIterator  for & 'a  SetMatches { type  IntoIter =  SetMatchesIter < 'a >;  type  Item =  usize ;  fn  into_iter ( self )->  Self ::  IntoIter { self .  iter ()}}# [ doc =  " An owned iterator over the set of matches from a regex set." ]# [ doc =  "" ]# [ doc =  " This will always produces matches in ascending order of index, where the" ]# [ doc =  " index corresponds to the index of the regex that matched with respect to" ]# [ doc =  " its position when initially building the set." ]# [ derive ( Debug )] pub  struct  SetMatchesIntoIter ( iter ::  Enumerate <  vec ::  IntoIter <  bool >>);  impl  Iterator  for  SetMatchesIntoIter { type  Item =  usize ;  fn  next (&  mut  self )->  Option <  usize > { loop { match  self .  0 .  next (){ None => return  None ,  Some ((_,  false ))=>{} Some (( i ,  true ))=> return  Some ( i ), }}} fn  size_hint (&  self )-> ( usize ,  Option <  usize >){ self .  0 .  size_hint ()}} impl  DoubleEndedIterator  for  SetMatchesIntoIter { fn  next_back (&  mut  self )->  Option <  usize > { loop { match  self .  0 .  next_back (){ None => return  None ,  Some ((_,  false ))=>{} Some (( i ,  true ))=> return  Some ( i ), }}}} impl  iter ::  FusedIterator  for  SetMatchesIntoIter {}# [ doc =  " A borrowed iterator over the set of matches from a regex set." ]# [ doc =  "" ]# [ doc =  " The lifetime `\\\'a` refers to the lifetime of a `SetMatches` value." ]# [ doc =  "" ]# [ doc =  " This will always produces matches in ascending order of index, where the" ]# [ doc =  " index corresponds to the index of the regex that matched with respect to" ]# [ doc =  " its position when initially building the set." ]# [ derive ( Clone ,  Debug )] pub  struct  SetMatchesIter < 'a > ( iter ::  Enumerate <  slice ::  Iter < 'a ,  bool >>);  impl < 'a >  Iterator  for  SetMatchesIter < 'a > { type  Item =  usize ;  fn  next (&  mut  self )->  Option <  usize > { loop { match  self .  0 .  next (){ None => return  None ,  Some ((_, &  false ))=>{} Some (( i , &  true ))=> return  Some ( i ), }}} fn  size_hint (&  self )-> ( usize ,  Option <  usize >){ self .  0 .  size_hint ()}} impl < 'a >  DoubleEndedIterator  for  SetMatchesIter < 'a > { fn  next_back (&  mut  self )->  Option <  usize > { loop { match  self .  0 .  next_back (){ None => return  None ,  Some ((_, &  false ))=>{} Some (( i , &  true ))=> return  Some ( i ), }}}} impl < 'a >  iter ::  FusedIterator  for  SetMatchesIter < 'a > {}# [ doc ( hidden )] impl  From <  Exec >  for  RegexSet { fn  from ( exec :  Exec )->  Self { RegexSet ( exec )}} impl  fmt ::  Debug  for  RegexSet { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter )->  fmt ::  Result { write ! ( f ,  "RegexSet({:?})" ,  self .  0 .  regex_strings ())}}# [ allow ( dead_code )] fn  as_bytes_str ( text : &  str )-> & [ u8 ]{ text .  as_bytes ()}# [ allow ( dead_code )] fn  as_bytes_bytes ( text : & [ u8 ])-> & [ u8 ]{ text }}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:281:macro_rules! __ra_macro_fixture280 {($($ty :  ty ),* )=>{$(impl  From <$ty >  for  Number {# [ inline ] fn  from ( u : $ty )->  Self { let  n = {# [ cfg ( not ( feature =  "arbitrary_precision" ))]{ N ::  PosInt ( u  as  u64 )}# [ cfg ( feature =  "arbitrary_precision" )]{ itoa ::  Buffer ::  new ().  format ( u ).  to_owned ()}};  Number { n }}})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:282:macro_rules! __ra_macro_fixture281 {($($ty :  ty ),* )=>{$(impl  From <$ty >  for  Number {# [ inline ] fn  from ( i : $ty )->  Self { let  n = {# [ cfg ( not ( feature =  "arbitrary_precision" ))]{ if  i <  0 { N ::  NegInt ( i  as  i64 )} else { N ::  PosInt ( i  as  u64 )}}# [ cfg ( feature =  "arbitrary_precision" )]{ itoa ::  Buffer ::  new ().  format ( i ).  to_owned ()}};  Number { n }}})* }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:325:macro_rules! __ra_macro_fixture324 {($($item :  item )*)=>{$(# [ cfg ( feature =  "os-poll" )]# [ cfg_attr ( docsrs ,  doc ( cfg ( feature =  "os-poll" )))]$item )* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:326:macro_rules! __ra_macro_fixture325 {($($item :  item )*)=>{$(# [ cfg ( not ( feature =  "os-poll" ))]$item )* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:327:macro_rules! __ra_macro_fixture326 {($($item :  item )*)=>{$(# [ cfg ( any ( feature =  "net" ,  all ( unix ,  feature =  "os-ext" )))]# [ cfg_attr ( docsrs ,  doc ( any ( feature =  "net" ,  all ( unix ,  feature =  "os-ext" ))))]$item )* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:328:macro_rules! __ra_macro_fixture327 {($($item :  item )*)=>{$(# [ cfg ( feature =  "net" )]# [ cfg_attr ( docsrs ,  doc ( cfg ( feature =  "net" )))]$item )* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:329:macro_rules! __ra_macro_fixture328 {($($item :  item )*)=>{$(# [ cfg ( feature =  "os-ext" )]# [ cfg_attr ( docsrs ,  doc ( cfg ( feature =  "os-ext" )))]$item )* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:374:macro_rules! __ra_macro_fixture373 {($($(# [$attr :  meta ])* $name :  ident ($value :  expr , $expected :  expr )),* )=>{$($(# [$attr ])* # [ test ] fn $name (){# [ cfg ( feature =  "std" )]{ let  mut  buf = [ b'\0' ;  40 ];  let  len =  itoa ::  write (&  mut  buf [..], $value ).  unwrap ();  assert_eq ! (&  buf [ 0 ..  len ], $expected .  as_bytes ()); } let  mut  s =  String ::  new ();  itoa ::  fmt (&  mut  s , $value ).  unwrap ();  assert_eq ! ( s , $expected ); })* }}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:424:macro_rules! __ra_macro_fixture423 {($name :  ident , $level :  expr )=>{# [ doc =  " Creates a new `Diagnostic` with the given `message` at the span" ]# [ doc =  " `self`." ]# [ unstable ( feature =  "proc_macro_diagnostic" ,  issue =  "54140" )] pub  fn $name <  T :  Into <  String >> ( self ,  message :  T )->  Diagnostic { Diagnostic ::  spanned ( self , $level ,  message )}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:425:macro_rules! __ra_macro_fixture424 {($($name :  ident =>$kind :  ident ,)*)=>($(# [ doc =  " Creates a new suffixed integer literal with the specified value." ]# [ doc =  "" ]# [ doc =  " This function will create an integer like `1u32` where the integer" ]# [ doc =  " value specified is the first part of the token and the integral is" ]# [ doc =  " also suffixed at the end." ]# [ doc =  " Literals created from negative numbers may not survive round-trips through" ]# [ doc =  " `TokenStream` or strings and may be broken into two tokens (`-` and positive literal)." ]# [ doc =  "" ]# [ doc =  " Literals created through this method have the `Span::call_site()`" ]# [ doc =  " span by default, which can be configured with the `set_span` method" ]# [ doc =  " below." ]# [ stable ( feature =  "proc_macro_lib2" ,  since =  "1.29.0" )] pub  fn $name ( n : $kind )->  Literal { Literal ( bridge ::  client ::  Literal ::  typed_integer (&  n .  to_string (),  stringify ! ($kind )))})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:426:macro_rules! __ra_macro_fixture425 {($($name :  ident =>$kind :  ident ,)*)=>($(# [ doc =  " Creates a new unsuffixed integer literal with the specified value." ]# [ doc =  "" ]# [ doc =  " This function will create an integer like `1` where the integer" ]# [ doc =  " value specified is the first part of the token. No suffix is" ]# [ doc =  " specified on this token, meaning that invocations like" ]# [ doc =  " `Literal::i8_unsuffixed(1)` are equivalent to" ]# [ doc =  " `Literal::u32_unsuffixed(1)`." ]# [ doc =  " Literals created from negative numbers may not survive rountrips through" ]# [ doc =  " `TokenStream` or strings and may be broken into two tokens (`-` and positive literal)." ]# [ doc =  "" ]# [ doc =  " Literals created through this method have the `Span::call_site()`" ]# [ doc =  " span by default, which can be configured with the `set_span` method" ]# [ doc =  " below." ]# [ stable ( feature =  "proc_macro_lib2" ,  since =  "1.29.0" )] pub  fn $name ( n : $kind )->  Literal { Literal ( bridge ::  client ::  Literal ::  integer (&  n .  to_string ()))})*)}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:428:macro_rules! __ra_macro_fixture427 {($spanned :  ident , $regular :  ident , $level :  expr )=>{# [ doc =  " Adds a new child diagnostic message to `self` with the level" ]# [ doc =  " identified by this method\\\'s name with the given `spans` and" ]# [ doc =  " `message`." ]# [ unstable ( feature =  "proc_macro_diagnostic" ,  issue =  "54140" )] pub  fn $spanned <  S ,  T > ( mut  self ,  spans :  S ,  message :  T )->  Diagnostic  where  S :  MultiSpan ,  T :  Into <  String >, { self .  children .  push ( Diagnostic ::  spanned ( spans , $level ,  message ));  self }# [ doc =  " Adds a new child diagnostic message to `self` with the level" ]# [ doc =  " identified by this method\\\'s name with the given `message`." ]# [ unstable ( feature =  "proc_macro_diagnostic" ,  issue =  "54140" )] pub  fn $regular <  T :  Into <  String >> ( mut  self ,  message :  T )->  Diagnostic { self .  children .  push ( Diagnostic ::  new ($level ,  message ));  self }}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:429:macro_rules! __ra_macro_fixture428 {($SelfT :  ty , $ActualT :  ident , $UnsignedT :  ty , $BITS :  expr , $Min :  expr , $Max :  expr , $Feature :  expr , $EndFeature :  expr , $rot :  expr , $rot_op :  expr , $rot_result :  expr , $swap_op :  expr , $swapped :  expr , $reversed :  expr , $le_bytes :  expr , $be_bytes :  expr , $to_xe_bytes_doc :  expr , $from_xe_bytes_doc :  expr )=>{ doc_comment ! { concat ! ( "The smallest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MIN, " ,  stringify ! ($Min ),  ");" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "assoc_int_consts" ,  since =  "1.43.0" )] pub  const  MIN :  Self = !  0 ^ ((!  0  as $UnsignedT )>>  1 ) as  Self ; } doc_comment ! { concat ! ( "The largest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MAX, " ,  stringify ! ($Max ),  ");" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "assoc_int_consts" ,  since =  "1.43.0" )] pub  const  MAX :  Self = !  Self ::  MIN ; } doc_comment ! { concat ! ( "The size of this integer type in bits.\n\n# Examples\n\n```\n" , $Feature ,  "#![feature(int_bits_const)]\nassert_eq!(" ,  stringify ! ($SelfT ),  "::BITS, " ,  stringify ! ($BITS ),  ");" , $EndFeature ,  "\n```" ), # [ unstable ( feature =  "int_bits_const" ,  issue =  "76904" )] pub  const  BITS :  u32 = $BITS ; } doc_comment ! { concat ! ( "Converts a string slice in a given base to an integer.\n\nThe string is expected to be an optional `+` or `-` sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on `radix`:\n\n * `0-9`\n * `a-z`\n * `A-Z`\n\n# Panics\n\nThis function panics if `radix` is not in the range from 2 to 36.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::from_str_radix(\"A\", 16), Ok(10));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] pub  fn  from_str_radix ( src : &  str ,  radix :  u32 )->  Result <  Self ,  ParseIntError > { from_str_radix ( src ,  radix )}} doc_comment ! { concat ! ( "Returns the number of ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0b100_0000" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.count_ones(), 1);" , $EndFeature ,  "\n```\n" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  count_ones ( self )->  u32 {( self  as $UnsignedT ).  count_ones ()}} doc_comment ! { concat ! ( "Returns the number of zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.count_zeros(), 1);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  count_zeros ( self )->  u32 {(!  self ).  count_ones ()}} doc_comment ! { concat ! ( "Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = -1" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.leading_zeros(), 0);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  leading_zeros ( self )->  u32 {( self  as $UnsignedT ).  leading_zeros ()}} doc_comment ! { concat ! ( "Returns the number of trailing zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = -4" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.trailing_zeros(), 2);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  trailing_zeros ( self )->  u32 {( self  as $UnsignedT ).  trailing_zeros ()}} doc_comment ! { concat ! ( "Returns the number of leading ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = -1" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.leading_ones(), " ,  stringify ! ($BITS ),  ");" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ rustc_const_stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ inline ] pub  const  fn  leading_ones ( self )->  u32 {( self  as $UnsignedT ).  leading_ones ()}} doc_comment ! { concat ! ( "Returns the number of trailing ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 3" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.trailing_ones(), 2);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ rustc_const_stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ inline ] pub  const  fn  trailing_ones ( self )->  u32 {( self  as $UnsignedT ).  trailing_ones ()}} doc_comment ! { concat ! ( "Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.\n\nPlease note this isn't the same operation as the `<<` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $rot_op ,  stringify ! ($SelfT ),  ";\nlet m = " , $rot_result ,  ";\n\nassert_eq!(n.rotate_left(" , $rot ,  "), m);\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  rotate_left ( self ,  n :  u32 )->  Self {( self  as $UnsignedT ).  rotate_left ( n ) as  Self }} doc_comment ! { concat ! ( "Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.\n\nPlease note this isn't the same operation as the `>>` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $rot_result ,  stringify ! ($SelfT ),  ";\nlet m = " , $rot_op ,  ";\n\nassert_eq!(n.rotate_right(" , $rot ,  "), m);\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  rotate_right ( self ,  n :  u32 )->  Self {( self  as $UnsignedT ).  rotate_right ( n ) as  Self }} doc_comment ! { concat ! ( "Reverses the byte order of the integer.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $swap_op ,  stringify ! ($SelfT ),  ";\n\nlet m = n.swap_bytes();\n\nassert_eq!(m, " , $swapped ,  ");\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  swap_bytes ( self )->  Self {( self  as $UnsignedT ).  swap_bytes () as  Self }} doc_comment ! { concat ! ( "Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n                second least-significant bit becomes second most-significant bit, etc.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $swap_op ,  stringify ! ($SelfT ),  ";\nlet m = n.reverse_bits();\n\nassert_eq!(m, " , $reversed ,  ");\nassert_eq!(0, 0" ,  stringify ! ($SelfT ),  ".reverse_bits());\n```" ), # [ stable ( feature =  "reverse_bits" ,  since =  "1.37.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ]# [ must_use ] pub  const  fn  reverse_bits ( self )->  Self {( self  as $UnsignedT ).  reverse_bits () as  Self }} doc_comment ! { concat ! ( "Converts an integer from big endian to the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are swapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_be(n), n)\n} else {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_be(n), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_conversions" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  from_be ( x :  Self )->  Self {# [ cfg ( target_endian =  "big" )]{ x }# [ cfg ( not ( target_endian =  "big" ))]{ x .  swap_bytes ()}}} doc_comment ! { concat ! ( "Converts an integer from little endian to the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are swapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_le(n), n)\n} else {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_le(n), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_conversions" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  from_le ( x :  Self )->  Self {# [ cfg ( target_endian =  "little" )]{ x }# [ cfg ( not ( target_endian =  "little" ))]{ x .  swap_bytes ()}}} doc_comment ! { concat ! ( "Converts `self` to big endian from the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are swapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_conversions" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  to_be ( self )->  Self {# [ cfg ( target_endian =  "big" )]{ self }# [ cfg ( not ( target_endian =  "big" ))]{ self .  swap_bytes ()}}} doc_comment ! { concat ! ( "Converts `self` to little endian from the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are swapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_conversions" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  to_le ( self )->  Self {# [ cfg ( target_endian =  "little" )]{ self }# [ cfg ( not ( target_endian =  "little" ))]{ self .  swap_bytes ()}}} doc_comment ! { concat ! ( "Checked integer addition. Computes `self + rhs`, returning `None`\nif overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!((" ,  stringify ! ($SelfT ),  "::MAX - 2).checked_add(1), Some(" ,  stringify ! ($SelfT ),  "::MAX - 1));\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MAX - 2).checked_add(3), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_add ( self ,  rhs :  Self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_add ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Unchecked integer addition. Computes `self + rhs`, assuming overflow\ncannot occur. This results in undefined behavior when `self + rhs > " ,  stringify ! ($SelfT ),  "::MAX` or `self + rhs < " ,  stringify ! ($SelfT ),  "::MIN`." ), # [ unstable ( feature =  "unchecked_math" ,  reason =  "niche optimization path" ,  issue =  "none" , )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  unsafe  fn  unchecked_add ( self ,  rhs :  Self )->  Self { unsafe { intrinsics ::  unchecked_add ( self ,  rhs )}}} doc_comment ! { concat ! ( "Checked integer subtraction. Computes `self - rhs`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!((" ,  stringify ! ($SelfT ),  "::MIN + 2).checked_sub(1), Some(" ,  stringify ! ($SelfT ),  "::MIN + 1));\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MIN + 2).checked_sub(3), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_sub ( self ,  rhs :  Self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_sub ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\ncannot occur. This results in undefined behavior when `self - rhs > " ,  stringify ! ($SelfT ),  "::MAX` or `self - rhs < " ,  stringify ! ($SelfT ),  "::MIN`." ), # [ unstable ( feature =  "unchecked_math" ,  reason =  "niche optimization path" ,  issue =  "none" , )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  unsafe  fn  unchecked_sub ( self ,  rhs :  Self )->  Self { unsafe { intrinsics ::  unchecked_sub ( self ,  rhs )}}} doc_comment ! { concat ! ( "Checked integer multiplication. Computes `self * rhs`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.checked_mul(1), Some(" ,  stringify ! ($SelfT ),  "::MAX));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.checked_mul(2), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_mul ( self ,  rhs :  Self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_mul ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\ncannot occur. This results in undefined behavior when `self * rhs > " ,  stringify ! ($SelfT ),  "::MAX` or `self * rhs < " ,  stringify ! ($SelfT ),  "::MIN`." ), # [ unstable ( feature =  "unchecked_math" ,  reason =  "niche optimization path" ,  issue =  "none" , )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  unsafe  fn  unchecked_mul ( self ,  rhs :  Self )->  Self { unsafe { intrinsics ::  unchecked_mul ( self ,  rhs )}}} doc_comment ! { concat ! ( "Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`\nor the division results in overflow.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!((" ,  stringify ! ($SelfT ),  "::MIN + 1).checked_div(-1), Some(" ,  stringify ! ($Max ),  "));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.checked_div(-1), None);\nassert_eq!((1" ,  stringify ! ($SelfT ),  ").checked_div(0), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_unstable ( feature =  "const_checked_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_div ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 || ( self ==  Self ::  MIN &&  rhs == -  1 )){ None } else { Some ( unsafe { intrinsics ::  unchecked_div ( self ,  rhs )})}}} doc_comment ! { concat ! ( "Checked Euclidean division. Computes `self.div_euclid(rhs)`,\nreturning `None` if `rhs == 0` or the division results in overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MIN + 1).checked_div_euclid(-1), Some(" ,  stringify ! ($Max ),  "));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.checked_div_euclid(-1), None);\nassert_eq!((1" ,  stringify ! ($SelfT ),  ").checked_div_euclid(0), None);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_div_euclid ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 || ( self ==  Self ::  MIN &&  rhs == -  1 )){ None } else { Some ( self .  div_euclid ( rhs ))}}} doc_comment ! { concat ! ( "Checked integer remainder. Computes `self % rhs`, returning `None` if\n`rhs == 0` or the division results in overflow.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem(2), Some(1));\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem(0), None);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.checked_rem(-1), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_unstable ( feature =  "const_checked_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_rem ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 || ( self ==  Self ::  MIN &&  rhs == -  1 )){ None } else { Some ( unsafe { intrinsics ::  unchecked_rem ( self ,  rhs )})}}} doc_comment ! { concat ! ( "Checked Euclidean remainder. Computes `self.rem_euclid(rhs)`, returning `None`\nif `rhs == 0` or the division results in overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem_euclid(2), Some(1));\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem_euclid(0), None);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.checked_rem_euclid(-1), None);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_rem_euclid ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 || ( self ==  Self ::  MIN &&  rhs == -  1 )){ None } else { Some ( self .  rem_euclid ( rhs ))}}} doc_comment ! { concat ! ( "Checked negation. Computes `-self`, returning `None` if `self == MIN`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_neg(), Some(-5));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.checked_neg(), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  checked_neg ( self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_neg ();  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger\nthan or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0x1" ,  stringify ! ($SelfT ),  ".checked_shl(4), Some(0x10));\nassert_eq!(0x1" ,  stringify ! ($SelfT ),  ".checked_shl(129), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_shl ( self ,  rhs :  u32 )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_shl ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is\nlarger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0x10" ,  stringify ! ($SelfT ),  ".checked_shr(4), Some(0x1));\nassert_eq!(0x10" ,  stringify ! ($SelfT ),  ".checked_shr(128), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_shr ( self ,  rhs :  u32 )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_shr ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Checked absolute value. Computes `self.abs()`, returning `None` if\n`self == MIN`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!((-5" ,  stringify ! ($SelfT ),  ").checked_abs(), Some(5));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.checked_abs(), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_abs" ,  since =  "1.13.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  checked_abs ( self )->  Option <  Self > { if  self .  is_negative (){ self .  checked_neg ()} else { Some ( self )}}} doc_comment ! { concat ! ( "Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(8" ,  stringify ! ($SelfT ),  ".checked_pow(2), Some(64));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.checked_pow(2), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_pow ( self ,  mut  exp :  u32 )->  Option <  Self > { if  exp ==  0 { return  Some ( 1 ); } let  mut  base =  self ;  let  mut  acc :  Self =  1 ;  while  exp >  1 { if ( exp &  1 )==  1 { acc =  try_opt ! ( acc .  checked_mul ( base )); } exp /=  2 ;  base =  try_opt ! ( base .  checked_mul ( base )); } Some ( try_opt ! ( acc .  checked_mul ( base )))}} doc_comment ! { concat ! ( "Saturating integer addition. Computes `self + rhs`, saturating at the numeric\nbounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".saturating_add(1), 101);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.saturating_add(100), " ,  stringify ! ($SelfT ),  "::MAX);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_add(-1), " ,  stringify ! ($SelfT ),  "::MIN);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  saturating_add ( self ,  rhs :  Self )->  Self { intrinsics ::  saturating_add ( self ,  rhs )}} doc_comment ! { concat ! ( "Saturating integer subtraction. Computes `self - rhs`, saturating at the\nnumeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".saturating_sub(127), -27);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_sub(100), " ,  stringify ! ($SelfT ),  "::MIN);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.saturating_sub(-1), " ,  stringify ! ($SelfT ),  "::MAX);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  saturating_sub ( self ,  rhs :  Self )->  Self { intrinsics ::  saturating_sub ( self ,  rhs )}} doc_comment ! { concat ! ( "Saturating integer negation. Computes `-self`, returning `MAX` if `self == MIN`\ninstead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".saturating_neg(), -100);\nassert_eq!((-100" ,  stringify ! ($SelfT ),  ").saturating_neg(), 100);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_neg(), " ,  stringify ! ($SelfT ),  "::MAX);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.saturating_neg(), " ,  stringify ! ($SelfT ),  "::MIN + 1);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "saturating_neg" ,  since =  "1.45.0" )]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  saturating_neg ( self )->  Self { intrinsics ::  saturating_sub ( 0 ,  self )}} doc_comment ! { concat ! ( "Saturating absolute value. Computes `self.abs()`, returning `MAX` if `self ==\nMIN` instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".saturating_abs(), 100);\nassert_eq!((-100" ,  stringify ! ($SelfT ),  ").saturating_abs(), 100);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_abs(), " ,  stringify ! ($SelfT ),  "::MAX);\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MIN + 1).saturating_abs(), " ,  stringify ! ($SelfT ),  "::MAX);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "saturating_neg" ,  since =  "1.45.0" )]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  saturating_abs ( self )->  Self { if  self .  is_negative (){ self .  saturating_neg ()} else { self }}} doc_comment ! { concat ! ( "Saturating integer multiplication. Computes `self * rhs`, saturating at the\nnumeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(10" ,  stringify ! ($SelfT ),  ".saturating_mul(12), 120);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.saturating_mul(10), " ,  stringify ! ($SelfT ),  "::MAX);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_mul(10), " ,  stringify ! ($SelfT ),  "::MIN);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  saturating_mul ( self ,  rhs :  Self )->  Self { match  self .  checked_mul ( rhs ){ Some ( x )=> x ,  None => if ( self <  0 )== ( rhs <  0 ){ Self ::  MAX } else { Self ::  MIN }}}} doc_comment ! { concat ! ( "Saturating integer exponentiation. Computes `self.pow(exp)`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!((-4" ,  stringify ! ($SelfT ),  ").saturating_pow(3), -64);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_pow(2), " ,  stringify ! ($SelfT ),  "::MAX);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.saturating_pow(3), " ,  stringify ! ($SelfT ),  "::MIN);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  saturating_pow ( self ,  exp :  u32 )->  Self { match  self .  checked_pow ( exp ){ Some ( x )=> x ,  None  if  self <  0 &&  exp %  2 ==  1 => Self ::  MIN ,  None => Self ::  MAX , }}} doc_comment ! { concat ! ( "Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the\nboundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_add(27), 127);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.wrapping_add(2), " ,  stringify ! ($SelfT ),  "::MIN + 1);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_add ( self ,  rhs :  Self )->  Self { intrinsics ::  wrapping_add ( self ,  rhs )}} doc_comment ! { concat ! ( "Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the\nboundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0" ,  stringify ! ($SelfT ),  ".wrapping_sub(127), -127);\nassert_eq!((-2" ,  stringify ! ($SelfT ),  ").wrapping_sub(" ,  stringify ! ($SelfT ),  "::MAX), " ,  stringify ! ($SelfT ),  "::MAX);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_sub ( self ,  rhs :  Self )->  Self { intrinsics ::  wrapping_sub ( self ,  rhs )}} doc_comment ! { concat ! ( "Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at\nthe boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(10" ,  stringify ! ($SelfT ),  ".wrapping_mul(12), 120);\nassert_eq!(11i8.wrapping_mul(12), -124);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_mul ( self ,  rhs :  Self )->  Self { intrinsics ::  wrapping_mul ( self ,  rhs )}} doc_comment ! { concat ! ( "Wrapping (modular) division. Computes `self / rhs`, wrapping around at the\nboundary of the type.\n\nThe only case where such wrapping can occur is when one divides `MIN / -1` on a signed type (where\n`MIN` is the negative minimal value for the type); this is equivalent to `-MIN`, a positive value\nthat is too large to represent in the type. In such a case, this function returns `MIN` itself.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_div(10), 10);\nassert_eq!((-128i8).wrapping_div(-1), -128);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_unstable ( feature =  "const_wrapping_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_div ( self ,  rhs :  Self )->  Self { self .  overflowing_div ( rhs ).  0 }} doc_comment ! { concat ! ( "Wrapping Euclidean division. Computes `self.div_euclid(rhs)`,\nwrapping around at the boundary of the type.\n\nWrapping will only occur in `MIN / -1` on a signed type (where `MIN` is the negative minimal value\nfor the type). This is equivalent to `-MIN`, a positive value that is too large to represent in the\ntype. In this case, this method returns `MIN` itself.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_div_euclid(10), 10);\nassert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_div_euclid ( self ,  rhs :  Self )->  Self { self .  overflowing_div_euclid ( rhs ).  0 }} doc_comment ! { concat ! ( "Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the\nboundary of the type.\n\nSuch wrap-around never actually occurs mathematically; implementation artifacts make `x % y`\ninvalid for `MIN / -1` on a signed type (where `MIN` is the negative minimal value). In such a case,\nthis function returns `0`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_rem(10), 0);\nassert_eq!((-128i8).wrapping_rem(-1), 0);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_unstable ( feature =  "const_wrapping_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_rem ( self ,  rhs :  Self )->  Self { self .  overflowing_rem ( rhs ).  0 }} doc_comment ! { concat ! ( "Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`, wrapping around\nat the boundary of the type.\n\nWrapping will only occur in `MIN % -1` on a signed type (where `MIN` is the negative minimal value\nfor the type). In this case, this method returns 0.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_rem_euclid(10), 0);\nassert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_rem_euclid ( self ,  rhs :  Self )->  Self { self .  overflowing_rem_euclid ( rhs ).  0 }} doc_comment ! { concat ! ( "Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary\nof the type.\n\nThe only case where such wrapping can occur is when one negates `MIN` on a signed type (where `MIN`\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns `MIN` itself.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_neg(), -100);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.wrapping_neg(), " ,  stringify ! ($SelfT ),  "::MIN);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  wrapping_neg ( self )->  Self { self .  overflowing_neg ().  0 }} doc_comment ! { concat ! ( "Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes\nany high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a `[`rotate_left`](#method.rotate_left) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!((-1" ,  stringify ! ($SelfT ),  ").wrapping_shl(7), -128);\nassert_eq!((-1" ,  stringify ! ($SelfT ),  ").wrapping_shl(128), -1);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_shl ( self ,  rhs :  u32 )->  Self { unsafe { intrinsics ::  unchecked_shl ( self , ( rhs & ($BITS -  1 )) as $SelfT )}}} doc_comment ! { concat ! ( "Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask`\nremoves any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a [`rotate_right`](#method.rotate_right) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!((-128" ,  stringify ! ($SelfT ),  ").wrapping_shr(7), -1);\nassert_eq!((-128i16).wrapping_shr(64), -128);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_shr ( self ,  rhs :  u32 )->  Self { unsafe { intrinsics ::  unchecked_shr ( self , ( rhs & ($BITS -  1 )) as $SelfT )}}} doc_comment ! { concat ! ( "Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at\nthe boundary of the type.\n\nThe only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns `MIN` itself.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_abs(), 100);\nassert_eq!((-100" ,  stringify ! ($SelfT ),  ").wrapping_abs(), 100);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.wrapping_abs(), " ,  stringify ! ($SelfT ),  "::MIN);\nassert_eq!((-128i8).wrapping_abs() as u8, 128);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_abs" ,  since =  "1.13.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ allow ( unused_attributes )]# [ inline ] pub  const  fn  wrapping_abs ( self )->  Self { if  self .  is_negative (){ self .  wrapping_neg ()} else { self }}} doc_comment ! { concat ! ( "Computes the absolute value of `self` without any wrapping\nor panicking.\n\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "#![feature(unsigned_abs)]\nassert_eq!(100" ,  stringify ! ($SelfT ),  ".unsigned_abs(), 100" ,  stringify ! ($UnsignedT ),  ");\nassert_eq!((-100" ,  stringify ! ($SelfT ),  ").unsigned_abs(), 100" ,  stringify ! ($UnsignedT ),  ");\nassert_eq!((-128i8).unsigned_abs(), 128u8);" , $EndFeature ,  "\n```" ), # [ unstable ( feature =  "unsigned_abs" ,  issue =  "74913" )]# [ inline ] pub  const  fn  unsigned_abs ( self )-> $UnsignedT { self .  wrapping_abs () as $UnsignedT }} doc_comment ! { concat ! ( "Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(3" ,  stringify ! ($SelfT ),  ".wrapping_pow(4), 81);\nassert_eq!(3i8.wrapping_pow(5), -13);\nassert_eq!(3i8.wrapping_pow(6), -39);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_pow ( self ,  mut  exp :  u32 )->  Self { if  exp ==  0 { return  1 ; } let  mut  base =  self ;  let  mut  acc :  Self =  1 ;  while  exp >  1 { if ( exp &  1 )==  1 { acc =  acc .  wrapping_mul ( base ); } exp /=  2 ;  base =  base .  wrapping_mul ( base ); } acc .  wrapping_mul ( base )}} doc_comment ! { concat ! ( "Calculates `self` + `rhs`\n\nReturns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_add(2), (7, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.overflowing_add(1), (" ,  stringify ! ($SelfT ),  "::MIN, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_add ( self ,  rhs :  Self )-> ( Self ,  bool ){ let ( a ,  b )=  intrinsics ::  add_with_overflow ( self  as $ActualT ,  rhs  as $ActualT ); ( a  as  Self ,  b )}} doc_comment ! { concat ! ( "Calculates `self` - `rhs`\n\nReturns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_sub(2), (3, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.overflowing_sub(1), (" ,  stringify ! ($SelfT ),  "::MAX, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_sub ( self ,  rhs :  Self )-> ( Self ,  bool ){ let ( a ,  b )=  intrinsics ::  sub_with_overflow ( self  as $ActualT ,  rhs  as $ActualT ); ( a  as  Self ,  b )}} doc_comment ! { concat ! ( "Calculates the multiplication of `self` and `rhs`.\n\nReturns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_mul(2), (10, false));\nassert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_mul ( self ,  rhs :  Self )-> ( Self ,  bool ){ let ( a ,  b )=  intrinsics ::  mul_with_overflow ( self  as $ActualT ,  rhs  as $ActualT ); ( a  as  Self ,  b )}} doc_comment ! { concat ! ( "Calculates the divisor when `self` is divided by `rhs`.\n\nReturns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_div(2), (2, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.overflowing_div(-1), (" ,  stringify ! ($SelfT ),  "::MIN, true));" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_unstable ( feature =  "const_overflowing_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_div ( self ,  rhs :  Self )-> ( Self ,  bool ){ if  unlikely ! ( self ==  Self ::  MIN &&  rhs == -  1 ){( self ,  true )} else {( self /  rhs ,  false )}}} doc_comment ! { concat ! ( "Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n\nReturns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then `self` is returned.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_div_euclid(2), (2, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.overflowing_div_euclid(-1), (" ,  stringify ! ($SelfT ),  "::MIN, true));\n```" ), # [ inline ]# [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_div_euclid ( self ,  rhs :  Self )-> ( Self ,  bool ){ if  unlikely ! ( self ==  Self ::  MIN &&  rhs == -  1 ){( self ,  true )} else {( self .  div_euclid ( rhs ),  false )}}} doc_comment ! { concat ! ( "Calculates the remainder when `self` is divided by `rhs`.\n\nReturns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_rem(2), (1, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.overflowing_rem(-1), (0, true));" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_unstable ( feature =  "const_overflowing_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_rem ( self ,  rhs :  Self )-> ( Self ,  bool ){ if  unlikely ! ( self ==  Self ::  MIN &&  rhs == -  1 ){( 0 ,  true )} else {( self %  rhs ,  false )}}} doc_comment ! { concat ! ( "Overflowing Euclidean remainder. Calculates `self.rem_euclid(rhs)`.\n\nReturns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_rem_euclid(2), (1, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.overflowing_rem_euclid(-1), (0, true));\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_rem_euclid ( self ,  rhs :  Self )-> ( Self ,  bool ){ if  unlikely ! ( self ==  Self ::  MIN &&  rhs == -  1 ){( 0 ,  true )} else {( self .  rem_euclid ( rhs ),  false )}}} doc_comment ! { concat ! ( "Negates self, overflowing if this is equal to the minimum value.\n\nReturns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If `self` is the minimum value (e.g., `i32::MIN` for values of type `i32`), then the\nminimum value will be returned again and `true` will be returned for an overflow happening.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2" ,  stringify ! ($SelfT ),  ".overflowing_neg(), (-2, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MIN.overflowing_neg(), (" ,  stringify ! ($SelfT ),  "::MIN, true));" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ allow ( unused_attributes )] pub  const  fn  overflowing_neg ( self )-> ( Self ,  bool ){ if  unlikely ! ( self ==  Self ::  MIN ){( Self ::  MIN ,  true )} else {(-  self ,  false )}}} doc_comment ! { concat ! ( "Shifts self left by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0x1" ,  stringify ! ($SelfT ),  ".overflowing_shl(4), (0x10, false));\nassert_eq!(0x1i32.overflowing_shl(36), (0x10, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_shl ( self ,  rhs :  u32 )-> ( Self ,  bool ){( self .  wrapping_shl ( rhs ), ( rhs > ($BITS -  1 )))}} doc_comment ! { concat ! ( "Shifts self right by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0x10" ,  stringify ! ($SelfT ),  ".overflowing_shr(4), (0x1, false));\nassert_eq!(0x10i32.overflowing_shr(36), (0x1, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_shr ( self ,  rhs :  u32 )-> ( Self ,  bool ){( self .  wrapping_shr ( rhs ), ( rhs > ($BITS -  1 )))}} doc_comment ! { concat ! ( "Computes the absolute value of `self`.\n\nReturns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value (e.g., " ,  stringify ! ($SelfT ),  "::MIN for values of type\n " ,  stringify ! ($SelfT ),  "), then the minimum value will be returned again and true will be returned\nfor an overflow happening.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(10" ,  stringify ! ($SelfT ),  ".overflowing_abs(), (10, false));\nassert_eq!((-10" ,  stringify ! ($SelfT ),  ").overflowing_abs(), (10, false));\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MIN).overflowing_abs(), (" ,  stringify ! ($SelfT ),  "::MIN, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_abs" ,  since =  "1.13.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  overflowing_abs ( self )-> ( Self ,  bool ){( self .  wrapping_abs (),  self ==  Self ::  MIN )}} doc_comment ! { concat ! ( "Raises self to the power of `exp`, using exponentiation by squaring.\n\nReturns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(3" ,  stringify ! ($SelfT ),  ".overflowing_pow(4), (81, false));\nassert_eq!(3i8.overflowing_pow(5), (-13, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_pow ( self ,  mut  exp :  u32 )-> ( Self ,  bool ){ if  exp ==  0 { return ( 1 ,  false ); } let  mut  base =  self ;  let  mut  acc :  Self =  1 ;  let  mut  overflown =  false ;  let  mut  r ;  while  exp >  1 { if ( exp &  1 )==  1 { r =  acc .  overflowing_mul ( base );  acc =  r .  0 ;  overflown |=  r .  1 ; } exp /=  2 ;  r =  base .  overflowing_mul ( base );  base =  r .  0 ;  overflown |=  r .  1 ; } r =  acc .  overflowing_mul ( base );  r .  1 |=  overflown ;  r }} doc_comment ! { concat ! ( "Raises self to the power of `exp`, using exponentiation by squaring.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let x: " ,  stringify ! ($SelfT ),  " = 2; // or any other integer type\n\nassert_eq!(x.pow(5), 32);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  pow ( self ,  mut  exp :  u32 )->  Self { if  exp ==  0 { return  1 ; } let  mut  base =  self ;  let  mut  acc =  1 ;  while  exp >  1 { if ( exp &  1 )==  1 { acc =  acc *  base ; } exp /=  2 ;  base =  base *  base ; } acc *  base }} doc_comment ! { concat ! ( "Calculates the quotient of Euclidean division of `self` by `rhs`.\n\nThis computes the integer `n` such that `self = n * rhs + self.rem_euclid(rhs)`,\nwith `0 <= self.rem_euclid(rhs) < rhs`.\n\nIn other words, the result is `self / rhs` rounded to the integer `n`\nsuch that `self >= n * rhs`.\nIf `self > 0`, this is equal to round towards zero (the default in Rust);\nif `self < 0`, this is equal to round towards +/- infinity.\n\n# Panics\n\nThis function will panic if `rhs` is 0 or the division results in overflow.\n\n# Examples\n\nBasic usage:\n\n```\nlet a: " ,  stringify ! ($SelfT ),  " = 7; // or any other integer type\nlet b = 4;\n\nassert_eq!(a.div_euclid(b), 1); // 7 >= 4 * 1\nassert_eq!(a.div_euclid(-b), -1); // 7 >= -4 * -1\nassert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\nassert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  div_euclid ( self ,  rhs :  Self )->  Self { let  q =  self /  rhs ;  if  self %  rhs <  0 { return  if  rhs >  0 { q -  1 } else { q +  1 }} q }} doc_comment ! { concat ! ( "Calculates the least nonnegative remainder of `self (mod rhs)`.\n\nThis is done as if by the Euclidean division algorithm -- given\n`r = self.rem_euclid(rhs)`, `self = rhs * self.div_euclid(rhs) + r`, and\n`0 <= r < abs(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0 or the division results in overflow.\n\n# Examples\n\nBasic usage:\n\n```\nlet a: " ,  stringify ! ($SelfT ),  " = 7; // or any other integer type\nlet b = 4;\n\nassert_eq!(a.rem_euclid(b), 3);\nassert_eq!((-a).rem_euclid(b), 1);\nassert_eq!(a.rem_euclid(-b), 3);\nassert_eq!((-a).rem_euclid(-b), 1);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  rem_euclid ( self ,  rhs :  Self )->  Self { let  r =  self %  rhs ;  if  r <  0 { if  rhs <  0 { r -  rhs } else { r +  rhs }} else { r }}} doc_comment ! { concat ! ( "Computes the absolute value of `self`.\n\n# Overflow behavior\n\nThe absolute value of `" ,  stringify ! ($SelfT ),  "::MIN` cannot be represented as an\n`" ,  stringify ! ($SelfT ),  "`, and attempting to calculate it will cause an overflow. This means that\ncode in debug mode will trigger a panic on this case and optimized code will return `" ,  stringify ! ($SelfT ),  "::MIN` without a panic.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(10" ,  stringify ! ($SelfT ),  ".abs(), 10);\nassert_eq!((-10" ,  stringify ! ($SelfT ),  ").abs(), 10);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ allow ( unused_attributes )]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  abs ( self )->  Self { if  self .  is_negative (){-  self } else { self }}} doc_comment ! { concat ! ( "Returns a number representing sign of `self`.\n\n - `0` if the number is zero\n - `1` if the number is positive\n - `-1` if the number is negative\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(10" ,  stringify ! ($SelfT ),  ".signum(), 1);\nassert_eq!(0" ,  stringify ! ($SelfT ),  ".signum(), 0);\nassert_eq!((-10" ,  stringify ! ($SelfT ),  ").signum(), -1);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_sign" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  signum ( self )->  Self { match  self { n  if  n >  0 => 1 ,  0 => 0 , _ =>-  1 , }}} doc_comment ! { concat ! ( "Returns `true` if `self` is positive and `false` if the number is zero or\nnegative.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert!(10" ,  stringify ! ($SelfT ),  ".is_positive());\nassert!(!(-10" ,  stringify ! ($SelfT ),  ").is_positive());" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  is_positive ( self )->  bool { self >  0 }} doc_comment ! { concat ! ( "Returns `true` if `self` is negative and `false` if the number is zero or\npositive.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert!((-10" ,  stringify ! ($SelfT ),  ").is_negative());\nassert!(!10" ,  stringify ! ($SelfT ),  ".is_negative());" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_int_methods" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  is_negative ( self )->  bool { self <  0 }} doc_comment ! { concat ! ( "Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.\n" , $to_xe_bytes_doc ,  "\n# Examples\n\n```\nlet bytes = " , $swap_op ,  stringify ! ($SelfT ),  ".to_be_bytes();\nassert_eq!(bytes, " , $be_bytes ,  ");\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  to_be_bytes ( self )-> [ u8 ;  mem ::  size_of ::<  Self > ()]{ self .  to_be ().  to_ne_bytes ()}} doc_comment ! { concat ! ( "Return the memory representation of this integer as a byte array in\nlittle-endian byte order.\n" , $to_xe_bytes_doc ,  "\n# Examples\n\n```\nlet bytes = " , $swap_op ,  stringify ! ($SelfT ),  ".to_le_bytes();\nassert_eq!(bytes, " , $le_bytes ,  ");\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  to_le_bytes ( self )-> [ u8 ;  mem ::  size_of ::<  Self > ()]{ self .  to_le ().  to_ne_bytes ()}} doc_comment ! { concat ! ( "\nReturn the memory representation of this integer as a byte array in\nnative byte order.\n\nAs the target platform's native endianness is used, portable code\nshould use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\ninstead.\n" , $to_xe_bytes_doc ,  "\n[`to_be_bytes`]: #method.to_be_bytes\n[`to_le_bytes`]: #method.to_le_bytes\n\n# Examples\n\n```\nlet bytes = " , $swap_op ,  stringify ! ($SelfT ),  ".to_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        " , $be_bytes ,  "\n    } else {\n        " , $le_bytes ,  "\n    }\n);\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ cfg_attr ( not ( bootstrap ),  rustc_allow_const_fn_unstable ( const_fn_transmute ))]# [ cfg_attr ( bootstrap ,  allow_internal_unstable ( const_fn_transmute ))]# [ inline ] pub  const  fn  to_ne_bytes ( self )-> [ u8 ;  mem ::  size_of ::<  Self > ()]{ unsafe { mem ::  transmute ( self )}}} doc_comment ! { concat ! ( "\nReturn the memory representation of this integer as a byte array in\nnative byte order.\n\n[`to_ne_bytes`] should be preferred over this whenever possible.\n\n[`to_ne_bytes`]: #method.to_ne_bytes\n" ,  "\n# Examples\n\n```\n#![feature(num_as_ne_bytes)]\nlet num = " , $swap_op ,  stringify ! ($SelfT ),  ";\nlet bytes = num.as_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        &" , $be_bytes ,  "\n    } else {\n        &" , $le_bytes ,  "\n    }\n);\n```" ), # [ unstable ( feature =  "num_as_ne_bytes" ,  issue =  "76976" )]# [ inline ] pub  fn  as_ne_bytes (&  self )-> & [ u8 ;  mem ::  size_of ::<  Self > ()]{ unsafe {&* ( self  as *  const  Self  as *  const _)}}} doc_comment ! { concat ! ( "Create an integer value from its representation as a byte array in\nbig endian.\n" , $from_xe_bytes_doc ,  "\n# Examples\n\n```\nlet value = " ,  stringify ! ($SelfT ),  "::from_be_bytes(" , $be_bytes ,  ");\nassert_eq!(value, " , $swap_op ,  ");\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nuse std::convert::TryInto;\n\nfn read_be_" ,  stringify ! ($SelfT ),  "(input: &mut &[u8]) -> " ,  stringify ! ($SelfT ),  " {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<" ,  stringify ! ($SelfT ),  ">());\n    *input = rest;\n    " ,  stringify ! ($SelfT ),  "::from_be_bytes(int_bytes.try_into().unwrap())\n}\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  from_be_bytes ( bytes : [ u8 ;  mem ::  size_of ::<  Self > ()])->  Self { Self ::  from_be ( Self ::  from_ne_bytes ( bytes ))}} doc_comment ! { concat ! ( "\nCreate an integer value from its representation as a byte array in\nlittle endian.\n" , $from_xe_bytes_doc ,  "\n# Examples\n\n```\nlet value = " ,  stringify ! ($SelfT ),  "::from_le_bytes(" , $le_bytes ,  ");\nassert_eq!(value, " , $swap_op ,  ");\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nuse std::convert::TryInto;\n\nfn read_le_" ,  stringify ! ($SelfT ),  "(input: &mut &[u8]) -> " ,  stringify ! ($SelfT ),  " {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<" ,  stringify ! ($SelfT ),  ">());\n    *input = rest;\n    " ,  stringify ! ($SelfT ),  "::from_le_bytes(int_bytes.try_into().unwrap())\n}\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  from_le_bytes ( bytes : [ u8 ;  mem ::  size_of ::<  Self > ()])->  Self { Self ::  from_le ( Self ::  from_ne_bytes ( bytes ))}} doc_comment ! { concat ! ( "Create an integer value from its memory representation as a byte\narray in native endianness.\n\nAs the target platform's native endianness is used, portable code\nlikely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\nappropriate instead.\n\n[`from_be_bytes`]: #method.from_be_bytes\n[`from_le_bytes`]: #method.from_le_bytes\n" , $from_xe_bytes_doc ,  "\n# Examples\n\n```\nlet value = " ,  stringify ! ($SelfT ),  "::from_ne_bytes(if cfg!(target_endian = \"big\") {\n    " , $be_bytes ,  "\n} else {\n    " , $le_bytes ,  "\n});\nassert_eq!(value, " , $swap_op ,  ");\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nuse std::convert::TryInto;\n\nfn read_ne_" ,  stringify ! ($SelfT ),  "(input: &mut &[u8]) -> " ,  stringify ! ($SelfT ),  " {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<" ,  stringify ! ($SelfT ),  ">());\n    *input = rest;\n    " ,  stringify ! ($SelfT ),  "::from_ne_bytes(int_bytes.try_into().unwrap())\n}\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ cfg_attr ( not ( bootstrap ),  rustc_allow_const_fn_unstable ( const_fn_transmute ))]# [ cfg_attr ( bootstrap ,  allow_internal_unstable ( const_fn_transmute ))]# [ inline ] pub  const  fn  from_ne_bytes ( bytes : [ u8 ;  mem ::  size_of ::<  Self > ()])->  Self { unsafe { mem ::  transmute ( bytes )}}} doc_comment ! { concat ! ( "**This method is soft-deprecated.**\n\nAlthough using it won’t cause a compilation warning,\nnew code should use [`" ,  stringify ! ($SelfT ),  "::MIN" ,  "`](#associatedconstant.MIN) instead.\n\nReturns the smallest value that can be represented by this integer type." ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ inline ( always )]# [ rustc_promotable ]# [ rustc_const_stable ( feature =  "const_min_value" ,  since =  "1.32.0" )] pub  const  fn  min_value ()->  Self { Self ::  MIN }} doc_comment ! { concat ! ( "**This method is soft-deprecated.**\n\nAlthough using it won’t cause a compilation warning,\nnew code should use [`" ,  stringify ! ($SelfT ),  "::MAX" ,  "`](#associatedconstant.MAX) instead.\n\nReturns the largest value that can be represented by this integer type." ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ inline ( always )]# [ rustc_promotable ]# [ rustc_const_stable ( feature =  "const_max_value" ,  since =  "1.32.0" )] pub  const  fn  max_value ()->  Self { Self ::  MAX }}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:433:macro_rules! __ra_macro_fixture432 {($SelfT :  ty , $ActualT :  ty , $BITS :  expr , $MaxV :  expr , $Feature :  expr , $EndFeature :  expr , $rot :  expr , $rot_op :  expr , $rot_result :  expr , $swap_op :  expr , $swapped :  expr , $reversed :  expr , $le_bytes :  expr , $be_bytes :  expr , $to_xe_bytes_doc :  expr , $from_xe_bytes_doc :  expr )=>{ doc_comment ! { concat ! ( "The smallest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MIN, 0);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "assoc_int_consts" ,  since =  "1.43.0" )] pub  const  MIN :  Self =  0 ; } doc_comment ! { concat ! ( "The largest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MAX, " ,  stringify ! ($MaxV ),  ");" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "assoc_int_consts" ,  since =  "1.43.0" )] pub  const  MAX :  Self = !  0 ; } doc_comment ! { concat ! ( "The size of this integer type in bits.\n\n# Examples\n\n```\n" , $Feature ,  "#![feature(int_bits_const)]\nassert_eq!(" ,  stringify ! ($SelfT ),  "::BITS, " ,  stringify ! ($BITS ),  ");" , $EndFeature ,  "\n```" ), # [ unstable ( feature =  "int_bits_const" ,  issue =  "76904" )] pub  const  BITS :  u32 = $BITS ; } doc_comment ! { concat ! ( "Converts a string slice in a given base to an integer.\n\nThe string is expected to be an optional `+` sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on `radix`:\n\n* `0-9`\n* `a-z`\n* `A-Z`\n\n# Panics\n\nThis function panics if `radix` is not in the range from 2 to 36.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::from_str_radix(\"A\", 16), Ok(10));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] pub  fn  from_str_radix ( src : &  str ,  radix :  u32 )->  Result <  Self ,  ParseIntError > { from_str_radix ( src ,  radix )}} doc_comment ! { concat ! ( "Returns the number of ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0b01001100" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.count_ones(), 3);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  count_ones ( self )->  u32 { intrinsics ::  ctpop ( self  as $ActualT ) as  u32 }} doc_comment ! { concat ! ( "Returns the number of zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.count_zeros(), 0);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  count_zeros ( self )->  u32 {(!  self ).  count_ones ()}} doc_comment ! { concat ! ( "Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = " ,  stringify ! ($SelfT ),  "::MAX >> 2;\n\nassert_eq!(n.leading_zeros(), 2);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  leading_zeros ( self )->  u32 { intrinsics ::  ctlz ( self  as $ActualT ) as  u32 }} doc_comment ! { concat ! ( "Returns the number of trailing zeros in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0b0101000" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.trailing_zeros(), 3);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  trailing_zeros ( self )->  u32 { intrinsics ::  cttz ( self ) as  u32 }} doc_comment ! { concat ! ( "Returns the number of leading ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = !(" ,  stringify ! ($SelfT ),  "::MAX >> 2);\n\nassert_eq!(n.leading_ones(), 2);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ rustc_const_stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ inline ] pub  const  fn  leading_ones ( self )->  u32 {(!  self ).  leading_zeros ()}} doc_comment ! { concat ! ( "Returns the number of trailing ones in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0b1010111" ,  stringify ! ($SelfT ),  ";\n\nassert_eq!(n.trailing_ones(), 3);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ rustc_const_stable ( feature =  "leading_trailing_ones" ,  since =  "1.46.0" )]# [ inline ] pub  const  fn  trailing_ones ( self )->  u32 {(!  self ).  trailing_zeros ()}} doc_comment ! { concat ! ( "Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.\n\nPlease note this isn't the same operation as the `<<` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $rot_op ,  stringify ! ($SelfT ),  ";\nlet m = " , $rot_result ,  ";\n\nassert_eq!(n.rotate_left(" , $rot ,  "), m);\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  rotate_left ( self ,  n :  u32 )->  Self { intrinsics ::  rotate_left ( self ,  n  as $SelfT )}} doc_comment ! { concat ! ( "Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.\n\nPlease note this isn't the same operation as the `>>` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $rot_result ,  stringify ! ($SelfT ),  ";\nlet m = " , $rot_op ,  ";\n\nassert_eq!(n.rotate_right(" , $rot ,  "), m);\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  rotate_right ( self ,  n :  u32 )->  Self { intrinsics ::  rotate_right ( self ,  n  as $SelfT )}} doc_comment ! { concat ! ( "\nReverses the byte order of the integer.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $swap_op ,  stringify ! ($SelfT ),  ";\nlet m = n.swap_bytes();\n\nassert_eq!(m, " , $swapped ,  ");\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  swap_bytes ( self )->  Self { intrinsics ::  bswap ( self  as $ActualT ) as  Self }} doc_comment ! { concat ! ( "Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n                second least-significant bit becomes second most-significant bit, etc.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = " , $swap_op ,  stringify ! ($SelfT ),  ";\nlet m = n.reverse_bits();\n\nassert_eq!(m, " , $reversed ,  ");\nassert_eq!(0, 0" ,  stringify ! ($SelfT ),  ".reverse_bits());\n```" ), # [ stable ( feature =  "reverse_bits" ,  since =  "1.37.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ]# [ must_use ] pub  const  fn  reverse_bits ( self )->  Self { intrinsics ::  bitreverse ( self  as $ActualT ) as  Self }} doc_comment ! { concat ! ( "Converts an integer from big endian to the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_be(n), n)\n} else {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_be(n), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  from_be ( x :  Self )->  Self {# [ cfg ( target_endian =  "big" )]{ x }# [ cfg ( not ( target_endian =  "big" ))]{ x .  swap_bytes ()}}} doc_comment ! { concat ! ( "Converts an integer from little endian to the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_le(n), n)\n} else {\n    assert_eq!(" ,  stringify ! ($SelfT ),  "::from_le(n), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  from_le ( x :  Self )->  Self {# [ cfg ( target_endian =  "little" )]{ x }# [ cfg ( not ( target_endian =  "little" ))]{ x .  swap_bytes ()}}} doc_comment ! { concat ! ( "Converts `self` to big endian from the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  to_be ( self )->  Self {# [ cfg ( target_endian =  "big" )]{ self }# [ cfg ( not ( target_endian =  "big" ))]{ self .  swap_bytes ()}}} doc_comment ! { concat ! ( "Converts `self` to little endian from the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "let n = 0x1A" ,  stringify ! ($SelfT ),  ";\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  to_le ( self )->  Self {# [ cfg ( target_endian =  "little" )]{ self }# [ cfg ( not ( target_endian =  "little" ))]{ self .  swap_bytes ()}}} doc_comment ! { concat ! ( "Checked integer addition. Computes `self + rhs`, returning `None`\nif overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!((" ,  stringify ! ($SelfT ),  "::MAX - 2).checked_add(1), " ,  "Some(" ,  stringify ! ($SelfT ),  "::MAX - 1));\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MAX - 2).checked_add(3), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_add ( self ,  rhs :  Self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_add ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Unchecked integer addition. Computes `self + rhs`, assuming overflow\ncannot occur. This results in undefined behavior when `self + rhs > " ,  stringify ! ($SelfT ),  "::MAX` or `self + rhs < " ,  stringify ! ($SelfT ),  "::MIN`." ), # [ unstable ( feature =  "unchecked_math" ,  reason =  "niche optimization path" ,  issue =  "none" , )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  unsafe  fn  unchecked_add ( self ,  rhs :  Self )->  Self { unsafe { intrinsics ::  unchecked_add ( self ,  rhs )}}} doc_comment ! { concat ! ( "Checked integer subtraction. Computes `self - rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(1" ,  stringify ! ($SelfT ),  ".checked_sub(1), Some(0));\nassert_eq!(0" ,  stringify ! ($SelfT ),  ".checked_sub(1), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_sub ( self ,  rhs :  Self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_sub ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\ncannot occur. This results in undefined behavior when `self - rhs > " ,  stringify ! ($SelfT ),  "::MAX` or `self - rhs < " ,  stringify ! ($SelfT ),  "::MIN`." ), # [ unstable ( feature =  "unchecked_math" ,  reason =  "niche optimization path" ,  issue =  "none" , )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  unsafe  fn  unchecked_sub ( self ,  rhs :  Self )->  Self { unsafe { intrinsics ::  unchecked_sub ( self ,  rhs )}}} doc_comment ! { concat ! ( "Checked integer multiplication. Computes `self * rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_mul(1), Some(5));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.checked_mul(2), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_mul ( self ,  rhs :  Self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_mul ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\ncannot occur. This results in undefined behavior when `self * rhs > " ,  stringify ! ($SelfT ),  "::MAX` or `self * rhs < " ,  stringify ! ($SelfT ),  "::MIN`." ), # [ unstable ( feature =  "unchecked_math" ,  reason =  "niche optimization path" ,  issue =  "none" , )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  unsafe  fn  unchecked_mul ( self ,  rhs :  Self )->  Self { unsafe { intrinsics ::  unchecked_mul ( self ,  rhs )}}} doc_comment ! { concat ! ( "Checked integer division. Computes `self / rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(128" ,  stringify ! ($SelfT ),  ".checked_div(2), Some(64));\nassert_eq!(1" ,  stringify ! ($SelfT ),  ".checked_div(0), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_unstable ( feature =  "const_checked_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_div ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 ){ None } else { Some ( unsafe { intrinsics ::  unchecked_div ( self ,  rhs )})}}} doc_comment ! { concat ! ( "Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128" ,  stringify ! ($SelfT ),  ".checked_div_euclid(2), Some(64));\nassert_eq!(1" ,  stringify ! ($SelfT ),  ".checked_div_euclid(0), None);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_div_euclid ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 ){ None } else { Some ( self .  div_euclid ( rhs ))}}} doc_comment ! { concat ! ( "Checked integer remainder. Computes `self % rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem(2), Some(1));\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem(0), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_unstable ( feature =  "const_checked_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_rem ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 ){ None } else { Some ( unsafe { intrinsics ::  unchecked_rem ( self ,  rhs )})}}} doc_comment ! { concat ! ( "Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem_euclid(2), Some(1));\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".checked_rem_euclid(0), None);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_rem_euclid ( self ,  rhs :  Self )->  Option <  Self > { if  unlikely ! ( rhs ==  0 ){ None } else { Some ( self .  rem_euclid ( rhs ))}}} doc_comment ! { concat ! ( "Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.\n\nNote that negating any positive integer will overflow.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0" ,  stringify ! ($SelfT ),  ".checked_neg(), Some(0));\nassert_eq!(1" ,  stringify ! ($SelfT ),  ".checked_neg(), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  checked_neg ( self )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_neg ();  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Checked shift left. Computes `self << rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0x1" ,  stringify ! ($SelfT ),  ".checked_shl(4), Some(0x10));\nassert_eq!(0x10" ,  stringify ! ($SelfT ),  ".checked_shl(129), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_shl ( self ,  rhs :  u32 )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_shl ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Checked shift right. Computes `self >> rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(0x10" ,  stringify ! ($SelfT ),  ".checked_shr(4), Some(0x1));\nassert_eq!(0x10" ,  stringify ! ($SelfT ),  ".checked_shr(129), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_checked_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_shr ( self ,  rhs :  u32 )->  Option <  Self > { let ( a ,  b )=  self .  overflowing_shr ( rhs );  if  unlikely ! ( b ){ None } else { Some ( a )}}} doc_comment ! { concat ! ( "Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(2" ,  stringify ! ($SelfT ),  ".checked_pow(5), Some(32));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.checked_pow(2), None);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  checked_pow ( self ,  mut  exp :  u32 )->  Option <  Self > { if  exp ==  0 { return  Some ( 1 ); } let  mut  base =  self ;  let  mut  acc :  Self =  1 ;  while  exp >  1 { if ( exp &  1 )==  1 { acc =  try_opt ! ( acc .  checked_mul ( base )); } exp /=  2 ;  base =  try_opt ! ( base .  checked_mul ( base )); } Some ( try_opt ! ( acc .  checked_mul ( base )))}} doc_comment ! { concat ! ( "Saturating integer addition. Computes `self + rhs`, saturating at\nthe numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".saturating_add(1), 101);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.saturating_add(127), " ,  stringify ! ($SelfT ),  "::MAX);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  saturating_add ( self ,  rhs :  Self )->  Self { intrinsics ::  saturating_add ( self ,  rhs )}} doc_comment ! { concat ! ( "Saturating integer subtraction. Computes `self - rhs`, saturating\nat the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".saturating_sub(27), 73);\nassert_eq!(13" ,  stringify ! ($SelfT ),  ".saturating_sub(127), 0);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ inline ] pub  const  fn  saturating_sub ( self ,  rhs :  Self )->  Self { intrinsics ::  saturating_sub ( self ,  rhs )}} doc_comment ! { concat ! ( "Saturating integer multiplication. Computes `self * rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(2" ,  stringify ! ($SelfT ),  ".saturating_mul(10), 20);\nassert_eq!((" ,  stringify ! ($SelfT ),  "::MAX).saturating_mul(10), " ,  stringify ! ($SelfT ),  "::MAX);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_saturating_int_methods" ,  since =  "1.47.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  saturating_mul ( self ,  rhs :  Self )->  Self { match  self .  checked_mul ( rhs ){ Some ( x )=> x ,  None => Self ::  MAX , }}} doc_comment ! { concat ! ( "Saturating integer exponentiation. Computes `self.pow(exp)`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "\nassert_eq!(4" ,  stringify ! ($SelfT ),  ".saturating_pow(3), 64);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.saturating_pow(2), " ,  stringify ! ($SelfT ),  "::MAX);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  saturating_pow ( self ,  exp :  u32 )->  Self { match  self .  checked_pow ( exp ){ Some ( x )=> x ,  None => Self ::  MAX , }}} doc_comment ! { concat ! ( "Wrapping (modular) addition. Computes `self + rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(200" ,  stringify ! ($SelfT ),  ".wrapping_add(55), 255);\nassert_eq!(200" ,  stringify ! ($SelfT ),  ".wrapping_add(" ,  stringify ! ($SelfT ),  "::MAX), 199);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_add ( self ,  rhs :  Self )->  Self { intrinsics ::  wrapping_add ( self ,  rhs )}} doc_comment ! { concat ! ( "Wrapping (modular) subtraction. Computes `self - rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_sub(100), 0);\nassert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_sub(" ,  stringify ! ($SelfT ),  "::MAX), 101);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_sub ( self ,  rhs :  Self )->  Self { intrinsics ::  wrapping_sub ( self ,  rhs )}}# [ doc =  " Wrapping (modular) multiplication. Computes `self *" ]# [ doc =  " rhs`, wrapping around at the boundary of the type." ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " Please note that this example is shared between integer types." ]# [ doc =  " Which explains why `u8` is used here." ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " assert_eq!(10u8.wrapping_mul(12), 120);" ]# [ doc =  " assert_eq!(25u8.wrapping_mul(12), 44);" ]# [ doc =  " ```" ]# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_mul ( self ,  rhs :  Self )->  Self { intrinsics ::  wrapping_mul ( self ,  rhs )} doc_comment ! { concat ! ( "Wrapping (modular) division. Computes `self / rhs`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_div(10), 10);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_unstable ( feature =  "const_wrapping_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_div ( self ,  rhs :  Self )->  Self { self /  rhs }} doc_comment ! { concat ! ( "Wrapping Euclidean division. Computes `self.div_euclid(rhs)`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_div(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_div_euclid(10), 10);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_div_euclid ( self ,  rhs :  Self )->  Self { self /  rhs }} doc_comment ! { concat ! ( "Wrapping (modular) remainder. Computes `self % rhs`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_rem(10), 0);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_unstable ( feature =  "const_wrapping_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_rem ( self ,  rhs :  Self )->  Self { self %  rhs }} doc_comment ! { concat ! ( "Wrapping Euclidean modulo. Computes `self.rem_euclid(rhs)`.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_rem(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100" ,  stringify ! ($SelfT ),  ".wrapping_rem_euclid(10), 0);\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_rem_euclid ( self ,  rhs :  Self )->  Self { self %  rhs }}# [ doc =  " Wrapping (modular) negation. Computes `-self`," ]# [ doc =  " wrapping around at the boundary of the type." ]# [ doc =  "" ]# [ doc =  " Since unsigned types do not have negative equivalents" ]# [ doc =  " all applications of this function will wrap (except for `-0`)." ]# [ doc =  " For values smaller than the corresponding signed type\\\'s maximum" ]# [ doc =  " the result is the same as casting the corresponding signed value." ]# [ doc =  " Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where" ]# [ doc =  " `MAX` is the corresponding signed type\\\'s maximum." ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " Please note that this example is shared between integer types." ]# [ doc =  " Which explains why `i8` is used here." ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " assert_eq!(100i8.wrapping_neg(), -100);" ]# [ doc =  " assert_eq!((-128i8).wrapping_neg(), -128);" ]# [ doc =  " ```" ]# [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  wrapping_neg ( self )->  Self { self .  overflowing_neg ().  0 } doc_comment ! { concat ! ( "Panic-free bitwise shift-left; yields `self << mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_left`](#method.rotate_left) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(1" ,  stringify ! ($SelfT ),  ".wrapping_shl(7), 128);\nassert_eq!(1" ,  stringify ! ($SelfT ),  ".wrapping_shl(128), 1);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_shl ( self ,  rhs :  u32 )->  Self { unsafe { intrinsics ::  unchecked_shl ( self , ( rhs & ($BITS -  1 )) as $SelfT )}}} doc_comment ! { concat ! ( "Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_right`](#method.rotate_right) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(128" ,  stringify ! ($SelfT ),  ".wrapping_shr(7), 1);\nassert_eq!(128" ,  stringify ! ($SelfT ),  ".wrapping_shr(128), 128);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "num_wrapping" ,  since =  "1.2.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_shr ( self ,  rhs :  u32 )->  Self { unsafe { intrinsics ::  unchecked_shr ( self , ( rhs & ($BITS -  1 )) as $SelfT )}}} doc_comment ! { concat ! ( "Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(3" ,  stringify ! ($SelfT ),  ".wrapping_pow(5), 243);\nassert_eq!(3u8.wrapping_pow(6), 217);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  wrapping_pow ( self ,  mut  exp :  u32 )->  Self { if  exp ==  0 { return  1 ; } let  mut  base =  self ;  let  mut  acc :  Self =  1 ;  while  exp >  1 { if ( exp &  1 )==  1 { acc =  acc .  wrapping_mul ( base ); } exp /=  2 ;  base =  base .  wrapping_mul ( base ); } acc .  wrapping_mul ( base )}} doc_comment ! { concat ! ( "Calculates `self` + `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_add(2), (7, false));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.overflowing_add(1), (0, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_add ( self ,  rhs :  Self )-> ( Self ,  bool ){ let ( a ,  b )=  intrinsics ::  add_with_overflow ( self  as $ActualT ,  rhs  as $ActualT ); ( a  as  Self ,  b )}} doc_comment ! { concat ! ( "Calculates `self` - `rhs`\n\nReturns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_sub(2), (3, false));\nassert_eq!(0" ,  stringify ! ($SelfT ),  ".overflowing_sub(1), (" ,  stringify ! ($SelfT ),  "::MAX, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_sub ( self ,  rhs :  Self )-> ( Self ,  bool ){ let ( a ,  b )=  intrinsics ::  sub_with_overflow ( self  as $ActualT ,  rhs  as $ActualT ); ( a  as  Self ,  b )}}# [ doc =  " Calculates the multiplication of `self` and `rhs`." ]# [ doc =  "" ]# [ doc =  " Returns a tuple of the multiplication along with a boolean" ]# [ doc =  " indicating whether an arithmetic overflow would occur. If an" ]# [ doc =  " overflow would have occurred then the wrapped value is returned." ]# [ doc =  "" ]# [ doc =  " # Examples" ]# [ doc =  "" ]# [ doc =  " Basic usage:" ]# [ doc =  "" ]# [ doc =  " Please note that this example is shared between integer types." ]# [ doc =  " Which explains why `u32` is used here." ]# [ doc =  "" ]# [ doc =  " ```" ]# [ doc =  " assert_eq!(5u32.overflowing_mul(2), (10, false));" ]# [ doc =  " assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));" ]# [ doc =  " ```" ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_mul ( self ,  rhs :  Self )-> ( Self ,  bool ){ let ( a ,  b )=  intrinsics ::  mul_with_overflow ( self  as $ActualT ,  rhs  as $ActualT ); ( a  as  Self ,  b )} doc_comment ! { concat ! ( "Calculates the divisor when `self` is divided by `rhs`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "assert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_div(2), (2, false));" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_unstable ( feature =  "const_overflowing_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_div ( self ,  rhs :  Self )-> ( Self ,  bool ){( self /  rhs ,  false )}} doc_comment ! { concat ! ( "Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.overflowing_div(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_div_euclid(2), (2, false));\n```" ), # [ inline ]# [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_div_euclid ( self ,  rhs :  Self )-> ( Self ,  bool ){( self /  rhs ,  false )}} doc_comment ! { concat ! ( "Calculates the remainder when `self` is divided by `rhs`.\n\nReturns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "assert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_rem(2), (1, false));" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_unstable ( feature =  "const_overflowing_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_rem ( self ,  rhs :  Self )-> ( Self ,  bool ){( self %  rhs ,  false )}} doc_comment ! { concat ! ( "Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.\n\nReturns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to `self.overflowing_rem(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5" ,  stringify ! ($SelfT ),  ".overflowing_rem_euclid(2), (1, false));\n```" ), # [ inline ]# [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ] pub  const  fn  overflowing_rem_euclid ( self ,  rhs :  Self )-> ( Self ,  bool ){( self %  rhs ,  false )}} doc_comment ! { concat ! ( "Negates self in an overflowing fashion.\n\nReturns `!self + 1` using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "assert_eq!(0" ,  stringify ! ($SelfT ),  ".overflowing_neg(), (0, false));\nassert_eq!(2" ,  stringify ! ($SelfT ),  ".overflowing_neg(), (-2i32 as " ,  stringify ! ($SelfT ),  ", true));" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )] pub  const  fn  overflowing_neg ( self )-> ( Self ,  bool ){((!  self ).  wrapping_add ( 1 ),  self !=  0 )}} doc_comment ! { concat ! ( "Shifts self left by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "assert_eq!(0x1" ,  stringify ! ($SelfT ),  ".overflowing_shl(4), (0x10, false));\nassert_eq!(0x1" ,  stringify ! ($SelfT ),  ".overflowing_shl(132), (0x10, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_shl ( self ,  rhs :  u32 )-> ( Self ,  bool ){( self .  wrapping_shl ( rhs ), ( rhs > ($BITS -  1 )))}} doc_comment ! { concat ! ( "Shifts self right by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\n" , $Feature ,  "assert_eq!(0x10" ,  stringify ! ($SelfT ),  ".overflowing_shr(4), (0x1, false));\nassert_eq!(0x10" ,  stringify ! ($SelfT ),  ".overflowing_shr(132), (0x1, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "wrapping" ,  since =  "1.7.0" )]# [ rustc_const_stable ( feature =  "const_wrapping_math" ,  since =  "1.32.0" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_shr ( self ,  rhs :  u32 )-> ( Self ,  bool ){( self .  wrapping_shr ( rhs ), ( rhs > ($BITS -  1 )))}} doc_comment ! { concat ! ( "Raises self to the power of `exp`, using exponentiation by squaring.\n\nReturns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(3" ,  stringify ! ($SelfT ),  ".overflowing_pow(5), (243, false));\nassert_eq!(3u8.overflowing_pow(6), (217, true));" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "no_panic_pow" ,  since =  "1.34.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ] pub  const  fn  overflowing_pow ( self ,  mut  exp :  u32 )-> ( Self ,  bool ){ if  exp ==  0 { return ( 1 ,  false ); } let  mut  base =  self ;  let  mut  acc :  Self =  1 ;  let  mut  overflown =  false ;  let  mut  r ;  while  exp >  1 { if ( exp &  1 )==  1 { r =  acc .  overflowing_mul ( base );  acc =  r .  0 ;  overflown |=  r .  1 ; } exp /=  2 ;  r =  base .  overflowing_mul ( base );  base =  r .  0 ;  overflown |=  r .  1 ; } r =  acc .  overflowing_mul ( base );  r .  1 |=  overflown ;  r }} doc_comment ! { concat ! ( "Raises self to the power of `exp`, using exponentiation by squaring.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(2" ,  stringify ! ($SelfT ),  ".pow(5), 32);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  pow ( self ,  mut  exp :  u32 )->  Self { if  exp ==  0 { return  1 ; } let  mut  base =  self ;  let  mut  acc =  1 ;  while  exp >  1 { if ( exp &  1 )==  1 { acc =  acc *  base ; } exp /=  2 ;  base =  base *  base ; } acc *  base }} doc_comment ! { concat ! ( "Performs Euclidean division.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self / rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7" ,  stringify ! ($SelfT ),  ".div_euclid(4), 1); // or any other integer type\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  div_euclid ( self ,  rhs :  Self )->  Self { self /  rhs }} doc_comment ! { concat ! ( "Calculates the least remainder of `self (mod rhs)`.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self % rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7" ,  stringify ! ($SelfT ),  ".rem_euclid(4), 3); // or any other integer type\n```" ), # [ stable ( feature =  "euclidean_division" ,  since =  "1.38.0" )]# [ rustc_const_unstable ( feature =  "const_euclidean_int_methods" ,  issue =  "53718" )]# [ must_use =  "this returns the result of the operation, \\n                          without modifying the original" ]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  rem_euclid ( self ,  rhs :  Self )->  Self { self %  rhs }} doc_comment ! { concat ! ( "Returns `true` if and only if `self == 2^k` for some `k`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert!(16" ,  stringify ! ($SelfT ),  ".is_power_of_two());\nassert!(!10" ,  stringify ! ($SelfT ),  ".is_power_of_two());" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_stable ( feature =  "const_is_power_of_two" ,  since =  "1.32.0" )]# [ inline ] pub  const  fn  is_power_of_two ( self )->  bool { self .  count_ones ()==  1 }}# [ inline ]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )] const  fn  one_less_than_next_power_of_two ( self )->  Self { if  self <=  1 { return  0 ; } let  p =  self -  1 ;  let  z =  unsafe { intrinsics ::  ctlz_nonzero ( p )}; <$SelfT >::  MAX >>  z } doc_comment ! { concat ! ( "Returns the smallest power of two greater than or equal to `self`.\n\nWhen return value overflows (i.e., `self > (1 << (N-1))` for type\n`uN`), it panics in debug mode and return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(2" ,  stringify ! ($SelfT ),  ".next_power_of_two(), 2);\nassert_eq!(3" ,  stringify ! ($SelfT ),  ".next_power_of_two(), 4);" , $EndFeature ,  "\n```" ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )]# [ inline ]# [ rustc_inherit_overflow_checks ] pub  const  fn  next_power_of_two ( self )->  Self { self .  one_less_than_next_power_of_two ()+  1 }} doc_comment ! { concat ! ( "Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.\n\n# Examples\n\nBasic usage:\n\n```\n" , $Feature ,  "assert_eq!(2" ,  stringify ! ($SelfT ),  ".checked_next_power_of_two(), Some(2));\nassert_eq!(3" ,  stringify ! ($SelfT ),  ".checked_next_power_of_two(), Some(4));\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.checked_next_power_of_two(), None);" , $EndFeature ,  "\n```" ), # [ inline ]# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )] pub  const  fn  checked_next_power_of_two ( self )->  Option <  Self > { self .  one_less_than_next_power_of_two ().  checked_add ( 1 )}} doc_comment ! { concat ! ( "Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\nthe return value is wrapped to `0`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_next_power_of_two)]\n" , $Feature ,  "\nassert_eq!(2" ,  stringify ! ($SelfT ),  ".wrapping_next_power_of_two(), 2);\nassert_eq!(3" ,  stringify ! ($SelfT ),  ".wrapping_next_power_of_two(), 4);\nassert_eq!(" ,  stringify ! ($SelfT ),  "::MAX.wrapping_next_power_of_two(), 0);" , $EndFeature ,  "\n```" ), # [ unstable ( feature =  "wrapping_next_power_of_two" ,  issue =  "32463" ,  reason =  "needs decision on wrapping behaviour" )]# [ rustc_const_unstable ( feature =  "const_int_pow" ,  issue =  "53718" )] pub  const  fn  wrapping_next_power_of_two ( self )->  Self { self .  one_less_than_next_power_of_two ().  wrapping_add ( 1 )}} doc_comment ! { concat ! ( "Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.\n" , $to_xe_bytes_doc ,  "\n# Examples\n\n```\nlet bytes = " , $swap_op ,  stringify ! ($SelfT ),  ".to_be_bytes();\nassert_eq!(bytes, " , $be_bytes ,  ");\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  to_be_bytes ( self )-> [ u8 ;  mem ::  size_of ::<  Self > ()]{ self .  to_be ().  to_ne_bytes ()}} doc_comment ! { concat ! ( "Return the memory representation of this integer as a byte array in\nlittle-endian byte order.\n" , $to_xe_bytes_doc ,  "\n# Examples\n\n```\nlet bytes = " , $swap_op ,  stringify ! ($SelfT ),  ".to_le_bytes();\nassert_eq!(bytes, " , $le_bytes ,  ");\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  to_le_bytes ( self )-> [ u8 ;  mem ::  size_of ::<  Self > ()]{ self .  to_le ().  to_ne_bytes ()}} doc_comment ! { concat ! ( "\nReturn the memory representation of this integer as a byte array in\nnative byte order.\n\nAs the target platform's native endianness is used, portable code\nshould use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\ninstead.\n" , $to_xe_bytes_doc ,  "\n[`to_be_bytes`]: #method.to_be_bytes\n[`to_le_bytes`]: #method.to_le_bytes\n\n# Examples\n\n```\nlet bytes = " , $swap_op ,  stringify ! ($SelfT ),  ".to_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        " , $be_bytes ,  "\n    } else {\n        " , $le_bytes ,  "\n    }\n);\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ cfg_attr ( not ( bootstrap ),  rustc_allow_const_fn_unstable ( const_fn_transmute ))]# [ cfg_attr ( bootstrap ,  allow_internal_unstable ( const_fn_transmute ))]# [ inline ] pub  const  fn  to_ne_bytes ( self )-> [ u8 ;  mem ::  size_of ::<  Self > ()]{ unsafe { mem ::  transmute ( self )}}} doc_comment ! { concat ! ( "\nReturn the memory representation of this integer as a byte array in\nnative byte order.\n\n[`to_ne_bytes`] should be preferred over this whenever possible.\n\n[`to_ne_bytes`]: #method.to_ne_bytes\n" ,  "\n# Examples\n\n```\n#![feature(num_as_ne_bytes)]\nlet num = " , $swap_op ,  stringify ! ($SelfT ),  ";\nlet bytes = num.as_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        &" , $be_bytes ,  "\n    } else {\n        &" , $le_bytes ,  "\n    }\n);\n```" ), # [ unstable ( feature =  "num_as_ne_bytes" ,  issue =  "76976" )]# [ inline ] pub  fn  as_ne_bytes (&  self )-> & [ u8 ;  mem ::  size_of ::<  Self > ()]{ unsafe {&* ( self  as *  const  Self  as *  const _)}}} doc_comment ! { concat ! ( "Create a native endian integer value from its representation\nas a byte array in big endian.\n" , $from_xe_bytes_doc ,  "\n# Examples\n\n```\nlet value = " ,  stringify ! ($SelfT ),  "::from_be_bytes(" , $be_bytes ,  ");\nassert_eq!(value, " , $swap_op ,  ");\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nuse std::convert::TryInto;\n\nfn read_be_" ,  stringify ! ($SelfT ),  "(input: &mut &[u8]) -> " ,  stringify ! ($SelfT ),  " {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<" ,  stringify ! ($SelfT ),  ">());\n    *input = rest;\n    " ,  stringify ! ($SelfT ),  "::from_be_bytes(int_bytes.try_into().unwrap())\n}\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  from_be_bytes ( bytes : [ u8 ;  mem ::  size_of ::<  Self > ()])->  Self { Self ::  from_be ( Self ::  from_ne_bytes ( bytes ))}} doc_comment ! { concat ! ( "\nCreate a native endian integer value from its representation\nas a byte array in little endian.\n" , $from_xe_bytes_doc ,  "\n# Examples\n\n```\nlet value = " ,  stringify ! ($SelfT ),  "::from_le_bytes(" , $le_bytes ,  ");\nassert_eq!(value, " , $swap_op ,  ");\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nuse std::convert::TryInto;\n\nfn read_le_" ,  stringify ! ($SelfT ),  "(input: &mut &[u8]) -> " ,  stringify ! ($SelfT ),  " {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<" ,  stringify ! ($SelfT ),  ">());\n    *input = rest;\n    " ,  stringify ! ($SelfT ),  "::from_le_bytes(int_bytes.try_into().unwrap())\n}\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ inline ] pub  const  fn  from_le_bytes ( bytes : [ u8 ;  mem ::  size_of ::<  Self > ()])->  Self { Self ::  from_le ( Self ::  from_ne_bytes ( bytes ))}} doc_comment ! { concat ! ( "Create a native endian integer value from its memory representation\nas a byte array in native endianness.\n\nAs the target platform's native endianness is used, portable code\nlikely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\nappropriate instead.\n\n[`from_be_bytes`]: #method.from_be_bytes\n[`from_le_bytes`]: #method.from_le_bytes\n" , $from_xe_bytes_doc ,  "\n# Examples\n\n```\nlet value = " ,  stringify ! ($SelfT ),  "::from_ne_bytes(if cfg!(target_endian = \"big\") {\n    " , $be_bytes ,  "\n} else {\n    " , $le_bytes ,  "\n});\nassert_eq!(value, " , $swap_op ,  ");\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nuse std::convert::TryInto;\n\nfn read_ne_" ,  stringify ! ($SelfT ),  "(input: &mut &[u8]) -> " ,  stringify ! ($SelfT ),  " {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<" ,  stringify ! ($SelfT ),  ">());\n    *input = rest;\n    " ,  stringify ! ($SelfT ),  "::from_ne_bytes(int_bytes.try_into().unwrap())\n}\n```" ), # [ stable ( feature =  "int_to_from_bytes" ,  since =  "1.32.0" )]# [ rustc_const_stable ( feature =  "const_int_conversion" ,  since =  "1.44.0" )]# [ cfg_attr ( not ( bootstrap ),  rustc_allow_const_fn_unstable ( const_fn_transmute ))]# [ cfg_attr ( bootstrap ,  allow_internal_unstable ( const_fn_transmute ))]# [ inline ] pub  const  fn  from_ne_bytes ( bytes : [ u8 ;  mem ::  size_of ::<  Self > ()])->  Self { unsafe { mem ::  transmute ( bytes )}}} doc_comment ! { concat ! ( "**This method is soft-deprecated.**\n\nAlthough using it won’t cause compilation warning,\nnew code should use [`" ,  stringify ! ($SelfT ),  "::MIN" ,  "`](#associatedconstant.MIN) instead.\n\nReturns the smallest value that can be represented by this integer type." ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_promotable ]# [ inline ( always )]# [ rustc_const_stable ( feature =  "const_max_value" ,  since =  "1.32.0" )] pub  const  fn  min_value ()->  Self { Self ::  MIN }} doc_comment ! { concat ! ( "**This method is soft-deprecated.**\n\nAlthough using it won’t cause compilation warning,\nnew code should use [`" ,  stringify ! ($SelfT ),  "::MAX" ,  "`](#associatedconstant.MAX) instead.\n\nReturns the largest value that can be represented by this integer type." ), # [ stable ( feature =  "rust1" ,  since =  "1.0.0" )]# [ rustc_promotable ]# [ inline ( always )]# [ rustc_const_stable ( feature =  "const_max_value" ,  since =  "1.32.0" )] pub  const  fn  max_value ()->  Self { Self ::  MAX }}}}
src/tools/rust-analyzer/bench_data/numerous_macro_rules:450:macro_rules! __ra_macro_fixture449 {($method :  ident )=>{# [ cfg ( not ( feature =  "arbitrary_precision" ))] fn $method <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { match  self { Value ::  Number ( n )=> n .  deserialize_any ( visitor ), _ => Err ( self .  invalid_type (&  visitor )), }}# [ cfg ( feature =  "arbitrary_precision" )] fn $method <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { match  self { Value ::  Number ( n )=> n .$method ( visitor ), _ => self .  deserialize_any ( visitor ), }}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:451:macro_rules! __ra_macro_fixture450 {($method :  ident )=>{# [ cfg ( not ( feature =  "arbitrary_precision" ))] fn $method <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { match *  self { Value ::  Number ( ref  n )=> n .  deserialize_any ( visitor ), _ => Err ( self .  invalid_type (&  visitor )), }}# [ cfg ( feature =  "arbitrary_precision" )] fn $method <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { match *  self { Value ::  Number ( ref  n )=> n .$method ( visitor ), _ => self .  deserialize_any ( visitor ), }}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:452:macro_rules! __ra_macro_fixture451 {($method :  ident =>$visit :  ident )=>{ fn $method <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { match ( self .  key .  parse (),  self .  key ){( Ok ( integer ), _)=> visitor .$visit ( integer ), ( Err (_),  Cow ::  Borrowed ( s ))=> visitor .  visit_borrowed_str ( s ), # [ cfg ( any ( feature =  "std" ,  feature =  "alloc" ))]( Err (_),  Cow ::  Owned ( s ))=> visitor .  visit_string ( s ), }}}; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:453:macro_rules! __ra_macro_fixture452 {(@  expand [$($num_string :  tt )*])=>{# [ cfg ( not ( feature =  "arbitrary_precision" ))]# [ inline ] fn  deserialize_any <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { match  self .  n { N ::  PosInt ( u )=> visitor .  visit_u64 ( u ),  N ::  NegInt ( i )=> visitor .  visit_i64 ( i ),  N ::  Float ( f )=> visitor .  visit_f64 ( f ), }}# [ cfg ( feature =  "arbitrary_precision" )]# [ inline ] fn  deserialize_any <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de > { if  let  Some ( u )=  self .  as_u64 (){ return  visitor .  visit_u64 ( u ); } else  if  let  Some ( i )=  self .  as_i64 (){ return  visitor .  visit_i64 ( i ); } else  if  let  Some ( f )=  self .  as_f64 (){ if  ryu ::  Buffer ::  new ().  format_finite ( f )==  self .  n ||  f .  to_string ()==  self .  n { return  visitor .  visit_f64 ( f ); }} visitor .  visit_map ( NumberDeserializer { number :  Some ( self .$($num_string )*), })}}; ( owned )=>{ deserialize_any ! (@  expand [ n ]); }; ( ref )=>{ deserialize_any ! (@  expand [ n .  clone ()]); }; }
src/tools/rust-analyzer/bench_data/numerous_macro_rules:454:macro_rules! __ra_macro_fixture453 {($deserialize :  ident =>$visit :  ident )=>{# [ cfg ( not ( feature =  "arbitrary_precision" ))] fn $deserialize <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  Visitor < 'de >, { self .  deserialize_any ( visitor )}# [ cfg ( feature =  "arbitrary_precision" )] fn $deserialize <  V > ( self ,  visitor :  V )->  Result <  V ::  Value ,  Error >  where  V :  de ::  Visitor < 'de >, { visitor .$visit ( self .  n .  parse ().  map_err (|_|  invalid_number ())?)}}; }
src/tools/rust-analyzer/editors/code/README.md:6:## Features
src/tools/rust-analyzer/editors/code/package.json:546:                    "markdownDescription": "Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n.",
src/tools/rust-analyzer/editors/code/package.json:579:                "rust-analyzer.cargo.features": {
src/tools/rust-analyzer/editors/code/package.json:580:                    "markdownDescription": "List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.",
src/tools/rust-analyzer/editors/code/package.json:589:                                "Pass `--all-features` to cargo"
src/tools/rust-analyzer/editors/code/package.json:600:                "rust-analyzer.cargo.noDefaultFeatures": {
src/tools/rust-analyzer/editors/code/package.json:601:                    "markdownDescription": "Whether to pass `--no-default-features` to cargo.",
src/tools/rust-analyzer/editors/code/package.json:667:                "rust-analyzer.check.features": {
src/tools/rust-analyzer/editors/code/package.json:668:                    "markdownDescription": "List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.",
src/tools/rust-analyzer/editors/code/package.json:677:                                "Pass `--all-features` to cargo"
src/tools/rust-analyzer/editors/code/package.json:717:                "rust-analyzer.check.noDefaultFeatures": {
src/tools/rust-analyzer/editors/code/package.json:718:                    "markdownDescription": "Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.",
src/tools/rust-analyzer/editors/code/package.json:755:                    "markdownDescription": "Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.",
src/tools/rust-analyzer/editors/code/src/rust_project.ts:67:    /// `["unix", "feature=\"foo\"", "feature=\"bar\""]`.
src/tools/rust-analyzer/editors/code/src/client.ts:373:    // To turn on all proposed features use: client.registerProposedFeatures();
src/tools/rust-analyzer/editors/code/src/client.ts:374:    client.registerFeature(new ExperimentalFeatures());
src/tools/rust-analyzer/editors/code/src/client.ts:375:    client.registerFeature(new OverrideFeatures());
src/tools/rust-analyzer/editors/code/src/client.ts:380:class ExperimentalFeatures implements lc.StaticFeature {
src/tools/rust-analyzer/editors/code/src/client.ts:381:    getState(): lc.FeatureState {
src/tools/rust-analyzer/editors/code/src/client.ts:411:class OverrideFeatures implements lc.StaticFeature {
src/tools/rust-analyzer/editors/code/src/client.ts:412:    getState(): lc.FeatureState {
src/tools/rust-analyzer/docs/user/manual.adoc:16:The LSP allows various code editors, like VS Code, Emacs or Vim, to implement semantic features like completion or goto definition by talking to an external language server process.
src/tools/rust-analyzer/docs/user/manual.adoc:256:LSP-mode is the original LSP-client for emacs. Compared to Eglot it has a larger codebase and supports more features, like LSP protocol extensions.
src/tools/rust-analyzer/docs/user/manual.adoc:286:   this extension implements _most_ of the features supported in the VSCode extension:
src/tools/rust-analyzer/docs/user/manual.adoc:288:   * same configurations as VSCode extension, `rust-analyzer.server.path`, `rust-analyzer.cargo.features` etc.
src/tools/rust-analyzer/docs/user/manual.adoc:564:Try **rust-analyzer: Show RA Version** in VS Code (using **Command Palette** feature typically activated by Ctrl+Shift+P) or `rust-analyzer --version` in the command line.
src/tools/rust-analyzer/docs/user/manual.adoc:729:    /// `["unix", "feature=\"foo\"", "feature=\"bar\""]`.
src/tools/rust-analyzer/docs/user/manual.adoc:806:== Features
src/tools/rust-analyzer/docs/user/manual.adoc:808:include::./generated_features.adoc[]
src/tools/rust-analyzer/docs/user/manual.adoc:829:== Editor Features
src/tools/rust-analyzer/docs/user/generated_config.adoc:61:targets and features, with the following base command line:
src/tools/rust-analyzer/docs/user/generated_config.adoc:90:[[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::
src/tools/rust-analyzer/docs/user/generated_config.adoc:93:List of features to activate.
src/tools/rust-analyzer/docs/user/generated_config.adoc:95:Set this to `"all"` to pass `--all-features` to cargo.
src/tools/rust-analyzer/docs/user/generated_config.adoc:97:[[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::
src/tools/rust-analyzer/docs/user/generated_config.adoc:100:Whether to pass `--no-default-features` to cargo.
src/tools/rust-analyzer/docs/user/generated_config.adoc:156:[[rust-analyzer.check.features]]rust-analyzer.check.features (default: `null`)::
src/tools/rust-analyzer/docs/user/generated_config.adoc:159:List of features to activate. Defaults to
src/tools/rust-analyzer/docs/user/generated_config.adoc:160:`#rust-analyzer.cargo.features#`.
src/tools/rust-analyzer/docs/user/generated_config.adoc:162:Set to `"all"` to pass `--all-features` to Cargo.
src/tools/rust-analyzer/docs/user/generated_config.adoc:183:[[rust-analyzer.check.noDefaultFeatures]]rust-analyzer.check.noDefaultFeatures (default: `null`)::
src/tools/rust-analyzer/docs/user/generated_config.adoc:186:Whether to pass `--no-default-features` to Cargo. Defaults to
src/tools/rust-analyzer/docs/user/generated_config.adoc:187:`#rust-analyzer.cargo.noDefaultFeatures#`.
src/tools/rust-analyzer/docs/user/generated_config.adoc:227:Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.
src/tools/rust-analyzer/docs/dev/syntax.md:405:  * some IDE-specific features like syntax highlighting are more conveniently implemented over a homogeneous `SyntaxNode` tree
src/tools/rust-analyzer/docs/dev/architecture.md:147:For example, `cfg` flags are a part of `base_db`, but `feature`s are not.
src/tools/rust-analyzer/docs/dev/architecture.md:148:A `foo` feature is a Cargo-level concept, which is lowered by Cargo to `--cfg feature=foo` argument on the command line.
src/tools/rust-analyzer/docs/dev/architecture.md:200:This is the heart of many IDE features, like goto definition, which start with figuring out the hir node at the cursor.
src/tools/rust-analyzer/docs/dev/architecture.md:205:The `ide` crate builds on top of `hir` semantic model to provide high-level IDE features like completion or goto definition.
src/tools/rust-analyzer/docs/dev/architecture.md:220:Internally, `ide` is split across several crates. `ide_assists`, `ide_completion` and `ide_ssr` implement large isolated features.
src/tools/rust-analyzer/docs/dev/architecture.md:222:The `ide` contains a public API/façade, as well as implementation for a plethora of smaller features.
src/tools/rust-analyzer/docs/dev/architecture.md:252:Reloading process should not prevent IDE features from working.
src/tools/rust-analyzer/docs/dev/architecture.md:256:These crates deal with invoking `cargo` to learn about project structure and get compiler errors for the "check on save" feature.
src/tools/rust-analyzer/docs/dev/architecture.md:346:    * features
src/tools/rust-analyzer/docs/dev/architecture.md:443:But a panic in an isolated feature should not bring down the whole process.
src/tools/rust-analyzer/docs/dev/architecture.md:482:The rule of thumb is to enable most features by default unless they are buggy or degrade performance too much.
src/tools/rust-analyzer/docs/dev/architecture.md:483:There will always be features that some people find more annoying than helpful, so giving the users the ability to tweak or disable these is a big part of offering a good user experience.
src/tools/rust-analyzer/docs/dev/architecture.md:484:Enabling them by default is a matter of discoverability, as many users don't know about some features even though they are presented in the manual.
src/tools/rust-analyzer/docs/dev/architecture.md:485:Mind the code--architecture gap: at the moment, we are using fewer feature flags than we really should.
src/tools/rust-analyzer/docs/dev/lsp-extensions.md:486:The flycheck/checkOnSave feature can be controlled via notifications sent by the client to the server.
src/tools/rust-analyzer/docs/dev/README.md:82:In general, I use one of the following workflows for fixing bugs and implementing features:
src/tools/rust-analyzer/docs/dev/style.md:86:To make writing the release notes easier, you can mark a pull request as a feature, fix, internal change, or minor.
src/tools/rust-analyzer/docs/dev/style.md:90:* use a `feat: `, `feature: `, `fix: `, `internal: ` or `minor: ` prefix in the PR title
src/tools/rust-analyzer/docs/dev/style.md:91:* write `changelog [feature|fix|internal|skip] [description]` in a comment or in the PR description; the description is optional, and will replace the title if included.
src/tools/rust-analyzer/docs/dev/style.md:154:Formatting ensures that you can use your editor's "number of selected characters" feature to correlate offsets with test's source code.
src/tools/rust-analyzer/docs/dev/guide.md:29:To see the bigger picture of how the IDE features work, let's take a look at the [`AnalysisHost`] and
src/tools/rust-analyzer/docs/dev/guide.md:89:different feature combinations).
src/tools/rust-analyzer/.gitignore:11:generated_features.adoc
src/tools/rust-analyzer/.github/workflows/ci.yaml:50:      USE_SYSROOT_ABI: "${{ needs.changes.outputs.proc_macros == 'true' && '--features sysroot-abi' || '' }}"
src/tools/rust-analyzer/.github/workflows/release.yaml:145:      RUSTFLAGS: "-C link-arg=-fuse-ld=lld -C target-feature=-crt-static"
src/tools/rust-analyzer/.github/ISSUE_TEMPLATE/feature_request.md:2:name: Feature Request
src/tools/rust-analyzer/.github/ISSUE_TEMPLATE/feature_request.md:3:about: Create a feature request for rust-analyzer.
src/tools/rust-analyzer/.github/ISSUE_TEMPLATE/feature_request.md:5:labels: 'C-feature'
src/tools/rust-analyzer/lib/line-index/src/lib.rs:220:    if is_x86_feature_detected!("sse2") {
src/tools/rust-analyzer/lib/line-index/src/lib.rs:234:#[target_feature(enable = "sse2")]
src/tools/rust-analyzer/lib/lsp-server/Cargo.toml:12:serde = { version = "1.0.156", features = ["derive"] }
src/tools/rust-analyzer/xtask/Cargo.toml:15:time = { version = "0.3", default-features = false }
src/tools/rust-analyzer/xtask/Cargo.toml:16:zip = { version = "0.6", default-features = false, features = ["deflate", "time"] }
src/tools/rust-analyzer/xtask/test_data/expected.md:8:## New Features
src/tools/rust-analyzer/xtask/test_data/input.adoc:10:== New Features
src/tools/rust-analyzer/xtask/src/release.rs:54:            "generated_features.adoc",
src/tools/rust-analyzer/xtask/src/release/changelog.rs:20:    let mut features = String::new();
src/tools/rust-analyzer/xtask/src/release/changelog.rs:54:                PrKind::Feature => &mut features,
src/tools/rust-analyzer/xtask/src/release/changelog.rs:74:== New Features
src/tools/rust-analyzer/xtask/src/release/changelog.rs:76:{features}
src/tools/rust-analyzer/xtask/src/release/changelog.rs:96:    Feature,
src/tools/rust-analyzer/xtask/src/release/changelog.rs:135:        "feature" => PrKind::Feature,
src/tools/rust-analyzer/xtask/src/release/changelog.rs:152:        ("feat: ", PrKind::Feature),
src/tools/rust-analyzer/xtask/src/release/changelog.rs:153:        ("feature: ", PrKind::Feature),
src/tools/rust-analyzer/xtask/src/install.rs:133:    let features = match opts.malloc {
src/tools/rust-analyzer/xtask/src/install.rs:135:        Malloc::Mimalloc => &["--features", "mimalloc"],
src/tools/rust-analyzer/xtask/src/install.rs:136:        Malloc::Jemalloc => &["--features", "jemalloc"],
src/tools/rust-analyzer/xtask/src/install.rs:139:    let cmd = cmd!(sh, "cargo install --path crates/rust-analyzer --locked --force --features force-always-assert {features...}");
src/tools/rust-analyzer/xtask/src/main.rs:45:                cmd!(sh, "cargo build --release --features jemalloc").run()?;
src/tools/lint-docs/src/groups.rs:13:    ("rust-2018-idioms", "Lints to nudge you toward idiomatic features of Rust 2018"),
src/tools/lint-docs/src/lib.rs:272:            "unused_features" // broken lint
src/tools/lint-docs/src/lib.rs:273:            | "unstable_features" // deprecated
src/tools/jsondoclint/Cargo.toml:10:clap = { version = "4.0.15", features = ["derive"] }
src/tools/jsondoclint/Cargo.toml:14:serde = { version = "1.0", features = ["derive"] }
src/tools/miri/Cargo.toml:21:getrandom = { version = "0.2", features = ["std"] }
src/tools/miri/Cargo.toml:41:# Features chosen to match those required by env_logger, to avoid rebuilds
src/tools/miri/Cargo.toml:42:regex = { version = "1.5.5", default-features = false, features = ["perf", "std"] }
src/tools/miri/Cargo.toml:46:# This crate uses #[feature(rustc_private)].
src/tools/miri/Cargo.toml:54:[features]
src/tools/miri/Cargo.toml:59:# submodule in the rustc repo. That means there are many cargo features
src/tools/miri/bench-cargo-miri/serde1/Cargo.toml:8:serde = { version = "1.0", features = ["derive"] }
src/tools/miri/bench-cargo-miri/serde2/Cargo.toml:8:serde = { version = "1.0", features = ["derive"] }
src/tools/miri/test-cargo-miri/no-std-smoke/src/main.rs:3:#![feature(start)]
src/tools/miri/test-cargo-miri/tests/main.rs:1:#![feature(imported_main)]
src/tools/miri/tests/fail/tree_borrows/unique.rs:9:#![feature(ptr_internals)]
src/tools/miri/tests/fail/tree_borrows/children-can-alias.rs:9:#![feature(ptr_internals)]
src/tools/miri/tests/fail/transmute-pair-uninit.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/alloc/no_global_allocator.rs:4:#![feature(lang_items, start)]
src/tools/miri/tests/fail/alloc/global_system_mixup.rs:9:#![feature(allocator_api, slice_ptr_get)]
src/tools/miri/tests/fail/never_transmute_void.rs:5:#![feature(never_type)]
src/tools/miri/tests/fail/never_transmute_humans.rs:4:#![feature(never_type)]
src/tools/miri/tests/fail/fast_math_second.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/dyn-upcast-trait-mismatch.rs:1:#![feature(trait_upcasting)]
src/tools/miri/tests/fail/dyn-upcast-trait-mismatch.rs:2:#![allow(incomplete_features)]
src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs:3:#![feature(strict_provenance)]
src/tools/miri/tests/fail/stacked_borrows/exposed_only_ro.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/fail/unaligned_pointers/atomic_unaligned.rs:2:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/concurrency/unwind_top_of_stack.rs:7:#![feature(c_unwind)]
src/tools/miri/tests/fail/concurrency/thread_local_static_dealloc.rs:3:#![feature(thread_local)]
src/tools/miri/tests/fail/fast_math_both.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/overlapping_assignment.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/overlapping_assignment.rs:2:#![feature(custom_mir)]
src/tools/miri/tests/fail/terminate-terminator.rs:5:#![feature(c_unwind)]
src/tools/miri/tests/fail/validity/ref_to_uninhabited1.rs:1:#![feature(never_type)]
src/tools/miri/tests/fail/validity/nonzero.rs:1:#![feature(rustc_attrs)]
src/tools/miri/tests/fail/provenance/ptr_invalid.rs:1:#![feature(strict_provenance)]
src/tools/miri/tests/fail/provenance/ptr_invalid_offset.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/fail/provenance/provenance_transmute.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/fail/provenance/strict_provenance_cast.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/fail/provenance/ptr_int_unexposed.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/fail/unsized-local.rs:1:#![feature(unsized_locals)]
src/tools/miri/tests/fail/unsized-local.rs:2:#![allow(incomplete_features)]
src/tools/miri/tests/fail/shims/munmap.rs:4:#![feature(rustc_private)]
src/tools/miri/tests/fail/shims/munmap.rs:5:#![feature(strict_provenance)]
src/tools/miri/tests/fail/shims/mmap_use_after_munmap.rs:4:#![feature(rustc_private)]
src/tools/miri/tests/fail/shims/mmap_invalid_dealloc.rs:4:#![feature(rustc_private)]
src/tools/miri/tests/fail/panic/bad_unwind.rs:1:#![feature(c_unwind)]
src/tools/miri/tests/fail/panic/no_std.rs:1:#![feature(lang_items, start, core_intrinsics)]
src/tools/miri/tests/fail/panic/bad_miri_start_panic.rs:2:// This feature is required to trigger the error using the "C" ABI.
src/tools/miri/tests/fail/panic/bad_miri_start_panic.rs:3:#![feature(c_unwind)]
src/tools/miri/tests/fail/fast_math_first.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/generator-pinned-moved.rs:2:#![feature(generators, generator_trait)]
src/tools/miri/tests/fail/intrinsics/exact_div2.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_inf1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/copy_unaligned.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/unchecked_mul1.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_too_big2.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_small3.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/cttz_nonzero.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/simd-gather.rs:1:#![feature(portable_simd)]
src/tools/miri/tests/fail/intrinsics/copy_overlapping.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/uninit_uninhabited_type.rs:1:#![feature(never_type)]
src/tools/miri/tests/fail/intrinsics/rem-by-zero.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/exact_div3.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_small2.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_infneg1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/simd-div-overflow.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_infneg2.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/unchecked_add2.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_nanneg.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big5.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/simd-float-to-int.rs:1:#![feature(portable_simd)]
src/tools/miri/tests/fail/intrinsics/ptr_offset_from_unsigned_neg.rs:1:#![feature(ptr_sub_ptr)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_nan.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/unchecked_shr.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big4.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_neg.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/write_bytes_null.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_too_small1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/unchecked_sub2.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/simd-rem-by-zero.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_inf1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big7.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/simd-select-bitmask-invalid.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/unchecked_sub1.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/copy_null.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big3.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/div-by-zero.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/raw_eq_on_ptr.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big2.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_infneg1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/unchecked_shl.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/unchecked_add1.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big6.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/exact_div4.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_neg.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/simd-div-by-zero.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/simd-scatter.rs:1:#![feature(portable_simd)]
src/tools/miri/tests/fail/intrinsics/assume.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/simd-select-invalid-bool.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/unchecked_div1.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_small1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/exact_div1.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/intrinsics/ctlz_nonzero.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/float_to_int_32_too_big1.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/intrinsics/unchecked_mul2.rs:1:#![feature(unchecked_math)]
src/tools/miri/tests/fail/intrinsics/simd-shl-too-far.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/simd-reduce-invalid-bool.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/simd-shr-too-far.rs:1:#![feature(platform_intrinsics, repr_simd)]
src/tools/miri/tests/fail/intrinsics/float_to_int_64_nan.rs:1:#![feature(intrinsics)]
src/tools/miri/tests/fail/breakpoint.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/data_race/alloc_read_race.rs:2:#![feature(new_uninit)]
src/tools/miri/tests/fail/data_race/alloc_write_race.rs:2:#![feature(new_uninit)]
src/tools/miri/tests/fail/function_calls/arg_inplace_observe_during.rs:4:#![feature(custom_mir, core_intrinsics)]
src/tools/miri/tests/fail/function_calls/target_feature.stderr:1:error: Undefined Behavior: calling a function that requires unavailable target features: ssse3
src/tools/miri/tests/fail/function_calls/target_feature.stderr:2:  --> $DIR/target_feature.rs:LL:CC
src/tools/miri/tests/fail/function_calls/target_feature.stderr:5:   |         ^^^^^^^^^^ calling a function that requires unavailable target features: ssse3
src/tools/miri/tests/fail/function_calls/target_feature.stderr:10:   = note: inside `main` at $DIR/target_feature.rs:LL:CC
src/tools/miri/tests/fail/function_calls/arg_inplace_mutate.rs:3:#![feature(custom_mir, core_intrinsics)]
src/tools/miri/tests/fail/function_calls/return_pointer_aliasing.rs:4:#![feature(raw_ref_op)]
src/tools/miri/tests/fail/function_calls/return_pointer_aliasing.rs:5:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/function_calls/return_pointer_aliasing.rs:6:#![feature(custom_mir)]
src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind1.rs:2:#![feature(c_unwind)]
src/tools/miri/tests/fail/function_calls/target_feature.rs:1://@only-target-x86_64: uses x86 target features
src/tools/miri/tests/fail/function_calls/target_feature.rs:4:    assert!(!is_x86_feature_detected!("ssse3"));
src/tools/miri/tests/fail/function_calls/target_feature.rs:6:        ssse3_fn(); //~ ERROR: calling a function that requires unavailable target features: ssse3
src/tools/miri/tests/fail/function_calls/target_feature.rs:10:#[target_feature(enable = "ssse3")]
src/tools/miri/tests/fail/function_calls/arg_inplace_observe_after.rs:1:#![feature(custom_mir, core_intrinsics)]
src/tools/miri/tests/fail/function_calls/check_callback_abi.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.rs:2:#![feature(rustc_attrs, c_unwind)]
src/tools/miri/tests/fail/erroneous_const.rs:3:#![feature(never_type)]
src/tools/miri/tests/fail/never_say_never.rs:4:#![feature(never_type)]
src/tools/miri/tests/fail/weak_memory/racing_mixed_size.rs:4:#![feature(core_intrinsics)]
src/tools/miri/tests/fail/unwind-action-terminate.rs:1:#![feature(c_unwind)]
src/tools/miri/tests/pass/tree_borrows/tree-borrows.rs:4:#![feature(allocator_api)]
src/tools/miri/tests/pass/tree_borrows/unique.rs:5:#![feature(ptr_internals)]
src/tools/miri/tests/pass/tree_borrows/vec_unique.rs:5:#![feature(vec_into_raw_parts)]
src/tools/miri/tests/pass/box-custom-alloc.rs:3:#![allow(incomplete_features)] // for trait upcasting
src/tools/miri/tests/pass/box-custom-alloc.rs:4:#![feature(allocator_api, trait_upcasting)]
src/tools/miri/tests/pass/stacked-borrows/unknown-bottom-gc.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/pass/stacked-borrows/int-to-ptr.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/pass/stacked-borrows/stacked-borrows.rs:2:#![feature(allocator_api)]
src/tools/miri/tests/pass/stacked-borrows/generators-self-referential.rs:3:#![feature(generators, generator_trait)]
src/tools/miri/tests/pass/stacked-borrows/stack-printing.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/pass/btreemap.rs:4:#![feature(btree_extract_if)]
src/tools/miri/tests/pass/start.rs:1:#![feature(start)]
src/tools/miri/tests/pass/transmute_ptr.rs:3:#![feature(strict_provenance)]
src/tools/miri/tests/pass/dyn-star.rs:1:#![feature(dyn_star)]
src/tools/miri/tests/pass/dyn-star.rs:2:#![allow(incomplete_features)]
src/tools/miri/tests/pass/dyn-star.rs:3:#![feature(custom_inner_attributes)]
src/tools/miri/tests/pass/async-fn.rs:1:#![feature(never_type)]
src/tools/miri/tests/pass/packed_struct.rs:1:#![feature(unsize, coerce_unsized)]
src/tools/miri/tests/pass/overloaded-calls-simple.rs:1:#![feature(lang_items, unboxed_closures, fn_traits)]
src/tools/miri/tests/pass/float.rs:1:#![feature(stmt_expr_attributes)]
src/tools/miri/tests/pass/float.rs:2:#![feature(round_ties_even)]
src/tools/miri/tests/pass/float.rs:560:    // Test cases taken from the library's tests for this feature
src/tools/miri/tests/pass/main_fn.rs:1:#![feature(imported_main)]
src/tools/miri/tests/pass/portable-simd-ptrs.rs:3:#![feature(portable_simd, platform_intrinsics)]
src/tools/miri/tests/pass/ptr_offset.rs:2:#![feature(ptr_sub_ptr)]
src/tools/miri/tests/pass/rc.rs:4:#![feature(new_uninit)]
src/tools/miri/tests/pass/rc.rs:5:#![feature(get_mut_unchecked)]
src/tools/miri/tests/pass/dyn-arbitrary-self.rs:3:#![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]
src/tools/miri/tests/pass/dyn-arbitrary-self.rs:4:#![feature(rustc_attrs)]
src/tools/miri/tests/pass/portable-simd.rs:2:#![feature(portable_simd, platform_intrinsics)]
src/tools/miri/tests/pass/pointers.rs:4:#![feature(ptr_metadata, const_raw_ptr_comparison)]
src/tools/miri/tests/pass/specialization.rs:1:#![allow(incomplete_features)]
src/tools/miri/tests/pass/specialization.rs:2:#![feature(specialization)]
src/tools/miri/tests/pass/linked-list.rs:3:#![feature(linked_list_cursors)]
src/tools/miri/tests/pass/no_std.rs:1:#![feature(lang_items, start)]
src/tools/miri/tests/pass/box.rs:3:#![feature(ptr_internals)]
src/tools/miri/tests/pass/loop-break-value.rs:1:#![feature(never_type)]
src/tools/miri/tests/pass/vec.rs:5:#![feature(iter_advance_by, iter_next_chunk)]
src/tools/miri/tests/pass/unsized.rs:3:#![feature(unsized_tuple_coercion)]
src/tools/miri/tests/pass/unsized.rs:4:#![feature(unsized_fn_params)]
src/tools/miri/tests/pass/concurrency/thread_locals.rs:10:#![feature(thread_local)]
src/tools/miri/tests/pass/heap_allocator.rs:1:#![feature(allocator_api, slice_ptr_get)]
src/tools/miri/tests/pass/write-bytes.rs:1:#![feature(core_intrinsics)] // for `volatile_set_memory`
src/tools/miri/tests/pass/extern_types.rs:3:#![feature(extern_types)]
src/tools/miri/tests/pass/shims/ptr_mask.rs:1:#![feature(ptr_mask)]
src/tools/miri/tests/pass/shims/ptr_mask.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/pass/shims/fs.rs:4:#![feature(io_error_more)]
src/tools/miri/tests/pass/shims/fs.rs:5:#![feature(io_error_uncategorized)]
src/tools/miri/tests/pass/provenance.rs:3:#![feature(strict_provenance)]
src/tools/miri/tests/pass/provenance.rs:4:#![feature(pointer_byte_offsets)]
src/tools/miri/tests/pass/panic/catch_panic.rs:3:#![feature(never_type)]
src/tools/miri/tests/pass/track-caller-attribute.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/pass/volatile.rs:2:#![feature(core_intrinsics)]
src/tools/miri/tests/pass/coercions.rs:1:#![feature(coerce_unsized, unsize)]
src/tools/miri/tests/pass/ptr_int_from_exposed.rs:4:#![feature(strict_provenance)]
src/tools/miri/tests/pass/atomic.rs:4:#![feature(strict_provenance, strict_provenance_atomic_ptr)]
src/tools/miri/tests/pass/simd-intrinsic-generic-elements.rs:1:#![feature(repr_simd, platform_intrinsics)]
src/tools/miri/tests/pass/slices.rs:4:#![feature(new_uninit)]
src/tools/miri/tests/pass/slices.rs:5:#![feature(slice_as_chunks)]
src/tools/miri/tests/pass/slices.rs:6:#![feature(slice_partition_dedup)]
src/tools/miri/tests/pass/slices.rs:7:#![feature(layout_for_ptr)]
src/tools/miri/tests/pass/slices.rs:8:#![feature(strict_provenance)]
src/tools/miri/tests/pass/slices.rs:232:    // Calls `fn as_chunks_unchecked_mut` internally (requires unstable `#![feature(slice_as_chunks)]`):
src/tools/miri/tests/pass/slices.rs:244:    // Calls `fn partition_dedup_by` internally (requires unstable `#![feature(slice_partition_dedup)]`):
src/tools/miri/tests/pass/miri-alloc.rs:1:#![feature(lang_items, start)]
src/tools/miri/tests/pass/sysroot.rs:2:#![feature(test)]
src/tools/miri/tests/pass/memchr.rs:1:#![feature(slice_internals)]
src/tools/miri/tests/pass/intrinsics-integer.rs:4:#![feature(core_intrinsics)]
src/tools/miri/tests/pass/function_calls/disable_abi_check.rs:2:#![feature(core_intrinsics)]
src/tools/miri/tests/pass/function_calls/exported_symbol.rs:1:#![feature(rustc_attrs)]
src/tools/miri/tests/pass/function_calls/target_feature.rs:1://@only-target-x86_64: uses x86 target features
src/tools/miri/tests/pass/function_calls/target_feature.rs:2://@compile-flags: -C target-feature=+ssse3
src/tools/miri/tests/pass/function_calls/target_feature.rs:5:    assert!(is_x86_feature_detected!("ssse3"));
src/tools/miri/tests/pass/function_calls/target_feature.rs:11:#[target_feature(enable = "ssse3")]
src/tools/miri/tests/pass/function_calls/return_place_on_heap.rs:1:#![feature(raw_ref_op)]
src/tools/miri/tests/pass/function_calls/return_place_on_heap.rs:2:#![feature(core_intrinsics)]
src/tools/miri/tests/pass/function_calls/return_place_on_heap.rs:3:#![feature(custom_mir)]
src/tools/miri/tests/pass/issues/issue-miri-2123.rs:1:#![feature(ptr_metadata, layout_for_ptr)]
src/tools/miri/tests/pass/intrinsics.rs:2:#![feature(core_intrinsics, layout_for_ptr)]
src/tools/miri/tests/pass/dyn-upcast.rs:1:#![feature(trait_upcasting)]
src/tools/miri/tests/pass/dyn-upcast.rs:2:#![allow(incomplete_features)]
src/tools/miri/tests/pass/weak_memory/extra_cpp_unsafe.rs:8:#![feature(atomic_from_mut)]
src/tools/miri/tests/pass/weak_memory/extra_cpp.rs:6:#![feature(atomic_from_mut)]
src/tools/miri/tests/pass/global_allocator.rs:1:#![feature(allocator_api, slice_ptr_get)]
src/tools/miri/tests/pass/generator.rs:3:#![feature(generators, generator_trait, never_type)]
src/tools/miri/tests/pass/align_offset_symbolic.rs:2:#![feature(strict_provenance)]
src/tools/miri/tests/pass/float_fast_math.rs:1:#![feature(core_intrinsics)]
src/tools/miri/tests/panic/function_calls/exported_symbol_good_unwind.rs:5:#![feature(c_unwind, unboxed_closures)]
src/tools/miri/tests/pass-dep/shims/libc-fs.rs:4:#![feature(io_error_more)]
src/tools/miri/tests/pass-dep/shims/libc-fs.rs:5:#![feature(io_error_uncategorized)]
src/tools/miri/tests/pass-dep/shims/libc-misc.rs:3:#![feature(io_error_more)]
src/tools/miri/tests/pass-dep/shims/posix_memalign.rs:3:#![feature(pointer_is_aligned)]
src/tools/miri/tests/pass-dep/shims/posix_memalign.rs:4:#![feature(strict_provenance)]
src/tools/miri/tests/pass-dep/shims/mmap.rs:3:#![feature(strict_provenance)]
src/tools/miri/cargo-miri/Cargo.toml:23:# Enable some feature flags that dev-dependencies need but dependencies
src/tools/miri/cargo-miri/Cargo.toml:25:serde = { version = "*", features = ["derive"] }
src/tools/miri/cargo-miri/src/phases.rs:604:    // The `--test-builder` and `--runtool` arguments are unstable rustdoc features,
src/tools/miri/cargo-miri/src/setup.rs:74:            std_features: ["panic_unwind", "backtrace"].into_iter().map(Into::into).collect(),
src/tools/miri/README.md:26:Miri supports almost all Rust language features; in particular, unwinding and
src/tools/miri/README.md:224:  some features on these targets regress.
src/tools/miri/README.md:225:- `x86_64-pc-windows-msvc` works, but supports fewer features than the Linux and
src/tools/miri/README.md:228:  reduced feature set. We might ship Miri with a nightly even when some features
src/tools/miri/test_dependencies/Cargo.toml:16:getrandom = { version = "0.2", features = ["js"] }
src/tools/miri/test_dependencies/Cargo.toml:17:rand = { version = "0.8", features = ["small_rng"] }
src/tools/miri/test_dependencies/Cargo.toml:21:tokio = { version = "1.24", features = ["full"] }
src/tools/miri/ci.sh:25:./miri check --no-default-features # make sure this can be built
src/tools/miri/ci.sh:26:./miri check --all-features # and this, too
src/tools/miri/src/bin/miri.rs:1:#![feature(rustc_private, stmt_expr_attributes)]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:1:#[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:17:#[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:37:    #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:41:    #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:85:        #[cfg(not(feature = "stack-cache"))]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:88:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:112:#[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:119:#[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:149:    #[cfg(all(feature = "stack-cache", debug_assertions))]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:193:        #[cfg(all(feature = "stack-cache", debug_assertions))]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:231:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:240:                #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:248:    #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:291:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:295:    #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:339:            #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:341:            #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:365:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:378:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:380:        #[cfg(not(feature = "stack-cache"))]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:392:                    #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:402:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:413:        #[cfg(all(feature = "stack-cache", debug_assertions))]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:431:        #[cfg(feature = "stack-cache")]
src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs:468:        #[cfg(all(feature = "stack-cache", debug_assertions))]
src/tools/miri/src/lib.rs:1:#![feature(rustc_private)]
src/tools/miri/src/lib.rs:2:#![feature(map_try_insert)]
src/tools/miri/src/lib.rs:3:#![feature(never_type)]
src/tools/miri/src/lib.rs:4:#![feature(try_blocks)]
src/tools/miri/src/lib.rs:5:#![feature(io_error_more)]
src/tools/miri/src/lib.rs:6:#![feature(variant_count)]
src/tools/miri/src/lib.rs:7:#![feature(yeet_expr)]
src/tools/miri/src/lib.rs:8:#![feature(nonzero_ops)]
src/tools/miri/src/lib.rs:9:#![feature(local_key_cell_methods)]
src/tools/miri/src/lib.rs:10:#![feature(round_ties_even)]
src/tools/miri/src/lib.rs:11:#![feature(os_str_bytes)]
src/tools/miri/src/lib.rs:12:#![feature(lint_reasons)]
src/tools/bump-stage0/Cargo.toml:11:indexmap = { version = "2.0.0", features = ["serde"] }
src/tools/bump-stage0/Cargo.toml:12:serde = { version = "1.0.125", features = ["derive"] }
src/tools/bump-stage0/Cargo.toml:13:serde_json = { version = "1.0.59", features = ["preserve_order"] }
src/tools/generate-copyright/Cargo.toml:10:serde = { version = "1.0.147", features = ["derive"] }
src/tools/tidy/src/features.rs:1://! Tidy check to ensure that unstable features are all in order.
src/tools/tidy/src/features.rs:6://! * The set of library features is disjoint from the set of language features.
src/tools/tidy/src/features.rs:7://! * Library features have at most one stability level.
src/tools/tidy/src/features.rs:8://! * Library features have at most one `since` value.
src/tools/tidy/src/features.rs:9://! * All unstable lang features have tests to ensure they are actually unstable.
src/tools/tidy/src/features.rs:10://! * Language features in a group are sorted by feature name.
src/tools/tidy/src/features.rs:28:const FEATURE_GROUP_START_PREFIX: &str = "// feature-group-start";
src/tools/tidy/src/features.rs:29:const FEATURE_GROUP_END_PREFIX: &str = "// feature-group-end";
src/tools/tidy/src/features.rs:50:pub struct Feature {
src/tools/tidy/src/features.rs:56:impl Feature {
src/tools/tidy/src/features.rs:65:pub type Features = HashMap<String, Feature>;
src/tools/tidy/src/features.rs:67:pub struct CollectedFeatures {
src/tools/tidy/src/features.rs:68:    pub lib: Features,
src/tools/tidy/src/features.rs:69:    pub lang: Features,
src/tools/tidy/src/features.rs:73:pub fn collect_lib_features(base_src_path: &Path) -> Features {
src/tools/tidy/src/features.rs:74:    let mut lib_features = Features::new();
src/tools/tidy/src/features.rs:76:    map_lib_features(base_src_path, &mut |res, _, _| {
src/tools/tidy/src/features.rs:77:        if let Ok((name, feature)) = res {
src/tools/tidy/src/features.rs:78:            lib_features.insert(name.to_owned(), feature);
src/tools/tidy/src/features.rs:81:    lib_features
src/tools/tidy/src/features.rs:91:) -> CollectedFeatures {
src/tools/tidy/src/features.rs:92:    let mut features = collect_lang_features(compiler_path, bad);
src/tools/tidy/src/features.rs:93:    assert!(!features.is_empty());
src/tools/tidy/src/features.rs:95:    let lib_features = get_and_check_lib_features(lib_path, bad, &features);
src/tools/tidy/src/features.rs:96:    assert!(!lib_features.is_empty());
src/tools/tidy/src/features.rs:108:                || path.file_name() == Some(OsStr::new("features.rs"))
src/tools/tidy/src/features.rs:115:            let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);
src/tools/tidy/src/features.rs:124:                let feature_name = match line.find(gate_test_str) {
src/tools/tidy/src/features.rs:129:                match features.get_mut(feature_name) {
src/tools/tidy/src/features.rs:136:                                feature_name
src/tools/tidy/src/features.rs:143:                            "gate-test test found referencing a nonexistent feature '{}'",
src/tools/tidy/src/features.rs:144:                            feature_name
src/tools/tidy/src/features.rs:152:    // Only check the number of lang features.
src/tools/tidy/src/features.rs:153:    // Obligatory testing for library features is dumb.
src/tools/tidy/src/features.rs:154:    let gate_untested = features
src/tools/tidy/src/features.rs:161:        println!("Expected a gate test for the feature '{name}'.");
src/tools/tidy/src/features.rs:163:            "Hint: create a failing test file named 'tests/ui/feature-gates/feature-gate-{}.rs',\
src/tools/tidy/src/features.rs:164:                \n      with its failures due to missing usage of `#![feature({})]`.",
src/tools/tidy/src/features.rs:176:        tidy_error!(bad, "Found {} features without a gate test.", gate_untested.len());
src/tools/tidy/src/features.rs:181:    let all_features_iter = features
src/tools/tidy/src/features.rs:184:        .chain(lib_features.iter().map(|feat| (feat, "lib")));
src/tools/tidy/src/features.rs:185:    for ((feature_name, feature), kind) in all_features_iter {
src/tools/tidy/src/features.rs:186:        let since = if let Some(since) = feature.since { since } else { continue };
src/tools/tidy/src/features.rs:190:                "The stabilization version {since} of {kind} feature `{feature_name}` is newer than the current {version}"
src/tools/tidy/src/features.rs:196:                "The stabilization version {since} of {kind} feature `{feature_name}` is written out but should be {}",
src/tools/tidy/src/features.rs:203:                "The placeholder use of {kind} feature `{feature_name}` is not allowed on the {channel} channel",
src/tools/tidy/src/features.rs:209:        return CollectedFeatures { lib: lib_features, lang: features };
src/tools/tidy/src/features.rs:214:        lines.extend(format_features(&features, "lang"));
src/tools/tidy/src/features.rs:215:        lines.extend(format_features(&lib_features, "lib"));
src/tools/tidy/src/features.rs:223:    CollectedFeatures { lib: lib_features, lang: features }
src/tools/tidy/src/features.rs:234:fn format_features<'a>(
src/tools/tidy/src/features.rs:235:    features: &'a Features,
src/tools/tidy/src/features.rs:238:    features.iter().map(move |(name, feature)| {
src/tools/tidy/src/features.rs:243:            feature.level,
src/tools/tidy/src/features.rs:244:            feature.since.map_or("None".to_owned(), |since| since.to_string())
src/tools/tidy/src/features.rs:252:        static ref FEATURE: Regex = Regex::new(r#"feature\s*=\s*"([^"]*)""#).unwrap();
src/tools/tidy/src/features.rs:258:        "feature" => &*FEATURE,
src/tools/tidy/src/features.rs:266:fn test_filen_gate(filen_underscore: &str, features: &mut Features) -> bool {
src/tools/tidy/src/features.rs:267:    let prefix = "feature_gate_";
src/tools/tidy/src/features.rs:269:        for (n, f) in features.iter_mut() {
src/tools/tidy/src/features.rs:270:            // Equivalent to filen_underscore == format!("feature_gate_{n}")
src/tools/tidy/src/features.rs:280:pub fn collect_lang_features(base_compiler_path: &Path, bad: &mut bool) -> Features {
src/tools/tidy/src/features.rs:281:    let mut features = Features::new();
src/tools/tidy/src/features.rs:282:    collect_lang_features_in(&mut features, base_compiler_path, "active.rs", bad);
src/tools/tidy/src/features.rs:283:    collect_lang_features_in(&mut features, base_compiler_path, "accepted.rs", bad);
src/tools/tidy/src/features.rs:284:    collect_lang_features_in(&mut features, base_compiler_path, "removed.rs", bad);
src/tools/tidy/src/features.rs:285:    features
src/tools/tidy/src/features.rs:288:fn collect_lang_features_in(features: &mut Features, base: &Path, file: &str, bad: &mut bool) {
src/tools/tidy/src/features.rs:289:    let path = base.join("rustc_feature").join("src").join(file);
src/tools/tidy/src/features.rs:292:    // We allow rustc-internal features to omit a tracking issue.
src/tools/tidy/src/features.rs:293:    // To make tidy accept omitting a tracking issue, group the list of features
src/tools/tidy/src/features.rs:295:    let mut next_feature_omits_tracking_issue = false;
src/tools/tidy/src/features.rs:297:    let mut in_feature_group = false;
src/tools/tidy/src/features.rs:307:                next_feature_omits_tracking_issue = true;
src/tools/tidy/src/features.rs:311:                next_feature_omits_tracking_issue = false;
src/tools/tidy/src/features.rs:317:        if line.starts_with(FEATURE_GROUP_START_PREFIX) {
src/tools/tidy/src/features.rs:318:            if in_feature_group {
src/tools/tidy/src/features.rs:322:                        new feature group is started without ending the previous one",
src/tools/tidy/src/features.rs:328:            in_feature_group = true;
src/tools/tidy/src/features.rs:331:        } else if line.starts_with(FEATURE_GROUP_END_PREFIX) {
src/tools/tidy/src/features.rs:332:            in_feature_group = false;
src/tools/tidy/src/features.rs:362:        if in_feature_group {
src/tools/tidy/src/features.rs:364:                // This assumes the user adds the feature name at the end of the list, as we're
src/tools/tidy/src/features.rs:368:                        // This only occurs when the feature name has already been declared.
src/tools/tidy/src/features.rs:371:                            "{}:{}: duplicate feature {}",
src/tools/tidy/src/features.rs:383:                    "at the beginning of the feature group".to_owned()
src/tools/tidy/src/features.rs:387:                    "at the end of the feature group".to_owned()
src/tools/tidy/src/features.rs:398:                    "{}:{}: feature {} is not sorted by feature name (should be {})",
src/tools/tidy/src/features.rs:410:            if level == Status::Unstable && !next_feature_omits_tracking_issue {
src/tools/tidy/src/features.rs:413:                    "{}:{}: no tracking issue for feature {}",
src/tools/tidy/src/features.rs:424:        match features.entry(name.to_owned()) {
src/tools/tidy/src/features.rs:428:                    "{}:{} feature {name} already specified with status '{}'",
src/tools/tidy/src/features.rs:435:                e.insert(Feature { level, since, has_gate_test: false, tracking_issue });
src/tools/tidy/src/features.rs:441:fn get_and_check_lib_features(
src/tools/tidy/src/features.rs:444:    lang_features: &Features,
src/tools/tidy/src/features.rs:445:) -> Features {
src/tools/tidy/src/features.rs:446:    let mut lib_features = Features::new();
src/tools/tidy/src/features.rs:447:    map_lib_features(base_src_path, &mut |res, file, line| match res {
src/tools/tidy/src/features.rs:449:            let mut check_features = |f: &Feature, list: &Features, display: &str| {
src/tools/tidy/src/features.rs:464:            check_features(&f, &lang_features, "corresponding lang feature");
src/tools/tidy/src/features.rs:465:            check_features(&f, &lib_features, "previous");
src/tools/tidy/src/features.rs:466:            lib_features.insert(name.to_owned(), f);
src/tools/tidy/src/features.rs:472:    lib_features
src/tools/tidy/src/features.rs:475:fn map_lib_features(
src/tools/tidy/src/features.rs:477:    mf: &mut (dyn Send + Sync + FnMut(Result<(&str, Feature), &str>, &Path, usize)),
src/tools/tidy/src/features.rs:486:                || filename == "features.rs"
src/tools/tidy/src/features.rs:509:            let mut becoming_feature: Option<(&str, Feature)> = None;
src/tools/tidy/src/features.rs:527:                if let Some((ref name, ref mut f)) = becoming_feature {
src/tools/tidy/src/features.rs:540:                        // attribute has not ended, and ignoring possible feature
src/tools/tidy/src/features.rs:547:                becoming_feature = None;
src/tools/tidy/src/features.rs:549:                    // `const fn` features are handled specially.
src/tools/tidy/src/features.rs:550:                    let feature_name = match find_attr_val(line, "feature").or_else(|| {
src/tools/tidy/src/features.rs:551:                        iter_lines.peek().and_then(|next| find_attr_val(next.1, "feature"))
src/tools/tidy/src/features.rs:554:                        None => err!("malformed stability attribute: missing `feature` key"),
src/tools/tidy/src/features.rs:556:                    let feature = Feature {
src/tools/tidy/src/features.rs:562:                    mf(Ok((feature_name, feature)), file, i + 1);
src/tools/tidy/src/features.rs:572:                let feature_name = match find_attr_val(line, "feature")
src/tools/tidy/src/features.rs:573:                    .or_else(|| iter_lines.peek().and_then(|next| find_attr_val(next.1, "feature")))
src/tools/tidy/src/features.rs:576:                    None => err!("malformed stability attribute: missing `feature` key"),
src/tools/tidy/src/features.rs:590:                let feature = Feature { level, since, has_gate_test: false, tracking_issue };
src/tools/tidy/src/features.rs:592:                    mf(Ok((feature_name, feature)), file, i + 1);
src/tools/tidy/src/features.rs:594:                    becoming_feature = Some((feature_name, feature));
src/tools/tidy/src/x_version.rs:65:        .features(cargo_metadata::CargoOpt::AllFeatures);
src/tools/tidy/src/lib.rs:61:pub mod features;
src/tools/tidy/src/features/tests.rs:5:    let s = r#"#[unstable(feature = "tidy_test_never_used_anywhere_else", issue = "58402")]"#;
src/tools/tidy/src/features/tests.rs:6:    assert_eq!(find_attr_val(s, "feature"), Some("tidy_test_never_used_anywhere_else"));
src/tools/tidy/src/unstable_book.rs:1:use crate::features::{CollectedFeatures, Features, Status};
src/tools/tidy/src/unstable_book.rs:10:pub const LANG_FEATURES_DIR: &str = "src/language-features";
src/tools/tidy/src/unstable_book.rs:12:pub const LIB_FEATURES_DIR: &str = "src/library-features";
src/tools/tidy/src/unstable_book.rs:19:/// Builds the path to the directory where the features are documented within the Unstable Book
src/tools/tidy/src/unstable_book.rs:21:pub fn unstable_book_lang_features_path(base_src_path: &Path) -> PathBuf {
src/tools/tidy/src/unstable_book.rs:22:    unstable_book_path(base_src_path).join(LANG_FEATURES_DIR)
src/tools/tidy/src/unstable_book.rs:25:/// Builds the path to the directory where the features are documented within the Unstable Book
src/tools/tidy/src/unstable_book.rs:27:pub fn unstable_book_lib_features_path(base_src_path: &Path) -> PathBuf {
src/tools/tidy/src/unstable_book.rs:28:    unstable_book_path(base_src_path).join(LIB_FEATURES_DIR)
src/tools/tidy/src/unstable_book.rs:36:/// Retrieves names of all unstable features.
src/tools/tidy/src/unstable_book.rs:37:pub fn collect_unstable_feature_names(features: &Features) -> BTreeSet<String> {
src/tools/tidy/src/unstable_book.rs:38:    features
src/tools/tidy/src/unstable_book.rs:56:/// Retrieves file names of all library feature sections in the Unstable Book with:
src/tools/tidy/src/unstable_book.rs:60:fn collect_unstable_book_lang_features_section_file_names(
src/tools/tidy/src/unstable_book.rs:63:    collect_unstable_book_section_file_names(&unstable_book_lang_features_path(base_src_path))
src/tools/tidy/src/unstable_book.rs:66:/// Retrieves file names of all language feature sections in the Unstable Book with:
src/tools/tidy/src/unstable_book.rs:70:fn collect_unstable_book_lib_features_section_file_names(base_src_path: &Path) -> BTreeSet<String> {
src/tools/tidy/src/unstable_book.rs:71:    collect_unstable_book_section_file_names(&unstable_book_lib_features_path(base_src_path))
src/tools/tidy/src/unstable_book.rs:74:pub fn check(path: &Path, features: CollectedFeatures, bad: &mut bool) {
src/tools/tidy/src/unstable_book.rs:75:    let lang_features = features.lang;
src/tools/tidy/src/unstable_book.rs:76:    let lib_features = features
src/tools/tidy/src/unstable_book.rs:79:        .filter(|&(ref name, _)| !lang_features.contains_key(name))
src/tools/tidy/src/unstable_book.rs:80:        .collect::<Features>();
src/tools/tidy/src/unstable_book.rs:82:    // Library features
src/tools/tidy/src/unstable_book.rs:83:    let unstable_lib_feature_names = collect_unstable_feature_names(&lib_features);
src/tools/tidy/src/unstable_book.rs:84:    let unstable_book_lib_features_section_file_names =
src/tools/tidy/src/unstable_book.rs:85:        collect_unstable_book_lib_features_section_file_names(path);
src/tools/tidy/src/unstable_book.rs:87:    // Language features
src/tools/tidy/src/unstable_book.rs:88:    let unstable_lang_feature_names = collect_unstable_feature_names(&lang_features);
src/tools/tidy/src/unstable_book.rs:89:    let unstable_book_lang_features_section_file_names =
src/tools/tidy/src/unstable_book.rs:90:        collect_unstable_book_lang_features_section_file_names(path);
src/tools/tidy/src/unstable_book.rs:92:    // Check for Unstable Book sections that don't have a corresponding unstable feature
src/tools/tidy/src/unstable_book.rs:93:    for feature_name in &unstable_book_lib_features_section_file_names - &unstable_lib_feature_names
src/tools/tidy/src/unstable_book.rs:95:        if !unstable_lang_feature_names.contains(&feature_name) {
src/tools/tidy/src/unstable_book.rs:98:                "The Unstable Book has a 'library feature' section '{}' which doesn't \
src/tools/tidy/src/unstable_book.rs:99:                         correspond to an unstable library feature",
src/tools/tidy/src/unstable_book.rs:100:                feature_name
src/tools/tidy/src/unstable_book.rs:105:    // Check for Unstable Book sections that don't have a corresponding unstable feature.
src/tools/tidy/src/unstable_book.rs:106:    for feature_name in
src/tools/tidy/src/unstable_book.rs:107:        &unstable_book_lang_features_section_file_names - &unstable_lang_feature_names
src/tools/tidy/src/unstable_book.rs:111:            "The Unstable Book has a 'language feature' section '{}' which doesn't \
src/tools/tidy/src/unstable_book.rs:112:                     correspond to an unstable language feature",
src/tools/tidy/src/unstable_book.rs:113:            feature_name
src/tools/tidy/src/unstable_book.rs:117:    // List unstable features that don't have Unstable Book sections.
src/tools/tidy/src/unstable_book.rs:120:    println!("Lib features without unstable book sections:");
src/tools/tidy/src/unstable_book.rs:121:    for feature_name in &unstable_lang_feature_names -
src/tools/tidy/src/unstable_book.rs:122:                        &unstable_book_lang_features_section_file_names {
src/tools/tidy/src/unstable_book.rs:123:        println!("    * {} {:?}", feature_name, lib_features[&feature_name].tracking_issue);
src/tools/tidy/src/unstable_book.rs:126:    println!("Lang features without unstable book sections:");
src/tools/tidy/src/unstable_book.rs:127:    for feature_name in &unstable_lib_feature_names-
src/tools/tidy/src/unstable_book.rs:128:                        &unstable_book_lib_features_section_file_names {
src/tools/tidy/src/unstable_book.rs:129:        println!("    * {} {:?}", feature_name, lang_features[&feature_name].tracking_issue);
src/tools/tidy/src/deps.rs:132:    "cpufeatures",
src/tools/tidy/src/deps.rs:302:    "yansi-term", // this is a false-positive: it's only used by rustfmt, but because it's enabled through a feature, tidy thinks it's used by rustc as well.
src/tools/tidy/src/deps.rs:376:        .features(cargo_metadata::CargoOpt::AllFeatures);
src/tools/tidy/src/deps.rs:392:        .features(cargo_metadata::CargoOpt::AllFeatures);
src/tools/tidy/src/deps.rs:402:        .features(cargo_metadata::CargoOpt::AllFeatures);
src/tools/tidy/src/deps.rs:417:        .features(cargo_metadata::CargoOpt::AllFeatures);
src/tools/tidy/src/main.rs:20:    // which uses the unstable `public-dependency` feature.
src/tools/tidy/src/main.rs:139:            let r = features::check(
src/tools/rustbook/Cargo.toml:13:default-features = false
src/tools/rustbook/Cargo.toml:14:features = ["search"]
src/tools/clippy/clippy_utils/Cargo.toml:8:arrayvec = { version = "0.7", default-features = false }
src/tools/clippy/clippy_utils/Cargo.toml:13:[features]
src/tools/clippy/clippy_utils/Cargo.toml:18:# This crate uses #[feature(rustc_private)]
src/tools/clippy/clippy_utils/src/diagnostics.rs:196:#[cfg_attr(feature = "internal", allow(clippy::collapsible_span_lint_calls))]
src/tools/clippy/clippy_utils/src/lib.rs:1:#![feature(array_chunks)]
src/tools/clippy/clippy_utils/src/lib.rs:2:#![feature(box_patterns)]
src/tools/clippy/clippy_utils/src/lib.rs:3:#![feature(if_let_guard)]
src/tools/clippy/clippy_utils/src/lib.rs:4:#![feature(let_chains)]
src/tools/clippy/clippy_utils/src/lib.rs:5:#![feature(lint_reasons)]
src/tools/clippy/clippy_utils/src/lib.rs:6:#![feature(never_type)]
src/tools/clippy/clippy_utils/src/lib.rs:7:#![feature(rustc_private)]
src/tools/clippy/clippy_utils/src/lib.rs:9:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/clippy_utils/src/lib.rs:2151:/// `trivial_bounds` feature allows functions with unsatisfiable bounds, for example:
src/tools/clippy/clippy_utils/src/paths.rs:7:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:9:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:16:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:29:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:31:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:45:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:47:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:52:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:54:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:56:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:58:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:61:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:128:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:130:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:132:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:134:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:136:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/paths.rs:138:#[cfg(feature = "internal")]
src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs:386:                // Unstable const fn with the feature enabled.
src/tools/clippy/clippy_utils/src/msrvs.rs:20:// names may refer to stabilized feature flags or library items
src/tools/clippy/clippy_utils/src/macros.rs:372:    /// able to access the many features of a [`LateContext`].
src/tools/clippy/rustc_tools_util/Cargo.toml:14:[features]
src/tools/clippy/rustc_tools_util/src/lib.rs:1:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/Cargo.toml:44:serde = { version = "1.0.125", features = ["derive"] }
src/tools/clippy/Cargo.toml:45:syn = { version = "2.0", features = ["full"] }
src/tools/clippy/Cargo.toml:48:tokio = { version = "1", features = ["io-util"] }
src/tools/clippy/Cargo.toml:53:[features]
src/tools/clippy/Cargo.toml:59:# This package uses #[feature(rustc_private)]
src/tools/clippy/CHANGELOG.md:1095:* Fix ICEs related to `#![feature(generic_const_exprs)]` usage
src/tools/clippy/CHANGELOG.md:1436:* [`allow_attributes_without_reason`] (Requires `#![feature(lint_reasons)]`)
src/tools/clippy/CHANGELOG.md:1944:* [`negative_feature_names`]
src/tools/clippy/CHANGELOG.md:1946:* [`redundant_feature_names`]
src/tools/clippy/CHANGELOG.md:2150:* [`unnested_or_patterns`]: Removed `or_patterns` feature gate in the code
src/tools/clippy/CHANGELOG.md:2774:* [`empty_enum`] Only lint if `never_type` feature is enabled
src/tools/clippy/CHANGELOG.md:3243:* Don't trigger [`unnested_or_patterns`] if the feature `or_patterns` is not enabled
src/tools/clippy/CHANGELOG.md:3311:* [`len_zero`]: Avoid linting ranges when the `range_is_empty` feature is not enabled
src/tools/clippy/CHANGELOG.md:3498:* Handle the unstable `trivial_bounds` feature [#5296](https://github.com/rust-lang/rust-clippy/pull/5296)
src/tools/clippy/CHANGELOG.md:4467:* For convenience, `cargo clippy` defines a `cargo-clippy` feature. This was
src/tools/clippy/CHANGELOG.md:4554:* For compatibility, `cargo clippy` does not defines the `clippy` feature
src/tools/clippy/CHANGELOG.md:4564:* `cargo clippy` now automatically defines the `clippy` feature
src/tools/clippy/CHANGELOG.md:5099:[`negative_feature_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#negative_feature_names
src/tools/clippy/CHANGELOG.md:5186:[`redundant_feature_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_feature_names
src/tools/clippy/declare_clippy_lint/Cargo.toml:15:[features]
src/tools/clippy/declare_clippy_lint/src/lib.rs:1:#![feature(let_chains)]
src/tools/clippy/declare_clippy_lint/src/lib.rs:2:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/ui-internal/invalid_msrv_attr_impl.fixed:5:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/interning_defined_symbol.rs:4:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/check_formulation.rs:2:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.fixed:2:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/lint_without_lint_pass.rs:3:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/default_deprecation_reason.rs:2:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/interning_defined_symbol.fixed:4:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/collapsible_span_lint_calls.rs:4:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/outer_expn_data.rs:5:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.rs:2:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/unnecessary_def_path_hardcoded_path.rs:1:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/default_lint.rs:3:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/collapsible_span_lint_calls.fixed:4:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/check_clippy_version_attribute.rs:2:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/unnecessary_def_path.rs:4:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/outer_expn_data.fixed:5:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/invalid_msrv_attr_impl.rs:5:#![feature(rustc_private)]
src/tools/clippy/tests/ui-internal/unnecessary_def_path.fixed:4:#![feature(rustc_private)]
src/tools/clippy/tests/ui/ifs_same_cond.rs:31:    if cfg!(feature = "feature1-659") {
src/tools/clippy/tests/ui/ifs_same_cond.rs:33:    } else if cfg!(feature = "feature2-659") {
src/tools/clippy/tests/ui/min_rust_version_attr.rs:2:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/match_same_arms2.rs:178:        #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/uninit.rs:1:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/match_single_binding.rs:111:        #[cfg(disabled_feature)]
src/tools/clippy/tests/ui/match_single_binding.rs:123:        #[cfg(disabled_feature)]
src/tools/clippy/tests/ui/redundant_clone.rs:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/unnested_or_patterns2.rs:3:#![feature(box_patterns)]
src/tools/clippy/tests/ui/new_ret_no_self.rs:1:#![feature(type_alias_impl_trait)]
src/tools/clippy/tests/ui/default_union_representation.rs:1:#![feature(transparent_unions)]
src/tools/clippy/tests/ui/min_rust_version_invalid_attr.rs:1:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/arithmetic_side_effects.rs:13:#![feature(const_mut_refs, inline_const, saturating_int_impl)]
src/tools/clippy/tests/ui/cfg_attr_rustfmt.rs:2:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/allow_attributes.rs:5:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/unnested_or_patterns2.fixed:3:#![feature(box_patterns)]
src/tools/clippy/tests/ui/manual_non_exhaustive_enum.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/large_futures.rs:1:#![feature(generators)]
src/tools/clippy/tests/ui/redundant_clone.fixed:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/match_as_ref.fixed:40:        #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/must_use_candidates.rs:2:#![feature(never_type)]
src/tools/clippy/tests/ui/implicit_return.rs:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/needless_raw_string_hashes.fixed:4:#![feature(c_str_literals)]
src/tools/clippy/tests/ui/assertions_on_constants.rs:32:    assert!(cfg!(feature = "hey") || cfg!(not(feature = "asdf")));
src/tools/clippy/tests/ui/assertions_on_constants.rs:34:    let flag: bool = cfg!(not(feature = "asdf"));
src/tools/clippy/tests/ui/assertions_on_constants.rs:37:    const CFG_FLAG: &bool = &cfg!(feature = "hey");
src/tools/clippy/tests/ui/map_flatten_fixable.fixed:9:#![feature(result_flattening)]
src/tools/clippy/tests/ui/match_single_binding.fixed:99:        #[cfg(disabled_feature)]
src/tools/clippy/tests/ui/match_single_binding.fixed:111:        #[cfg(disabled_feature)]
src/tools/clippy/tests/ui/redundant_closure_call_fixable.fixed:3:#![feature(async_closure)]
src/tools/clippy/tests/ui/needless_return.fixed:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/needless_return.fixed:4:#![feature(yeet_expr)]
src/tools/clippy/tests/ui/almost_complete_range.rs:5:#![feature(exclusive_range_pattern)]
src/tools/clippy/tests/ui/almost_complete_range.rs:6:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/cfg_features.stderr:1:error: feature may misspelled as features
src/tools/clippy/tests/ui/cfg_features.stderr:2:  --> $DIR/cfg_features.rs:4:11
src/tools/clippy/tests/ui/cfg_features.stderr:4:LL |     #[cfg(features = "not-really-a-feature")]
src/tools/clippy/tests/ui/cfg_features.stderr:5:   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `feature = "not-really-a-feature"`
src/tools/clippy/tests/ui/cfg_features.stderr:9:error: feature may misspelled as features
src/tools/clippy/tests/ui/cfg_features.stderr:10:  --> $DIR/cfg_features.rs:7:34
src/tools/clippy/tests/ui/cfg_features.stderr:12:LL |     #[cfg(all(feature = "right", features = "wrong"))]
src/tools/clippy/tests/ui/cfg_features.stderr:13:   |                                  ^^^^^^^^^^^^^^^^^^ help: use: `feature = "wrong"`
src/tools/clippy/tests/ui/cfg_features.stderr:15:error: feature may misspelled as features
src/tools/clippy/tests/ui/cfg_features.stderr:16:  --> $DIR/cfg_features.rs:10:15
src/tools/clippy/tests/ui/cfg_features.stderr:18:LL |     #[cfg(all(features = "wrong1", any(feature = "right", features = "wrong2", feature, features)))]
src/tools/clippy/tests/ui/cfg_features.stderr:19:   |               ^^^^^^^^^^^^^^^^^^^ help: use: `feature = "wrong1"`
src/tools/clippy/tests/ui/cfg_features.stderr:21:error: feature may misspelled as features
src/tools/clippy/tests/ui/cfg_features.stderr:22:  --> $DIR/cfg_features.rs:10:59
src/tools/clippy/tests/ui/cfg_features.stderr:24:LL |     #[cfg(all(features = "wrong1", any(feature = "right", features = "wrong2", feature, features)))]
src/tools/clippy/tests/ui/cfg_features.stderr:25:   |                                                           ^^^^^^^^^^^^^^^^^^^ help: use: `feature = "wrong2"`
src/tools/clippy/tests/ui/linkedlist.rs:1:#![feature(associated_type_defaults)]
src/tools/clippy/tests/ui/floating_point_arithmetic_nostd.rs:1:#![feature(lang_items, start)]
src/tools/clippy/tests/ui/indexing_slicing_index.rs:1:#![feature(inline_const)]
src/tools/clippy/tests/ui/map_flatten_fixable.rs:9:#![feature(result_flattening)]
src/tools/clippy/tests/ui/ref_binding_to_reference.rs:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/pub_without_shorthand.fixed:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/pub_with_shorthand.fixed:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/floating_point_mul_add.fixed:2:#![feature(const_fn_floating_point_arithmetic)]
src/tools/clippy/tests/ui/async_yields_async.fixed:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/async_yields_async.fixed:3:#![feature(async_closure)]
src/tools/clippy/tests/ui/async_yields_async.rs:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/async_yields_async.rs:3:#![feature(async_closure)]
src/tools/clippy/tests/ui/allow_attributes_without_reason.rs:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/unnested_or_patterns.rs:3:#![feature(box_patterns)]
src/tools/clippy/tests/ui/overly_complex_bool_expr.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/author/blocks.rs:4:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/author/blocks.rs:5:#![feature(async_closure)]
src/tools/clippy/tests/ui/author/loop.rs:1:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/debug_assert_with_mut_call.rs:1:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/crashes/ice-5238.rs:3:#![feature(generators, generator_trait)]
src/tools/clippy/tests/ui/crashes/trivial_bounds.rs:1:#![feature(trivial_bounds)]
src/tools/clippy/tests/ui/crashes/ice-3969.rs:8:#![feature(trivial_bounds)]
src/tools/clippy/tests/ui/crashes/ice-6251.stderr:8:   = help: unsized fn params are gated as an unstable feature
src/tools/clippy/tests/ui/crashes/ice-7126.rs:1:// This test requires a feature gated const fn and will stop working in the future.
src/tools/clippy/tests/ui/crashes/ice-7126.rs:3:#![feature(const_btree_len)]
src/tools/clippy/tests/ui/crashes/ice-9459.rs:1:#![feature(unsized_fn_params)]
src/tools/clippy/tests/ui/crashes/third-party/clippy.toml:3:clippy-feature = "nightly"
src/tools/clippy/tests/ui/crashes/ice-7410.rs:5:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/crashes/ice-9238.rs:1:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/crashes/ice-9238.rs:2:#![feature(generic_const_exprs)]
src/tools/clippy/tests/ui/crashes/auxiliary/proc_macro_crash.rs:1:#![feature(repr128)]
src/tools/clippy/tests/ui/crashes/auxiliary/proc_macro_crash.rs:2:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/empty_structs_with_brackets.fixed:10:    #[cfg(feature = "thisisneverenabled")]
src/tools/clippy/tests/ui/empty_structs_with_brackets.fixed:15:struct MyCfgTupleStruct(#[cfg(feature = "thisisneverenabled")] u8);
src/tools/clippy/tests/ui/unused_unit.rs:9:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/unused_unit.rs:10:#![feature(closure_lifetime_binder)]
src/tools/clippy/tests/ui/needless_pub_self.rs:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/implicit_return.fixed:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/new_ret_no_self_overflow.rs:1:#![feature(type_alias_impl_trait)]
src/tools/clippy/tests/ui/needless_late_init.rs:3:#![feature(let_chains)]
src/tools/clippy/tests/ui/cfg_attr_rustfmt.fixed:2:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/empty_line_after_outer_attribute.rs:7:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/floating_point_rad.fixed:2:#![feature(const_fn_floating_point_arithmetic)]
src/tools/clippy/tests/ui/needless_late_init.fixed:3:#![feature(let_chains)]
src/tools/clippy/tests/ui/issue-111399.rs:1:#![feature(inherent_associated_types)]
src/tools/clippy/tests/ui/issue-111399.rs:2:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/manual_range_patterns.rs:5:#![feature(exclusive_range_pattern)]
src/tools/clippy/tests/ui/result_map_unit_fn_unfixable.rs:2:#![feature(never_type)]
src/tools/clippy/tests/ui/index_refutable_slice/if_let_slice_binding.rs:139:/// This would be a nice additional feature to have in the future, but adding it
src/tools/clippy/tests/ui/no_effect.rs:1:#![feature(fn_traits, unboxed_closures)]
src/tools/clippy/tests/ui/macro_use_imports_expect.rs:6:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/unnested_or_patterns.fixed:3:#![feature(box_patterns)]
src/tools/clippy/tests/ui/almost_complete_range.fixed:5:#![feature(exclusive_range_pattern)]
src/tools/clippy/tests/ui/almost_complete_range.fixed:6:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/same_functions_in_if_condition.rs:1:#![feature(adt_const_params)]
src/tools/clippy/tests/ui/same_functions_in_if_condition.rs:5:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/match_expr_like_matches_macro.rs:211:            #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/allow_attributes.fixed:5:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/bool_comparison.fixed:147:    if false == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.fixed:148:    if cfg!(feature = "debugging") == false {}
src/tools/clippy/tests/ui/bool_comparison.fixed:149:    if true == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.fixed:150:    if cfg!(feature = "debugging") == true {}
src/tools/clippy/tests/ui/bool_comparison.fixed:160:    if is_debug == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.fixed:161:    if cfg!(feature = "debugging") == is_debug {}
src/tools/clippy/tests/ui/bool_comparison.fixed:165:    if is_debug == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.fixed:166:    if cfg!(feature = "debugging") == is_debug {}
src/tools/clippy/tests/ui/question_mark.fixed:2:#![feature(try_blocks)]
src/tools/clippy/tests/ui/unused_async.rs:2:#![feature(async_fn_in_trait)]
src/tools/clippy/tests/ui/unused_async.rs:3:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/needless_if.fixed:3:#![feature(let_chains)]
src/tools/clippy/tests/ui/cfg_features.rs:4:    #[cfg(features = "not-really-a-feature")]
src/tools/clippy/tests/ui/cfg_features.rs:7:    #[cfg(all(feature = "right", features = "wrong"))]
src/tools/clippy/tests/ui/cfg_features.rs:10:    #[cfg(all(features = "wrong1", any(feature = "right", features = "wrong2", feature, features)))]
src/tools/clippy/tests/ui/let_unit.rs:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/zero_ptr_no_std.fixed:3:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/macro_use_imports.fixed:7:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/cast.rs:1:#![feature(repr128)]
src/tools/clippy/tests/ui/cast.rs:2:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/strlen_on_c_strings.rs:5:#![feature(rustc_private)]
src/tools/clippy/tests/ui/cast_alignment.rs:3:#![feature(rustc_private)]
src/tools/clippy/tests/ui/cast_alignment.rs:4:#![feature(core_intrinsics)]
src/tools/clippy/tests/ui/needless_borrowed_ref.rs:119:        // lifetime mismatch error if there is no '&ref' before `feature(nll)` stabilization in 1.63
src/tools/clippy/tests/ui/needless_borrowed_ref.fixed:119:        // lifetime mismatch error if there is no '&ref' before `feature(nll)` stabilization in 1.63
src/tools/clippy/tests/ui/map_flatten.rs:2:#![feature(result_flattening)]
src/tools/clippy/tests/ui/single_range_in_vec_init.rs:4:#![feature(generic_arg_infer)]
src/tools/clippy/tests/ui/needless_raw_string_hashes.rs:4:#![feature(c_str_literals)]
src/tools/clippy/tests/ui/match_expr_like_matches_macro.fixed:170:            #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/empty_structs_with_brackets.rs:10:    #[cfg(feature = "thisisneverenabled")]
src/tools/clippy/tests/ui/empty_structs_with_brackets.rs:15:struct MyCfgTupleStruct(#[cfg(feature = "thisisneverenabled")] u8);
src/tools/clippy/tests/ui/question_mark.rs:2:#![feature(try_blocks)]
src/tools/clippy/tests/ui/unneeded_wildcard_pattern.rs:3:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/explicit_auto_deref.fixed:3:#![feature(closure_lifetime_binder)]
src/tools/clippy/tests/ui/floating_point_rad.rs:2:#![feature(const_fn_floating_point_arithmetic)]
src/tools/clippy/tests/ui/unneeded_wildcard_pattern.fixed:3:#![feature(stmt_expr_attributes)]
src/tools/clippy/tests/ui/missing_spin_loop_no_std.rs:3:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/redundant_closure_call_fixable.rs:3:#![feature(async_closure)]
src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.rs:2:#![allow(incomplete_features, clippy::let_and_return)]
src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.rs:3:#![feature(const_mut_refs)]
src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.rs:4:#![feature(const_trait_impl)]
src/tools/clippy/tests/ui/missing_const_for_fn/cant_be_const.rs:9:#![feature(start)]
src/tools/clippy/tests/ui/missing_const_for_fn/auxiliary/helper.rs:3:#![feature(staged_api)]
src/tools/clippy/tests/ui/missing_const_for_fn/auxiliary/helper.rs:4:#![stable(feature = "1", since = "1.0.0")]
src/tools/clippy/tests/ui/missing_const_for_fn/auxiliary/helper.rs:6:#[stable(feature = "1", since = "1.0.0")]
src/tools/clippy/tests/ui/missing_const_for_fn/auxiliary/helper.rs:7:#[rustc_const_unstable(feature = "foo", issue = "none")]
src/tools/clippy/tests/ui/pub_without_shorthand.rs:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/floating_point_abs.fixed:2:#![feature(const_fn_floating_point_arithmetic)]
src/tools/clippy/tests/ui/borrow_as_ptr_no_std.rs:3:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/empty_enum.rs:4:#![feature(never_type)]
src/tools/clippy/tests/ui/needless_doc_main.rs:75:/// #![feature(test)]
src/tools/clippy/tests/ui/strlen_on_c_strings.fixed:5:#![feature(rustc_private)]
src/tools/clippy/tests/ui/non_send_fields_in_send_ty.rs:3:#![feature(extern_types)]
src/tools/clippy/tests/ui/floating_point_abs.rs:2:#![feature(const_fn_floating_point_arithmetic)]
src/tools/clippy/tests/ui/needless_borrow.fixed:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/let_unit.fixed:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/zero_ptr_no_std.rs:3:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/infallible_destructuring_match.fixed:2:#![feature(exhaustive_patterns, never_type)]
src/tools/clippy/tests/ui/default_numeric_fallback_i32.fixed:4:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/nonminimal_bool.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/borrow_as_ptr_no_std.fixed:3:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/never_loop.rs:1:#![feature(inline_const)]
src/tools/clippy/tests/ui/panicking_macros.rs:2:#![feature(inline_const)]
src/tools/clippy/tests/ui/double_parens.rs:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/empty_loop_no_std.rs:5:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/checked_unwrap/simple_conditionals.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/used_underscore_binding.rs:2:#![feature(rustc_private)]
src/tools/clippy/tests/ui/same_name_method.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/expect_tool_lint_rfc_2383.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/doc/doc-fixable.rs:4:#![allow(dead_code, incomplete_features)]
src/tools/clippy/tests/ui/doc/doc-fixable.rs:6:#![feature(custom_inner_attributes, generic_const_exprs, const_option)]
src/tools/clippy/tests/ui/doc/doc-fixable.rs:169:#[cfg_attr(feature = "a", doc = " ```")]
src/tools/clippy/tests/ui/doc/doc-fixable.rs:170:#[cfg_attr(not(feature = "a"), doc = " ```ignore")]
src/tools/clippy/tests/ui/doc/doc-fixable.fixed:4:#![allow(dead_code, incomplete_features)]
src/tools/clippy/tests/ui/doc/doc-fixable.fixed:6:#![feature(custom_inner_attributes, generic_const_exprs, const_option)]
src/tools/clippy/tests/ui/doc/doc-fixable.fixed:169:#[cfg_attr(feature = "a", doc = " ```")]
src/tools/clippy/tests/ui/doc/doc-fixable.fixed:170:#[cfg_attr(not(feature = "a"), doc = " ```ignore")]
src/tools/clippy/tests/ui/needless_raw_string.rs:4:#![feature(c_str_literals)]
src/tools/clippy/tests/ui/single_match.rs:246:        #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/useless_attribute.stderr:12:LL | #[cfg_attr(feature = "cargo-clippy", allow(dead_code))]
src/tools/clippy/tests/ui/useless_attribute.stderr:13:   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = "cargo-clippy", allow(dead_code)`
src/tools/clippy/tests/ui/pub_with_shorthand.rs:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/boxed_local.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/bool_to_int_with_if.fixed:3:#![feature(let_chains, inline_const)]
src/tools/clippy/tests/ui/explicit_auto_deref.rs:3:#![feature(closure_lifetime_binder)]
src/tools/clippy/tests/ui/useless_attribute.fixed:7:#![feature(rustc_private)]
src/tools/clippy/tests/ui/useless_attribute.fixed:10:#![cfg_attr(feature = "cargo-clippy", allow(dead_code))]
src/tools/clippy/tests/ui/macro_use_imports.rs:7:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/from_over_into.rs:3:#![feature(type_alias_impl_trait)]
src/tools/clippy/tests/ui/empty_line_after_doc_comments.rs:7:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/def_id_nocore.rs:3:#![feature(no_core, lang_items, start)]
src/tools/clippy/tests/ui/unused_unit.fixed:9:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/unused_unit.fixed:10:#![feature(closure_lifetime_binder)]
src/tools/clippy/tests/ui/needless_return.rs:3:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/needless_return.rs:4:#![feature(yeet_expr)]
src/tools/clippy/tests/ui/crate_level_checks/no_std_swap.rs:2:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/crate_level_checks/entrypoint_recursion.rs:3:#![feature(rustc_attrs)]
src/tools/clippy/tests/ui/crate_level_checks/no_std_main_recursion.rs:4:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/needless_borrow.rs:2:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/default_numeric_fallback_i32.rs:4:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/single_match.fixed:195:        #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/match_same_arms_non_exhaustive.rs:1:#![feature(non_exhaustive_omitted_patterns_lint)]
src/tools/clippy/tests/ui/must_use_candidates.fixed:2:#![feature(never_type)]
src/tools/clippy/tests/ui/needless_if.rs:3:#![feature(let_chains)]
src/tools/clippy/tests/ui/manual_try_fold.rs:4:#![feature(try_trait_v2)]
src/tools/clippy/tests/ui/floating_point_mul_add.rs:2:#![feature(const_fn_floating_point_arithmetic)]
src/tools/clippy/tests/ui/match_overlapping_arm.rs:1:#![feature(exclusive_range_pattern)]
src/tools/clippy/tests/ui/box_default_no_std.rs:1:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/bool_to_int_with_if.rs:3:#![feature(let_chains, inline_const)]
src/tools/clippy/tests/ui/large_stack_frames.rs:1:#![allow(unused, incomplete_features)]
src/tools/clippy/tests/ui/large_stack_frames.rs:3:#![feature(unsized_locals)]
src/tools/clippy/tests/ui/unit_return_expecting_ord.rs:5:#![feature(is_sorted)]
src/tools/clippy/tests/ui/infallible_destructuring_match.rs:2:#![feature(exhaustive_patterns, never_type)]
src/tools/clippy/tests/ui/bool_comparison.rs:147:    if false == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.rs:148:    if cfg!(feature = "debugging") == false {}
src/tools/clippy/tests/ui/bool_comparison.rs:149:    if true == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.rs:150:    if cfg!(feature = "debugging") == true {}
src/tools/clippy/tests/ui/bool_comparison.rs:160:    if is_debug == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.rs:161:    if cfg!(feature = "debugging") == is_debug {}
src/tools/clippy/tests/ui/bool_comparison.rs:165:    if is_debug == cfg!(feature = "debugging") {}
src/tools/clippy/tests/ui/bool_comparison.rs:166:    if cfg!(feature = "debugging") == is_debug {}
src/tools/clippy/tests/ui/missing_doc_impl.rs:5:#![feature(associated_type_defaults)]
src/tools/clippy/tests/ui/needless_raw_string.fixed:4:#![feature(c_str_literals)]
src/tools/clippy/tests/ui/useless_attribute.rs:7:#![feature(rustc_private)]
src/tools/clippy/tests/ui/useless_attribute.rs:10:#[cfg_attr(feature = "cargo-clippy", allow(dead_code))]
src/tools/clippy/tests/ui/manual_range_patterns.fixed:5:#![feature(exclusive_range_pattern)]
src/tools/clippy/tests/ui/missing_spin_loop_no_std.fixed:3:#![feature(lang_items, start, libc)]
src/tools/clippy/tests/ui/match_as_ref.rs:49:        #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/ptr_arg.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui/needless_pub_self.fixed:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui/from_over_into.fixed:3:#![feature(type_alias_impl_trait)]
src/tools/clippy/tests/ui/type_complexity.rs:3:#![feature(associated_type_defaults)]
src/tools/clippy/tests/ui/match_bool.rs:56:        #[cfg(feature = "foo")]
src/tools/clippy/tests/ui/match_wild_err_arm.rs:1:#![feature(exclusive_range_pattern)]
src/tools/clippy/tests/ui/manual_float_methods.rs:4:#![feature(inline_const)]
src/tools/clippy/tests/ui/auxiliary/proc_macro_derive.rs:1:#![feature(repr128, proc_macro_quote)]
src/tools/clippy/tests/ui/auxiliary/proc_macro_derive.rs:2:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/auxiliary/proc_macro_attr.rs:1:#![feature(repr128, proc_macro_hygiene, proc_macro_quote, box_patterns)]
src/tools/clippy/tests/ui/auxiliary/proc_macro_attr.rs:2:#![allow(incomplete_features)]
src/tools/clippy/tests/ui/auxiliary/proc_macros.rs:1:#![feature(let_chains)]
src/tools/clippy/tests/ui/auxiliary/proc_macros.rs:2:#![feature(proc_macro_span)]
src/tools/clippy/tests/ui-toml/good_toml_no_false_negatives/clippy.toml:3:clippy-feature = "nightly"
src/tools/clippy/tests/ui-toml/conf_deprecated_key/clippy.toml:7:clippy-feature = "nightly"
src/tools/clippy/tests/ui-toml/undocumented_unsafe_blocks/undocumented_unsafe_blocks.rs:5:#![feature(lint_reasons)]
src/tools/clippy/tests/ui-toml/toml_unknown_key/clippy.toml:8:clippy-feature = "nightly"
src/tools/clippy/tests/ui-toml/suppress_lint_in_const/test.rs:1:#![feature(inline_const)]
src/tools/clippy/tests/ui-toml/strict_non_send_fields_in_send_ty/test.rs:2:#![feature(extern_types)]
src/tools/clippy/tests/ui-toml/excessive_nesting/excessive_nesting.rs:3:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui-toml/excessive_nesting/auxiliary/proc_macros.rs:3:#![feature(let_chains)]
src/tools/clippy/tests/ui-toml/excessive_nesting/auxiliary/proc_macros.rs:4:#![feature(proc_macro_span)]
src/tools/clippy/tests/check-fmt.rs:1:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/dogfood.rs:6:#![feature(lazy_cell)]
src/tools/clippy/tests/dogfood.rs:7:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/dogfood.rs:48:#[cfg(feature = "internal")]
src/tools/clippy/tests/dogfood.rs:95:        .arg("--all-features");
src/tools/clippy/tests/dogfood.rs:106:    if cfg!(feature = "internal") {
src/tools/clippy/tests/dogfood.rs:107:        // internal lints only exist if we build with the internal feature
src/tools/clippy/tests/lint_message_convention.rs:1:#![feature(lazy_cell)]
src/tools/clippy/tests/lint_message_convention.rs:2:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/versioncheck.rs:1:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/missing-test-files.rs:1:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/missing-test-files.rs:4:#![feature(path_file_prefix)]
src/tools/clippy/tests/workspace.rs:1:#![feature(lazy_cell)]
src/tools/clippy/tests/workspace.rs:79:        .args(["--cfg", r#"feature="primary_package_test""#])
src/tools/clippy/tests/workspace.rs:98:            .args(["--cfg", r#"feature="primary_package_test""#])
src/tools/clippy/tests/workspace_test/path_dep/src/lib.rs:3:#[cfg(feature = "primary_package_test")]
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.toml:5:name = "feature_name"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.toml:11:[features]
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:1:error: the "no-" prefix in the feature name "no-qaq" is negative
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:3:  = help: consider renaming the feature to "qaq", but make sure the feature adds functionality
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:4:  = note: `-D clippy::negative-feature-names` implied by `-D warnings`
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:6:error: the "no_" prefix in the feature name "no_qaq" is negative
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:8:  = help: consider renaming the feature to "qaq", but make sure the feature adds functionality
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:10:error: the "not-" prefix in the feature name "not-orz" is negative
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:12:  = help: consider renaming the feature to "orz", but make sure the feature adds functionality
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:14:error: the "not_" prefix in the feature name "not_orz" is negative
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:16:  = help: consider renaming the feature to "orz", but make sure the feature adds functionality
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:18:error: the "-support" suffix in the feature name "qvq-support" is redundant
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:20:  = help: consider renaming the feature to "qvq"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:21:  = note: `-D clippy::redundant-feature-names` implied by `-D warnings`
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:23:error: the "_support" suffix in the feature name "qvq_support" is redundant
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:25:  = help: consider renaming the feature to "qvq"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:27:error: the "use-" prefix in the feature name "use-qwq" is redundant
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:29:  = help: consider renaming the feature to "qwq"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:31:error: the "use_" prefix in the feature name "use_qwq" is redundant
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:33:  = help: consider renaming the feature to "qwq"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:35:error: the "with-" prefix in the feature name "with-owo" is redundant
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:37:  = help: consider renaming the feature to "owo"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:39:error: the "with_" prefix in the feature name "with_owo" is redundant
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:41:  = help: consider renaming the feature to "owo"
src/tools/clippy/tests/ui-cargo/feature_name/fail/Cargo.stderr:43:error: could not compile `feature_name` (bin "feature_name") due to 10 previous errors
src/tools/clippy/tests/ui-cargo/feature_name/fail/src/main.rs:1://@compile-flags: --crate-name=feature_name
src/tools/clippy/tests/ui-cargo/feature_name/fail/src/main.rs:2:#![warn(clippy::redundant_feature_names)]
src/tools/clippy/tests/ui-cargo/feature_name/fail/src/main.rs:3:#![warn(clippy::negative_feature_names)]
src/tools/clippy/tests/ui-cargo/feature_name/pass/Cargo.toml:5:name = "feature_name"
src/tools/clippy/tests/ui-cargo/feature_name/pass/src/main.rs:1://@compile-flags: --crate-name=feature_name
src/tools/clippy/tests/ui-cargo/feature_name/pass/src/main.rs:2:#![warn(clippy::redundant_feature_names)]
src/tools/clippy/tests/ui-cargo/feature_name/pass/src/main.rs:3:#![warn(clippy::negative_feature_names)]
src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.rs:1:#![feature(lint_reasons)]
src/tools/clippy/tests/ui-cargo/cargo_rust_version/pass_file_attr/src/main.rs:1:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/ui-cargo/cargo_rust_version/fail_file_attr/src/main.rs:4:#![feature(custom_inner_attributes)]
src/tools/clippy/tests/compile-test.rs:1:#![feature(test)] // compiletest_rs requires this attribute
src/tools/clippy/tests/compile-test.rs:2:#![feature(lazy_cell)]
src/tools/clippy/tests/compile-test.rs:3:#![feature(is_sorted)]
src/tools/clippy/tests/compile-test.rs:4:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/compile-test.rs:111:const RUN_INTERNAL_TESTS: bool = cfg!(feature = "internal");
src/tools/clippy/tests/compile-test.rs:207:    // only run internal tests with the internal-tests feature
src/tools/clippy/tests/integration.rs:3://! `env INTEGRATION=rust-lang/log cargo test --test integration --features=integration`
src/tools/clippy/tests/integration.rs:10:#![cfg(feature = "integration")]
src/tools/clippy/tests/integration.rs:11:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/tests/integration.rs:23:#[cfg_attr(feature = "integration", test)]
src/tools/clippy/tests/integration.rs:57:            "--all-features",
src/tools/clippy/README.md:22:| `clippy::restriction` | lints which prevent the use of language and library features[^restrict]             | allow         |
src/tools/clippy/README.md:145:  # in order to also check tests and non-default crate features, use
src/tools/clippy/README.md:146:  - cargo clippy --all-targets --all-features -- -D warnings
src/tools/clippy/README.md:240:Projects that intend to support old versions of Rust can disable lints pertaining to newer features by
src/tools/clippy/README.md:258:#![feature(custom_inner_attributes)]
src/tools/clippy/README.md:269:Note: `custom_inner_attributes` is an unstable feature, so it has to be enabled explicitly.
src/tools/clippy/.cargo/config.toml:7:collect-metadata = "test --test dogfood --features internal -- run_metadata_collection_lint --ignored"
src/tools/clippy/lintcheck/Cargo.toml:16:clap = { version = "4.1.8", features = ["derive", "env"] }
src/tools/clippy/lintcheck/Cargo.toml:22:serde = { version = "1.0", features = ["derive"] }
src/tools/clippy/lintcheck/Cargo.toml:29:[features]
src/tools/clippy/clippy_lints/Cargo.toml:12:arrayvec = { version = "0.7", default-features = false }
src/tools/clippy/clippy_lints/Cargo.toml:18:pulldown-cmark = { version = "0.9", default-features = false }
src/tools/clippy/clippy_lints/Cargo.toml:21:serde = { version = "1.0", features = ["derive"] }
src/tools/clippy/clippy_lints/Cargo.toml:27:unicode-script = { version = "0.5", default-features = false }
src/tools/clippy/clippy_lints/Cargo.toml:32:[features]
src/tools/clippy/clippy_lints/Cargo.toml:38:# This crate uses #[feature(rustc_private)]
src/tools/clippy/clippy_lints/src/asm_syntax.rs:66:    /// # #![feature(asm)]
src/tools/clippy/clippy_lints/src/asm_syntax.rs:75:    /// # #![feature(asm)]
src/tools/clippy/clippy_lints/src/asm_syntax.rs:107:    /// # #![feature(asm)]
src/tools/clippy/clippy_lints/src/asm_syntax.rs:116:    /// # #![feature(asm)]
src/tools/clippy/clippy_lints/src/allow_attributes.rs:15:    /// on nightly. It can be enabled by adding `#![feature(lint_reasons)]` to
src/tools/clippy/clippy_lints/src/allow_attributes.rs:37:    /// #![feature(lint_reasons)]
src/tools/clippy/clippy_lints/src/allow_attributes.rs:53:    // Separate each crate's features.
src/tools/clippy/clippy_lints/src/allow_attributes.rs:57:            if cx.tcx.features().lint_reasons;
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:6:use super::{NEGATIVE_FEATURE_NAMES, REDUNDANT_FEATURE_NAMES};
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:13:        let mut features: Vec<&String> = package.features.keys().collect();
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:14:        features.sort();
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:15:        for feature in features {
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:17:                let i = PREFIXES.partition_point(|prefix| prefix < &feature.as_str());
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:18:                if i > 0 && feature.starts_with(PREFIXES[i - 1]) {
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:25:                lint(cx, feature, prefix, true);
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:30:                    suffix.bytes().rev().cmp(feature.bytes().rev()) == std::cmp::Ordering::Less
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:32:                if i > 0 && feature.ends_with(SUFFIXES[i - 1]) {
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:39:                lint(cx, feature, suffix, false);
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:49:fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:54:            NEGATIVE_FEATURE_NAMES
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:56:            REDUNDANT_FEATURE_NAMES
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:60:            "the \"{substring}\" {} in the feature name \"{feature}\" is {}",
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:66:            "consider renaming the feature to \"{}\"{}",
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:68:                feature.strip_prefix(substring)
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:70:                feature.strip_suffix(substring)
src/tools/clippy/clippy_lints/src/cargo/feature_name.rs:74:                ", but make sure the feature adds functionality"
src/tools/clippy/clippy_lints/src/cargo/mod.rs:2:mod feature_name;
src/tools/clippy/clippy_lints/src/cargo/mod.rs:58:    /// Checks for feature names with prefix `use-`, `with-` or suffix `-support`
src/tools/clippy/clippy_lints/src/cargo/mod.rs:65:    /// # The `Cargo.toml` with feature name redundancy
src/tools/clippy/clippy_lints/src/cargo/mod.rs:66:    /// [features]
src/tools/clippy/clippy_lints/src/cargo/mod.rs:75:    /// [features]
src/tools/clippy/clippy_lints/src/cargo/mod.rs:83:    pub REDUNDANT_FEATURE_NAMES,
src/tools/clippy/clippy_lints/src/cargo/mod.rs:85:    "usage of a redundant feature name"
src/tools/clippy/clippy_lints/src/cargo/mod.rs:90:    /// Checks for negative feature names with prefix `no-` or `not-`
src/tools/clippy/clippy_lints/src/cargo/mod.rs:93:    /// Features are supposed to be additive, and negatively-named features violate it.
src/tools/clippy/clippy_lints/src/cargo/mod.rs:97:    /// # The `Cargo.toml` with negative feature names
src/tools/clippy/clippy_lints/src/cargo/mod.rs:98:    /// [features]
src/tools/clippy/clippy_lints/src/cargo/mod.rs:106:    /// [features]
src/tools/clippy/clippy_lints/src/cargo/mod.rs:113:    pub NEGATIVE_FEATURE_NAMES,
src/tools/clippy/clippy_lints/src/cargo/mod.rs:115:    "usage of a negative feature name"
src/tools/clippy/clippy_lints/src/cargo/mod.rs:171:    REDUNDANT_FEATURE_NAMES,
src/tools/clippy/clippy_lints/src/cargo/mod.rs:172:    NEGATIVE_FEATURE_NAMES,
src/tools/clippy/clippy_lints/src/cargo/mod.rs:181:            REDUNDANT_FEATURE_NAMES,
src/tools/clippy/clippy_lints/src/cargo/mod.rs:182:            NEGATIVE_FEATURE_NAMES,
src/tools/clippy/clippy_lints/src/cargo/mod.rs:194:                    feature_name::check(cx, &metadata);
src/tools/clippy/clippy_lints/src/lib.rs:1:#![feature(array_windows)]
src/tools/clippy/clippy_lints/src/lib.rs:2:#![feature(binary_heap_into_iter_sorted)]
src/tools/clippy/clippy_lints/src/lib.rs:3:#![feature(box_patterns)]
src/tools/clippy/clippy_lints/src/lib.rs:4:#![feature(if_let_guard)]
src/tools/clippy/clippy_lints/src/lib.rs:5:#![feature(iter_intersperse)]
src/tools/clippy/clippy_lints/src/lib.rs:6:#![feature(let_chains)]
src/tools/clippy/clippy_lints/src/lib.rs:7:#![feature(lint_reasons)]
src/tools/clippy/clippy_lints/src/lib.rs:8:#![feature(never_type)]
src/tools/clippy/clippy_lints/src/lib.rs:9:#![feature(rustc_private)]
src/tools/clippy/clippy_lints/src/lib.rs:10:#![feature(stmt_expr_attributes)]
src/tools/clippy/clippy_lints/src/lib.rs:12:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/clippy_lints/src/lib.rs:59:#[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/lib.rs:61:#[cfg_attr(feature = "internal", allow(clippy::missing_clippy_version_attribute))]
src/tools/clippy/clippy_lints/src/lib.rs:434:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/lib.rs:451:        #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/lib.rs:467:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/lib.rs:489:            #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/lib.rs:553:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/lib.rs:562:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:6:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:8:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:10:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:12:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:14:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:16:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:18:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:20:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:22:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:24:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:26:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:28:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:30:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:32:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:34:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:36:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:38:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/declared_lints.rs:73:    crate::cargo::NEGATIVE_FEATURE_NAMES_INFO,
src/tools/clippy/clippy_lints/src/declared_lints.rs:74:    crate::cargo::REDUNDANT_FEATURE_NAMES_INFO,
src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs:106:            if !cx.tcx.features().non_exhaustive_omitted_patterns_lint
src/tools/clippy/clippy_lints/src/matches/mod.rs:567:    /// Note: Does not lint on wildcards if the `non_exhaustive_omitted_patterns_lint` feature is
src/tools/clippy/clippy_lints/src/matches/mod.rs:1116:    //|    #[cfg(feature = "enabled")]
src/tools/clippy/clippy_lints/src/matches/mod.rs:1122:    //|    #[cfg(feature = "disabled")]
src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs:4://! This module and therefore the entire lint is guarded by a feature flag called `internal`
src/tools/clippy/clippy_lints/src/utils/mod.rs:5:#[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/utils/mod.rs:7:#[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/utils/mod.rs:15:#[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/utils/mod.rs:54:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/utils/mod.rs:72:    #[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/utils/mod.rs:78:#[cfg(feature = "internal")]
src/tools/clippy/clippy_lints/src/empty_enum.rs:32:    /// #![feature(never_type)]
src/tools/clippy/clippy_lints/src/empty_enum.rs:46:        // Only suggest the `never_type` if the feature is enabled
src/tools/clippy/clippy_lints/src/empty_enum.rs:47:        if !cx.tcx.features().never_type {
src/tools/clippy/clippy_lints/src/attrs.rs:317:    /// (This requires the `lint_reasons` feature)
src/tools/clippy/clippy_lints/src/attrs.rs:325:    /// #![feature(lint_reasons)]
src/tools/clippy/clippy_lints/src/attrs.rs:332:    /// #![feature(lint_reasons)]
src/tools/clippy/clippy_lints/src/attrs.rs:368:    /// Checks for `#[cfg(features = "...")]` and suggests to replace it with
src/tools/clippy/clippy_lints/src/attrs.rs:369:    /// `#[cfg(feature = "...")]`.
src/tools/clippy/clippy_lints/src/attrs.rs:372:    /// Misspelling `feature` as `features` can be sometimes hard to spot. It
src/tools/clippy/clippy_lints/src/attrs.rs:377:    /// #[cfg(features = "some-feature")]
src/tools/clippy/clippy_lints/src/attrs.rs:383:    /// #[cfg(feature = "some-feature")]
src/tools/clippy/clippy_lints/src/attrs.rs:571:    // Check for the feature
src/tools/clippy/clippy_lints/src/attrs.rs:572:    if !cx.tcx.features().lint_reasons {
src/tools/clippy/clippy_lints/src/attrs.rs:778:        if let Some(feature_item) = items[0].meta_item();
src/tools/clippy/clippy_lints/src/attrs.rs:779:        if feature_item.has_name(sym::rustfmt);
src/tools/clippy/clippy_lints/src/attrs.rs:845:            if meta.has_name(sym!(features)) && let Some(val) = meta.value_str() {
src/tools/clippy/clippy_lints/src/attrs.rs:850:                    "feature may misspelled as features",
src/tools/clippy/clippy_lints/src/attrs.rs:852:                    format!("feature = \"{val}\""),
src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs:25:    /// Const functions are currently still being worked on, with some features only being available
src/tools/clippy/clippy_lints/src/manual_float_methods.rs:86:            && (!cx.param_env.is_const() || cx.tcx.features().active(sym!(const_float_classify)))
src/tools/clippy/clippy_dev/Cargo.toml:15:[features]
src/tools/clippy/clippy_dev/Cargo.toml:19:# This package uses #[feature(rustc_private)]
src/tools/clippy/clippy_dev/src/dogfood.rs:12:        .args(["--features", "internal"])
src/tools/clippy/clippy_dev/src/lib.rs:1:#![feature(lazy_cell)]
src/tools/clippy/clippy_dev/src/lib.rs:2:#![feature(let_chains)]
src/tools/clippy/clippy_dev/src/lib.rs:3:#![feature(rustc_private)]
src/tools/clippy/clippy_dev/src/lib.rs:4:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/clippy_dev/src/main.rs:1:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/clippy_dev/src/update_lints.rs:672:            output.push_str("    #[cfg(feature = \"internal\")]\n");
src/tools/clippy/clippy_dev/src/new_lint.rs:71:            an early pass, as they lack many features and utilities"
src/tools/clippy/.github/workflows/clippy.yml:53:      run: cargo build --tests --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy.yml:56:      run: cargo test --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy.yml:59:      run: cargo test --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy.yml:63:      run: cargo test --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy.yml:67:      run: cargo test --features deny-warnings
src/tools/clippy/.github/workflows/clippy.yml:71:      run: cargo test --features deny-warnings
src/tools/clippy/.github/workflows/clippy_bors.yml:109:      run: cargo build --tests --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy_bors.yml:113:      run: cargo test --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy_bors.yml:117:      run: cargo test --features deny-warnings,internal -- --skip dogfood
src/tools/clippy/.github/workflows/clippy_bors.yml:120:      run: cargo test --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy_bors.yml:124:      run: cargo test --features deny-warnings,internal
src/tools/clippy/.github/workflows/clippy_bors.yml:128:      run: cargo test --features deny-warnings
src/tools/clippy/.github/workflows/clippy_bors.yml:132:      run: cargo test --features deny-warnings
src/tools/clippy/.github/workflows/clippy_bors.yml:184:      run: cargo test --test integration --features integration --no-run
src/tools/clippy/.github/workflows/clippy_dev.yml:31:      run: cargo build --features deny-warnings
src/tools/clippy/book/src/continuous_integration/travis.md:16:  # in order to also check tests and non-default crate features, use
src/tools/clippy/book/src/continuous_integration/travis.md:17:  - cargo clippy --all-targets --all-features -- -D warnings
src/tools/clippy/book/src/continuous_integration/github_actions.md:20:        run: cargo clippy --all-targets --all-features
src/tools/clippy/book/src/development/adding_lints.md:435:required Rust feature. If multiple features are required, just use the one with
src/tools/clippy/book/src/development/adding_lints.md:438:First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`].
src/tools/clippy/book/src/development/adding_lints.md:465:The project's MSRV can then be matched against the feature MSRV in the LintPass
src/tools/clippy/book/src/development/adding_lints.md:545:`#![feature(stmt_expr_attributes)]`.
src/tools/clippy/book/src/development/infrastructure/sync.md:17:every feature in Clippy is available for 2 weeks in nightly, before it can get
src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md:1:- Feature Name: syntax-tree-patterns
src/tools/clippy/book/src/configuration.md:84:Projects that intend to support old versions of Rust can disable lints pertaining to newer features by specifying the
src/tools/clippy/book/src/configuration.md:94:#![feature(custom_inner_attributes)]
src/tools/clippy/book/src/configuration.md:105:Note: `custom_inner_attributes` is an unstable feature, so it has to be enabled explicitly.
src/tools/clippy/book/src/configuration.md:116:`cargo-clippy` feature is not set. You may need to provide a stub so that the code compiles:
src/tools/clippy/book/src/configuration.md:119:#[cfg(not(feature = "cargo-clippy"))]
src/tools/clippy/book/src/configuration.md:122:#[cfg(feature = "cargo-clippy")]
src/tools/clippy/book/src/configuration.md:128:This feature is not actually part of your crate, so specifying `--all-features` to other tools, e.g. `cargo test
src/tools/clippy/book/src/configuration.md:129:--all-features`, will not disable it.
src/tools/clippy/src/driver.rs:1:#![feature(rustc_private)]
src/tools/clippy/src/driver.rs:2:#![feature(let_chains)]
src/tools/clippy/src/driver.rs:3:#![feature(lazy_cell)]
src/tools/clippy/src/driver.rs:4:#![feature(lint_reasons)]
src/tools/clippy/src/driver.rs:5:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/clippy/src/driver.rs:274:            .chain(vec!["--cfg".into(), r#"feature="cargo-clippy""#.into()])
src/tools/clippy/src/main.rs:1:#![cfg_attr(feature = "deny-warnings", deny(warnings))]
src/tools/unstable-book-gen/Cargo.toml:10:# not actually needed but required for now to unify the feature selection of
src/tools/unstable-book-gen/src/stub-no-issue.md:3:This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.
src/tools/unstable-book-gen/src/SUMMARY.md:5:- [Language features](language-features.md)
src/tools/unstable-book-gen/src/SUMMARY.md:6:{language_features}
src/tools/unstable-book-gen/src/SUMMARY.md:7:- [Library Features](library-features.md)
src/tools/unstable-book-gen/src/SUMMARY.md:8:{library_features}
src/tools/unstable-book-gen/src/stub-issue.md:3:The tracking issue for this feature is: [#{issue}]
src/tools/unstable-book-gen/src/main.rs:7:use tidy::features::{collect_lang_features, collect_lib_features, Features};
src/tools/unstable-book-gen/src/main.rs:10:    collect_unstable_book_section_file_names, collect_unstable_feature_names, LANG_FEATURES_DIR,
src/tools/unstable-book-gen/src/main.rs:11:    LIB_FEATURES_DIR, PATH_STR,
src/tools/unstable-book-gen/src/main.rs:30:fn generate_summary(path: &Path, lang_features: &Features, lib_features: &Features) {
src/tools/unstable-book-gen/src/main.rs:35:    let unstable_lang_features = collect_unstable_feature_names(&lang_features);
src/tools/unstable-book-gen/src/main.rs:36:    let unstable_lib_features = collect_unstable_feature_names(&lib_features);
src/tools/unstable-book-gen/src/main.rs:38:    let lang_features_str = set_to_summary_str(&unstable_lang_features, "language-features");
src/tools/unstable-book-gen/src/main.rs:39:    let lib_features_str = set_to_summary_str(&unstable_lib_features, "library-features");
src/tools/unstable-book-gen/src/main.rs:45:        language_features = lang_features_str,
src/tools/unstable-book-gen/src/main.rs:46:        library_features = lib_features_str
src/tools/unstable-book-gen/src/main.rs:51:fn generate_unstable_book_files(src: &Path, out: &Path, features: &Features) {
src/tools/unstable-book-gen/src/main.rs:52:    let unstable_features = collect_unstable_feature_names(features);
src/tools/unstable-book-gen/src/main.rs:55:    for feature_name in &unstable_features - &unstable_section_file_names {
src/tools/unstable-book-gen/src/main.rs:56:        let feature_name_underscore = feature_name.replace('-', "_");
src/tools/unstable-book-gen/src/main.rs:57:        let file_name = format!("{feature_name}.md");
src/tools/unstable-book-gen/src/main.rs:59:        let feature = &features[&feature_name_underscore];
src/tools/unstable-book-gen/src/main.rs:61:        if let Some(issue) = feature.tracking_issue {
src/tools/unstable-book-gen/src/main.rs:62:            generate_stub_issue(&out_file_path, &feature_name_underscore, issue.get());
src/tools/unstable-book-gen/src/main.rs:64:            generate_stub_no_issue(&out_file_path, &feature_name_underscore);
src/tools/unstable-book-gen/src/main.rs:93:    let lang_features = collect_lang_features(compiler_path, &mut false);
src/tools/unstable-book-gen/src/main.rs:94:    let lib_features = collect_lib_features(library_path)
src/tools/unstable-book-gen/src/main.rs:96:        .filter(|&(ref name, _)| !lang_features.contains_key(name))
src/tools/unstable-book-gen/src/main.rs:104:        &doc_src_path.join(LANG_FEATURES_DIR),
src/tools/unstable-book-gen/src/main.rs:105:        &dest_path.join(LANG_FEATURES_DIR),
src/tools/unstable-book-gen/src/main.rs:106:        &lang_features,
src/tools/unstable-book-gen/src/main.rs:109:        &doc_src_path.join(LIB_FEATURES_DIR),
src/tools/unstable-book-gen/src/main.rs:110:        &dest_path.join(LIB_FEATURES_DIR),
src/tools/unstable-book-gen/src/main.rs:111:        &lib_features,
src/tools/unstable-book-gen/src/main.rs:116:    generate_summary(&dest_path, &lang_features, &lib_features);
src/tools/unicode-table-generator/src/raw_emitter.rs:100:            r#"#[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]"#
src/tools/unicode-table-generator/src/range_search.rs:1:#[rustc_const_unstable(feature = "const_unicode_case_lookup", issue = "101400")]
src/tools/unicode-table-generator/src/range_search.rs:20:    // feature stabilizes.
src/tools/unicode-table-generator/src/range_search.rs:28:    // feature stabilizes.
src/tools/unicode-table-generator/src/main.rs:341:    s.push_str("#![allow(incomplete_features, unused)]\n");
src/tools/unicode-table-generator/src/main.rs:342:    s.push_str("#![feature(const_generics)]\n\n");
src/tools/cargotest/main.rs:12:    features: Option<&'static [&'static str]>,
src/tools/cargotest/main.rs:25:        features: None,
src/tools/cargotest/main.rs:35:        features: None,
src/tools/cargotest/main.rs:45:        features: None,
src/tools/cargotest/main.rs:55:        features: None,
src/tools/cargotest/main.rs:81:        features: None,
src/tools/cargotest/main.rs:94:        features: Some(&["sqlite", "libsqlite3-sys/bundled"]),
src/tools/cargotest/main.rs:97:        // (This is required to set the feature flags above)
src/tools/cargotest/main.rs:122:    if !run_cargo_test(cargo, &dir, test.packages, test.features, test.manifest_path, test.filters)
src/tools/cargotest/main.rs:179:    features: Option<&[&str]>,
src/tools/cargotest/main.rs:190:    if let Some(features) = features {
src/tools/cargotest/main.rs:191:        command.arg("--no-default-features");
src/tools/cargotest/main.rs:192:        for feature in features {
src/tools/cargotest/main.rs:193:            command.arg(format!("--features={}", feature));
src/tools/rustfmt/Cargo.toml:29:[features]
src/tools/rustfmt/Cargo.toml:36:annotate-snippets = { version = "0.9", features = ["color"] }
src/tools/rustfmt/Cargo.toml:40:clap = { version = "4.2.1", features = ["derive"] }
src/tools/rustfmt/Cargo.toml:50:serde = { version = "1.0.160", features = ["derive"] }
src/tools/rustfmt/Cargo.toml:64:# This package uses #[feature(rustc_private)]
src/tools/rustfmt/CHANGELOG.md:32:- rustfmt no longer incorrectly duplicates the where clause bounds when using const expression in where clause bounds with feature `#![feature(generic_const_exprs)]` [#5691](https://github.com/rust-lang/rustfmt/issues/5691). e.g.:
src/tools/rustfmt/CHANGELOG.md:234:Note this hit the rustup distributions prior to the v1.4.38 release as part of an out-of-cycle updates, but is listed in this version because the feature was not in the other v1.4.37 releases. See also the `use_small_heuristics` section on the configuration site for more information
src/tools/rustfmt/CHANGELOG.md:943:- Consider `dev` channel as nightly for unstable features #2948
src/tools/rustfmt/CHANGELOG.md:1041:- Unstabilise `unstable_features` dd9c15a
src/tools/rustfmt/CHANGELOG.md:1112:- Add `--unstable-features` CLI option to list unstable options from the `--help` output 8208f8a
src/tools/rustfmt/ci/check_diff.sh:4:    echo "usage check_diff REMOTE_REPO FEATURE_BRANCH [COMMIT_HASH] [OPTIONAL_RUSTFMT_CONFIGS]"
src/tools/rustfmt/ci/check_diff.sh:13:FEATURE_BRANCH=$2
src/tools/rustfmt/ci/check_diff.sh:56:        $1 --unstable-features --skip-children --check --color=always $config $i >> $2 2>/dev/null
src/tools/rustfmt/ci/check_diff.sh:60:# Run the master rustfmt binary and the feature branch binary in the current directory and compare the diffs
src/tools/rustfmt/ci/check_diff.sh:67:# $FEATURE_BIN: Path to the rustfmt feature binary. Created when running `compile_rustfmt`
src/tools/rustfmt/ci/check_diff.sh:73:    echo "running rustfmt (feature) on $1"
src/tools/rustfmt/ci/check_diff.sh:74:    create_diff $FEATURE_BIN feature_diff.txt $OPTIONAL_RUSTFMT_CONFIGS
src/tools/rustfmt/ci/check_diff.sh:84:        --unified=0 --no-index rustfmt_diff.txt feature_diff.txt 2>&1 | tail -n +6 | cut -c 2-
src/tools/rustfmt/ci/check_diff.sh:97:# One for the current master, and another for the feature branch
src/tools/rustfmt/ci/check_diff.sh:104:# $FEATURE_BRANCH: Name of the feature branch
src/tools/rustfmt/ci/check_diff.sh:109:    git remote add feature $REMOTE_REPO
src/tools/rustfmt/ci/check_diff.sh:110:    git fetch feature $FEATURE_BRANCH
src/tools/rustfmt/ci/check_diff.sh:114:        git switch $FEATURE_BRANCH
src/tools/rustfmt/ci/check_diff.sh:118:    cargo build --release --bin rustfmt && cp target/release/rustfmt $1/feature_rustfmt
src/tools/rustfmt/ci/check_diff.sh:120:    FEATURE_BIN=$1/feature_rustfmt
src/tools/rustfmt/ci/check_diff.sh:123:# Check the diff for running rustfmt and the feature branch on all the .rs files in the repo.
src/tools/rustfmt/config_proc_macro/Cargo.toml:16:syn = { version = "2.0", features = ["full", "visit"] }
src/tools/rustfmt/config_proc_macro/Cargo.toml:19:serde = { version = "1.0.160", features = ["derive"] }
src/tools/rustfmt/config_proc_macro/Cargo.toml:21:[features]
src/tools/rustfmt/config_proc_macro/src/lib.rs:21:    #[cfg(feature = "debug-with-rustfmt")]
src/tools/rustfmt/config_proc_macro/src/utils.rs:22:#[cfg(feature = "debug-with-rustfmt")]
src/tools/rustfmt/tests/target/issue-2342.rs:4:    #[cfg(feature = "serde")]
src/tools/rustfmt/tests/target/pattern.rs:2:#![feature(exclusive_range_pattern)]
src/tools/rustfmt/tests/target/issue-5151/minimum_example.rs:1:#![feature(more_qualified_paths)]
src/tools/rustfmt/tests/target/issue-4816/lib.rs:1:#![feature(const_generics_defaults)]
src/tools/rustfmt/tests/target/issue_4467.rs:2:    #[cfg(feature = "std")]
src/tools/rustfmt/tests/target/issue-4908.rs:1:#![feature(more_qualified_paths)]
src/tools/rustfmt/tests/target/doc-comment-with-example.rs:7:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/target/issue-1278.rs:3:#![feature(pub_restricted)]
src/tools/rustfmt/tests/target/associated_type_bounds.rs:3:#![feature(associated_type_bounds)]
src/tools/rustfmt/tests/target/issue-3601.rs:1:#![feature(const_generics)]
src/tools/rustfmt/tests/target/immovable_generators.rs:1:#![feature(generators)]
src/tools/rustfmt/tests/target/issue_4522.rs:2:    #[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/if_while_or_patterns.rs:1:#![feature(if_while_or_patterns)]
src/tools/rustfmt/tests/target/issue-2927.rs:2:#![feature(rust_2018_preview, uniform_paths)]
src/tools/rustfmt/tests/target/normalize_doc_attributes_should_not_imply_format_doc_comments.rs:7:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/target/fn_args_layout-vertical.rs:21:    // This feature should not affect closures.
src/tools/rustfmt/tests/target/issue-3343.rs:3:#[cfg(feature = "alloc")] use core::slice;
src/tools/rustfmt/tests/target/issue-3343.rs:5:#[cfg(feature = "alloc")] use total_len_is::_50__;
src/tools/rustfmt/tests/target/issue-3343.rs:7:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/target/issue-3343.rs:10:#[cfg(feature = "alloc")] extern crate len_is_50_;
src/tools/rustfmt/tests/target/issue-3343.rs:12:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/target/issue-3343.rs:23:    feature = "std",
src/tools/rustfmt/tests/target/issue-3343.rs:40:        all(target_arch = "wasm32", feature = "stdweb"),
src/tools/rustfmt/tests/target/issue-3343.rs:41:        all(target_arch = "wasm32", feature = "wasm-bindgen"),
src/tools/rustfmt/tests/target/issue-3182.rs:5:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd)not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/target/imports/imports-impl-only-use.rs:1:#![feature(underscore_imports)]
src/tools/rustfmt/tests/target/struct-field-attributes.rs:2:#![feature(struct_field_attributes)]
src/tools/rustfmt/tests/target/struct-field-attributes.rs:27:    #[cfg(feature = "include-bar")]
src/tools/rustfmt/tests/target/struct-field-attributes.rs:34:        #[cfg(feature = "include-bar")]
src/tools/rustfmt/tests/target/struct-field-attributes.rs:43:            feature = "serde_derive",
src/tools/rustfmt/tests/target/struct-field-attributes.rs:52:        feature = "serde_derive",
src/tools/rustfmt/tests/target/issue-2936.rs:12:                    ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(
src/tools/rustfmt/tests/target/issue-2936.rs:15:                        cstr!("PEMQExpectedFeatureName")
src/tools/rustfmt/tests/target/issue-5030.rs:5:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue-5030.rs:7:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue-5030.rs:14:#[cfg(feature = "spam")]
src/tools/rustfmt/tests/target/issue-5030.rs:16:#[cfg(feature = "spam")]
src/tools/rustfmt/tests/target/issue-5030.rs:18:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue-5030.rs:20:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue-1255.rs:3:#![feature(specialization)]
src/tools/rustfmt/tests/target/issue-4603.rs:4:#![feature(or_patterns)]
src/tools/rustfmt/tests/target/doc-attrib.rs:52:    feature = "this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
src/tools/rustfmt/tests/target/doc-attrib.rs:83:    feature = "std",
src/tools/rustfmt/tests/target/doc-attrib.rs:100:        all(target_arch = "wasm32", feature = "stdweb"),
src/tools/rustfmt/tests/target/doc-attrib.rs:101:        all(target_arch = "wasm32", feature = "wasm-bindgen"),
src/tools/rustfmt/tests/target/expr.rs:611:    #[cfg(feature = "zero")]
src/tools/rustfmt/tests/target/expr.rs:617:        #[cfg(feature = "zero")]
src/tools/rustfmt/tests/target/expr.rs:621:        #[cfg(feature = "zero")]
src/tools/rustfmt/tests/target/expr.rs:627:        #[cfg(feature = "zero")]
src/tools/rustfmt/tests/target/associated_type_defaults.rs:1:#![feature(associated_type_defaults)]
src/tools/rustfmt/tests/target/dyn_trait.rs:1:#![feature(dyn_trait)]
src/tools/rustfmt/tests/target/raw_identifiers.rs:1:#![feature(custom_attribute)]
src/tools/rustfmt/tests/target/raw_identifiers.rs:2:#![feature(raw_identifiers)]
src/tools/rustfmt/tests/target/raw_identifiers.rs:3:#![feature(extern_types)]
src/tools/rustfmt/tests/target/enum.rs:180:    Vacant(#[stable(feature = "rust1", since = "1.0.0")] VacantEntry<'a, K, V>),
src/tools/rustfmt/tests/target/enum.rs:181:    Occupied(#[stable(feature = "rust1", since = "1.0.0")] OccupiedEntry<'a, K, V>),
src/tools/rustfmt/tests/target/enum.rs:278://#![feature(arbitrary_enum_discriminant)]
src/tools/rustfmt/tests/target/catch.rs:2:#![feature(try_blocks)]
src/tools/rustfmt/tests/target/issue-2673-nonmodrs-mods/lib.rs:1:#![feature(non_modrs_mods)]
src/tools/rustfmt/tests/target/configs/trailing_semicolon/true.rs:3:#![feature(loop_break_value)]
src/tools/rustfmt/tests/target/configs/trailing_semicolon/false.rs:3:#![feature(loop_break_value)]
src/tools/rustfmt/tests/target/issue-3759.rs:3:        #[cfg(feature = "test")]
src/tools/rustfmt/tests/target/issue-3759.rs:6:        #[cfg(feature = "test")]
src/tools/rustfmt/tests/target/issue-3759.rs:11:        #[cfg(feature = "test")]
src/tools/rustfmt/tests/target/issue-3759.rs:15:        #[cfg(feature = "test")]
src/tools/rustfmt/tests/target/issue-3759.rs:21:        #[cfg(feature = "test")]
src/tools/rustfmt/tests/target/issue-3759.rs:24:        #[cfg(feature = "test")]
src/tools/rustfmt/tests/target/issue-4908-2.rs:1:#![feature(more_qualified_paths)]
src/tools/rustfmt/tests/target/cfg_mod/mod.rs:1:#[cfg_attr(feature = "foo", path = "foo.rs")]
src/tools/rustfmt/tests/target/fn-param-attributes.rs:60:    #[cfg(some_even_longer_config_feature_that_keeps_going_and_going_and_going_forever_and_ever_and_ever_on_and_on)]
src/tools/rustfmt/tests/target/issue-4310.rs:1:#![feature(const_generics)]
src/tools/rustfmt/tests/target/attrib.rs:64:    #[cfg(feature = "nightly")]
src/tools/rustfmt/tests/target/attrib.rs:194:    feature = "this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
src/tools/rustfmt/tests/target/attrib.rs:225:    feature = "std",
src/tools/rustfmt/tests/target/attrib.rs:242:        all(target_arch = "wasm32", feature = "stdweb"),
src/tools/rustfmt/tests/target/attrib.rs:243:        all(target_arch = "wasm32", feature = "wasm-bindgen"),
src/tools/rustfmt/tests/target/issue-3554.rs:1:#![feature(const_generics)]
src/tools/rustfmt/tests/target/issue_4475.rs:9:    #[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue_4475.rs:18:    #[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue-5005/minimum_example.rs:1:#![feature(more_qualified_paths)]
src/tools/rustfmt/tests/target/issue_4911.rs:1:#![feature(min_type_alias_impl_trait)]
src/tools/rustfmt/tests/target/wrap_comments_should_not_imply_format_doc_comments.rs:7:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/target/break-and-continue.rs:3:#![feature(loop_break_value)]
src/tools/rustfmt/tests/target/issue-1800.rs:2:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/target/issue-2927-2.rs:2:#![feature(rust_2018_preview, uniform_paths)]
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:1://! Caches run-time feature detection so that it only needs to be computed
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:26:/// Maximum number of features that can be cached.
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:49:            "too many features, time to increase the cache size!"
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:61:            "too many features, time to increase the cache size!"
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:68:/// This global variable is a cache of the features supported by the CPU.
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:71:/// Feature cache with capacity for `CACHE_CAPACITY` features.
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:73:/// Note: the last feature bit is used to represent an
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:105:/// Feature cache with capacity for `CACHE_CAPACITY` features.
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:107:/// Note: the last feature bit is used to represent an
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:150:/// On its first invocation, it detects the CPU features and caches them in the
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:153:/// It uses the `Feature` variant to index into this variable as a bitset. If
src/tools/rustfmt/tests/target/cfg_if/detect/cache.rs:154:/// the bit is set, the feature is enabled, and otherwise it is disabled.
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:1://! This module implements run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:3://! The `is_{arch}_feature_detected!("feature-name")` macros take the name of a
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:4://! feature as a string-literal, and return a boolean indicating whether the
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:5://! feature is enabled at run-time or not.
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:8://! * map the string-literal into an integer stored as a `Feature` enum,
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:9://! * call a `os::check_for(x: Feature)` function that returns `true` if the
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:10://! feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:12://! The `Feature` enums are also implemented in the `arch/{target_arch}.rs`
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:16://! architectures do not allow user-space programs to query the feature bits
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:55:            pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:61:pub use self::arch::Feature;
src/tools/rustfmt/tests/target/cfg_if/detect/mod.rs:71:    } else if #[cfg(all(target_os = "linux", feature = "use_std"))] {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:1://! Run-time feature detection on PowerPC64.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:3:/// Checks if `powerpc64` feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:7:macro_rules! is_powerpc64_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:9:        cfg!(target_feature = "altivec")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:10:            || $crate::detect::check_for($crate::detect::Feature::altivec)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:13:        cfg!(target_feature = "vsx") || $crate::detect::check_for($crate::detect::Feature::vsx)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:16:        cfg!(target_feature = "power8")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:17:            || $crate::detect::check_for($crate::detect::Feature::power8)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:20:        is_powerpc64_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:23:        compile_error!(concat!("unknown powerpc64 target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:27:/// PowerPC64 CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:28:/// for a particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:34:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc64.rs:35:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:1://! Run-time feature detection on MIPS64.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:3:/// Checks if `mips64` feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:7:macro_rules! is_mips64_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:9:        cfg!(target_feature = "msa") || $crate::detect::check_for($crate::detect::Feature::msa)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:12:        is_mips64_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:15:        compile_error!(concat!("unknown mips64 target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:19:/// MIPS64 CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:20:/// for a particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:26:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips64.rs:27:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:1://! Run-time feature detection on PowerPC.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:3:/// Checks if `powerpc` feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:7:macro_rules! is_powerpc_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:9:        cfg!(target_feature = "altivec")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:10:            || $crate::detect::check_for($crate::detect::Feature::altivec)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:13:        cfg!(target_feature = "vsx") || $crate::detect::check_for($crate::detect::Feature::vsx)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:16:        cfg!(target_feature = "power8")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:17:            || $crate::detect::check_for($crate::detect::Feature::power8)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:20:        is_powerpc_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:23:        compile_error!(concat!("unknown powerpc target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:27:/// PowerPC CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:28:/// for a particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:34:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/powerpc.rs:35:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:1://! This module implements minimal run-time feature detection for x86.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:3://! The features are detected using the `detect_features` function below.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:4://! This function uses the CPUID instruction to read the feature flags from the
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:6://! whether a feature is available (bit is set) or unavailable (bit is cleared).
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:8://! The enum `Feature` is used to map bit positions to feature names, and the
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:10://! "avx") to these bit positions (e.g., `Feature::avx`).
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:12://! The run-time feature detection is performed by the
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:13://! `__crate::detect::check_for(Feature) -> bool` function. On its first call,
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:14://! this functions queries the CPU for the available features and stores them
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:16://! whether the feature bit in this global variable is set or cleared.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:18:/// A macro to test at *runtime* whether a CPU feature is available on
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:22:/// whether the specified CPU feature is detected. This does **not** resolve at
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:23:/// compile time unless the specified feature is already enabled for the entire
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:26:/// This macro only takes one argument which is a string literal of the feature
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:27:/// being tested for. The feature names supported are the lowercase versions of
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:32:/// This macro supports the same names that `#[target_feature]` supports. Unlike
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:33:/// `#[target_feature]`, however, this macro does not support names separated
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:34:/// with a comma. Instead testing for multiple features must be done through
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:83:#[stable(feature = "simd_x86", since = "1.27.0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:85:macro_rules! is_x86_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:87:        cfg!(target_feature = "aes") || $crate::detect::check_for($crate::detect::Feature::aes)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:90:        cfg!(target_feature = "pclmulqdq")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:91:            || $crate::detect::check_for($crate::detect::Feature::pclmulqdq)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:94:        cfg!(target_feature = "rdrand")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:95:            || $crate::detect::check_for($crate::detect::Feature::rdrand)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:98:        cfg!(target_feature = "rdseed")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:99:            || $crate::detect::check_for($crate::detect::Feature::rdseed)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:102:        cfg!(target_feature = "tsc") || $crate::detect::check_for($crate::detect::Feature::tsc)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:105:        cfg!(target_feature = "mmx") || $crate::detect::check_for($crate::detect::Feature::mmx)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:108:        cfg!(target_feature = "sse") || $crate::detect::check_for($crate::detect::Feature::sse)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:111:        cfg!(target_feature = "sse2") || $crate::detect::check_for($crate::detect::Feature::sse2)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:114:        cfg!(target_feature = "sse3") || $crate::detect::check_for($crate::detect::Feature::sse3)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:117:        cfg!(target_feature = "ssse3") || $crate::detect::check_for($crate::detect::Feature::ssse3)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:120:        cfg!(target_feature = "sse4.1")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:121:            || $crate::detect::check_for($crate::detect::Feature::sse4_1)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:124:        cfg!(target_feature = "sse4.2")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:125:            || $crate::detect::check_for($crate::detect::Feature::sse4_2)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:128:        cfg!(target_feature = "sse4a") || $crate::detect::check_for($crate::detect::Feature::sse4a)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:131:        cfg!(target_feature = "sha") || $crate::detect::check_for($crate::detect::Feature::sha)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:134:        cfg!(target_feature = "avx") || $crate::detect::check_for($crate::detect::Feature::avx)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:137:        cfg!(target_feature = "avx2") || $crate::detect::check_for($crate::detect::Feature::avx2)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:140:        cfg!(target_feature = "avx512f")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:141:            || $crate::detect::check_for($crate::detect::Feature::avx512f)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:144:        cfg!(target_feature = "avx512cd")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:145:            || $crate::detect::check_for($crate::detect::Feature::avx512cd)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:148:        cfg!(target_feature = "avx512er")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:149:            || $crate::detect::check_for($crate::detect::Feature::avx512er)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:152:        cfg!(target_feature = "avx512pf")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:153:            || $crate::detect::check_for($crate::detect::Feature::avx512pf)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:156:        cfg!(target_feature = "avx512bw")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:157:            || $crate::detect::check_for($crate::detect::Feature::avx512bw)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:160:        cfg!(target_feature = "avx512dq")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:161:            || $crate::detect::check_for($crate::detect::Feature::avx512dq)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:164:        cfg!(target_Feature = "avx512vl")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:165:            || $crate::detect::check_for($crate::detect::Feature::avx512vl)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:168:        cfg!(target_feature = "avx512ifma")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:169:            || $crate::detect::check_for($crate::detect::Feature::avx512_ifma)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:172:        cfg!(target_feature = "avx512vbmi")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:173:            || $crate::detect::check_for($crate::detect::Feature::avx512_vbmi)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:176:        cfg!(target_feature = "avx512vpopcntdq")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:177:            || $crate::detect::check_for($crate::detect::Feature::avx512_vpopcntdq)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:180:        cfg!(target_feature = "f16c") || $crate::detect::check_for($crate::detect::Feature::f16c)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:183:        cfg!(target_feature = "fma") || $crate::detect::check_for($crate::detect::Feature::fma)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:186:        cfg!(target_feature = "bmi1") || $crate::detect::check_for($crate::detect::Feature::bmi)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:189:        cfg!(target_feature = "bmi2") || $crate::detect::check_for($crate::detect::Feature::bmi2)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:192:        cfg!(target_feature = "abm") || $crate::detect::check_for($crate::detect::Feature::abm)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:195:        cfg!(target_feature = "lzcnt") || $crate::detect::check_for($crate::detect::Feature::abm)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:198:        cfg!(target_feature = "tbm") || $crate::detect::check_for($crate::detect::Feature::tbm)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:201:        cfg!(target_feature = "popcnt")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:202:            || $crate::detect::check_for($crate::detect::Feature::popcnt)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:205:        cfg!(target_feature = "fxsr") || $crate::detect::check_for($crate::detect::Feature::fxsr)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:208:        cfg!(target_feature = "xsave") || $crate::detect::check_for($crate::detect::Feature::xsave)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:211:        cfg!(target_feature = "xsaveopt")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:212:            || $crate::detect::check_for($crate::detect::Feature::xsaveopt)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:215:        cfg!(target_feature = "xsaves")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:216:            || $crate::detect::check_for($crate::detect::Feature::xsaves)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:219:        cfg!(target_feature = "xsavec")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:220:            || $crate::detect::check_for($crate::detect::Feature::xsavec)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:223:        cfg!(target_feature = "cmpxchg16b")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:224:            || $crate::detect::check_for($crate::detect::Feature::cmpxchg16b)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:227:        cfg!(target_feature = "adx") || $crate::detect::check_for($crate::detect::Feature::adx)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:230:        cfg!(target_feature = "rtm") || $crate::detect::check_for($crate::detect::Feature::rtm)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:233:        is_x86_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:236:        compile_error!(concat!("unknown target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:240:/// X86 CPU Feature enum. Each variant denotes a position in a bitset for a
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:241:/// particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:247:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs:248:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:1://! Run-time feature detection on ARM Aarch32.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:3:/// Checks if `arm` feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:7:macro_rules! is_arm_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:9:        cfg!(target_feature = "neon") || $crate::detect::check_for($crate::detect::Feature::neon)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:12:        cfg!(target_feature = "pmull") || $crate::detect::check_for($crate::detect::Feature::pmull)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:15:        compile_error!("\"v7\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:18:        compile_error!("\"vfp2\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:21:        compile_error!("\"vfp3\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:24:        compile_error!("\"vfp4\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:27:        is_arm_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:30:        compile_error!(concat!("unknown arm target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:34:/// ARM CPU Feature enum. Each variant denotes a position in a bitset for a
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:35:/// particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:41:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/arm.rs:42:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:1://! Run-time feature detection on MIPS.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:3:/// Checks if `mips` feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:7:macro_rules! is_mips_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:9:        cfg!(target_feature = "msa") || $crate::detect::check_for($crate::detect::Feature::msa)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:12:        is_mips_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:15:        compile_error!(concat!("unknown mips target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:19:/// MIPS CPU Feature enum. Each variant denotes a position in a bitset for a
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:20:/// particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:26:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/mips.rs:27:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:1://! Aarch64 run-time features.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:3:/// Checks if `aarch64` feature is enabled.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:7:macro_rules! is_aarch64_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:10:        cfg!(target_feature = "neon") || $crate::detect::check_for($crate::detect::Feature::asimd)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:13:        cfg!(target_feature = "neon") || $crate::detect::check_for($crate::detect::Feature::asimd)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:16:        cfg!(target_feature = "pmull") || $crate::detect::check_for($crate::detect::Feature::pmull)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:19:        cfg!(target_feature = "fp") || $crate::detect::check_for($crate::detect::Feature::fp)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:22:        cfg!(target_feature = "fp16") || $crate::detect::check_for($crate::detect::Feature::fp16)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:25:        cfg!(target_feature = "sve") || $crate::detect::check_for($crate::detect::Feature::sve)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:28:        cfg!(target_feature = "crc") || $crate::detect::check_for($crate::detect::Feature::crc)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:31:        cfg!(target_feature = "crypto")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:32:            || $crate::detect::check_for($crate::detect::Feature::crypto)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:35:        cfg!(target_feature = "lse") || $crate::detect::check_for($crate::detect::Feature::lse)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:38:        cfg!(target_feature = "rdm") || $crate::detect::check_for($crate::detect::Feature::rdm)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:41:        cfg!(target_feature = "rcpc") || $crate::detect::check_for($crate::detect::Feature::rcpc)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:44:        cfg!(target_feature = "dotprod")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:45:            || $crate::detect::check_for($crate::detect::Feature::dotprod)
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:48:        compile_error!("\"ras\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:51:        compile_error!("\"v8.1a\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:54:        compile_error!("\"v8.2a\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:57:        compile_error!("\"v8.3a\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:60:        is_aarch64_feature_detected!($t);
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:63:        compile_error!(concat!("unknown aarch64 target feature: ", $t))
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:67:/// ARM Aarch64 CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:68:/// for a particular feature.
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:74:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/target/cfg_if/detect/arch/aarch64.rs:75:pub enum Feature {
src/tools/rustfmt/tests/target/cfg_if/detect/os/other.rs:3:use crate::detect::Feature;
src/tools/rustfmt/tests/target/cfg_if/detect/os/other.rs:5:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/other.rs:7:pub fn check_for(_x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/mod.rs:1://! Run-time feature detection on FreeBSD
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/mod.rs:16:        use crate::arch::detect::Feature;
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/mod.rs:17:        /// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/mod.rs:18:        pub fn check_for(_x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:1://! Run-time feature detection for PowerPC on FreeBSD.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:4:use crate::detect::{cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:12:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:14:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:21:        enable_feature(&mut value, Feature::altivec, auxv.hwcap & 0x10000000 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:22:        enable_feature(&mut value, Feature::vsx, auxv.hwcap & 0x00000080 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/powerpc.rs:23:        enable_feature(&mut value, Feature::power8, auxv.hwcap2 & 0x80000000 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:1://! Run-time feature detection for ARM on FreeBSD
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:4:use crate::detect::{cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:12:/// Try to read the features from the auxiliary vector
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:13:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:15:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:22:        enable_feature(&mut value, Feature::neon, auxv.hwcap & 0x00001000 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/arm.rs:23:        enable_feature(&mut value, Feature::pmull, auxv.hwcap2 & 0x00000002 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:1://! Run-time feature detection for Aarch64 on FreeBSD.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:3:use super::super::aarch64::detect_features;
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:4:use crate::detect::{cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:16:        println!("asimd: {:?}", is_aarch64_feature_detected!("asimd"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:17:        println!("pmull: {:?}", is_aarch64_feature_detected!("pmull"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:18:        println!("fp: {:?}", is_aarch64_feature_detected!("fp"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:19:        println!("fp16: {:?}", is_aarch64_feature_detected!("fp16"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:20:        println!("sve: {:?}", is_aarch64_feature_detected!("sve"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:21:        println!("crc: {:?}", is_aarch64_feature_detected!("crc"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:22:        println!("crypto: {:?}", is_aarch64_feature_detected!("crypto"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:23:        println!("lse: {:?}", is_aarch64_feature_detected!("lse"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:24:        println!("rdm: {:?}", is_aarch64_feature_detected!("rdm"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:25:        println!("rcpc: {:?}", is_aarch64_feature_detected!("rcpc"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/aarch64.rs:26:        println!("dotprod: {:?}", is_aarch64_feature_detected!("dotprod"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/auxvec.rs:12:/// This should be interpreted as all the features being disabled.
src/tools/rustfmt/tests/target/cfg_if/detect/os/freebsd/auxvec.rs:28:/// Note that run-time feature detection is not invoked for features that can
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:162:        Features    : fp asimd evtstrm aes pmull sha1 sha2 crc32
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:180:            cpuinfo.field("Features"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:183:        assert!(cpuinfo.field("Features").has("pmull"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:184:        assert!(!cpuinfo.field("Features").has("neon"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:185:        assert!(cpuinfo.field("Features").has("asimd"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:193:Features	: fp asimd aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:208:            cpuinfo.field("Features"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:211:        assert!(cpuinfo.field("Features").has("pmull"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:212:        assert!(cpuinfo.field("Features").has("neon"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/cpuinfo.rs:213:        assert!(cpuinfo.field("Features").has("asimd"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mod.rs:1://! Run-time feature detection on Linux
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mod.rs:5:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mod.rs:22:        use crate::detect::Feature;
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mod.rs:23:        /// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mod.rs:24:        pub fn check_for(_x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:1://! Run-time feature detection for PowerPC on Linux.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:4:use crate::detect::{cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:16:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:28:        enable_feature(&mut value, Feature::altivec, auxv.hwcap & 0x10000000 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:29:        enable_feature(&mut value, Feature::vsx, auxv.hwcap & 0x00000080 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:30:        enable_feature(&mut value, Feature::power8, auxv.hwcap2 & 0x80000000 != 0);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:34:    // PowerPC's /proc/cpuinfo lacks a proper Feature field,
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/powerpc.rs:37:        enable_feature(&mut value, Feature::altivec, c.field("cpu").has("altivec"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:1://! Run-time feature detection for ARM on Linux.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:4:use crate::detect::{bit, cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:16:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:26:        enable_feature(&mut value, Feature::neon, bit::test(auxv.hwcap, 12));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:27:        enable_feature(&mut value, Feature::pmull, bit::test(auxv.hwcap2, 1));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:32:        enable_feature(
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:34:            Feature::neon,
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:35:            c.field("Features").has("neon") && !has_broken_neon(&c),
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/arm.rs:37:        enable_feature(&mut value, Feature::pmull, c.field("Features").has("pmull"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:1://! Run-time feature detection for MIPS on Linux.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:4:use crate::detect::{bit, cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:16:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/mips.rs:26:        enable_feature(&mut value, Feature::msa, bit::test(auxv.hwcap, 1));
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:1://! Run-time feature detection for Aarch64 on Linux.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:4:use crate::detect::{bit, cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:89:        let f = &c.field("Features");
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:92:            // map some of the 64-bit names to some 32-bit feature names. This does not
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:122:    /// Initializes the cache from the feature -bits.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:124:    /// The features are enabled approximately like in LLVM host feature detection:
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:129:            let mut enable_feature = |f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:135:            enable_feature(Feature::fp, self.fp);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:137:            enable_feature(Feature::fp16, self.fp && self.fphp);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:138:            enable_feature(Feature::pmull, self.pmull);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:139:            enable_feature(Feature::crc, self.crc32);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:140:            enable_feature(Feature::lse, self.atomics);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:141:            enable_feature(Feature::rcpc, self.lrcpc);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:146:            enable_feature(Feature::asimd, asimd);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:148:            enable_feature(Feature::rdm, self.asimdrdm && asimd);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:149:            enable_feature(Feature::dotprod, self.asimddp && asimd);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:150:            enable_feature(Feature::sve, self.sve && asimd);
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:153:            enable_feature(
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/aarch64.rs:154:                Feature::crypto,
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:4:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:16:/// This should be interpreted as all the features being disabled.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:35:/// - If the `std_detect_dlsym_getauxval` cargo feature is enabled, this will use
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:39:/// - Otherwise, if the `std_detect_file_io` cargo feature is enabled, it will
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:43:/// Note that run-time feature detection is not invoked for features that can
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:46:/// feature detecton on some platforms.
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:54:    #[cfg(feature = "std_detect_dlsym_getauxval")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:77:        #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:83:        #[cfg(not(feature = "std_detect_file_io"))]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:89:    #[cfg(not(feature = "std_detect_dlsym_getauxval"))]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:115:#[cfg(feature = "std_detect_dlsym_getauxval")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:132:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:151:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:191:    #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:245:    #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/linux/auxvec.rs:280:    #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:1://! x86 run-time feature detection is OS independent.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:10:use crate::detect::{bit, cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:12:/// Performs run-time feature detection.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:14:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:15:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:18:/// Run-time feature detection on x86 works by using the CPUID instruction.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:34:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:38:    // old to support any of the currently-detectable features.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:72:    // EAX = 1, ECX = 0: Queries "Processor Info and Feature Bits";
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:73:    // Contains information about most x86 features.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:80:    // EAX = 7, ECX = 0: Queries "Extended Features";
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:82:    let (extended_features_ebx, extended_features_ecx) = if max_basic_leaf >= 7 {
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:86:        (0, 0) // CPUID does not support "Extended Features"
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:97:    // EAX = 0x8000_0001, ECX=0: Queries "Extended Processor Info and Feature
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:114:        enable(proc_info_ecx, 0, Feature::sse3);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:115:        enable(proc_info_ecx, 1, Feature::pclmulqdq);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:116:        enable(proc_info_ecx, 9, Feature::ssse3);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:117:        enable(proc_info_ecx, 13, Feature::cmpxchg16b);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:118:        enable(proc_info_ecx, 19, Feature::sse4_1);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:119:        enable(proc_info_ecx, 20, Feature::sse4_2);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:120:        enable(proc_info_ecx, 23, Feature::popcnt);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:121:        enable(proc_info_ecx, 25, Feature::aes);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:122:        enable(proc_info_ecx, 29, Feature::f16c);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:123:        enable(proc_info_ecx, 30, Feature::rdrand);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:124:        enable(extended_features_ebx, 18, Feature::rdseed);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:125:        enable(extended_features_ebx, 19, Feature::adx);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:126:        enable(extended_features_ebx, 11, Feature::rtm);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:127:        enable(proc_info_edx, 4, Feature::tsc);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:128:        enable(proc_info_edx, 23, Feature::mmx);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:129:        enable(proc_info_edx, 24, Feature::fxsr);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:130:        enable(proc_info_edx, 25, Feature::sse);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:131:        enable(proc_info_edx, 26, Feature::sse2);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:132:        enable(extended_features_ebx, 29, Feature::sha);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:134:        enable(extended_features_ebx, 3, Feature::bmi);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:135:        enable(extended_features_ebx, 8, Feature::bmi2);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:174:                    // See "13.3 ENABLING THE XSAVE FEATURE SET AND XSAVE-ENABLED
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:175:                    // FEATURES" in the "Intel® 64 and IA-32 Architectures Software
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:178:                    // "Software enables the XSAVE feature set by setting
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:184:                    enable(proc_info_ecx, 26, Feature::xsave);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:194:                        enable(proc_extended_state1_eax, 0, Feature::xsaveopt);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:195:                        enable(proc_extended_state1_eax, 1, Feature::xsavec);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:196:                        enable(proc_extended_state1_eax, 3, Feature::xsaves);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:200:                    enable(proc_info_ecx, 12, Feature::fma);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:203:                    enable(proc_info_ecx, 28, Feature::avx);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:204:                    enable(extended_features_ebx, 5, Feature::avx2);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:209:                        enable(extended_features_ebx, 16, Feature::avx512f);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:210:                        enable(extended_features_ebx, 17, Feature::avx512dq);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:211:                        enable(extended_features_ebx, 21, Feature::avx512_ifma);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:212:                        enable(extended_features_ebx, 26, Feature::avx512pf);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:213:                        enable(extended_features_ebx, 27, Feature::avx512er);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:214:                        enable(extended_features_ebx, 28, Feature::avx512cd);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:215:                        enable(extended_features_ebx, 30, Feature::avx512bw);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:216:                        enable(extended_features_ebx, 31, Feature::avx512vl);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:217:                        enable(extended_features_ecx, 1, Feature::avx512_vbmi);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:218:                        enable(extended_features_ecx, 14, Feature::avx512_vpopcntdq);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:227:        // internal feature.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:229:        // The `is_x86_feature_detected!("lzcnt")` macro then
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:230:        // internally maps to Feature::abm.
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:231:        enable(extended_proc_info_ecx, 5, Feature::abm);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:236:        // For CPUID feature bits, Hygon Dhyana(family 18h) share the same definition with AMD
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:243:            // These features are available on AMD arch CPUs:
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:244:            enable(extended_proc_info_ecx, 6, Feature::sse4a);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:245:            enable(extended_proc_info_ecx, 21, Feature::tbm);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:258:        println!("aes: {:?}", is_x86_feature_detected!("aes"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:259:        println!("pclmulqdq: {:?}", is_x86_feature_detected!("pclmulqdq"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:260:        println!("rdrand: {:?}", is_x86_feature_detected!("rdrand"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:261:        println!("rdseed: {:?}", is_x86_feature_detected!("rdseed"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:262:        println!("tsc: {:?}", is_x86_feature_detected!("tsc"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:263:        println!("sse: {:?}", is_x86_feature_detected!("sse"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:264:        println!("sse2: {:?}", is_x86_feature_detected!("sse2"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:265:        println!("sse3: {:?}", is_x86_feature_detected!("sse3"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:266:        println!("ssse3: {:?}", is_x86_feature_detected!("ssse3"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:267:        println!("sse4.1: {:?}", is_x86_feature_detected!("sse4.1"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:268:        println!("sse4.2: {:?}", is_x86_feature_detected!("sse4.2"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:269:        println!("sse4a: {:?}", is_x86_feature_detected!("sse4a"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:270:        println!("sha: {:?}", is_x86_feature_detected!("sha"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:271:        println!("avx: {:?}", is_x86_feature_detected!("avx"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:272:        println!("avx2: {:?}", is_x86_feature_detected!("avx2"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:273:        println!("avx512f {:?}", is_x86_feature_detected!("avx512f"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:274:        println!("avx512cd {:?}", is_x86_feature_detected!("avx512cd"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:275:        println!("avx512er {:?}", is_x86_feature_detected!("avx512er"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:276:        println!("avx512pf {:?}", is_x86_feature_detected!("avx512pf"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:277:        println!("avx512bw {:?}", is_x86_feature_detected!("avx512bw"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:278:        println!("avx512dq {:?}", is_x86_feature_detected!("avx512dq"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:279:        println!("avx512vl {:?}", is_x86_feature_detected!("avx512vl"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:280:        println!("avx512_ifma {:?}", is_x86_feature_detected!("avx512ifma"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:281:        println!("avx512_vbmi {:?}", is_x86_feature_detected!("avx512vbmi"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:284:            is_x86_feature_detected!("avx512vpopcntdq")
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:286:        println!("fma: {:?}", is_x86_feature_detected!("fma"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:287:        println!("abm: {:?}", is_x86_feature_detected!("abm"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:288:        println!("bmi: {:?}", is_x86_feature_detected!("bmi1"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:289:        println!("bmi2: {:?}", is_x86_feature_detected!("bmi2"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:290:        println!("tbm: {:?}", is_x86_feature_detected!("tbm"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:291:        println!("popcnt: {:?}", is_x86_feature_detected!("popcnt"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:292:        println!("lzcnt: {:?}", is_x86_feature_detected!("lzcnt"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:293:        println!("fxsr: {:?}", is_x86_feature_detected!("fxsr"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:294:        println!("xsave: {:?}", is_x86_feature_detected!("xsave"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:295:        println!("xsaveopt: {:?}", is_x86_feature_detected!("xsaveopt"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:296:        println!("xsaves: {:?}", is_x86_feature_detected!("xsaves"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:297:        println!("xsavec: {:?}", is_x86_feature_detected!("xsavec"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:298:        println!("cmpxchg16b: {:?}", is_x86_feature_detected!("cmpxchg16b"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:299:        println!("adx: {:?}", is_x86_feature_detected!("adx"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:300:        println!("rtm: {:?}", is_x86_feature_detected!("rtm"));
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:306:        assert_eq!(is_x86_feature_detected!("aes"), information.aesni());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:308:            is_x86_feature_detected!("pclmulqdq"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:311:        assert_eq!(is_x86_feature_detected!("rdrand"), information.rdrand());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:312:        assert_eq!(is_x86_feature_detected!("rdseed"), information.rdseed());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:313:        assert_eq!(is_x86_feature_detected!("tsc"), information.tsc());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:314:        assert_eq!(is_x86_feature_detected!("sse"), information.sse());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:315:        assert_eq!(is_x86_feature_detected!("sse2"), information.sse2());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:316:        assert_eq!(is_x86_feature_detected!("sse3"), information.sse3());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:317:        assert_eq!(is_x86_feature_detected!("ssse3"), information.ssse3());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:318:        assert_eq!(is_x86_feature_detected!("sse4.1"), information.sse4_1());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:319:        assert_eq!(is_x86_feature_detected!("sse4.2"), information.sse4_2());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:320:        assert_eq!(is_x86_feature_detected!("sse4a"), information.sse4a());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:321:        assert_eq!(is_x86_feature_detected!("sha"), information.sha());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:322:        assert_eq!(is_x86_feature_detected!("avx"), information.avx());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:323:        assert_eq!(is_x86_feature_detected!("avx2"), information.avx2());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:324:        assert_eq!(is_x86_feature_detected!("avx512f"), information.avx512f());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:325:        assert_eq!(is_x86_feature_detected!("avx512cd"), information.avx512cd());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:326:        assert_eq!(is_x86_feature_detected!("avx512er"), information.avx512er());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:327:        assert_eq!(is_x86_feature_detected!("avx512pf"), information.avx512pf());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:328:        assert_eq!(is_x86_feature_detected!("avx512bw"), information.avx512bw());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:329:        assert_eq!(is_x86_feature_detected!("avx512dq"), information.avx512dq());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:330:        assert_eq!(is_x86_feature_detected!("avx512vl"), information.avx512vl());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:332:            is_x86_feature_detected!("avx512ifma"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:336:            is_x86_feature_detected!("avx512vbmi"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:340:            is_x86_feature_detected!("avx512vpopcntdq"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:343:        assert_eq!(is_x86_feature_detected!("fma"), information.fma());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:344:        assert_eq!(is_x86_feature_detected!("bmi1"), information.bmi1());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:345:        assert_eq!(is_x86_feature_detected!("bmi2"), information.bmi2());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:346:        assert_eq!(is_x86_feature_detected!("popcnt"), information.popcnt());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:347:        assert_eq!(is_x86_feature_detected!("abm"), information.lzcnt());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:348:        assert_eq!(is_x86_feature_detected!("tbm"), information.tbm());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:349:        assert_eq!(is_x86_feature_detected!("lzcnt"), information.lzcnt());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:350:        assert_eq!(is_x86_feature_detected!("xsave"), information.xsave());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:351:        assert_eq!(is_x86_feature_detected!("xsaveopt"), information.xsaveopt());
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:353:            is_x86_feature_detected!("xsavec"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:357:            is_x86_feature_detected!("xsaves"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:361:            is_x86_feature_detected!("cmpxchg16b"),
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:364:        assert_eq!(is_x86_feature_detected!("adx"), information.adx(),);
src/tools/rustfmt/tests/target/cfg_if/detect/os/x86.rs:365:        assert_eq!(is_x86_feature_detected!("rtm"), information.rtm(),);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:1://! Run-time feature detection for Aarch64 on any OS that emulates the mrs instruction.
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:4://! privileged system registers from userspace to check CPU feature support.
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:7://! have bits dedicated to features like AdvSIMD, CRC32, AES, atomics (LSE), etc.
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:8://! Each part of the register indicates the level of support for a certain feature, e.g.
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:12://! the OS has to always report only the features supported by all cores, like [FreeBSD does](https://reviews.freebsd.org/D17137#393947).
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:16://! - [Zircon implementation](https://fuchsia.googlesource.com/zircon/+/master/kernel/arch/arm64/feature.cpp)
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:17://! - [Linux documentation](https://www.kernel.org/doc/Documentation/arm64/cpu-feature-registers.txt)
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:19:use crate::detect::{cache, Feature};
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:21:/// Try to read the features from the system registers.
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:24:pub(crate) fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:28:        let mut enable_feature = |f, enable| {
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:44:        enable_feature(Feature::pmull, pmull);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:46:        enable_feature(Feature::crypto, aes && pmull && sha1 && sha2);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:47:        enable_feature(Feature::lse, bits_shift(aa64isar0, 23, 20) >= 1);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:48:        enable_feature(Feature::crc, bits_shift(aa64isar0, 19, 16) >= 1);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:50:        // ID_AA64PFR0_EL1 - Processor Feature Register 0
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:60:        enable_feature(Feature::fp, fp);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:61:        enable_feature(Feature::fp16, fphp);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:64:        enable_feature(Feature::asimd, fp && asimd && (!fphp | asimdhp));
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:66:        enable_feature(Feature::rdm, asimd && bits_shift(aa64isar0, 31, 28) >= 1);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:67:        enable_feature(
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:68:            Feature::dotprod,
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:71:        enable_feature(Feature::sve, asimd && bits_shift(aa64pfr0, 35, 32) >= 1);
src/tools/rustfmt/tests/target/cfg_if/detect/os/aarch64.rs:79:        enable_feature(Feature::rcpc, bits_shift(aa64isar1, 23, 20) >= 1);
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:1://! The `is_{target_arch}_feature_detected!` macro are only available on their
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:5:/// Prevents compilation if `is_x86_feature_detected` is used somewhere
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:9:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:10:macro_rules! is_x86_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:14:        is_x86_feature_detected can only be used on x86 and x86_64 targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:19:                if is_x86_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:26:/// Prevents compilation if `is_arm_feature_detected` is used somewhere else
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:30:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:31:macro_rules! is_arm_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:35:        is_arm_feature_detected can only be used on ARM targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:40:                if is_arm_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:47:/// Prevents compilation if `is_aarch64_feature_detected` is used somewhere else
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:51:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:52:macro_rules! is_aarch64_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:56:        is_aarch64_feature_detected can only be used on AArch64 targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:61:                if is_aarch64_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:68:/// Prevents compilation if `is_powerpc_feature_detected` is used somewhere else
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:72:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:73:macro_rules! is_powerpc_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:77:is_powerpc_feature_detected can only be used on PowerPC targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:82:        if is_powerpc_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:89:/// Prevents compilation if `is_powerpc64_feature_detected` is used somewhere
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:93:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:94:macro_rules! is_powerpc64_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:98:is_powerpc64_feature_detected can only be used on PowerPC64 targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:103:        if is_powerpc64_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:110:/// Prevents compilation if `is_mips_feature_detected` is used somewhere else
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:114:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:115:macro_rules! is_mips_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:119:        is_mips_feature_detected can only be used on MIPS targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:124:                if is_mips_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:131:/// Prevents compilation if `is_mips64_feature_detected` is used somewhere else
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:135:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:136:macro_rules! is_mips64_feature_detected {
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:140:        is_mips64_feature_detected can only be used on MIPS64 targets.
src/tools/rustfmt/tests/target/cfg_if/detect/error_macros.rs:145:                if is_mips64_feature_detected(...) { ... }
src/tools/rustfmt/tests/target/cfg_if/lib.rs:1://! Run-time feature detection for the Rust standard library.
src/tools/rustfmt/tests/target/cfg_if/lib.rs:3://! To detect whether a feature is enabled in the system running the binary
src/tools/rustfmt/tests/target/cfg_if/lib.rs:6://! * `x86` and `x86_64`: [`is_x86_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:7://! * `arm`: [`is_arm_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:8://! * `aarch64`: [`is_aarch64_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:9://! * `mips`: [`is_mips_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:10://! * `mips64`: [`is_mips64_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:11://! * `powerpc`: [`is_powerpc_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:12://! * `powerpc64`: [`is_powerpc64_feature_detected`]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:14:#![unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:15:#![feature(const_fn, staged_api, stdsimd, doc_cfg, allow_internal_unstable)]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:18:#![cfg_attr(target_os = "linux", feature(linkage))]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:19:#![cfg_attr(all(target_os = "freebsd", target_arch = "aarch64"), feature(asm))]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:28:    if #[cfg(feature = "std_detect_file_io")] {
src/tools/rustfmt/tests/target/cfg_if/lib.rs:44:#[cfg(feature = "std_detect_dlsym_getauxval")]
src/tools/rustfmt/tests/target/cfg_if/lib.rs:48:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/cfg_if/mod.rs:4:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/target/existential_type.rs:3:#![feature(type_alias_impl_trait)]
src/tools/rustfmt/tests/source/issue-2342.rs:4:    #[cfg(feature = "serde")] bytes: [[u8; 17]; 5], // Same size as signature::ED25519_PKCS8_V2_LEN
src/tools/rustfmt/tests/source/pattern.rs:2:#![feature(exclusive_range_pattern)]
src/tools/rustfmt/tests/source/issue-4816/lib.rs:1:#![feature(const_generics_defaults)]
src/tools/rustfmt/tests/source/doc-comment-with-example.rs:7:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/source/issue-1278.rs:3:#![feature(pub_restricted)]
src/tools/rustfmt/tests/source/associated_type_bounds.rs:3:#![feature(associated_type_bounds)]
src/tools/rustfmt/tests/source/immovable_generators.rs:1:#![feature(generators)]
src/tools/rustfmt/tests/source/if_while_or_patterns.rs:1:#![feature(if_while_or_patterns)]
src/tools/rustfmt/tests/source/issue-2927.rs:2:#![feature(rust_2018_preview, uniform_paths)]
src/tools/rustfmt/tests/source/normalize_doc_attributes_should_not_imply_format_doc_comments.rs:7:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/source/fn_args_layout-vertical.rs:18:    // This feature should not affect closures.
src/tools/rustfmt/tests/source/issue-3343.rs:3:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/source/issue-3343.rs:6:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/source/issue-3343.rs:9:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/source/issue-3343.rs:12:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/source/issue-3343.rs:15:#[cfg(feature = "alloc")]
src/tools/rustfmt/tests/source/issue-3343.rs:26:    feature = "std",
src/tools/rustfmt/tests/source/issue-3343.rs:43:        all(target_arch = "wasm32", feature = "stdweb"),
src/tools/rustfmt/tests/source/issue-3343.rs:44:        all(target_arch = "wasm32", feature = "wasm-bindgen"),
src/tools/rustfmt/tests/source/imports/imports-impl-only-use.rs:1:#![feature(underscore_imports)]
src/tools/rustfmt/tests/source/struct-field-attributes.rs:2:#![feature(struct_field_attributes)]
src/tools/rustfmt/tests/source/struct-field-attributes.rs:27:    #[cfg(feature="include-bar")]
src/tools/rustfmt/tests/source/struct-field-attributes.rs:34:        #[cfg(feature="include-bar")]
src/tools/rustfmt/tests/source/struct-field-attributes.rs:41:    Closure(#[cfg_attr(feature = "serde_derive", serde(state_with = "::serialization::closure"))] GcPtr<ClosureData>),
src/tools/rustfmt/tests/source/struct-field-attributes.rs:45:    #[cfg_attr(feature = "serde_derive", serde(state_with = "::base::serialization::shared"))] Arc<Vec<InternedStr>>,
src/tools/rustfmt/tests/source/issue-2936.rs:12:                    ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(..)) => {
src/tools/rustfmt/tests/source/issue-2936.rs:13:                        cstr!("PEMQExpectedFeatureName")
src/tools/rustfmt/tests/source/issue-5030.rs:5:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/source/issue-5030.rs:15:#[cfg(feature = "foo")]
src/tools/rustfmt/tests/source/issue-5030.rs:21:#[cfg(feature = "spam")]
src/tools/rustfmt/tests/source/issue-4603.rs:4:#![feature(or_patterns)]
src/tools/rustfmt/tests/source/doc-attrib.rs:45:#[cfg(feature = "this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")]
src/tools/rustfmt/tests/source/doc-attrib.rs:74:#[cfg(not(all(feature="std",
src/tools/rustfmt/tests/source/doc-attrib.rs:88:                  all(target_arch = "wasm32", feature = "stdweb"),
src/tools/rustfmt/tests/source/doc-attrib.rs:89:                  all(target_arch = "wasm32", feature = "wasm-bindgen"),
src/tools/rustfmt/tests/source/expr.rs:530:static REPRO: &[usize] = &[#[cfg(feature = "zero")]
src/tools/rustfmt/tests/source/expr.rs:534:    foo(#[cfg(feature = "zero")]
src/tools/rustfmt/tests/source/expr.rs:536:    foobar(#[cfg(feature = "zero")]
src/tools/rustfmt/tests/source/expr.rs:538:    foobar(x, y, #[cfg(feature = "zero")]
src/tools/rustfmt/tests/source/dyn_trait.rs:1:#![feature(dyn_trait)]
src/tools/rustfmt/tests/source/enum.rs:131:        #[ stable( feature = "rust1", since = "1.0.0" ) ]   VacantEntry<'a, K, V>,
src/tools/rustfmt/tests/source/enum.rs:134:        #[ stable( feature = "rust1", since = "1.0.0" ) ]
src/tools/rustfmt/tests/source/enum.rs:207://#![feature(arbitrary_enum_discriminant)]
src/tools/rustfmt/tests/source/catch.rs:2:#![feature(try_blocks)]
src/tools/rustfmt/tests/source/cfg_mod/mod.rs:1:#[cfg_attr(feature = "foo", path = "foo.rs")]
src/tools/rustfmt/tests/source/fn-param-attributes.rs:55:fn really_really_really_loooooooooooooooooooong(#[cfg(some_even_longer_config_feature_that_keeps_going_and_going_and_going_forever_and_ever_and_ever_on_and_on)] b: i32) {
src/tools/rustfmt/tests/source/attrib.rs:64:    #[cfg(feature="nightly")]
src/tools/rustfmt/tests/source/attrib.rs:166:#[cfg(feature = "this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")]
src/tools/rustfmt/tests/source/attrib.rs:195:#[cfg(not(all(feature="std",
src/tools/rustfmt/tests/source/attrib.rs:209:                  all(target_arch = "wasm32", feature = "stdweb"),
src/tools/rustfmt/tests/source/attrib.rs:210:                  all(target_arch = "wasm32", feature = "wasm-bindgen"),
src/tools/rustfmt/tests/source/issue_4475.rs:7:    #[cfg(feature = "foo")]
src/tools/rustfmt/tests/source/issue_4475.rs:16:    #[cfg(feature = "foo")]
src/tools/rustfmt/tests/source/issue_4911.rs:1:#![feature(min_type_alias_impl_trait)]
src/tools/rustfmt/tests/source/wrap_comments_should_not_imply_format_doc_comments.rs:7:/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]
src/tools/rustfmt/tests/source/break-and-continue.rs:3:#![feature(loop_break_value)]
src/tools/rustfmt/tests/source/issue-1800.rs:2:#[cfg(feature    =    "foo")]
src/tools/rustfmt/tests/source/issue-2927-2.rs:2:#![feature(rust_2018_preview, uniform_paths)]
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:1://! Caches run-time feature detection so that it only needs to be computed
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:26:/// Maximum number of features that can be cached.
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:49:            "too many features, time to increase the cache size!"
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:61:            "too many features, time to increase the cache size!"
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:68:/// This global variable is a cache of the features supported by the CPU.
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:71:/// Feature cache with capacity for `CACHE_CAPACITY` features.
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:73:/// Note: the last feature bit is used to represent an
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:105:/// Feature cache with capacity for `CACHE_CAPACITY` features.
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:107:/// Note: the last feature bit is used to represent an
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:150:/// On its first invocation, it detects the CPU features and caches them in the
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:153:/// It uses the `Feature` variant to index into this variable as a bitset. If
src/tools/rustfmt/tests/source/cfg_if/detect/cache.rs:154:/// the bit is set, the feature is enabled, and otherwise it is disabled.
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:1://! This module implements run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:3://! The `is_{arch}_feature_detected!("feature-name")` macros take the name of a
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:4://! feature as a string-literal, and return a boolean indicating whether the
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:5://! feature is enabled at run-time or not.
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:8://! * map the string-literal into an integer stored as a `Feature` enum,
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:9://! * call a `os::check_for(x: Feature)` function that returns `true` if the
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:10://! feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:12://! The `Feature` enums are also implemented in the `arch/{target_arch}.rs`
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:16://! architectures do not allow user-space programs to query the feature bits
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:55:            pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:61:pub use self::arch::Feature;
src/tools/rustfmt/tests/source/cfg_if/detect/mod.rs:71:    } else if #[cfg(all(target_os = "linux", feature = "use_std"))] {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:1://! Run-time feature detection on PowerPC64.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:3:/// Checks if `powerpc64` feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:7:macro_rules! is_powerpc64_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:9:        cfg!(target_feature = "altivec") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:10:            $crate::detect::check_for($crate::detect::Feature::altivec)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:13:        cfg!(target_feature = "vsx") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:14:            $crate::detect::check_for($crate::detect::Feature::vsx)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:17:        cfg!(target_feature = "power8") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:18:            $crate::detect::check_for($crate::detect::Feature::power8)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:21:        is_powerpc64_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:23:    ($t:tt) => { compile_error!(concat!("unknown powerpc64 target feature: ", $t)) };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:27:/// PowerPC64 CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:28:/// for a particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:34:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc64.rs:35:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:1://! Run-time feature detection on MIPS64.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:3:/// Checks if `mips64` feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:7:macro_rules! is_mips64_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:9:        cfg!(target_feature = "msa") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:10:            $crate::detect::check_for($crate::detect::Feature::msa)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:13:        is_mips64_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:15:    ($t:tt) => { compile_error!(concat!("unknown mips64 target feature: ", $t)) };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:18:/// MIPS64 CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:19:/// for a particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:25:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips64.rs:26:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:1://! Run-time feature detection on PowerPC.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:3:/// Checks if `powerpc` feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:7:macro_rules! is_powerpc_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:9:        cfg!(target_feature = "altivec") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:10:            $crate::detect::check_for($crate::detect::Feature::altivec)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:13:        cfg!(target_feature = "vsx") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:14:            $crate::detect::check_for($crate::detect::Feature::vsx)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:17:        cfg!(target_feature = "power8") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:18:            $crate::detect::check_for($crate::detect::Feature::power8)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:21:        is_powerpc_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:23:    ($t:tt) => { compile_error!(concat!("unknown powerpc target feature: ", $t)) };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:27:/// PowerPC CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:28:/// for a particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:34:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/powerpc.rs:35:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:1://! This module implements minimal run-time feature detection for x86.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:3://! The features are detected using the `detect_features` function below.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:4://! This function uses the CPUID instruction to read the feature flags from the
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:6://! whether a feature is available (bit is set) or unavailable (bit is cleared).
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:8://! The enum `Feature` is used to map bit positions to feature names, and the
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:10://! "avx") to these bit positions (e.g., `Feature::avx`).
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:12://! The run-time feature detection is performed by the
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:13://! `__crate::detect::check_for(Feature) -> bool` function. On its first call,
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:14://! this functions queries the CPU for the available features and stores them
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:16://! whether the feature bit in this global variable is set or cleared.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:18:/// A macro to test at *runtime* whether a CPU feature is available on
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:22:/// whether the specified CPU feature is detected. This does **not** resolve at
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:23:/// compile time unless the specified feature is already enabled for the entire
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:26:/// This macro only takes one argument which is a string literal of the feature
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:27:/// being tested for. The feature names supported are the lowercase versions of
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:32:/// This macro supports the same names that `#[target_feature]` supports. Unlike
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:33:/// `#[target_feature]`, however, this macro does not support names separated
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:34:/// with a comma. Instead testing for multiple features must be done through
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:83:#[stable(feature = "simd_x86", since = "1.27.0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:85:macro_rules! is_x86_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:87:        cfg!(target_feature = "aes") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:88:            $crate::detect::Feature::aes)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:90:        cfg!(target_feature = "pclmulqdq") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:91:            $crate::detect::Feature::pclmulqdq)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:93:        cfg!(target_feature = "rdrand") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:94:            $crate::detect::Feature::rdrand)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:96:        cfg!(target_feature = "rdseed") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:97:            $crate::detect::Feature::rdseed)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:99:        cfg!(target_feature = "tsc") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:100:            $crate::detect::Feature::tsc)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:102:        cfg!(target_feature = "mmx") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:103:            $crate::detect::Feature::mmx)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:105:        cfg!(target_feature = "sse") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:106:            $crate::detect::Feature::sse)  };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:108:        cfg!(target_feature = "sse2") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:109:            $crate::detect::Feature::sse2)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:112:        cfg!(target_feature = "sse3") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:113:            $crate::detect::Feature::sse3)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:116:        cfg!(target_feature = "ssse3") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:117:            $crate::detect::Feature::ssse3)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:120:        cfg!(target_feature = "sse4.1") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:121:            $crate::detect::Feature::sse4_1)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:124:        cfg!(target_feature = "sse4.2") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:125:            $crate::detect::Feature::sse4_2)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:128:        cfg!(target_feature = "sse4a") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:129:            $crate::detect::Feature::sse4a)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:132:        cfg!(target_feature = "sha") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:133:            $crate::detect::Feature::sha)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:136:        cfg!(target_feature = "avx") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:137:            $crate::detect::Feature::avx)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:140:        cfg!(target_feature = "avx2") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:141:            $crate::detect::Feature::avx2)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:144:        cfg!(target_feature = "avx512f") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:145:            $crate::detect::Feature::avx512f)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:148:        cfg!(target_feature = "avx512cd") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:149:            $crate::detect::Feature::avx512cd)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:152:        cfg!(target_feature = "avx512er") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:153:            $crate::detect::Feature::avx512er)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:156:        cfg!(target_feature = "avx512pf") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:157:            $crate::detect::Feature::avx512pf)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:160:        cfg!(target_feature = "avx512bw") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:161:            $crate::detect::Feature::avx512bw)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:164:        cfg!(target_feature = "avx512dq") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:165:            $crate::detect::Feature::avx512dq)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:168:        cfg!(target_Feature = "avx512vl") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:169:            $crate::detect::Feature::avx512vl)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:172:        cfg!(target_feature = "avx512ifma") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:173:            $crate::detect::Feature::avx512_ifma)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:176:        cfg!(target_feature = "avx512vbmi") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:177:            $crate::detect::Feature::avx512_vbmi)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:180:        cfg!(target_feature = "avx512vpopcntdq") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:181:            $crate::detect::Feature::avx512_vpopcntdq)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:184:        cfg!(target_feature = "f16c") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:185:            $crate::detect::Feature::f16c)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:188:        cfg!(target_feature = "fma") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:189:            $crate::detect::Feature::fma)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:192:        cfg!(target_feature = "bmi1") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:193:            $crate::detect::Feature::bmi)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:196:        cfg!(target_feature = "bmi2") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:197:            $crate::detect::Feature::bmi2)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:200:        cfg!(target_feature = "abm") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:201:            $crate::detect::Feature::abm)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:204:        cfg!(target_feature = "lzcnt") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:205:            $crate::detect::Feature::abm)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:208:        cfg!(target_feature = "tbm") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:209:            $crate::detect::Feature::tbm)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:212:        cfg!(target_feature = "popcnt") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:213:            $crate::detect::Feature::popcnt)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:216:        cfg!(target_feature = "fxsr") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:217:            $crate::detect::Feature::fxsr)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:220:        cfg!(target_feature = "xsave") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:221:            $crate::detect::Feature::xsave)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:224:        cfg!(target_feature = "xsaveopt") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:225:            $crate::detect::Feature::xsaveopt)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:228:        cfg!(target_feature = "xsaves") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:229:            $crate::detect::Feature::xsaves)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:232:        cfg!(target_feature = "xsavec") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:233:            $crate::detect::Feature::xsavec)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:236:        cfg!(target_feature = "cmpxchg16b") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:237:            $crate::detect::Feature::cmpxchg16b)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:240:        cfg!(target_feature = "adx") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:241:            $crate::detect::Feature::adx)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:244:        cfg!(target_feature = "rtm") || $crate::detect::check_for(
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:245:            $crate::detect::Feature::rtm)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:248:        is_x86_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:251:        compile_error!(concat!("unknown target feature: ", $t))
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:255:/// X86 CPU Feature enum. Each variant denotes a position in a bitset for a
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:256:/// particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:262:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs:263:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:1://! Run-time feature detection on ARM Aarch32.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:3:/// Checks if `arm` feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:7:macro_rules! is_arm_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:9:        cfg!(target_feature = "neon") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:10:            $crate::detect::check_for($crate::detect::Feature::neon)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:13:        cfg!(target_feature = "pmull") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:14:            $crate::detect::check_for($crate::detect::Feature::pmull)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:16:    ("v7") => { compile_error!("\"v7\" feature cannot be detected at run-time") };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:17:    ("vfp2") => { compile_error!("\"vfp2\" feature cannot be detected at run-time") };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:18:    ("vfp3") => { compile_error!("\"vfp3\" feature cannot be detected at run-time") };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:19:    ("vfp4") => { compile_error!("\"vfp4\" feature cannot be detected at run-time") };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:21:        is_arm_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:23:    ($t:tt) => { compile_error!(concat!("unknown arm target feature: ", $t)) };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:26:/// ARM CPU Feature enum. Each variant denotes a position in a bitset for a
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:27:/// particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:33:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/arm.rs:34:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:1://! Run-time feature detection on MIPS.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:3:/// Checks if `mips` feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:7:macro_rules! is_mips_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:9:        cfg!(target_feature = "msa") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:10:            $crate::detect::check_for($crate::detect::Feature::msa)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:13:        is_mips_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:15:    ($t:tt) => { compile_error!(concat!("unknown mips target feature: ", $t)) };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:18:/// MIPS CPU Feature enum. Each variant denotes a position in a bitset for a
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:19:/// particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:25:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/mips.rs:26:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:1://! Aarch64 run-time features.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:3:/// Checks if `aarch64` feature is enabled.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:5:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:7:macro_rules! is_aarch64_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:10:        cfg!(target_feature = "neon") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:11:            $crate::detect::check_for($crate::detect::Feature::asimd)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:14:        cfg!(target_feature = "neon") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:15:            $crate::detect::check_for($crate::detect::Feature::asimd)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:18:        cfg!(target_feature = "pmull") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:19:            $crate::detect::check_for($crate::detect::Feature::pmull)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:22:        cfg!(target_feature = "fp") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:23:            $crate::detect::check_for($crate::detect::Feature::fp)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:26:        cfg!(target_feature = "fp16") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:27:            $crate::detect::check_for($crate::detect::Feature::fp16)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:30:        cfg!(target_feature = "sve") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:31:            $crate::detect::check_for($crate::detect::Feature::sve)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:34:        cfg!(target_feature = "crc") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:35:            $crate::detect::check_for($crate::detect::Feature::crc)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:38:        cfg!(target_feature = "crypto") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:39:            $crate::detect::check_for($crate::detect::Feature::crypto)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:42:        cfg!(target_feature = "lse") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:43:            $crate::detect::check_for($crate::detect::Feature::lse)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:46:        cfg!(target_feature = "rdm") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:47:            $crate::detect::check_for($crate::detect::Feature::rdm)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:50:        cfg!(target_feature = "rcpc") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:51:            $crate::detect::check_for($crate::detect::Feature::rcpc)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:54:        cfg!(target_feature = "dotprod") ||
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:55:            $crate::detect::check_for($crate::detect::Feature::dotprod)
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:58:        compile_error!("\"ras\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:61:        compile_error!("\"v8.1a\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:64:        compile_error!("\"v8.2a\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:67:        compile_error!("\"v8.3a\" feature cannot be detected at run-time")
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:70:        is_aarch64_feature_detected!($t);
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:72:    ($t:tt) => { compile_error!(concat!("unknown aarch64 target feature: ", $t)) };
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:75:/// ARM Aarch64 CPU Feature enum. Each variant denotes a position in a bitset
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:76:/// for a particular feature.
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:82:#[unstable(feature = "stdsimd_internal", issue = "0")]
src/tools/rustfmt/tests/source/cfg_if/detect/arch/aarch64.rs:83:pub enum Feature {
src/tools/rustfmt/tests/source/cfg_if/detect/os/other.rs:3:use crate::detect::Feature;
src/tools/rustfmt/tests/source/cfg_if/detect/os/other.rs:5:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/other.rs:7:pub fn check_for(_x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/mod.rs:1://! Run-time feature detection on FreeBSD
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/mod.rs:16:        use crate::arch::detect::Feature;
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/mod.rs:17:        /// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/mod.rs:18:        pub fn check_for(_x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:1://! Run-time feature detection for PowerPC on FreeBSD.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:3:use crate::detect::{Feature, cache};
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:12:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:14:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:21:        enable_feature(&mut value, Feature::altivec, auxv.hwcap & 0x10000000 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:22:        enable_feature(&mut value, Feature::vsx, auxv.hwcap & 0x00000080 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/powerpc.rs:23:        enable_feature(&mut value, Feature::power8, auxv.hwcap2 & 0x80000000 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:1://! Run-time feature detection for ARM on FreeBSD
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:3:use crate::detect::{Feature, cache};
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:12:/// Try to read the features from the auxiliary vector
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:13:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:15:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:22:        enable_feature(&mut value, Feature::neon, auxv.hwcap & 0x00001000 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/arm.rs:23:        enable_feature(&mut value, Feature::pmull, auxv.hwcap2 & 0x00000002 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:1://! Run-time feature detection for Aarch64 on FreeBSD.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:3:use crate::detect::{Feature, cache};
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:4:use super::super::aarch64::detect_features;
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:16:        println!("asimd: {:?}", is_aarch64_feature_detected!("asimd"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:17:        println!("pmull: {:?}", is_aarch64_feature_detected!("pmull"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:18:        println!("fp: {:?}", is_aarch64_feature_detected!("fp"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:19:        println!("fp16: {:?}", is_aarch64_feature_detected!("fp16"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:20:        println!("sve: {:?}", is_aarch64_feature_detected!("sve"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:21:        println!("crc: {:?}", is_aarch64_feature_detected!("crc"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:22:        println!("crypto: {:?}", is_aarch64_feature_detected!("crypto"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:23:        println!("lse: {:?}", is_aarch64_feature_detected!("lse"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:24:        println!("rdm: {:?}", is_aarch64_feature_detected!("rdm"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:25:        println!("rcpc: {:?}", is_aarch64_feature_detected!("rcpc"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/aarch64.rs:26:        println!("dotprod: {:?}", is_aarch64_feature_detected!("dotprod"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/auxvec.rs:12:/// This should be interpreted as all the features being disabled.
src/tools/rustfmt/tests/source/cfg_if/detect/os/freebsd/auxvec.rs:28:/// Note that run-time feature detection is not invoked for features that can
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:163:        Features    : fp asimd evtstrm aes pmull sha1 sha2 crc32
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:181:            cpuinfo.field("Features"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:184:        assert!(cpuinfo.field("Features").has("pmull"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:185:        assert!(!cpuinfo.field("Features").has("neon"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:186:        assert!(cpuinfo.field("Features").has("asimd"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:194:Features	: fp asimd aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:209:            cpuinfo.field("Features"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:212:        assert!(cpuinfo.field("Features").has("pmull"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:213:        assert!(cpuinfo.field("Features").has("neon"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/cpuinfo.rs:214:        assert!(cpuinfo.field("Features").has("asimd"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mod.rs:1://! Run-time feature detection on Linux
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mod.rs:5:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mod.rs:22:        use crate::detect::Feature;
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mod.rs:23:        /// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mod.rs:24:        pub fn check_for(_x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:1://! Run-time feature detection for PowerPC on Linux.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:3:use crate::detect::{Feature, cache};
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:16:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:28:        enable_feature(&mut value, Feature::altivec, auxv.hwcap & 0x10000000 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:29:        enable_feature(&mut value, Feature::vsx, auxv.hwcap & 0x00000080 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:30:        enable_feature(&mut value, Feature::power8, auxv.hwcap2 & 0x80000000 != 0);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:34:    // PowerPC's /proc/cpuinfo lacks a proper Feature field,
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/powerpc.rs:37:        enable_feature(&mut value, Feature::altivec, c.field("cpu").has("altivec"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:1://! Run-time feature detection for ARM on Linux.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:3:use crate::detect::{Feature, cache, bit};
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:16:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:26:        enable_feature(&mut value, Feature::neon, bit::test(auxv.hwcap, 12));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:27:        enable_feature(&mut value, Feature::pmull, bit::test(auxv.hwcap2, 1));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:32:        enable_feature(&mut value, Feature::neon, c.field("Features").has("neon") &&
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/arm.rs:34:        enable_feature(&mut value, Feature::pmull, c.field("Features").has("pmull"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:1://! Run-time feature detection for MIPS on Linux.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:3:use crate::detect::{Feature, cache, bit};
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:16:    let enable_feature = |value: &mut cache::Initializer, f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/mips.rs:26:        enable_feature(&mut value, Feature::msa, bit::test(auxv.hwcap, 1));
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:1://! Run-time feature detection for Aarch64 on Linux.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:3:use crate::detect::{Feature, cache, bit};
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:6:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:8:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:9:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:12:/// Try to read the features from the auxiliary vector, and if that fails, try
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:14:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:89:        let f = &c.field("Features");
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:92:            // map some of the 64-bit names to some 32-bit feature names. This does not
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:122:    /// Initializes the cache from the feature -bits.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:124:    /// The features are enabled approximately like in LLVM host feature detection:
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:129:            let mut enable_feature = |f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:135:            enable_feature(Feature::fp, self.fp);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:137:            enable_feature(Feature::fp16, self.fp && self.fphp);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:138:            enable_feature(Feature::pmull, self.pmull);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:139:            enable_feature(Feature::crc, self.crc32);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:140:            enable_feature(Feature::lse, self.atomics);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:141:            enable_feature(Feature::rcpc, self.lrcpc);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:146:            enable_feature(Feature::asimd, asimd);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:148:            enable_feature(Feature::rdm, self.asimdrdm && asimd);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:149:            enable_feature(Feature::dotprod, self.asimddp && asimd);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:150:            enable_feature(Feature::sve, self.sve && asimd);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/aarch64.rs:153:            enable_feature(Feature::crypto, self.aes && self.pmull && self.sha1 && self.sha2);
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:4:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:16:/// This should be interpreted as all the features being disabled.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:35:/// - If the `std_detect_dlsym_getauxval` cargo feature is enabled, this will use
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:39:/// - Otherwise, if the `std_detect_file_io` cargo feature is enabled, it will
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:43:/// Note that run-time feature detection is not invoked for features that can
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:46:/// feature detecton on some platforms.
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:54:    #[cfg(feature = "std_detect_dlsym_getauxval")] {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:77:        #[cfg(feature = "std_detect_file_io")] {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:82:        #[cfg(not(feature = "std_detect_file_io"))] {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:87:    #[cfg(not(feature = "std_detect_dlsym_getauxval"))] {
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:113:#[cfg(feature = "std_detect_dlsym_getauxval")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:133:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:153:#[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:194:    #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:248:    #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/linux/auxvec.rs:283:    #[cfg(feature = "std_detect_file_io")]
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:1://! x86 run-time feature detection is OS independent.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:10:use crate::detect::{Feature, cache, bit};
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:12:/// Performs run-time feature detection.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:14:pub fn check_for(x: Feature) -> bool {
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:15:    cache::test(x as u32, detect_features)
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:18:/// Run-time feature detection on x86 works by using the CPUID instruction.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:34:fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:38:    // old to support any of the currently-detectable features.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:72:    // EAX = 1, ECX = 0: Queries "Processor Info and Feature Bits";
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:73:    // Contains information about most x86 features.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:80:    // EAX = 7, ECX = 0: Queries "Extended Features";
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:82:    let (extended_features_ebx, extended_features_ecx) = if max_basic_leaf >= 7
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:87:        (0, 0) // CPUID does not support "Extended Features"
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:98:    // EAX = 0x8000_0001, ECX=0: Queries "Extended Processor Info and Feature
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:115:        enable(proc_info_ecx, 0, Feature::sse3);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:116:        enable(proc_info_ecx, 1, Feature::pclmulqdq);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:117:        enable(proc_info_ecx, 9, Feature::ssse3);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:118:        enable(proc_info_ecx, 13, Feature::cmpxchg16b);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:119:        enable(proc_info_ecx, 19, Feature::sse4_1);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:120:        enable(proc_info_ecx, 20, Feature::sse4_2);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:121:        enable(proc_info_ecx, 23, Feature::popcnt);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:122:        enable(proc_info_ecx, 25, Feature::aes);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:123:        enable(proc_info_ecx, 29, Feature::f16c);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:124:        enable(proc_info_ecx, 30, Feature::rdrand);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:125:        enable(extended_features_ebx, 18, Feature::rdseed);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:126:        enable(extended_features_ebx, 19, Feature::adx);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:127:        enable(extended_features_ebx, 11, Feature::rtm);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:128:        enable(proc_info_edx, 4, Feature::tsc);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:129:        enable(proc_info_edx, 23, Feature::mmx);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:130:        enable(proc_info_edx, 24, Feature::fxsr);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:131:        enable(proc_info_edx, 25, Feature::sse);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:132:        enable(proc_info_edx, 26, Feature::sse2);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:133:        enable(extended_features_ebx, 29, Feature::sha);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:135:        enable(extended_features_ebx, 3, Feature::bmi);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:136:        enable(extended_features_ebx, 8, Feature::bmi2);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:175:                    // See "13.3 ENABLING THE XSAVE FEATURE SET AND XSAVE-ENABLED
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:176:                    // FEATURES" in the "Intel® 64 and IA-32 Architectures Software
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:179:                    // "Software enables the XSAVE feature set by setting
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:185:                    enable(proc_info_ecx, 26, Feature::xsave);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:195:                        enable(proc_extended_state1_eax, 0, Feature::xsaveopt);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:196:                        enable(proc_extended_state1_eax, 1, Feature::xsavec);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:197:                        enable(proc_extended_state1_eax, 3, Feature::xsaves);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:201:                    enable(proc_info_ecx, 12, Feature::fma);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:204:                    enable(proc_info_ecx, 28, Feature::avx);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:205:                    enable(extended_features_ebx, 5, Feature::avx2);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:210:                        enable(extended_features_ebx, 16, Feature::avx512f);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:211:                        enable(extended_features_ebx, 17, Feature::avx512dq);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:212:                        enable(extended_features_ebx, 21, Feature::avx512_ifma);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:213:                        enable(extended_features_ebx, 26, Feature::avx512pf);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:214:                        enable(extended_features_ebx, 27, Feature::avx512er);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:215:                        enable(extended_features_ebx, 28, Feature::avx512cd);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:216:                        enable(extended_features_ebx, 30, Feature::avx512bw);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:217:                        enable(extended_features_ebx, 31, Feature::avx512vl);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:218:                        enable(extended_features_ecx, 1, Feature::avx512_vbmi);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:220:                            extended_features_ecx,
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:222:                            Feature::avx512_vpopcntdq,
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:232:        // internal feature.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:234:        // The `is_x86_feature_detected!("lzcnt")` macro then
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:235:        // internally maps to Feature::abm.
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:236:        enable(extended_proc_info_ecx, 5, Feature::abm);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:241:        // For CPUID feature bits, Hygon Dhyana(family 18h) share the same definition with AMD
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:248:            // These features are available on AMD arch CPUs:
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:249:            enable(extended_proc_info_ecx, 6, Feature::sse4a);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:250:            enable(extended_proc_info_ecx, 21, Feature::tbm);
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:263:        println!("aes: {:?}", is_x86_feature_detected!("aes"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:264:        println!("pclmulqdq: {:?}", is_x86_feature_detected!("pclmulqdq"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:265:        println!("rdrand: {:?}", is_x86_feature_detected!("rdrand"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:266:        println!("rdseed: {:?}", is_x86_feature_detected!("rdseed"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:267:        println!("tsc: {:?}", is_x86_feature_detected!("tsc"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:268:        println!("sse: {:?}", is_x86_feature_detected!("sse"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:269:        println!("sse2: {:?}", is_x86_feature_detected!("sse2"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:270:        println!("sse3: {:?}", is_x86_feature_detected!("sse3"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:271:        println!("ssse3: {:?}", is_x86_feature_detected!("ssse3"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:272:        println!("sse4.1: {:?}", is_x86_feature_detected!("sse4.1"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:273:        println!("sse4.2: {:?}", is_x86_feature_detected!("sse4.2"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:274:        println!("sse4a: {:?}", is_x86_feature_detected!("sse4a"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:275:        println!("sha: {:?}", is_x86_feature_detected!("sha"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:276:        println!("avx: {:?}", is_x86_feature_detected!("avx"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:277:        println!("avx2: {:?}", is_x86_feature_detected!("avx2"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:278:        println!("avx512f {:?}", is_x86_feature_detected!("avx512f"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:279:        println!("avx512cd {:?}", is_x86_feature_detected!("avx512cd"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:280:        println!("avx512er {:?}", is_x86_feature_detected!("avx512er"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:281:        println!("avx512pf {:?}", is_x86_feature_detected!("avx512pf"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:282:        println!("avx512bw {:?}", is_x86_feature_detected!("avx512bw"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:283:        println!("avx512dq {:?}", is_x86_feature_detected!("avx512dq"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:284:        println!("avx512vl {:?}", is_x86_feature_detected!("avx512vl"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:285:        println!("avx512_ifma {:?}", is_x86_feature_detected!("avx512ifma"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:286:        println!("avx512_vbmi {:?}", is_x86_feature_detected!("avx512vbmi"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:289:            is_x86_feature_detected!("avx512vpopcntdq")
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:291:        println!("fma: {:?}", is_x86_feature_detected!("fma"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:292:        println!("abm: {:?}", is_x86_feature_detected!("abm"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:293:        println!("bmi: {:?}", is_x86_feature_detected!("bmi1"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:294:        println!("bmi2: {:?}", is_x86_feature_detected!("bmi2"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:295:        println!("tbm: {:?}", is_x86_feature_detected!("tbm"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:296:        println!("popcnt: {:?}", is_x86_feature_detected!("popcnt"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:297:        println!("lzcnt: {:?}", is_x86_feature_detected!("lzcnt"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:298:        println!("fxsr: {:?}", is_x86_feature_detected!("fxsr"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:299:        println!("xsave: {:?}", is_x86_feature_detected!("xsave"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:300:        println!("xsaveopt: {:?}", is_x86_feature_detected!("xsaveopt"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:301:        println!("xsaves: {:?}", is_x86_feature_detected!("xsaves"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:302:        println!("xsavec: {:?}", is_x86_feature_detected!("xsavec"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:303:        println!("cmpxchg16b: {:?}", is_x86_feature_detected!("cmpxchg16b"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:304:        println!("adx: {:?}", is_x86_feature_detected!("adx"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:305:        println!("rtm: {:?}", is_x86_feature_detected!("rtm"));
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:311:        assert_eq!(is_x86_feature_detected!("aes"), information.aesni());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:312:        assert_eq!(is_x86_feature_detected!("pclmulqdq"), information.pclmulqdq());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:313:        assert_eq!(is_x86_feature_detected!("rdrand"), information.rdrand());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:314:        assert_eq!(is_x86_feature_detected!("rdseed"), information.rdseed());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:315:        assert_eq!(is_x86_feature_detected!("tsc"), information.tsc());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:316:        assert_eq!(is_x86_feature_detected!("sse"), information.sse());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:317:        assert_eq!(is_x86_feature_detected!("sse2"), information.sse2());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:318:        assert_eq!(is_x86_feature_detected!("sse3"), information.sse3());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:319:        assert_eq!(is_x86_feature_detected!("ssse3"), information.ssse3());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:320:        assert_eq!(is_x86_feature_detected!("sse4.1"), information.sse4_1());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:321:        assert_eq!(is_x86_feature_detected!("sse4.2"), information.sse4_2());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:322:        assert_eq!(is_x86_feature_detected!("sse4a"), information.sse4a());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:323:        assert_eq!(is_x86_feature_detected!("sha"), information.sha());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:324:        assert_eq!(is_x86_feature_detected!("avx"), information.avx());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:325:        assert_eq!(is_x86_feature_detected!("avx2"), information.avx2());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:326:        assert_eq!(is_x86_feature_detected!("avx512f"), information.avx512f());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:327:        assert_eq!(is_x86_feature_detected!("avx512cd"), information.avx512cd());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:328:        assert_eq!(is_x86_feature_detected!("avx512er"), information.avx512er());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:329:        assert_eq!(is_x86_feature_detected!("avx512pf"), information.avx512pf());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:330:        assert_eq!(is_x86_feature_detected!("avx512bw"), information.avx512bw());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:331:        assert_eq!(is_x86_feature_detected!("avx512dq"), information.avx512dq());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:332:        assert_eq!(is_x86_feature_detected!("avx512vl"), information.avx512vl());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:334:            is_x86_feature_detected!("avx512ifma"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:338:            is_x86_feature_detected!("avx512vbmi"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:342:            is_x86_feature_detected!("avx512vpopcntdq"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:345:        assert_eq!(is_x86_feature_detected!("fma"), information.fma());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:346:        assert_eq!(is_x86_feature_detected!("bmi1"), information.bmi1());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:347:        assert_eq!(is_x86_feature_detected!("bmi2"), information.bmi2());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:348:        assert_eq!(is_x86_feature_detected!("popcnt"), information.popcnt());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:349:        assert_eq!(is_x86_feature_detected!("abm"), information.lzcnt());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:350:        assert_eq!(is_x86_feature_detected!("tbm"), information.tbm());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:351:        assert_eq!(is_x86_feature_detected!("lzcnt"), information.lzcnt());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:352:        assert_eq!(is_x86_feature_detected!("xsave"), information.xsave());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:353:        assert_eq!(is_x86_feature_detected!("xsaveopt"), information.xsaveopt());
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:355:            is_x86_feature_detected!("xsavec"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:359:            is_x86_feature_detected!("xsaves"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:363:            is_x86_feature_detected!("cmpxchg16b"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:367:            is_x86_feature_detected!("adx"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/x86.rs:371:            is_x86_feature_detected!("rtm"),
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:1://! Run-time feature detection for Aarch64 on any OS that emulates the mrs instruction.
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:4://! privileged system registers from userspace to check CPU feature support.
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:7://! have bits dedicated to features like AdvSIMD, CRC32, AES, atomics (LSE), etc.
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:8://! Each part of the register indicates the level of support for a certain feature, e.g.
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:12://! the OS has to always report only the features supported by all cores, like [FreeBSD does](https://reviews.freebsd.org/D17137#393947).
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:16://! - [Zircon implementation](https://fuchsia.googlesource.com/zircon/+/master/kernel/arch/arm64/feature.cpp)
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:17://! - [Linux documentation](https://www.kernel.org/doc/Documentation/arm64/cpu-feature-registers.txt)
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:19:use crate::detect::{Feature, cache};
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:21:/// Try to read the features from the system registers.
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:24:pub(crate) fn detect_features() -> cache::Initializer {
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:28:        let mut enable_feature = |f, enable| {
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:42:        enable_feature(Feature::pmull, pmull);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:44:        enable_feature(Feature::crypto, aes && pmull && sha1 && sha2);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:45:        enable_feature(Feature::lse, bits_shift(aa64isar0, 23, 20) >= 1);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:46:        enable_feature(Feature::crc, bits_shift(aa64isar0, 19, 16) >= 1);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:48:        // ID_AA64PFR0_EL1 - Processor Feature Register 0
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:56:        enable_feature(Feature::fp, fp);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:57:        enable_feature(Feature::fp16, fphp);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:60:        enable_feature(Feature::asimd, fp && asimd && (!fphp | asimdhp));
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:62:        enable_feature(Feature::rdm, asimd && bits_shift(aa64isar0, 31, 28) >= 1);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:63:        enable_feature(Feature::dotprod, asimd && bits_shift(aa64isar0, 47, 44) >= 1);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:64:        enable_feature(Feature::sve, asimd && bits_shift(aa64pfr0, 35, 32) >= 1);
src/tools/rustfmt/tests/source/cfg_if/detect/os/aarch64.rs:70:        enable_feature(Feature::rcpc, bits_shift(aa64isar1, 23, 20) >= 1);
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:1://! The `is_{target_arch}_feature_detected!` macro are only available on their
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:5:/// Prevents compilation if `is_x86_feature_detected` is used somewhere
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:9:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:10:macro_rules! is_x86_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:14:        is_x86_feature_detected can only be used on x86 and x86_64 targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:19:                if is_x86_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:26:/// Prevents compilation if `is_arm_feature_detected` is used somewhere else
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:30:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:31:macro_rules! is_arm_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:35:        is_arm_feature_detected can only be used on ARM targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:40:                if is_arm_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:47:/// Prevents compilation if `is_aarch64_feature_detected` is used somewhere else
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:51:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:52:macro_rules! is_aarch64_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:56:        is_aarch64_feature_detected can only be used on AArch64 targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:61:                if is_aarch64_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:68:/// Prevents compilation if `is_powerpc_feature_detected` is used somewhere else
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:72:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:73:macro_rules! is_powerpc_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:77:is_powerpc_feature_detected can only be used on PowerPC targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:82:        if is_powerpc_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:89:/// Prevents compilation if `is_powerpc64_feature_detected` is used somewhere
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:93:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:94:macro_rules! is_powerpc64_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:98:is_powerpc64_feature_detected can only be used on PowerPC64 targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:103:        if is_powerpc64_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:110:/// Prevents compilation if `is_mips_feature_detected` is used somewhere else
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:114:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:115:macro_rules! is_mips_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:119:        is_mips_feature_detected can only be used on MIPS targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:124:                if is_mips_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:131:/// Prevents compilation if `is_mips64_feature_detected` is used somewhere else
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:135:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:136:macro_rules! is_mips64_feature_detected {
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:140:        is_mips64_feature_detected can only be used on MIPS64 targets.
src/tools/rustfmt/tests/source/cfg_if/detect/error_macros.rs:145:                if is_mips64_feature_detected(...) { ... }
src/tools/rustfmt/tests/source/cfg_if/lib.rs:1://! Run-time feature detection for the Rust standard library.
src/tools/rustfmt/tests/source/cfg_if/lib.rs:3://! To detect whether a feature is enabled in the system running the binary
src/tools/rustfmt/tests/source/cfg_if/lib.rs:6://! * `x86` and `x86_64`: [`is_x86_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:7://! * `arm`: [`is_arm_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:8://! * `aarch64`: [`is_aarch64_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:9://! * `mips`: [`is_mips_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:10://! * `mips64`: [`is_mips64_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:11://! * `powerpc`: [`is_powerpc_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:12://! * `powerpc64`: [`is_powerpc64_feature_detected`]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:14:#![unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:15:#![feature(const_fn, staged_api, stdsimd, doc_cfg, allow_internal_unstable)]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:18:#![cfg_attr(target_os = "linux", feature(linkage))]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:19:#![cfg_attr(all(target_os = "freebsd", target_arch = "aarch64"), feature(asm))]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:28:    if #[cfg(feature = "std_detect_file_io")] {
src/tools/rustfmt/tests/source/cfg_if/lib.rs:44:#[cfg(feature = "std_detect_dlsym_getauxval")]
src/tools/rustfmt/tests/source/cfg_if/lib.rs:48:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/cfg_if/mod.rs:4:#[unstable(feature = "stdsimd", issue = "27731")]
src/tools/rustfmt/tests/source/existential_type.rs:3:    #![feature(type_alias_impl_trait)]
src/tools/rustfmt/tests/cargo-fmt/source/issue_3164/src/main.rs:6:                #[cfg(any(target_feature = $id2, target_feature = $id2, target_feature = $id2, target_feature = $id2, target_feature = $id2))]
src/tools/rustfmt/Configurations.md:14:To enable unstable options, set `unstable_features = true` in `rustfmt.toml` or pass `--unstable-features` to rustfmt.
src/tools/rustfmt/Configurations.md:1645:#[cfg(feature = "alloc")]
src/tools/rustfmt/Configurations.md:1651:#[cfg(feature = "alloc")] use core::slice;
src/tools/rustfmt/Configurations.md:2807:## `unstable_features`
src/tools/rustfmt/Configurations.md:2809:Enable unstable features on the unstable channel.
src/tools/rustfmt/README.md:89:environment variable. This was added in v1.4.22, so you must have this version or newer to leverage this feature (`cargo fmt --version`)
src/tools/rustfmt/Contributing.md:80:Talking of tests, if you add a new feature or fix a bug, please also add a test.
src/tools/rustfmt/Contributing.md:254:creating a configuration option for the feature you are implementing. All
src/tools/rustfmt/.github/workflows/check_diff.yml:9:        description: 'Name of the feature branch on the forked repo'
src/tools/rustfmt/.github/workflows/check_diff.yml:12:        description: 'Optional commit hash from the feature branch'
src/tools/rustfmt/.github/workflows/check_diff.yml:15:        description: 'Optional comma separated list of rustfmt config options to pass when running the feature branch'
src/tools/rustfmt/Design.md:111:specifically don't want to have to wait for a feature (or worse, the whole tool)
src/tools/rustfmt/Design.md:113:the source code where we can't yet reformat, be able to turn off new features
src/tools/rustfmt/src/test/configuration_snippet.rs:14:// This enum is used to represent one of three text features in Configurations.md: a block of code
src/tools/rustfmt/src/test/mod.rs:642:                 features which are only available on nightly...",
src/tools/rustfmt/src/bin/main.rs:1:#![feature(rustc_private)]
src/tools/rustfmt/src/bin/main.rs:160:            "unstable-features",
src/tools/rustfmt/src/bin/main.rs:161:            "Enables unstable features. Only available on nightly channel.",
src/tools/rustfmt/src/bin/main.rs:214:            Config::print_docs(&mut stdout(), options.unstable_features);
src/tools/rustfmt/src/bin/main.rs:524:    unstable_features: bool,
src/tools/rustfmt/src/bin/main.rs:541:            options.unstable_features = matches.opt_present("unstable-features");
src/tools/rustfmt/src/bin/main.rs:543:            if options.unstable_features {
src/tools/rustfmt/src/bin/main.rs:567:                        "Unstable option{} ({}) used without `--unstable-features`",
src/tools/rustfmt/src/bin/main.rs:626:                         value without `--unstable-features`",
src/tools/rustfmt/src/bin/main.rs:665:        config.set().unstable_features(self.unstable_features);
src/tools/rustfmt/src/config/config_type.rs:503:                "Warning: can't set `{} = {:?}`, unstable features are only \
src/tools/rustfmt/src/config/mod.rs:168:    unstable_features: bool, false, false,
src/tools/rustfmt/src/config/mod.rs:169:            "Enables unstable features. Only available on nightly channel";
src/tools/rustfmt/src/config/mod.rs:684:unstable_features = false
src/tools/rustfmt/src/config/mod.rs:704:        assert_eq!(config.was_set().unstable_features(), false);
src/tools/rustfmt/src/config/mod.rs:705:        config.set().unstable_features(true);
src/tools/rustfmt/src/config/mod.rs:706:        assert_eq!(config.was_set().unstable_features(), false);
src/tools/rustfmt/src/config/mod.rs:713:        config.set().unstable_features(true);
src/tools/rustfmt/src/config/mod.rs:716:        assert_eq!(config.was_set().unstable_features(), false);
src/tools/rustfmt/src/config/mod.rs:717:        config.set().unstable_features(true);
src/tools/rustfmt/src/config/mod.rs:718:        assert_eq!(config.unstable_features(), true);
src/tools/rustfmt/src/config/mod.rs:724:        let config = Config::from_toml("unstable_features = true", Path::new("")).unwrap();
src/tools/rustfmt/src/config/mod.rs:725:        assert_eq!(config.was_set().unstable_features(), true);
src/tools/rustfmt/src/config/mod.rs:726:        assert_eq!(config.unstable_features(), true);
src/tools/rustfmt/src/config/mod.rs:737:                unstable_features = true
src/tools/rustfmt/src/config/mod.rs:748:                unstable_features = true
src/tools/rustfmt/src/config/mod.rs:760:                unstable_features = true
src/tools/rustfmt/src/config/mod.rs:772:                unstable_features = true
src/tools/rustfmt/src/lib.rs:1:#![feature(rustc_private)]
src/tools/rustfmt/src/modules.rs:367:        // Look for nested path, like `#[cfg_attr(feature = "foo", path = "bar.rs")]`.
src/tools/rustfmt/src/modules.rs:506:        // Filter nested path, like `#[cfg_attr(feature = "foo", path = "bar.rs")]`.
src/tools/rustfmt/src/visitor.rs:483:        // TODO(calebcartwright): consider enabling box_patterns feature gate
src/tools/rustfmt/src/visitor.rs:631:        // TODO(calebcartwright): consider enabling box_patterns feature gate
src/tools/error_index_generator/Cargo.toml:7:mdbook = { version = "0.4", default-features = false, features = ["search"] }
src/tools/error_index_generator/main.rs:1:#![feature(rustc_private)]
src/tools/collect-license-metadata/Cargo.toml:8:serde = { version = "1.0.147", features = ["derive"] }
src/tools/collect-license-metadata/src/reuse.rs:40:        eprintln!("Note that Rust requires some REUSE features that might not be present in the");
src/tools/build-manifest/Cargo.toml:8:serde = { version = "1.0", features = ["derive"] }
src/bootstrap/bootstrap.py:918:        target_features = []
src/bootstrap/bootstrap.py:920:            target_features += ["+crt-static"]
src/bootstrap/bootstrap.py:922:            target_features += ["-crt-static"]
src/bootstrap/bootstrap.py:923:        if target_features:
src/bootstrap/bootstrap.py:924:            env["RUSTFLAGS"] += " -C target-feature=" + (",".join(target_features))
src/bootstrap/bootstrap.py:949:            args.append("--features")
src/bootstrap/format.rs:19:    cmd.arg("--unstable-features");
src/bootstrap/Cargo.toml:39:object = { version = "0.31.1", default-features = false, features = ["archive", "coff", "read_core", "unaligned"] }
src/bootstrap/Cargo.toml:41:# Directly use serde_derive rather than through the derive feature of serde to allow building both
src/bootstrap/Cargo.toml:55:# Dependencies needed by the build-metrics feature
src/bootstrap/Cargo.toml:57:clap = { version = "4.2.4", default-features = false, features = ["std", "usage", "help", "derive", "error-context"] }
src/bootstrap/Cargo.toml:70:features = [
src/bootstrap/Cargo.toml:83:[features]
src/bootstrap/test.rs:314:        // Forcibly disable tests using nightly features since any changes to
src/bootstrap/test.rs:315:        // those features won't be able to land.
src/bootstrap/test.rs:319:        #[cfg(feature = "build-metrics")]
src/bootstrap/test.rs:378:        cargo.allow_features(tool::RustAnalyzer::ALLOW_FEATURES);
src/bootstrap/test.rs:419:            .ensure(tool::Rustfmt { compiler, target: self.host, extra_features: Vec::new() })
src/bootstrap/test.rs:468:            .ensure(tool::RustDemangler { compiler, target: self.host, extra_features: Vec::new() })
src/bootstrap/test.rs:601:            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })
src/bootstrap/test.rs:604:            .ensure(tool::CargoMiri { compiler, target: self.host, extra_features: Vec::new() })
src/bootstrap/test.rs:725:        // compiletest uses unstable features of the `test` crate.
src/bootstrap/test.rs:737:        cargo.allow_features("test");
src/bootstrap/test.rs:777:            .ensure(tool::Clippy { compiler, target: self.host, extra_features: Vec::new() })
src/bootstrap/test.rs:1541:                    extra_features: Vec::new(),
src/bootstrap/test.rs:1845:        #[cfg(feature = "build-metrics")]
src/bootstrap/test.rs:1870:            #[cfg(feature = "build-metrics")]
src/bootstrap/test.rs:1948:        // Books often have feature-gated example text.
src/bootstrap/test.rs:2218:    #[cfg(feature = "build-metrics")]
src/bootstrap/test.rs:2446:            cargo.arg("'-Ctarget-feature=-crt-static'");
src/bootstrap/test.rs:2540:            ["'-Ctarget-feature=-crt-static'"].as_slice()
src/bootstrap/test.rs:2671:                // which uses the unstable `public-dependency` feature.
src/bootstrap/channel.rs:4://! flags like the `unstable_features`, calculating variables like `release` and
src/bootstrap/bin/rustdoc.rs:53:    // allow the `rustc_private` feature to link to other unstable crates
src/bootstrap/bin/rustc.rs:131:                cmd.arg("-C").arg("target-feature=+crt-static");
src/bootstrap/bin/rustc.rs:134:                cmd.arg("-C").arg("target-feature=-crt-static");
src/bootstrap/bin/rustc.rs:155:    // allow the `rustc_private` feature to link to other unstable crates
src/bootstrap/bin/rustc.rs:162:    // allow-features is handled from within this rustc wrapper because of
src/bootstrap/bin/rustc.rs:164:    // dynamically detect if certain nightly features are available.
src/bootstrap/bin/rustc.rs:167:    // * rustix runs `rustc` on a small test program to see if the feature is
src/bootstrap/bin/rustc.rs:171:    //   nightly features. It will scan CARGO_ENCODED_RUSTFLAGS for
src/bootstrap/bin/rustc.rs:172:    //   -Zallow-features. Unfortunately CARGO_ENCODED_RUSTFLAGS is not set
src/bootstrap/bin/rustc.rs:176:    // `cargo -Zallow-features=…`. Passing it through here ensures that it
src/bootstrap/bin/rustc.rs:178:    // features than we really want (like those for proc-macro2), but there
src/bootstrap/bin/rustc.rs:182:    // since changes to nightly features can cause crates to break even if the
src/bootstrap/bin/rustc.rs:183:    // user didn't want or care about the use of the nightly features. I think
src/bootstrap/bin/rustc.rs:184:    // nightly features should be opt-in only. Unfortunately the dynamic
src/bootstrap/bin/rustc.rs:191:    // very difficult, but could help expose -Zallow-features into build
src/bootstrap/bin/rustc.rs:193:    if let Ok(allow_features) = env::var("RUSTC_ALLOW_FEATURES") {
src/bootstrap/bin/rustc.rs:194:        cmd.arg(format!("-Zallow-features={allow_features}"));
src/bootstrap/CHANGELOG.md:21:- `--exclude` no longer accepts a `Kind` as part of a Step; instead it uses the top-level Kind of the subcommand. If this matches how you were already using --exclude (e.g. `x test --exclude test::std`), simply remove the kind: `--exclude std`. If you were using a kind that did not match the top-level subcommand, please open an issue explaining why you wanted this feature.
src/bootstrap/CHANGELOG.md:59:This is the first changelog entry, and it does not attempt to be an exhaustive list of features in x.py.
src/bootstrap/check.rs:377:        cargo.allow_features(crate::tool::RustAnalyzer::ALLOW_FEATURES);
src/bootstrap/config.rs:252:    // libstd features
src/bootstrap/config.rs:802:        // NOTE: only parsed by bootstrap.py, `--feature build-metrics` enables metrics unconditionally
src/bootstrap/metadata.rs:78:            // which uses the unstable `public-dependency` feature.
src/bootstrap/lib.rs:71:#[cfg(feature = "build-metrics")]
src/bootstrap/lib.rs:248:    #[cfg(feature = "build-metrics")]
src/bootstrap/lib.rs:470:            #[cfg(feature = "build-metrics")]
src/bootstrap/lib.rs:723:        #[cfg(feature = "build-metrics")]
src/bootstrap/lib.rs:749:    /// Gets the space-separated set of activated features for the standard
src/bootstrap/lib.rs:751:    fn std_features(&self, target: TargetSelection) -> String {
src/bootstrap/lib.rs:752:        let mut features = " panic-unwind".to_string();
src/bootstrap/lib.rs:755:            LlvmLibunwind::InTree => features.push_str(" llvm-libunwind"),
src/bootstrap/lib.rs:756:            LlvmLibunwind::System => features.push_str(" system-llvm-libunwind"),
src/bootstrap/lib.rs:760:            features.push_str(" backtrace");
src/bootstrap/lib.rs:763:            features.push_str(" profiler");
src/bootstrap/lib.rs:765:        features
src/bootstrap/lib.rs:768:    /// Gets the space-separated set of activated features for the compiler.
src/bootstrap/lib.rs:769:    fn rustc_features(&self, kind: Kind) -> String {
src/bootstrap/lib.rs:770:        let mut features = vec![];
src/bootstrap/lib.rs:772:            features.push("jemalloc");
src/bootstrap/lib.rs:775:            features.push("llvm");
src/bootstrap/lib.rs:779:            features.push("rustc_use_parallel_compiler");
src/bootstrap/lib.rs:786:        // as well as tracing *ignoring* this feature when debug_assertions is on
src/bootstrap/lib.rs:788:            features.push("max_level_info");
src/bootstrap/lib.rs:791:        features.join(" ")
src/bootstrap/lib.rs:1505:    /// Returns `true` if unstable features should be enabled for the compiler
src/bootstrap/lib.rs:1507:    fn unstable_features(&self) -> bool {
src/bootstrap/lib.rs:1532:                // Don't include optional deps if their features are not
src/bootstrap/lib.rs:1534:                // metadata --features …`, but that is somewhat slow. In
src/bootstrap/suggest.rs:1:#![cfg_attr(feature = "build-metrics", allow(unused))]
src/bootstrap/Cargo.lock:170:name = "cpufeatures"
src/bootstrap/Cargo.lock:681: "cpufeatures",
src/bootstrap/run.rs:154:            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })
src/bootstrap/dist.rs:1024:                // which uses the unstable `public-dependency` feature.
src/bootstrap/dist.rs:1131:            .ensure(tool::Rls { compiler, target, extra_features: Vec::new() })
src/bootstrap/dist.rs:1222:            .ensure(tool::Clippy { compiler, target, extra_features: Vec::new() })
src/bootstrap/dist.rs:1225:            .ensure(tool::CargoClippy { compiler, target, extra_features: Vec::new() })
src/bootstrap/dist.rs:1269:        if !builder.build.unstable_features() {
src/bootstrap/dist.rs:1275:        let miri = builder.ensure(tool::Miri { compiler, target, extra_features: Vec::new() })?;
src/bootstrap/dist.rs:1277:            builder.ensure(tool::CargoMiri { compiler, target, extra_features: Vec::new() })?;
src/bootstrap/dist.rs:1321:            .ensure(tool::Rustfmt { compiler, target, extra_features: Vec::new() })
src/bootstrap/dist.rs:1324:            .ensure(tool::Cargofmt { compiler, target, extra_features: Vec::new() })
src/bootstrap/dist.rs:1380:            .ensure(tool::RustDemangler { compiler, target, extra_features: Vec::new() })
src/bootstrap/tool.rs:31:    extra_features: Vec<String>,
src/bootstrap/tool.rs:32:    /// Nightly-only features that are allowed (comma-separated list).
src/bootstrap/tool.rs:33:    allow_features: &'static str,
src/bootstrap/tool.rs:97:            &self.extra_features,
src/bootstrap/tool.rs:99:        if !self.allow_features.is_empty() {
src/bootstrap/tool.rs:100:            cargo.allow_features(self.allow_features);
src/bootstrap/tool.rs:148:    extra_features: &[String],
src/bootstrap/tool.rs:154:    let mut features = extra_features.to_vec();
src/bootstrap/tool.rs:165:            features.push("all-static".to_string());
src/bootstrap/tool.rs:202:    if !features.is_empty() {
src/bootstrap/tool.rs:203:        cargo.arg("--features").arg(&features.join(", "));
src/bootstrap/tool.rs:213:        $(,allow_features = $allow_features:expr)?
src/bootstrap/tool.rs:264:                        // use in-tree libraries for unstable features
src/bootstrap/tool.rs:276:                    extra_features: vec![],
src/bootstrap/tool.rs:277:                    allow_features: concat!($($allow_features)*),
src/bootstrap/tool.rs:291:    Compiletest, "src/tools/compiletest", "compiletest", is_unstable_tool = true, allow_features = "test";
src/bootstrap/tool.rs:307:    RustdocGUITest, "src/tools/rustdoc-gui-test", "rustdoc-gui-test", is_unstable_tool = true, allow_features = "test";
src/bootstrap/tool.rs:361:                extra_features: Vec::new(),
src/bootstrap/tool.rs:362:                allow_features: "",
src/bootstrap/tool.rs:398:                extra_features: Vec::new(),
src/bootstrap/tool.rs:399:                allow_features: "",
src/bootstrap/tool.rs:466:        let mut features = Vec::new();
src/bootstrap/tool.rs:468:            features.push("jemalloc".to_string());
src/bootstrap/tool.rs:479:            features.as_slice(),
src/bootstrap/tool.rs:557:                extra_features: Vec::new(),
src/bootstrap/tool.rs:558:                allow_features: "",
src/bootstrap/tool.rs:573:                extra_features: Vec::new(),
src/bootstrap/tool.rs:574:                allow_features: "",
src/bootstrap/tool.rs:621:                extra_features: Vec::new(),
src/bootstrap/tool.rs:622:                allow_features: "",
src/bootstrap/tool.rs:637:    pub const ALLOW_FEATURES: &str =
src/bootstrap/tool.rs:672:            extra_features: vec!["rust-analyzer/in-rust-tree".to_owned()],
src/bootstrap/tool.rs:675:            allow_features: RustAnalyzer::ALLOW_FEATURES,
src/bootstrap/tool.rs:717:            extra_features: vec!["sysroot-abi".to_owned()],
src/bootstrap/tool.rs:720:            allow_features: RustAnalyzer::ALLOW_FEATURES,
src/bootstrap/tool.rs:740:       $(,allow_features = $allow_features:expr)?
src/bootstrap/tool.rs:748:            pub extra_features: Vec<String>,
src/bootstrap/tool.rs:763:                            $stable || builder.build.unstable_features(),
src/bootstrap/tool.rs:778:                    extra_features: Vec::new(),
src/bootstrap/tool.rs:790:                    extra_features: $sel.extra_features,
src/bootstrap/tool.rs:793:                    allow_features: concat!($($allow_features)*),
src/bootstrap/tool.rs:831:    // FIXME: tool_std is not quite right, we shouldn't allow nightly features.
src/bootstrap/render_tests.rs:140:        #[cfg(feature = "build-metrics")]
src/bootstrap/compile.rs:338:    // If `compiler-rt` is available ensure that the `c` feature of the
src/bootstrap/compile.rs:342:    let compiler_builtins_c_feature = if compiler_builtins_root.exists() {
src/bootstrap/compile.rs:353:    if !builder.unstable_features() {
src/bootstrap/compile.rs:354:        cargo.env("CFG_DISABLE_UNSTABLE_FEATURES", "1");
src/bootstrap/compile.rs:357:    let mut features = String::new();
src/bootstrap/compile.rs:361:        features += " compiler-builtins-no-asm";
src/bootstrap/compile.rs:365:        features += " compiler-builtins-mem";
src/bootstrap/compile.rs:367:            features.push_str(compiler_builtins_c_feature);
src/bootstrap/compile.rs:375:            .arg("--features")
src/bootstrap/compile.rs:376:            .arg(features);
src/bootstrap/compile.rs:378:        features += &builder.std_features(target);
src/bootstrap/compile.rs:379:        features.push_str(compiler_builtins_c_feature);
src/bootstrap/compile.rs:382:            .arg("--features")
src/bootstrap/compile.rs:383:            .arg(features)
src/bootstrap/compile.rs:650:                    // a local_rebuild compiler already has stage1 features
src/bootstrap/compile.rs:905:        .arg("--features")
src/bootstrap/compile.rs:906:        .arg(builder.rustc_features(builder.kind))
src/bootstrap/compile.rs:943:    if !builder.unstable_features() {
src/bootstrap/compile.rs:944:        cargo.env("CFG_DISABLE_UNSTABLE_FEATURES", "1");
src/bootstrap/compile.rs:956:        // keep in sync with `bootstrap/lib.rs:Build::rustc_features`
src/bootstrap/compile.rs:957:        // `cfg` option for rustc, `features` option for cargo, for conditional compilation
src/bootstrap/compile.rs:1941:        features: Vec<Cow<'a, str>>,
src/bootstrap/doc.rs:1057:        // We need to validate nightly features, even on the stable channel.
src/bootstrap/builder.rs:1319:            // Assume the local-rebuild rustc already has stage1 features.
src/bootstrap/builder.rs:1404:        // Enable cfg checking of cargo features for everything but std and also enable cfg
src/bootstrap/builder.rs:1409:        // features but cargo isn't involved in the #[path] process and so cannot pass the
src/bootstrap/builder.rs:1410:        // complete list of features, so for that reason we don't enable checking of
src/bootstrap/builder.rs:1411:        // features for std crates.
src/bootstrap/builder.rs:1413:            "-Zcheck-cfg=names,values,output,features"
src/bootstrap/builder.rs:1470:        // feature is currently unstable as there may be some bugs and such, but
src/bootstrap/builder.rs:1476:        // feature on the rustc side.
src/bootstrap/builder.rs:1478:        let allow_features = match mode {
src/bootstrap/builder.rs:1480:                // Restrict the allowed features so we don't depend on nightly
src/bootstrap/builder.rs:1487:                // Those have build scripts which assume nightly features are
src/bootstrap/builder.rs:1490:                // those features for each individual tool that needs them,
src/bootstrap/builder.rs:1733:                rustflags.arg("-Ctarget-feature=+crt-static");
src/bootstrap/builder.rs:1735:                rustflags.arg("-Ctarget-feature=-crt-static");
src/bootstrap/builder.rs:1752:        // Enable usage of unstable features
src/bootstrap/builder.rs:2045:        Cargo { command: cargo, rustflags, rustdocflags, allow_features }
src/bootstrap/builder.rs:2075:        #[cfg(feature = "build-metrics")]
src/bootstrap/builder.rs:2101:        #[cfg(feature = "build-metrics")]
src/bootstrap/builder.rs:2228:    allow_features: String,
src/bootstrap/builder.rs:2274:    /// Adds nightly-only features that this invocation is allowed to use.
src/bootstrap/builder.rs:2276:    /// By default, all nightly features are allowed. Once this is called, it
src/bootstrap/builder.rs:2278:    pub fn allow_features(&mut self, features: &str) -> &mut Cargo {
src/bootstrap/builder.rs:2279:        if !self.allow_features.is_empty() {
src/bootstrap/builder.rs:2280:            self.allow_features.push(',');
src/bootstrap/builder.rs:2282:        self.allow_features.push_str(features);
src/bootstrap/builder.rs:2299:        if !cargo.allow_features.is_empty() {
src/bootstrap/builder.rs:2300:            cargo.command.env("RUSTC_ALLOW_FEATURES", cargo.allow_features);
src/bootstrap/llvm.rs:673:    // Some compiler features used by LLVM (such as thread locals) will not work on a min version below iOS 10.
src/bootstrap/llvm.rs:1266:        // with many C++11 features accepted as extensions.
src/ci/docker/host-x86_64/armhf-gnu/vexpress_config:383:# Processor Features
src/ci/docker/host-x86_64/armhf-gnu/vexpress_config:433:# Kernel Features
src/ci/docker/host-x86_64/disabled/riscv64gc-linux/0001-Remove-stime-function-calls.patch:37:+#if !ENABLE_FEATURE_DATE_NANO
src/ci/docker/scripts/freebsd-toolchain.sh:73:# controls other features, like GNU-style symbol table hashing and
src/ci/docker/scripts/android-sdk-manager.py:3:# Extra features of this implementation are pinning and mirroring
src/etc/third-party/COPYING3:105:feature that (1) displays an appropriate copyright notice, and (2)
src/etc/installer/msi/rust.wxs:149:                MigrateFeatures="yes"
src/etc/installer/msi/rust.wxs:165:                    <!-- Root directories for every feature should have different IDs for correct work of heat.exe -->
src/etc/installer/msi/rust.wxs:229:        <Feature Id="Rustc"
src/etc/installer/msi/rust.wxs:238:        </Feature>
src/etc/installer/msi/rust.wxs:239:        <Feature Id="Std"
src/etc/installer/msi/rust.wxs:245:        </Feature>
src/etc/installer/msi/rust.wxs:246:        <Feature Id="Cargo"
src/etc/installer/msi/rust.wxs:252:        </Feature>
src/etc/installer/msi/rust.wxs:254:            <Feature Id="Gcc"
src/etc/installer/msi/rust.wxs:261:            </Feature>
src/etc/installer/msi/rust.wxs:264:        <Feature Id="Docs"
src/etc/installer/msi/rust.wxs:271:        </Feature>
src/etc/installer/msi/rust.wxs:273:        <Feature Id="Path"
src/etc/installer/msi/rust.wxs:281:        </Feature>
src/etc/installer/msi/ui.wxs:55:            <Publish Dialog="InstallDirDlg" Control="Next" Event="NewDialog" Value="FeaturesDlg" Order="4">WIXUI_DONTVALIDATEPATH OR WIXUI_INSTALLDIR_VALID="1"</Publish>
src/etc/installer/msi/ui.wxs:59:            <Publish Dialog="FeaturesDlg" Control="Back" Event="NewDialog" Value="InstallDirDlg">NOT Installed AND WixAppFolder = "WixPerUserFolder"</Publish>
src/etc/installer/msi/ui.wxs:60:            <Publish Dialog="FeaturesDlg" Control="Back" Event="NewDialog" Value="InstallDirDlg">NOT Installed AND WixAppFolder = "WixPerMachineFolder"</Publish>
src/etc/installer/msi/ui.wxs:61:            <Publish Dialog="FeaturesDlg" Control="Back" Event="NewDialog" Value="MaintenanceTypeDlg">Installed</Publish>
src/etc/installer/msi/ui.wxs:65:            <Publish Dialog="MaintenanceTypeDlg" Control="ChangeButton" Event="NewDialog" Value="FeaturesDlg">1</Publish>
src/rustdoc-json-types/Cargo.toml:10:serde = { version = "1.0", features = ["derive"] }
src/rustdoc-json-types/lib.rs:408:    // See rustc_ast_passes::feature_gate::PostExpansionVisitor::check_abi for the list
src/librustdoc/core.rs:7:use rustc_feature::UnstableFeatures;
src/librustdoc/core.rs:247:        unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),
src/librustdoc/core.rs:333:    rustc_passes::stability::check_unused_or_stable_features(tcx);
src/librustdoc/Cargo.toml:10:arrayvec = { version = "0.7", default-features = false }
src/librustdoc/Cargo.toml:11:askama = { version = "0.12", default-features = false, features = ["config"] }
src/librustdoc/Cargo.toml:18:serde = { version = "1.0", features = ["derive"] }
src/librustdoc/Cargo.toml:27:default-features = false
src/librustdoc/Cargo.toml:28:features = ["fmt", "env-filter", "smallvec", "parking_lot", "ansi"]
src/librustdoc/Cargo.toml:33:[features]
src/librustdoc/formats/cache.rs:95:    /// [doc_masked]: https://doc.rust-lang.org/nightly/unstable-book/language-features/doc-masked.html
src/librustdoc/config.rs:159:    pub(crate) unstable_features: rustc_feature::UnstableFeatures,
src/librustdoc/config.rs:203:            .field("unstable_features", &self.unstable_features)
src/librustdoc/config.rs:268:    pub(crate) unstable_features: rustc_feature::UnstableFeatures,
src/librustdoc/config.rs:704:        let unstable_features =
src/librustdoc/config.rs:705:            rustc_feature::UnstableFeatures::from_environment(crate_name.as_deref());
src/librustdoc/config.rs:745:            unstable_features,
src/librustdoc/config.rs:769:            unstable_features,
src/librustdoc/lib.rs:5:#![feature(rustc_private)]
src/librustdoc/lib.rs:6:#![feature(array_methods)]
src/librustdoc/lib.rs:7:#![feature(assert_matches)]
src/librustdoc/lib.rs:8:#![feature(box_patterns)]
src/librustdoc/lib.rs:9:#![feature(impl_trait_in_assoc_type)]
src/librustdoc/lib.rs:10:#![feature(iter_intersperse)]
src/librustdoc/lib.rs:11:#![feature(lazy_cell)]
src/librustdoc/lib.rs:12:#![feature(let_chains)]
src/librustdoc/lib.rs:13:#![feature(never_type)]
src/librustdoc/lib.rs:14:#![feature(round_char_boundary)]
src/librustdoc/lib.rs:15:#![feature(test)]
src/librustdoc/lib.rs:16:#![feature(type_alias_impl_trait)]
src/librustdoc/lib.rs:17:#![feature(type_ascription)]
src/librustdoc/lib.rs:45:extern crate rustc_feature;
src/librustdoc/lib.rs:70:#[cfg(feature = "jemalloc")]
src/librustdoc/lib.rs:128:    #[cfg(feature = "jemalloc")]
src/librustdoc/lib.rs:166:    // with `--features=static_max_level_info`, which disables almost all rustdoc logging. To avoid
src/librustdoc/doctest/tests.rs:128:    opts.attrs.push("feature(sick_rad)".to_string());
src/librustdoc/doctest/tests.rs:131:    let expected = "#![feature(sick_rad)]
src/librustdoc/doctest/tests.rs:143:    opts.attrs.push("feature(hella_dope)".to_string());
src/librustdoc/doctest/tests.rs:144:    let expected = "#![feature(sick_rad)]
src/librustdoc/doctest/tests.rs:145:#![feature(hella_dope)]
src/librustdoc/doctest/tests.rs:162:    let input = "#![feature(sick_rad)]
src/librustdoc/doctest/tests.rs:165:#![feature(sick_rad)]
src/librustdoc/passes/check_doc_test_visibility.rs:118:    if tests.found_tests == 0 && cx.tcx.features().rustdoc_missing_doc_code_examples {
src/librustdoc/passes/mod.rs:136:/// that case due to escaping and other source features.
src/librustdoc/passes/collect_intra_doc_links.rs:1190:    fn report_rawptr_assoc_feature_gate(
src/librustdoc/passes/collect_intra_doc_links.rs:1203:        rustc_session::parse::feature_err(
src/librustdoc/passes/collect_intra_doc_links.rs:1229:        // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.
src/librustdoc/passes/collect_intra_doc_links.rs:1235:            if key.item_id.is_local() && !self.cx.tcx.features().intra_doc_pointers {
src/librustdoc/passes/collect_intra_doc_links.rs:1236:                self.report_rawptr_assoc_feature_gate(diag.dox, &diag.link_range, diag.item);
src/librustdoc/html/format.rs:1593:        // const stable or when feature(staged_api) is not set
src/librustdoc/html/render/print_item.rs:606:        if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)
src/librustdoc/html/render/mod.rs:389:      If you want more information about this feature, please read the [corresponding chapter in the Rustdoc book]({}/rustdoc/scraped-examples.html).",
src/librustdoc/html/render/mod.rs:550:/// * Required features (through the `doc_cfg` feature)
src/librustdoc/html/render/mod.rs:585:    /// The feature corresponding to an unstable item, and optionally
src/librustdoc/html/render/mod.rs:588:        feature: String,
src/librustdoc/html/render/mod.rs:636:    if let Some((StabilityLevel::Unstable { reason: _, issue, .. }, feature)) = item
src/librustdoc/html/render/mod.rs:639:        .filter(|stab| stab.feature != sym::rustc_private)
src/librustdoc/html/render/mod.rs:640:        .map(|stab| (stab.level, stab.feature))
src/librustdoc/html/render/mod.rs:648:        extra_info.push(ShortItemInfo::Unstable { feature: feature.to_string(), tracking });
src/librustdoc/html/render/mod.rs:919:        Some(ConstStability { level: StabilityLevel::Unstable { issue, .. }, feature, .. }) => {
src/librustdoc/html/render/mod.rs:923:                    n, feature
src/librustdoc/html/render/context.rs:540:            codes: ErrorCodes::from(options.unstable_features.is_nightly_build()),
src/librustdoc/html/render/context.rs:738:            page.description = "How the scraped examples feature works in Rustdoc";
src/librustdoc/html/static/css/rustdoc.css:109:	font-feature-settings: "kern", "liga";
src/librustdoc/html/static/css/rustdoc.css:1864:/* Begin: styles for --scrape-examples feature */
src/librustdoc/html/static/css/rustdoc.css:2025:/* End: styles for --scrape-examples feature */
src/librustdoc/html/static/js/main.js:1076:            `For a full list of all search features, take a look <a \
src/librustdoc/html/static/js/search.js:2147:                "introductions to language features and the language itself.</li><li><a " +
src/librustdoc/html/templates/STYLE.md:13:[whitespace control] features. By default, whitespace characters are removed
src/librustdoc/html/templates/short_item_info.html:7:    {% when Self::Unstable with { feature, tracking } %}
src/librustdoc/html/templates/short_item_info.html:12:                <code>{{feature}}</code> {# #}
src/librustdoc/html/markdown.rs:6://! #![feature(rustc_private)]
src/librustdoc/html/markdown.rs:287:            let channel = if test.contains("#![feature(") { "&amp;version=nightly" } else { "" };
src/librustdoc/clean/types.rs:257:        // `#[rustc_doc_primitive]` feature is explicitly designed to only allow the
src/librustdoc/clean/types.rs:929:        let doc_cfg_active = tcx.features().doc_cfg;
src/librustdoc/clean/types.rs:930:        let doc_auto_cfg_active = tcx.features().doc_auto_cfg;
src/librustdoc/clean/types.rs:996:        // treat #[target_feature(enable = "feat")] attributes as if they were
src/librustdoc/clean/types.rs:997:        // #[doc(cfg(target_feature = "feat"))] attributes as well
src/librustdoc/clean/types.rs:998:        for attr in self.lists(sym::target_feature) {
src/librustdoc/clean/types.rs:1001:                    // Clone `enable = "feat"`, change to `target_feature = "feat"`.
src/librustdoc/clean/types.rs:1004:                    meta.path = ast::Path::from_ident(Ident::with_dummy_span(sym::target_feature));
src/librustdoc/clean/types.rs:1405:    /// feature. More information in <https://github.com/rust-lang/rust/issues/83167>.
src/librustdoc/clean/cfg.rs:12:use rustc_feature::Features;
src/librustdoc/clean/cfg.rs:132:    // FIXME: Actually make use of `features`.
src/librustdoc/clean/cfg.rs:133:    pub(crate) fn matches(&self, parse_sess: &ParseSess, features: Option<&Features>) -> bool {
src/librustdoc/clean/cfg.rs:137:            Cfg::Not(ref child) => !child.matches(parse_sess, features),
src/librustdoc/clean/cfg.rs:139:                sub_cfgs.iter().all(|sub_cfg| sub_cfg.matches(parse_sess, features))
src/librustdoc/clean/cfg.rs:142:                sub_cfgs.iter().any(|sub_cfg| sub_cfg.matches(parse_sess, features))
src/librustdoc/clean/cfg.rs:219:        matches!(self, Cfg::Cfg(sym::target_feature, _))
src/librustdoc/clean/cfg.rs:413:                    let all_crate_features = sub_cfgs
src/librustdoc/clean/cfg.rs:415:                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));
src/librustdoc/clean/cfg.rs:416:                    let all_target_features = sub_cfgs
src/librustdoc/clean/cfg.rs:418:                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));
src/librustdoc/clean/cfg.rs:420:                    if all_crate_features {
src/librustdoc/clean/cfg.rs:421:                        fmt.write_str("crate features ")?;
src/librustdoc/clean/cfg.rs:423:                    } else if all_target_features {
src/librustdoc/clean/cfg.rs:424:                        fmt.write_str("target features ")?;
src/librustdoc/clean/cfg.rs:450:                    let all_crate_features = sub_cfgs
src/librustdoc/clean/cfg.rs:452:                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));
src/librustdoc/clean/cfg.rs:453:                    let all_target_features = sub_cfgs
src/librustdoc/clean/cfg.rs:455:                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));
src/librustdoc/clean/cfg.rs:457:                    if all_crate_features {
src/librustdoc/clean/cfg.rs:458:                        fmt.write_str("crate features ")?;
src/librustdoc/clean/cfg.rs:460:                    } else if all_target_features {
src/librustdoc/clean/cfg.rs:461:                        fmt.write_str("target features ")?;
src/librustdoc/clean/cfg.rs:556:                    (sym::target_feature, Some(feat)) => match self.1 {
src/librustdoc/clean/cfg.rs:558:                            return write!(fmt, "target feature <code>{}</code>", feat);
src/librustdoc/clean/cfg.rs:560:                        Format::LongPlain => return write!(fmt, "target feature `{}`", feat),
src/librustdoc/clean/cfg.rs:563:                    (sym::feature, Some(feat)) => match self.1 {
src/librustdoc/clean/cfg.rs:565:                            return write!(fmt, "crate feature <code>{}</code>", feat);
src/librustdoc/clean/cfg.rs:567:                        Format::LongPlain => return write!(fmt, "crate feature `{}`", feat),
src/librustdoc/clean/cfg/tests.rs:357:            name_value_cfg("target_feature", "sse2").render_short_html(),
src/librustdoc/clean/cfg/tests.rs:361:            (name_value_cfg("target_arch", "x86_64") & name_value_cfg("target_feature", "sse2"))
src/librustdoc/clean/cfg/tests.rs:431:            name_value_cfg("target_feature", "sse2").render_long_html(),
src/librustdoc/clean/cfg/tests.rs:432:            "Available with <strong>target feature <code>sse2</code></strong> only."
src/librustdoc/clean/cfg/tests.rs:435:            (name_value_cfg("target_arch", "x86_64") & name_value_cfg("target_feature", "sse2"))
src/librustdoc/clean/cfg/tests.rs:437:            "Available on <strong>x86-64 and target feature <code>sse2</code></strong> only."
src/librustdoc/clean/mod.rs:2050:            if cx.tcx.features().lazy_type_alias {
src/librustdoc/clean/mod.rs:2376:/// #[doc(hidden, cfg(feature = "foo"))]
src/librustdoc/clean/mod.rs:2379:/// #[doc(cfg(feature = "bar"))]
src/librustdoc/clean/mod.rs:2387:/// So `Bar` at the end will have both `cfg(feature = "...")`. However, we don't want to merge all
src/librustdoc/clean/inline.rs:314:    // * https://github.com/rust-lang/rust/pull/99917 — where the feature got used
src/librustdoc/clean/inline.rs:377:            stab.feature == sym::rustc_private
src/librustdoc/clean/inline.rs:410:                if stab.is_unstable() && stab.feature == sym::rustc_private {
src/librustdoc/clean/utils.rs:415:            // they may leak private fields of structs (with feature `adt_const_params`).
src/librustdoc/lint.rs:41:            // Permit feature-gated lints to avoid feature errors when trying to
src/librustdoc/lint.rs:43:            if lint.feature_gate.is_some() || allowed_lints.iter().any(|l| lint.name == l) {
src/librustdoc/lint.rs:69:        $(@feature_gate = $gate:expr;)?
src/librustdoc/lint.rs:73:            $(, @feature_gate = $gate;)?
src/librustdoc/lint.rs:131:    @feature_gate = rustc_span::symbol::sym::rustdoc_missing_doc_code_examples;
src/librustdoc/lint.rs:211:            .filter(|lint| lint.feature_gate.is_none()) // only include stable lints
src/librustdoc/markdown.rs:73:    let error_codes = ErrorCodes::from(options.unstable_features.is_nightly_build());
src/librustdoc/markdown.rs:153:    let codes = ErrorCodes::from(options.unstable_features.is_nightly_build());
src/librustdoc/doctest.rs:80:        unstable_features: options.unstable_features,
src/librustdoc/doctest.rs:141:                            compiler.session().opts.unstable_features.is_nightly_build(),
src/librustdoc/doctest.rs:1231:            if !cfg.matches(&self.sess.parse_sess, Some(self.tcx.features())) {
src/doc/man/rustc.1:58:\fB\-\-print\fR [crate\-name|\:file\-names|\:sysroot|\:target\-libdir|\:cfg|\:target\-list|\:target\-cpus|\:target\-features|\:relocation\-models|\:code\-models|\:tls\-models|\:target\-spec\-json|\:native\-static\-libs|\:stack\-protector\-strategies|\:link\-args]
src/doc/man/rustc.1:181:\fBtarget\-feature\fR='\fI+feature1\fR,\fI\-feature2\fR'
src/doc/man/rustc.1:182:A comma\[hy]separated list of features to enable or disable for the target.
src/doc/man/rustc.1:183:A preceding '+' enables a feature while a preceding '\-' disables it.
src/doc/man/rustc.1:184:Available features can be discovered through \fIllc -mcpu=help\fR.
src/doc/rust.css:265:.unstable-feature {
src/doc/rustdoc/book.toml:13:"/website-features.html" = "advanced-features.html#custom-search-engines"
src/doc/rustdoc/book.toml:14:"/passes.html" = "deprecated-features.html#passes"
src/doc/rustdoc/src/SUMMARY.md:15:- [Advanced features](advanced-features.md)
src/doc/rustdoc/src/SUMMARY.md:16:- [Unstable features](unstable-features.md)
src/doc/rustdoc/src/SUMMARY.md:17:- [Deprecated features](deprecated-features.md)
src/doc/rustdoc/src/command-line-arguments.md:127:$ rustdoc src/lib.rs --cfg feature="foo"
src/doc/rustdoc/src/command-line-arguments.md:131:compilation. The example above uses `feature`, but any of the `cfg` values
src/doc/rustdoc/src/command-line-arguments.md:151:$ rustdoc src/lib.rs -C target_feature=+avx
src/doc/rustdoc/src/command-line-arguments.md:152:$ rustdoc src/lib.rs --codegen target_feature=+avx
src/doc/rustdoc/src/command-line-arguments.md:154:$ rustdoc --test src/lib.rs -C target_feature=+avx
src/doc/rustdoc/src/command-line-arguments.md:155:$ rustdoc --test src/lib.rs --codegen target_feature=+avx
src/doc/rustdoc/src/command-line-arguments.md:157:$ rustdoc --test README.md -C target_feature=+avx
src/doc/rustdoc/src/command-line-arguments.md:158:$ rustdoc --test README.md --codegen target_feature=+avx
src/doc/rustdoc/src/command-line-arguments.md:164:these options won't affect a regular documentation run, but if something depends on target features
src/doc/rustdoc/src/command-line-arguments.md:416:For more details on passes, see [the chapter on them](deprecated-features.md#passes).
src/doc/rustdoc/src/command-line-arguments.md:421:For more details on passes, see [the chapter on them](deprecated-features.md#passes).
src/doc/rustdoc/src/how-to-read-rustdoc.md:5:This chapter covers the major features of that interface,
src/doc/rustdoc/src/unstable-features.md:1:# Unstable features
src/doc/rustdoc/src/unstable-features.md:3:Rustdoc is under active development, and like the Rust compiler, some features are only available
src/doc/rustdoc/src/unstable-features.md:4:on nightly releases. Some of these features are new and need some more testing before they're able to be
src/doc/rustdoc/src/unstable-features.md:5:released to the world at large, and some of them are tied to features in the Rust compiler that are unstable. Several features here require a matching `#![feature(...)]` attribute to
src/doc/rustdoc/src/unstable-features.md:13:These features just require a nightly build to operate. Unlike the other features on this page,
src/doc/rustdoc/src/unstable-features.md:14:these don't need to be "turned on" with a command-line flag or a `#![feature(...)]` attribute in
src/doc/rustdoc/src/unstable-features.md:52:These features operate by extending the `#[doc]` attribute, and thus can be caught by the compiler
src/doc/rustdoc/src/unstable-features.md:53:and enabled with a `#![feature(...)]` attribute in your crate.
src/doc/rustdoc/src/unstable-features.md:55:### `#[doc(cfg)]`: Recording what platforms or features are required for code to be present
src/doc/rustdoc/src/unstable-features.md:72:#![feature(doc_cfg)]
src/doc/rustdoc/src/unstable-features.md:84:/// Token struct that is only available with the `serde` feature
src/doc/rustdoc/src/unstable-features.md:85:#[cfg(feature = "serde")]
src/doc/rustdoc/src/unstable-features.md:86:#[doc(cfg(feature = "serde"))]
src/doc/rustdoc/src/unstable-features.md:95:`#![feature(doc_cfg)]` feature gate. For more information, see [its chapter in the Unstable
src/doc/rustdoc/src/unstable-features.md:102:`doc_auto_cfg` is an extension to the `#[doc(cfg)]` feature. With it, you don't need to add
src/doc/rustdoc/src/unstable-features.md:107:#![feature(doc_auto_cfg)]
src/doc/rustdoc/src/unstable-features.md:117:/// Token struct that is only available with the `serde` feature
src/doc/rustdoc/src/unstable-features.md:118:#[cfg(feature = "serde")]
src/doc/rustdoc/src/unstable-features.md:127:#![feature(doc_cfg_hide)]
src/doc/rustdoc/src/unstable-features.md:133:[cfg-doc]: ./advanced-features.md
src/doc/rustdoc/src/unstable-features.md:134:[unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html
src/doc/rustdoc/src/unstable-features.md:155:The `#[doc(notable_trait)]` attribute currently requires the `#![feature(doc_notable_trait)]`
src/doc/rustdoc/src/unstable-features.md:156:feature gate. For more information, see [its chapter in the Unstable Book][unstable-notable_trait]
src/doc/rustdoc/src/unstable-features.md:159:[unstable-notable_trait]: ../unstable-book/language-features/doc-notable-trait.html
src/doc/rustdoc/src/unstable-features.md:178:`#![feature(doc_masked)]` feature gate.  For more information, see [its chapter in the Unstable
src/doc/rustdoc/src/unstable-features.md:181:[unstable-masked]: ../unstable-book/language-features/doc-masked.html
src/doc/rustdoc/src/unstable-features.md:190:provide a way to generate documentation for primitive types, and requires `#![feature(rustc_attrs)]`
src/doc/rustdoc/src/unstable-features.md:202:#![feature(rustdoc_internals)]
src/doc/rustdoc/src/unstable-features.md:209:## Effects of other nightly features
src/doc/rustdoc/src/unstable-features.md:211:These nightly-only features are not primarily related to Rustdoc,
src/doc/rustdoc/src/unstable-features.md:220:[unstable-fundamental]: https://doc.rust-lang.org/unstable-book/language-features/fundamental.html
src/doc/rustdoc/src/unstable-features.md:233:If the `fundamental` feature's effect on coherence is not intended,
src/doc/rustdoc/src/unstable-features.md:235:by introducing a custom feature and
src/doc/rustdoc/src/unstable-features.md:240:These features are enabled by passing a command-line flag to Rustdoc, but the flags in question are
src/doc/rustdoc/src/unstable-features.md:374:This feature allows you to generate an index-page with a given markdown file. A good example of it
src/doc/rustdoc/src/unstable-features.md:383:This feature allows the generation of a default index-page which lists the generated crates.
src/doc/rustdoc/src/unstable-features.md:584:then the uses are included as documentation for that item. This feature is
src/doc/rustdoc/src/unstable-features.md:615:    --check-cfg='names()' --check-cfg='values(feature, "foo", "bar")'
src/doc/rustdoc/src/unstable-features.md:619:and check the values of `feature`: `foo` and `bar`.
src/doc/rustdoc/src/how-to-write-documentation.md:42:then concludes with crate features.
src/doc/rustdoc/src/how-to-write-documentation.md:46:incrementally and put in an introduction, example, and features.  Rome was not
src/doc/rustdoc/src/advanced-features.md:1:# Advanced features
src/doc/rustdoc/src/advanced-features.md:3:The features listed on this page fall outside the rest of the main categories.
src/doc/rustdoc/src/advanced-features.md:5:## `#[cfg(doc)]`: Documenting platform-specific or feature-specific information
src/doc/rustdoc/src/advanced-features.md:71:This feature allows you to add alias(es) to an item when using the `rustdoc` search through the
src/doc/rustdoc/src/advanced-features.md:96:Most browsers support this feature by letting you define a URL template containing `%s`
src/doc/rustdoc/src/deprecated-features.md:1:# Deprecated features
src/doc/rustdoc/src/write-documentation/what-to-include.md:108:A good example of using this feature to create a dark theme is documented [on
src/doc/rustdoc/src/write-documentation/the-doc-attribute.md:99:When a feature is unstable, an issue number for tracking the feature must be
src/doc/rustdoc/src/write-documentation/documentation-tests.md:352:with the current Rust release may work in a future release, as new features
src/doc/rustdoc/src/scraped-examples.md:3:Rustdoc has an unstable feature where it can automatically scrape examples of items being documented from the `examples/` directory of a Cargo workspace. These examples will be included within the generated documentation for that item. For example, if your library contains a public function:
src/doc/rustdoc/src/scraped-examples.md:22:## How to use this feature
src/doc/rustdoc/src/scraped-examples.md:24:This feature is unstable, so you can enable it by calling Rustdoc with the unstable `rustdoc-scrape-examples` flag:
src/doc/rustdoc/src/scraped-examples.md:30:To enable this feature on [docs.rs](https://docs.rs), add this to your Cargo.toml:
src/doc/rustdoc/src/scraped-examples.md:55:This feature uses Cargo's convention for finding examples. You should ensure that `cargo check --examples` includes your example file.
src/doc/rustc/src/exploit-mitigations.md:5:language’s security features.
src/doc/rustc/src/exploit-mitigations.md:16:types[5] features. However, Unsafe Rust[6] introduces unsafe blocks, unsafe
src/doc/rustc/src/exploit-mitigations.md:26:Unsafe Rust introduces features that do not provide the same memory and
src/doc/rustc/src/codegen-options/index.md:49:platform security feature. This flag is currently ignored for non-Windows targets.
src/doc/rustc/src/codegen-options/index.md:483:then `-C target-feature=+crt-static` "wins" over `-C relocation-model=pic`,
src/doc/rustc/src/codegen-options/index.md:589:* `generic` refers to an LLVM target with minimal features but modern tuning.
src/doc/rustc/src/codegen-options/index.md:591:## target-feature
src/doc/rustc/src/codegen-options/index.md:593:Individual targets will support different features; this flag lets you control
src/doc/rustc/src/codegen-options/index.md:594:enabling or disabling a feature. Each feature should be prefixed with a `+` to
src/doc/rustc/src/codegen-options/index.md:597:Features from multiple `-C target-feature` options are combined. \
src/doc/rustc/src/codegen-options/index.md:598:Multiple features can be specified in a single option by separating them
src/doc/rustc/src/codegen-options/index.md:599:with commas - `-C target-feature=+x,-y`. \
src/doc/rustc/src/codegen-options/index.md:600:If some feature is specified more than once with both `+` and `-`,
src/doc/rustc/src/codegen-options/index.md:602:For example, `-C target-feature=+x,-y,+z -Ctarget-feature=-x,+y`
src/doc/rustc/src/codegen-options/index.md:603:is equivalent to `-C target-feature=-x,+y,+z`.
src/doc/rustc/src/codegen-options/index.md:606:target-features`.
src/doc/rustc/src/codegen-options/index.md:611:See also the [`target_feature`
src/doc/rustc/src/codegen-options/index.md:612:attribute](../../reference/attributes/codegen.md#the-target_feature-attribute)
src/doc/rustc/src/codegen-options/index.md:613:for controlling features per-function.
src/doc/rustc/src/codegen-options/index.md:615:This also supports the feature `+crt-static` and `-crt-static` to control
src/doc/rustc/src/codegen-options/index.md:619:features.
src/doc/rustc/src/targets/known-issues.md:4:## Target Features
src/doc/rustc/src/targets/known-issues.md:5:Most target-feature problems arise, when mixing code that have the target-feature _enabled_ with code that have it _disabled_. If you want to avoid undefined behavior, it is recommended to build _all code_ (including the standard library and imported crates) with a common set of target-features.
src/doc/rustc/src/targets/known-issues.md:7:By default, compiling your code with the `-C target-feature` flag will not recompile the entire standard library and/or imported crates with matching target features. Therefore, target features are generally considered as unsafe. Using `#[target_feature]` on individual functions makes the function unsafe.
src/doc/rustc/src/targets/known-issues.md:11:| Target-Feature | Issue | Seen on | Description | Details |
src/doc/rustc/src/targets/index.md:17:## Target Features
src/doc/rustc/src/targets/index.md:20:Developers, who know on which CPUs their compiled code is going to run can choose to add (or remove) CPU specific instruction sets via the `-C target-feature=val` flag.
src/doc/rustc/src/targets/custom.md:17:To use a custom target, see the (unstable) [`build-std` feature](../../cargo/reference/unstable.html#build-std) of `cargo`.
src/doc/rustc/src/command-line-arguments.md:18:For examples, `--cfg 'verbose'` or `--cfg 'feature="serde"'`. These correspond
src/doc/rustc/src/command-line-arguments.md:19:to `#[cfg(verbose)]` and `#[cfg(feature = "serde")]` respectively.
src/doc/rustc/src/command-line-arguments.md:235:- `target-features` — List of available target features for the current
src/doc/rustc/src/command-line-arguments.md:236:  target. Target features may be enabled with the [`-C target-feature=val`
src/doc/rustc/src/command-line-arguments.md:237:  flag](codegen-options/index.md#target-feature).  This flag is unsafe. See
src/doc/rustc/src/instrument-coverage.md:34:> **Important**: If you are building the Rust compiler from the source distribution, the profiler runtime is _not_ enabled in the default `config.example.toml`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true` (either under the `[build]` section, or under the settings for an individual `[target.<triple>]`):
src/doc/rustc/src/instrument-coverage.md:176:> **Note**: Coverage can also be disabled on an individual function by annotating the function with the [`no_coverage` attribute] (which requires the feature flag `#![feature(no_coverage)]`).
src/doc/rustc/src/instrument-coverage.md:178:[`no_coverage` attribute]: ../unstable-book/language-features/no-coverage.html
src/doc/rustc/src/linker-plugin-lto.md:201:Note that the compatibility policy for this feature might change in the future.
src/doc/rustc/src/tests/index.md:313:[bench-docs]: ../../unstable-book/library-features/test.html
src/doc/rustc/src/tests/index.md:316:[custom_test_frameworks documentation]: ../../unstable-book/language-features/custom-test-frameworks.html
src/doc/rustc/src/target-tier-policy.md:245:    such as variations of the same architecture with different features. Avoid
src/doc/rustc/src/target-tier-policy.md:246:    introducing unconditional uses of features that another variation of the
src/doc/rustc/src/target-tier-policy.md:294:- The target must document its baseline expectations for the features or
src/doc/rustc/src/target-tier-policy.md:298:  Rust target except for the baseline expectations for the features or versions
src/doc/rustc/src/target-tier-policy.md:320:  - The right approach to handling a missing feature from a target may depend
src/doc/rustc/src/target-tier-policy.md:321:    on whether the target seems likely to develop the feature in the future. In
src/doc/rustc/src/target-tier-policy.md:323:    may gain new features on the target as that target gains the capabilities
src/doc/rustc/src/target-tier-policy.md:324:    to support those features.
src/doc/rustc/src/target-tier-policy.md:340:  limitations and the difficulty of implementing the necessary features.
src/doc/rustc/src/target-tier-policy.md:341:  - For example, if Rust relies on a specific code generation feature to ensure
src/doc/rustc/src/target-tier-policy.md:343:    target should support that feature.
src/doc/rustc/src/target-tier-policy.md:413:targets in the nightly compiler, in order to implement a feature not yet
src/doc/rustc/src/target-tier-policy.md:616:features or OS version required) requires the approval of the compiler and
src/doc/rustc/src/profile-guided-optimization.md:81:Using this feature with Cargo works very similar to using it with `rustc`
src/doc/rustc/src/profile-guided-optimization.md:141:`rustc`'s PGO support relies entirely on LLVM's implementation of the feature
src/doc/rustc/src/lints/levels.md:281:This feature is used heavily by Cargo; it will pass `--cap-lints allow` when
src/doc/rustc/src/platform-support/TEMPLATE.md:18:specific minimum features beyond the baseline of the CPU/environment/etc? What
src/doc/rustc/src/platform-support/TEMPLATE.md:21:Are there notable `#[target_feature(...)]` or `-C target-feature=` values that
src/doc/rustc/src/platform-support/armeb-unknown-linux-gnueabi.md:10:BE8 architecture is the default big-endian architecture for ARM since [ARMv6](https://developer.arm.com/documentation/101754/0616/armlink-Reference/armlink-Command-line-Options/--be8?lang=en). It's predecessor, used for ARMv4 and ARMv5 devices was [BE32](https://developer.arm.com/documentation/dui0474/j/linker-command-line-options/--be32). On ARMv6 architecture, endianness can be configured via [system registers](https://developer.arm.com/documentation/ddi0290/g/unaligned-and-mixed-endian-data-access-support/mixed-endian-access-support/interaction-between-the-bus-protocol-and-the-core-endianness). However, BE32 was withdrawn for [ARMv7](https://developer.arm.com/documentation/ddi0406/cb/Appendixes/Deprecated-and-Obsolete-Features/Obsolete-features/Support-for-BE-32-endianness-model) onwards.
src/doc/rustc/src/platform-support/armeb-unknown-linux-gnueabi.md:19:The target definition can be seen [here](https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/spec/armeb_unknown_linux_gnueabi.rs). In particular, it should be noted that the `features` specify that this target is built for the ARMv8 core. Though this can likely be modified as required.
src/doc/rustc/src/platform-support/x86_64h-apple-darwin.md:16:(Haswell-compatible) Intel chips. It enables a set of target features available
src/doc/rustc/src/platform-support/mips-release-6.md:147:    duplicate artifacts found when compiling a tool, this typically means that something was recompiled because a transitive dependency has different features activated than in a previous build:
src/doc/rustc/src/platform-support/mips-release-6.md:149:    the following dependencies have different features:
src/doc/rustc/src/platform-support/mips-release-6.md:151:    `clippy-driver` additionally enabled features {"full"} at ...
src/doc/rustc/src/platform-support/mips-release-6.md:152:    `cargo` additionally enabled features {} at ...
src/doc/rustc/src/platform-support/mips-release-6.md:154:    to fix this you will probably want to edit the local src/tools/rustc-workspace-hack/Cargo.toml crate, as that will update the dependency graph to ensure that these crates all share the same feature set
src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md:24:generation to use additional CPU features via the `-C target-feature=` codegen
src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md:25:options to rustc, or via the `#[target_feature]` mechanism within Rust code.
src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md:28:enabling additional target features may raise this baseline.
src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md:35:which implement the `memory64` feature and if they do they're likely behind a
src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md:39:* Wasmtime - `--wasm-features memory64`
src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md:42:presence of other merged wasm proposals such as (with their LLVM feature flags):
src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md:114:[custom test frameworks](../../unstable-book/language-features/custom-test-frameworks.html)
src/doc/rustc/src/platform-support/x86_64-fortanix-unknown-sgx.md:25:Not all `std` features are supported, see [Using Rust's
src/doc/rustc/src/platform-support/armv4t-none-eabi.md:29:Just use the `build-std` nightly cargo feature to build the `core` library. You
src/doc/rustc/src/platform-support/loongarch-none.md:26:additional CPU features via the `-C target-feature=` codegen options to rustc, or
src/doc/rustc/src/platform-support/loongarch-none.md:27:via the `#[target_feature]` mechanism within Rust code.
src/doc/rustc/src/platform-support/loongarch-none.md:30:hardware; enabling additional target features may raise this baseline.
src/doc/rustc/src/platform-support/esp-idf.md:27:The target can be built by enabling it for a `rustc` build. The `build-std` feature is required to build the standard library for ESP-IDF. `ldproxy` is also required for linking, it can be installed from crates.io.
src/doc/rustc/src/platform-support/unknown-uefi.md:145:  features. It implements allocators and provides an execution environment to
src/doc/rustc/src/platform-support/nvptx64-nvidia-cuda.md:22:specific minimum features beyond the baseline of the CPU/environment/etc? What
src/doc/rustc/src/platform-support/nvptx64-nvidia-cuda.md:25:Are there notable `#[target_feature(...)]` or `-C target-feature=` values that
src/doc/rustc/src/platform-support/mipsel-sony-psx.md:38:Just use the `build-std` nightly cargo feature to build the `core` and `alloc` libraries:
src/doc/rustc/src/platform-support/nto-qnx.md:51:#![feature(lang_items)]
src/doc/rustc/src/platform-support/armv5te-none-eabi.md:40:Just use the `build-std` nightly cargo feature to build the `core` library. You
src/doc/rustc/src/platform-support/x86_64-unknown-none.md:23:features via the `-C target-feature=` codegen options to rustc, or via the
src/doc/rustc/src/platform-support/x86_64-unknown-none.md:24:`#[target_feature]` mechanism within Rust code.
src/doc/rustc/src/platform-support/x86_64-unknown-none.md:27:hardware; enabling additional target features may raise this baseline.
src/doc/guide-plugins.md:4:[the Unstable Book](unstable-book/language-features/plugin.html).
src/doc/index.md:175:features.
src/doc/unstable-book/src/library-features.md:1:# Library Features
src/doc/unstable-book/src/language-features/doc-cfg.md:3:The tracking issue for this feature is: [#43781]
src/doc/unstable-book/src/language-features/doc-cfg.md:7:The `doc_cfg` feature allows an API be documented as only available in some specific platforms.
src/doc/unstable-book/src/language-features/doc-cfg.md:15:In addition to allowing the use of the `#[doc(cfg)]` attribute, this feature enables the use of a
src/doc/unstable-book/src/language-features/doc-cfg.md:19:This feature was introduced as part of PR [#43348] to allow the platform-specific parts of the
src/doc/unstable-book/src/language-features/doc-cfg.md:23:#![feature(doc_cfg)]
src/doc/unstable-book/src/language-features/extended-varargs-abi-support.md:3:The tracking issue for this feature is: [#100189]
src/doc/unstable-book/src/language-features/extended-varargs-abi-support.md:9:This feature adds the possibility of using `sysv64`, `win64` or `efiapi` calling
src/doc/unstable-book/src/language-features/ffi-const.md:3:The tracking issue for this feature is: [#58328]
src/doc/unstable-book/src/language-features/profiler-runtime.md:3:The tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).
src/doc/unstable-book/src/language-features/try-blocks.md:3:The tracking issue for this feature is: [#31436]
src/doc/unstable-book/src/language-features/try-blocks.md:9:The `try_blocks` feature adds support for `try` blocks. A `try`
src/doc/unstable-book/src/language-features/try-blocks.md:13:#![feature(try_blocks)]
src/doc/unstable-book/src/language-features/plugin.md:3:The tracking issue for this feature is: [#29597]
src/doc/unstable-book/src/language-features/plugin.md:8:This feature is part of "compiler plugins." It will often be used with the
src/doc/unstable-book/src/language-features/plugin.md:9:`rustc_private` feature.
src/doc/unstable-book/src/language-features/plugin.md:40:#![feature(rustc_private)]
src/doc/unstable-book/src/language-features/plugin.md:78:#![feature(plugin)]
src/doc/unstable-book/src/language-features/closure-track-caller.md:3:The tracking issue for this feature is: [#87417]
src/doc/unstable-book/src/language-features/compiler-builtins.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/language-features/auto-traits.md:3:The tracking issue for this feature is [#13231]
src/doc/unstable-book/src/language-features/auto-traits.md:9:The `auto_traits` feature gate allows you to define auto traits.
src/doc/unstable-book/src/language-features/auto-traits.md:14:by the `negative_impls` feature.)
src/doc/unstable-book/src/language-features/auto-traits.md:26:#![feature(negative_impls)]
src/doc/unstable-book/src/language-features/auto-traits.md:27:#![feature(auto_traits)]
src/doc/unstable-book/src/language-features/repr128.md:3:The tracking issue for this feature is: [#56071]
src/doc/unstable-book/src/language-features/repr128.md:9:The `repr128` feature adds support for `#[repr(u128)]` on `enum`s.
src/doc/unstable-book/src/language-features/repr128.md:12:#![feature(repr128)]
src/doc/unstable-book/src/language-features/asm-experimental-arch.md:3:The tracking issue for this feature is: [#93335]
src/doc/unstable-book/src/language-features/asm-experimental-arch.md:9:This feature tracks `asm!` and `global_asm!` support for the following architectures:
src/doc/unstable-book/src/language-features/asm-experimental-arch.md:59:| Architecture | Register class                  | Target feature | Allowed types                           |
src/doc/unstable-book/src/language-features/generators.md:3:The tracking issue for this feature is: [#43122]
src/doc/unstable-book/src/language-features/generators.md:9:The `generators` feature gate in Rust allows you to define generator or
src/doc/unstable-book/src/language-features/generators.md:12:itself. The primary feature of a generator is that it can be suspended during
src/doc/unstable-book/src/language-features/generators.md:17:Generators are an extra-unstable feature in the compiler right now. Added in
src/doc/unstable-book/src/language-features/generators.md:29:#![feature(generators, generator_trait)]
src/doc/unstable-book/src/language-features/generators.md:61:#![feature(generators, generator_trait)]
src/doc/unstable-book/src/language-features/generators.md:91:# #![feature(arbitrary_self_types, generator_trait)]
src/doc/unstable-book/src/language-features/generators.md:166:#![feature(generators, generator_trait)]
src/doc/unstable-book/src/language-features/generators.md:186:#![feature(arbitrary_self_types, generators, generator_trait)]
src/doc/unstable-book/src/language-features/intrinsics.md:3:The tracking issue for this feature is: None.
src/doc/unstable-book/src/language-features/intrinsics.md:19:#![feature(intrinsics)]
src/doc/unstable-book/src/language-features/intra-doc-pointers.md:3:The tracking issue for this feature is: [#80896]
src/doc/unstable-book/src/language-features/intra-doc-pointers.md:13:#![feature(intra_doc_pointers)]
src/doc/unstable-book/src/language-features/strict-provenance.md:3:The tracking issue for this feature is: [#95228]
src/doc/unstable-book/src/language-features/strict-provenance.md:8:The `strict_provenance` feature allows to enable the `fuzzy_provenance_casts` and `lossy_provenance_casts` lints.
src/doc/unstable-book/src/language-features/strict-provenance.md:10:The same feature gate is also used for the experimental strict provenance API in `std` (actually `core`).
src/doc/unstable-book/src/language-features/strict-provenance.md:15:#![feature(strict_provenance)]
src/doc/unstable-book/src/language-features/trait-alias.md:3:The tracking issue for this feature is: [#41517]
src/doc/unstable-book/src/language-features/trait-alias.md:9:The `trait_alias` feature adds support for trait aliases. These allow aliases
src/doc/unstable-book/src/language-features/trait-alias.md:15:#![feature(trait_alias)]
src/doc/unstable-book/src/language-features/box-patterns.md:3:The tracking issue for this feature is: [#29641]
src/doc/unstable-book/src/language-features/box-patterns.md:13:#![feature(box_patterns)]
src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md:3:The tracking issue for this feature is: [#81391]
src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md:10:feature](https://developer.arm.com/documentation/100690/latest/) is available
src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md:15:TrustZone-M feature.
src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md:17:One of the things provided, with this unstable feature, is the
src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md:38:#![feature(abi_c_cmse_nonsecure_call)]
src/doc/unstable-book/src/language-features/no-sanitize.md:3:The tracking issue for this feature is: [#39699]
src/doc/unstable-book/src/language-features/no-sanitize.md:23:#![feature(no_sanitize)]
src/doc/unstable-book/src/language-features/custom-test-frameworks.md:3:The tracking issue for this feature is: [#50297]
src/doc/unstable-book/src/language-features/custom-test-frameworks.md:9:The `custom_test_frameworks` feature allows the use of `#[test_case]` and `#![test_runner]`.
src/doc/unstable-book/src/language-features/custom-test-frameworks.md:14:#![feature(custom_test_frameworks)]
src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md:3:The tracking issue for this feature is: [#75835]
src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md:10:feature](https://developer.arm.com/documentation/100690/latest/) is available
src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md:15:TrustZone-M feature.
src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md:17:One of the things provided, with this unstable feature, is the
src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md:41:#![feature(cmse_nonsecure_entry)]
src/doc/unstable-book/src/language-features/doc-notable-trait.md:3:The tracking issue for this feature is: [#45040]
src/doc/unstable-book/src/language-features/doc-notable-trait.md:5:The `doc_notable_trait` feature allows the use of the `#[doc(notable_trait)]`
src/doc/unstable-book/src/language-features/doc-notable-trait.md:14:#![feature(doc_notable_trait)]
src/doc/unstable-book/src/language-features/doc-notable-trait.md:27:This feature was originally implemented in PR [#45039].
src/doc/unstable-book/src/language-features/doc-notable-trait.md:33:[rustdoc-book-notable_trait]: ../../rustdoc/unstable-features.html#adding-your-trait-to-the-notable-traits-dialog
src/doc/unstable-book/src/language-features/trait-upcasting.md:3:The tracking issue for this feature is: [#65991]
src/doc/unstable-book/src/language-features/trait-upcasting.md:9:The `trait_upcasting` feature adds support for trait upcasting coercion. This allows a
src/doc/unstable-book/src/language-features/trait-upcasting.md:14:#![feature(trait_upcasting)]
src/doc/unstable-book/src/language-features/trait-upcasting.md:15:#![allow(incomplete_features)]
src/doc/unstable-book/src/language-features/type-changing-struct-update.md:3:The tracking issue for this feature is: [#86555]
src/doc/unstable-book/src/language-features/type-changing-struct-update.md:16:#![feature(type_changing_struct_update)]
src/doc/unstable-book/src/language-features/doc-masked.md:3:The tracking issue for this feature is: [#44027]
src/doc/unstable-book/src/language-features/doc-masked.md:7:The `doc_masked` feature allows a crate to exclude types from a given crate from appearing in lists
src/doc/unstable-book/src/language-features/doc-masked.md:8:of trait implementations. The specifics of the feature are as follows:
src/doc/unstable-book/src/language-features/doc-masked.md:19:This feature was introduced in PR [#44026] to ensure that compiler-internal and
src/doc/unstable-book/src/language-features/exclusive-range-pattern.md:3:The tracking issue for this feature is: [#37854].
src/doc/unstable-book/src/language-features/exclusive-range-pattern.md:10:The `exclusive_range_pattern` feature allows non-inclusive range
src/doc/unstable-book/src/language-features/exclusive-range-pattern.md:12:contexts. It also can be combined with `#![feature(half_open_range_patterns]`
src/doc/unstable-book/src/language-features/exclusive-range-pattern.md:19:#![feature(exclusive_range_pattern)]
src/doc/unstable-book/src/language-features/cfg-version.md:3:The tracking issue for this feature is: [#64796]
src/doc/unstable-book/src/language-features/cfg-version.md:9:The `cfg_version` feature makes it possible to execute different code
src/doc/unstable-book/src/language-features/cfg-version.md:16:#![feature(cfg_version)]
src/doc/unstable-book/src/language-features/negative-impls.md:3:The tracking issue for this feature is [#68318].
src/doc/unstable-book/src/language-features/negative-impls.md:9:With the feature gate `negative_impls`, you can write negative impls as well as positive ones:
src/doc/unstable-book/src/language-features/negative-impls.md:12:#![feature(negative_impls)]
src/doc/unstable-book/src/language-features/yeet-expr.md:3:The tracking issue for this feature is: [#96373]
src/doc/unstable-book/src/language-features/yeet-expr.md:9:The `yeet_expr` feature adds support for `do yeet` expressions,
src/doc/unstable-book/src/language-features/yeet-expr.md:15:#![feature(yeet_expr)]
src/doc/unstable-book/src/language-features/unsized-locals.md:3:The tracking issue for this feature is: [#48055]
src/doc/unstable-book/src/language-features/unsized-locals.md:14:#![allow(incomplete_features)]
src/doc/unstable-book/src/language-features/unsized-locals.md:15:#![feature(unsized_locals, unsized_fn_params)]
src/doc/unstable-book/src/language-features/unsized-locals.md:34:#![feature(unsized_locals)]
src/doc/unstable-book/src/language-features/unsized-locals.md:86:With this feature, you can have by-value `self` arguments without `Self: Sized` bounds.
src/doc/unstable-book/src/language-features/unsized-locals.md:89:#![feature(unsized_fn_params)]
src/doc/unstable-book/src/language-features/unsized-locals.md:106:#![feature(unsized_fn_params)]
src/doc/unstable-book/src/language-features/unsized-locals.md:121:One of the objectives of this feature is to allow `Box<dyn FnOnce>`.
src/doc/unstable-book/src/language-features/unsized-locals.md:128:#![feature(unsized_locals)]
src/doc/unstable-book/src/language-features/unsized-locals.md:146:It's advised not to casually use the `#![feature(unsized_locals)]` feature. Typical use-cases are:
src/doc/unstable-book/src/language-features/unsized-locals.md:154:#![feature(unsized_locals)]
src/doc/unstable-book/src/language-features/unsized-locals.md:165:#![feature(unsized_locals)]
src/doc/unstable-book/src/language-features/lang-items.md:3:The tracking issue for this feature is: None.
src/doc/unstable-book/src/language-features/lang-items.md:19:#![feature(lang_items, start, libc, core_intrinsics, rustc_private, rustc_attrs)]
src/doc/unstable-book/src/language-features/lang-items.md:73:Other features provided by lang items include:
src/doc/unstable-book/src/language-features/lang-items.md:104:libc = { version = "0.2.14", default-features = false }
src/doc/unstable-book/src/language-features/lang-items.md:107:Note that the default features have been disabled. This is a critical step -
src/doc/unstable-book/src/language-features/lang-items.md:108:**the default features of libc include the standard library and so must be
src/doc/unstable-book/src/language-features/lang-items.md:120:#![feature(lang_items, core_intrinsics, rustc_private)]
src/doc/unstable-book/src/language-features/lang-items.md:121:#![feature(start)]
src/doc/unstable-book/src/language-features/lang-items.md:156:#![feature(lang_items, core_intrinsics, rustc_private)]
src/doc/unstable-book/src/language-features/lang-items.md:157:#![feature(start)]
src/doc/unstable-book/src/language-features/abi-thiscall.md:3:The tracking issue for this feature is: [#42202]
src/doc/unstable-book/src/language-features/asm-unwind.md:3:The tracking issue for this feature is: [#93334]
src/doc/unstable-book/src/language-features/asm-unwind.md:9:This feature adds a `may_unwind` option to `asm!` which allows an `asm` block to unwind stack and be part of the stack unwinding process. This option is only supported by the LLVM backend right now.
src/doc/unstable-book/src/language-features/transparent-unions.md:3:The tracking issue for this feature is [#60405]
src/doc/unstable-book/src/language-features/transparent-unions.md:9:The `transparent_unions` feature allows you mark `union`s as
src/doc/unstable-book/src/language-features/transparent-unions.md:16:#![feature(transparent_unions)]
src/doc/unstable-book/src/language-features/transparent-unions.md:37:#![feature(transparent_unions)]
src/doc/unstable-book/src/language-features/transparent-unions.md:55:#![feature(transparent_unions)]
src/doc/unstable-book/src/language-features/unboxed-closures.md:3:The tracking issue for this feature is [#29625]
src/doc/unstable-book/src/language-features/unboxed-closures.md:5:See Also: [`fn_traits`](../library-features/fn-traits.md)
src/doc/unstable-book/src/language-features/unboxed-closures.md:11:The `unboxed_closures` feature allows you to write functions using the `"rust-call"` ABI,
src/doc/unstable-book/src/language-features/unboxed-closures.md:18:#![feature(unboxed_closures)]
src/doc/unstable-book/src/language-features/native-link-modifiers-as-needed.md:3:The tracking issue for this feature is: [#81490]
src/doc/unstable-book/src/language-features/native-link-modifiers-as-needed.md:9:The `native_link_modifiers_as_needed` feature allows you to use the `as-needed` modifier.
src/doc/unstable-book/src/language-features/marker-trait-attr.md:3:The tracking issue for this feature is: [#29864]
src/doc/unstable-book/src/language-features/marker-trait-attr.md:11:feature, however, carves out an exception to that rule: a trait can
src/doc/unstable-book/src/language-features/marker-trait-attr.md:18:#![feature(marker_trait_attr)]
src/doc/unstable-book/src/language-features/marker-trait-attr.md:35:feature, which applied to all empty traits (without needing an opt-in).
src/doc/unstable-book/src/language-features/asm-const.md:3:The tracking issue for this feature is: [#93332]
src/doc/unstable-book/src/language-features/asm-const.md:9:This feature adds a `const <expr>` operand type to `asm!` and `global_asm!`.
src/doc/unstable-book/src/language-features/inline-const.md:3:The tracking issue for this feature is: [#76001]
src/doc/unstable-book/src/language-features/inline-const.md:9:This feature allows you to use inline constant expressions. For example, you can
src/doc/unstable-book/src/language-features/inline-const.md:24:#![feature(inline_const)]
src/doc/unstable-book/src/language-features/unsized-tuple-coercion.md:3:The tracking issue for this feature is: [#42877]
src/doc/unstable-book/src/language-features/unsized-tuple-coercion.md:15:This implementation is currently gated behind `#[feature(unsized_tuple_coercion)]` to avoid insta-stability. Therefore you can use it like this:
src/doc/unstable-book/src/language-features/unsized-tuple-coercion.md:18:#![feature(unsized_tuple_coercion)]
src/doc/unstable-book/src/language-features/allocator-internals.md:3:This feature does not have a tracking issue, it is an unstable implementation
src/doc/unstable-book/src/language-features/allocator-internals.md:4:detail of the `global_allocator` feature not intended for use outside the
src/doc/unstable-book/src/language-features/rustc-attrs.md:3:This feature has no tracking issue, and is therefore internal to
src/doc/unstable-book/src/language-features/rustc-attrs.md:11:The `rustc_attrs` feature allows debugging rustc type layouts by using
src/doc/unstable-book/src/language-features/rustc-attrs.md:22:#![feature(rustc_attrs)]
src/doc/unstable-book/src/language-features/abi-ptx.md:3:The tracking issue for this feature is: [#38788]
src/doc/unstable-book/src/language-features/abi-ptx.md:20:#![feature(abi_ptx)]
src/doc/unstable-book/src/language-features/unix-sigpipe.md:3:The tracking issue for this feature is: [#97889]
src/doc/unstable-book/src/language-features/unix-sigpipe.md:25:#![feature(unix_sigpipe)]
src/doc/unstable-book/src/language-features/unix-sigpipe.md:44:#![feature(unix_sigpipe)]
src/doc/unstable-book/src/language-features/link-cfg.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/language-features/abi-msp430-interrupt.md:3:The tracking issue for this feature is: [#38487]
src/doc/unstable-book/src/language-features/abi-msp430-interrupt.md:16:#![feature(abi_msp430_interrupt)]
src/doc/unstable-book/src/language-features/c-unwind.md:3:The tracking issue for this feature is: [#74990]
src/doc/unstable-book/src/language-features/ffi-pure.md:3:The tracking issue for this feature is: [#58329]
src/doc/unstable-book/src/language-features/no-coverage.md:3:The tracking issue for this feature is: [#84605]
src/doc/unstable-book/src/language-features/no-coverage.md:19:#![feature(no_coverage)]
src/doc/unstable-book/src/language-features/cfg-sanitize.md:3:The tracking issue for this feature is: [#39699]
src/doc/unstable-book/src/language-features/cfg-sanitize.md:9:The `cfg_sanitize` feature makes it possible to execute different code
src/doc/unstable-book/src/language-features/cfg-sanitize.md:15:#![feature(cfg_sanitize)]
src/doc/unstable-book/src/language-features/c-variadic.md:3:The tracking issue for this feature is: [#44930]
src/doc/unstable-book/src/language-features/c-variadic.md:9:The `c_variadic` language feature enables C-variadic functions to be
src/doc/unstable-book/src/language-features/c-variadic.md:15:#![feature(c_variadic)]
src/doc/unstable-book/src/language-features/more-qualified-paths.md:3:The `more_qualified_paths` feature can be used in order to enable the
src/doc/unstable-book/src/language-features/more-qualified-paths.md:9:#![feature(more_qualified_paths)]
src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md:3:The tracking issue for this feature is: [#67264]
src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md:4:It is part of the `exclusive_range_pattern` feature,
src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md:11:This feature allow using top-level half-open range patterns in slices.
src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md:14:#![feature(half_open_range_patterns_in_slices)]
src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md:15:#![feature(exclusive_range_pattern)]
src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md:23:Note that this feature is not required if the patterns are wrapped between parenthesis.
src/doc/unstable-book/src/language-features/cfi-encoding.md:3:The tracking issue for this feature is: [#89653]
src/doc/unstable-book/src/language-features/cfi-encoding.md:9:The `cfi_encoding` feature allows the user to define a CFI encoding for a type.
src/doc/unstable-book/src/language-features/cfi-encoding.md:16:#![feature(cfi_encoding, extern_types)]
src/doc/unstable-book/src/language-features/inline-const-pat.md:3:The tracking issue for this feature is: [#76001]
src/doc/unstable-book/src/language-features/inline-const-pat.md:9:This feature allows you to use inline constant expressions in pattern position:
src/doc/unstable-book/src/language-features/inline-const-pat.md:12:#![feature(inline_const_pat)]
src/doc/unstable-book/src/library-features/flt2dec.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/derive-eq.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/core-private-diy-float.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/internal-output-capture.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/fd-read.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/profiler-runtime-lib.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/thread-local-internals.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/windows-c.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/allocator-api.md:3:The tracking issue for this feature is [#32838]
src/doc/unstable-book/src/library-features/trace-macros.md:3:The tracking issue for this feature is [#29598].
src/doc/unstable-book/src/library-features/trace-macros.md:14:#![feature(trace_macros)]
src/doc/unstable-book/src/library-features/fmt-internals.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/libstd-sys-internals.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/sort-internals.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/windows-handle.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/fd.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/str-internals.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/dec2flt.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/is-sorted.md:3:The tracking issue for this feature is: [#53485]
src/doc/unstable-book/src/library-features/core-private-bignum.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/windows-net.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/derive-clone-copy.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/core-panic.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/print-internals.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/update-panic-count.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/fn-traits.md:3:The tracking issue for this feature is [#29625]
src/doc/unstable-book/src/library-features/fn-traits.md:5:See Also: [`unboxed_closures`](../language-features/unboxed-closures.md)
src/doc/unstable-book/src/library-features/fn-traits.md:11:The `fn_traits` feature allows for implementation of the [`Fn*`] traits
src/doc/unstable-book/src/library-features/fn-traits.md:17:#![feature(unboxed_closures)]
src/doc/unstable-book/src/library-features/fn-traits.md:18:#![feature(fn_traits)]
src/doc/unstable-book/src/library-features/windows-stdio.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/core-intrinsics.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/c-variadic.md:3:The tracking issue for this feature is: [#44930]
src/doc/unstable-book/src/library-features/c-variadic.md:9:The `c_variadic` library feature exposes the `VaList` structure,
src/doc/unstable-book/src/library-features/c-variadic.md:15:#![feature(c_variadic)]
src/doc/unstable-book/src/library-features/test.md:3:The tracking issue for this feature is: None.
src/doc/unstable-book/src/library-features/test.md:13:#![feature(test)]
src/doc/unstable-book/src/library-features/test.md:38:Note the `test` feature gate, which enables this unstable feature.
src/doc/unstable-book/src/library-features/test.md:87:#![feature(test)]
src/doc/unstable-book/src/library-features/test.md:129:#![feature(test)]
src/doc/unstable-book/src/library-features/rt.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/c-void-variant.md:3:This feature is internal to the Rust compiler and is not intended for general use.
src/doc/unstable-book/src/library-features/concat-idents.md:3:The tracking issue for this feature is: [#29599]
src/doc/unstable-book/src/library-features/concat-idents.md:9:The `concat_idents` feature adds a macro for concatenating multiple identifiers
src/doc/unstable-book/src/library-features/concat-idents.md:15:#![feature(concat_idents)]
src/doc/unstable-book/src/the-unstable-book.md:4:each one organized by a "feature flag." That is, when using an unstable
src/doc/unstable-book/src/the-unstable-book.md:5:feature of Rust, you must use a flag, like this:
src/doc/unstable-book/src/the-unstable-book.md:8:#![feature(generators, generator_trait)]
src/doc/unstable-book/src/the-unstable-book.md:30:The `generators` feature [has a chapter][generators] describing how to use it.
src/doc/unstable-book/src/the-unstable-book.md:32:[generators]: language-features/generators.md
src/doc/unstable-book/src/the-unstable-book.md:34:Because this documentation relates to unstable features, we make no guarantees
src/doc/unstable-book/src/language-features.md:1:# Language features
src/doc/unstable-book/src/compiler-flags/location-detail.md:3:The tracking issue for this feature is: [#70580](https://github.com/rust-lang/rust/issues/70580).
src/doc/unstable-book/src/compiler-flags/control-flow-guard.md:3:The tracking issue for this feature is: [#68793](https://github.com/rust-lang/rust/issues/68793).
src/doc/unstable-book/src/compiler-flags/control-flow-guard.md:7:The rustc flag `-Z control-flow-guard` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.
src/doc/unstable-book/src/compiler-flags/control-flow-guard.md:17:CFG functionality is completely implemented in the LLVM backend and is supported for X86 (32-bit and 64-bit), ARM, and Aarch64 targets. The rustc flag adds the relevant LLVM module flags to enable the feature. This flag will be ignored for all non-Windows targets.
src/doc/unstable-book/src/compiler-flags/instrument-xray.md:3:The tracking issue for this feature is: [#102921](https://github.com/rust-lang/rust/issues/102921).
src/doc/unstable-book/src/compiler-flags/cf-protection.md:3:The tracking issue for this feature is: [#93754](https://github.com/rust-lang/rust/issues/93754).
src/doc/unstable-book/src/compiler-flags/cf-protection.md:32:$ readelf -a target/x86_64-unknown-linux-gnu/debug/example | grep feature:
src/doc/unstable-book/src/compiler-flags/cf-protection.md:33:      Properties: x86 feature: IBT, SHSTK
src/doc/unstable-book/src/compiler-flags/tls-model.md:3:The tracking issue for this feature is: None.
src/doc/unstable-book/src/compiler-flags/src-hash-algorithm.md:3:The tracking issue for this feature is: [#70401](https://github.com/rust-lang/rust/issues/70401).
src/doc/unstable-book/src/compiler-flags/report-time.md:3:The tracking issue for this feature is: [#64888]
src/doc/unstable-book/src/compiler-flags/report-time.md:9:The `report-time` feature adds a possibility to report execution time of the
src/doc/unstable-book/src/compiler-flags/report-time.md:12:This is unstable feature, so you have to provide `-Zunstable-options` to get
src/doc/unstable-book/src/compiler-flags/report-time.md:13:this feature working.
src/doc/unstable-book/src/compiler-flags/sanitizer.md:3:The tracking issues for this feature are:
src/doc/unstable-book/src/compiler-flags/sanitizer.md:10:This feature allows for use of one of following sanitizers:
src/doc/unstable-book/src/compiler-flags/sanitizer.md:218:#![feature(naked_functions)]
src/doc/unstable-book/src/compiler-flags/sanitizer.md:521:HWAddressSanitizer requires `tagged-globals` target feature to instrument
src/doc/unstable-book/src/compiler-flags/sanitizer.md:522:globals. To enable this target feature compile with `-C
src/doc/unstable-book/src/compiler-flags/sanitizer.md:523:target-feature=+tagged-globals`
src/doc/unstable-book/src/compiler-flags/sanitizer.md:539:$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C
src/doc/unstable-book/src/compiler-flags/sanitizer.md:711:MemTagSanitizer requires hardware support and the `mte` target feature.
src/doc/unstable-book/src/compiler-flags/sanitizer.md:712:To enable this target feature compile with `-C target-feature="+mte"`.
src/doc/unstable-book/src/compiler-flags/codegen-backend.md:3:The tracking issue for this feature is: [#77933](https://github.com/rust-lang/rust/issues/77933).
src/doc/unstable-book/src/compiler-flags/codegen-backend.md:7:This feature allows you to specify a path to a dynamic library to use as rustc's
src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md:3:The tracking issue for this feature is: [#54192]
src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md:11:> **NOTE**: This LLVM feature only supports the ELF object format as of LLVM
src/doc/unstable-book/src/compiler-flags/extern-options.md:11:This is unstable feature, so you have to provide `-Zunstable-options` to enable it.
src/doc/unstable-book/src/compiler-flags/remap-cwd-prefix.md:3:The tracking issue for this feature is: [#87325](https://github.com/rust-lang/rust/issues/87325).
src/doc/unstable-book/src/compiler-flags/export-executable-symbols.md:3:The tracking issue for this feature is: [#84161](https://github.com/rust-lang/rust/issues/84161).
src/doc/unstable-book/src/compiler-flags/check-cfg.md:3:The tracking issue for this feature is: [#82450](https://github.com/rust-lang/rust/issues/82450).
src/doc/unstable-book/src/compiler-flags/check-cfg.md:7:This feature allows you to enable complete or partial checking of configuration.
src/doc/unstable-book/src/compiler-flags/check-cfg.md:69:string. `name` specifies the name of the condition, such as `feature` or `target_os`.
src/doc/unstable-book/src/compiler-flags/check-cfg.md:96:rustc --check-cfg 'names(feature)' \
src/doc/unstable-book/src/compiler-flags/check-cfg.md:97:      --check-cfg 'values(feature, "lion", "zebra")' \
src/doc/unstable-book/src/compiler-flags/check-cfg.md:98:      --cfg 'feature="lion"' -Z unstable-options \
src/doc/unstable-book/src/compiler-flags/check-cfg.md:102:This command line indicates that this crate has two features: `lion` and `zebra`. The `lion`
src/doc/unstable-book/src/compiler-flags/check-cfg.md:103:feature is enabled, while the `zebra` feature is disabled. Consider compiling this code:
src/doc/unstable-book/src/compiler-flags/check-cfg.md:107:#[cfg(feature = "lion")]
src/doc/unstable-book/src/compiler-flags/check-cfg.md:111:#[cfg(feature = "zebra")]
src/doc/unstable-book/src/compiler-flags/check-cfg.md:115:#[cfg(feature = "platypus")]
src/doc/unstable-book/src/compiler-flags/check-cfg.md:124:> Note: The `--check-cfg names(feature)` option is necessary only to enable checking the condition
src/doc/unstable-book/src/compiler-flags/check-cfg.md:125:> name, as in the last example. `feature` is a well-known (always-expected) condition name, and so
src/doc/unstable-book/src/compiler-flags/check-cfg.md:132:# This turns on checking for condition names, but not values, such as 'feature' values.
src/doc/unstable-book/src/compiler-flags/check-cfg.md:142:fn do_features() {}
src/doc/unstable-book/src/compiler-flags/check-cfg.md:154:### Example: Checking feature values, but not condition names
src/doc/unstable-book/src/compiler-flags/check-cfg.md:157:# This turns on checking for feature values, but not for condition names.
src/doc/unstable-book/src/compiler-flags/check-cfg.md:158:rustc --check-cfg 'values(feature, "zapping", "lasers")' \
src/doc/unstable-book/src/compiler-flags/check-cfg.md:159:      --cfg 'feature="zapping"' -Z unstable-options
src/doc/unstable-book/src/compiler-flags/check-cfg.md:169:fn do_features() {}
src/doc/unstable-book/src/compiler-flags/check-cfg.md:172:#[cfg(feature = "lasers")]  // This is expected, "lasers" is in the values(feature) list
src/doc/unstable-book/src/compiler-flags/check-cfg.md:175:#[cfg(feature = "monkeys")] // This is UNEXPECTED, because "monkeys" is not in the
src/doc/unstable-book/src/compiler-flags/check-cfg.md:176:                            // --check-cfg values(feature) list
src/doc/unstable-book/src/compiler-flags/check-cfg.md:180:### Example: Checking both condition names and feature values
src/doc/unstable-book/src/compiler-flags/check-cfg.md:183:# This turns on checking for feature values and for condition names.
src/doc/unstable-book/src/compiler-flags/check-cfg.md:185:      --check-cfg 'values(feature, "zapping", "lasers")' \
src/doc/unstable-book/src/compiler-flags/check-cfg.md:186:      --cfg has_feathers --cfg 'feature="zapping"' -Z unstable-options
src/doc/unstable-book/src/compiler-flags/check-cfg.md:194:fn do_features() {}
src/doc/unstable-book/src/compiler-flags/check-cfg.md:200:#[cfg(feature = "lasers")]  // This is expected, "lasers" is in the values(feature) list
src/doc/unstable-book/src/compiler-flags/check-cfg.md:203:#[cfg(feature = "monkeys")] // This is UNEXPECTED, because "monkeys" is not in
src/doc/unstable-book/src/compiler-flags/check-cfg.md:204:                            // the values(feature) list
src/doc/unstable-book/src/compiler-flags/branch-protection.md:18:[build-std](../../cargo/reference/unstable.html#build-std) feature.
src/doc/unstable-book/src/compiler-flags/profile.md:3:The tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).
src/doc/unstable-book/src/compiler-flags/profile.md:7:This feature allows the generation of code coverage reports.
src/doc/style-guide/src/nightly.md:1:This chapter documents style and formatting for nightly-only syntax. The rest of the style guide documents style for stable Rust syntax; nightly syntax only appears in this chapter. Each section here includes the name of the feature gate, so that searches (e.g. `git grep`) for a nightly feature in the Rust repository also turn up the style guide section.
src/doc/style-guide/src/cargo.md:28:For array values, such as a list of features, put the entire list on the same
src/doc/style-guide/src/cargo.md:35:some_feature = [
src/doc/style-guide/src/cargo.md:36:    "another_feature",
src/doc/style-guide/src/cargo.md:37:    "yet_another_feature",
src/doc/style-guide/src/cargo.md:38:    "some_dependency?/some_feature",
tests/ui/auto-traits/typeck-default-trait-impl-negation.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-default-trait-impl-negation.rs:2:#![feature(negative_impls)]
tests/ui/auto-traits/typeck-auto-trait-no-supertraits.rs:25:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-auto-trait-no-supertraits.rs:26:#![feature(negative_impls)]
tests/ui/auto-traits/issue-23080.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/issue-23080.rs:2:#![feature(negative_impls)]
tests/ui/auto-traits/str-contains-slice-conceptually.rs:1:#![feature(negative_impls)]
tests/ui/auto-traits/str-contains-slice-conceptually.rs:2:#![feature(auto_traits)]
tests/ui/auto-traits/suspicious-negative-impls-lint.rs:1:#![feature(negative_impls)]
tests/ui/auto-traits/typeck-auto-trait-no-supertraits-2.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-auto-trait-no-supertraits-2.rs:2:#![feature(negative_impls)]
tests/ui/auto-traits/auto-trait-validation.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-default-trait-impl-precedence.rs:6:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-default-trait-impl-precedence.rs:7:#![feature(negative_impls)]
tests/ui/auto-traits/issue-23080-2.rs:4:#![feature(auto_traits)]
tests/ui/auto-traits/issue-23080-2.rs:5:#![feature(negative_impls)]
tests/ui/auto-traits/typeck-default-trait-impl-constituent-types.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-default-trait-impl-constituent-types.rs:2:#![feature(negative_impls)]
tests/ui/auto-traits/auto-trait-validation.fixed:1:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.rs:2:#![feature(negative_impls)]
tests/ui/auto-traits/bad-generics-on-dyn.rs:1:#![feature(auto_traits)]
tests/ui/auto-traits/auto-traits.rs:3:#![feature(auto_traits)]
tests/ui/auto-traits/auto-traits.rs:4:#![feature(negative_impls)]
tests/ui/auto-traits/issue-84075.rs:3:#![feature(auto_traits)]
tests/ui/no-core-1.rs:3:#![allow(stable_features)]
tests/ui/no-core-1.rs:4:#![feature(no_core, core)]
tests/ui/where-clauses/where-clause-placement-assoc-type-in-trait.fixed:4:#![feature(associated_type_defaults)]
tests/ui/where-clauses/where-clause-placement-assoc-type-in-trait.rs:4:#![feature(associated_type_defaults)]
tests/ui/where-clauses/self-in-where-clause-allowed.rs:3:#![feature(auto_traits)]
tests/ui/let-else/issue-100103.rs:4:#![feature(try_blocks)]
tests/ui/custom_test_frameworks/mismatch.rs:3:#![feature(custom_test_frameworks)]
tests/ui/custom_test_frameworks/dynamic.rs:4:#![feature(custom_test_frameworks)]
tests/ui/custom_test_frameworks/full.rs:5:#![feature(custom_test_frameworks)]
tests/ui/generics/param-in-ct-in-ty-param-default.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/generics/generic-param-attrs.rs:2:// lists are rejected without a feature gate.
tests/ui/generics/generic-param-attrs.rs:6:#![feature(rustc_attrs)]
tests/ui/moves/move-out-of-slice-2.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/moves/move-out-of-slice-2.stderr:4:LL | #![feature(unsized_locals)]
tests/ui/moves/move-out-of-slice-2.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/moves/move-out-of-slice-1.rs:1:#![feature(box_patterns)]
tests/ui/moves/move-out-of-slice-2.rs:1:#![feature(unsized_locals)]
tests/ui/moves/move-out-of-slice-2.rs:2://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/moves/moves-based-on-type-block-bad.rs:1:#![feature(box_patterns)]
tests/ui/no_share-enum.rs:1:#![feature(negative_impls)]
tests/ui/unpretty/box.stdout:4:#![feature(stmt_expr_attributes, rustc_attrs)]
tests/ui/unpretty/box.rs:4:#![feature(stmt_expr_attributes, rustc_attrs)]
tests/ui/trait-bounds/apit-unsized.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/trait-bounds/apit-unsized.stderr:28:   = help: unsized fn params are gated as an unstable feature
tests/ui/trait-bounds/issue-93008.rs:4:#![feature(trivial_bounds)]
tests/ui/specialization/specialization-projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-projection.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-cross-crate.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-cross-crate.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-cross-crate.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/default-associated-type-bound-2.rs:2:#![feature(specialization)]
tests/ui/specialization/specialization-default-projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-default-projection.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-default-projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/default-generic-associated-type-bound.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/default-generic-associated-type-bound.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/default-generic-associated-type-bound.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-70442.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-translate-projections-with-params.rs:7:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-on-projection.rs:4:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-38091.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-38091.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-38091.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-feature-gate-overlap.stderr:2:  --> $DIR/specialization-feature-gate-overlap.rs:13:1
tests/ui/specialization/min_specialization/specialize_on_trait.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/impl_specialization_trait.rs:1:// Check that specialization traits can't be implemented without a feature.
tests/ui/specialization/min_specialization/specialize-associated-type.rs:5:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize-associated-type.rs:6:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/repeating_param.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/issue-79224.rs:1:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_on_spec_trait.rs:5:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_on_spec_trait.rs:6:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/impl_specialization_trait.stderr:7:   = help: add `#![feature(min_specialization)]` to the crate attributes to enable
tests/ui/specialization/min_specialization/spec-marker-supertraits.rs:4:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/spec-marker-supertraits.rs:5:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/specialize_on_type_error.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_on_type_error.rs:4:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/specialize_with_generalize_lifetimes.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_on_static.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_nothing.rs:1:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/dyn-trait-assoc-types.rs:4:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_on_marker.rs:6:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialize_on_marker.rs:7:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/specialization_super_trait.rs:5:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialization_super_trait.rs:6:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/specialization_trait.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialization_trait.rs:4:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/spec-iter.rs:6:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/repeating_lifetimes.rs:4:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/repeated_projection_type.rs:3:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.rs:1:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/implcit-well-formed-bounds.rs:6:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/specialization_marker.rs:3:#![feature(rustc_attrs)]
tests/ui/specialization/min_specialization/spec-reference.rs:5:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/impl-on-nonexisting.rs:1:#![feature(min_specialization)]
tests/ui/specialization/min_specialization/auxiliary/specialization-trait.rs:1:#![feature(rustc_attrs)]
tests/ui/specialization/specialization-allowed-cross-crate.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-allowed-cross-crate.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-allowed-cross-crate.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-polarity.rs:3:#![feature(auto_traits)]
tests/ui/specialization/specialization-polarity.rs:4:#![feature(negative_impls)]
tests/ui/specialization/specialization-polarity.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-overlap.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-overlap.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-overlap.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-50452.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/default-associated-type-bound-2.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/default-associated-type-bound-2.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/default-associated-type-bound-2.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-polarity.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-polarity.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-polarity.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-assoc-fns.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-assoc-fns.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-assoc-fns.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-default-types.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-45814.rs:3:#![feature(specialization)]
tests/ui/specialization/issue-45814.rs:4:#![cfg_attr(negative, feature(with_negative_coherence))]
tests/ui/specialization/issue-45814.rs:5:#![allow(incomplete_features)]
tests/ui/specialization/specialization-translate-projections.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-translate-projections.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-translate-projections.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-assoc-fns.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-38091.rs:1:#![feature(specialization)]
tests/ui/specialization/issue-38091.rs:2://~^ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-feature-gate-default.stderr:2:  --> $DIR/specialization-feature-gate-default.rs:10:5
tests/ui/specialization/specialization-feature-gate-default.stderr:8:   = help: add `#![feature(specialization)]` to the crate attributes to enable
tests/ui/specialization/issue-63716-parse-async.rs:7:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-translate-projections-with-params.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-translate-projections-with-params.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-translate-projections-with-params.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/assoc-ty-graph-cycle.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/assoc-ty-graph-cycle.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/assoc-ty-graph-cycle.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-39618.rs:7:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-no-default.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/cross-crate-defaults.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-default-projection.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-out-of-order.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-43037.rs:2:#![feature(specialization)]
tests/ui/specialization/issue-43037.rs:3:#![cfg_attr(negative, feature(with_negative_coherence))]
tests/ui/specialization/issue-43037.rs:4:#![allow(incomplete_features)]
tests/ui/specialization/specialization-allowed-cross-crate.rs:8:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-68830-spurious-diagnostics.rs:4:#![feature(specialization)]
tests/ui/specialization/issue-68830-spurious-diagnostics.rs:5:#![allow(incomplete_features)]
tests/ui/specialization/specialization-cross-crate.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-44861.rs:2:#![feature(specialization)]
tests/ui/specialization/issue-44861.rs:3:#![feature(unsize, coerce_unsized)]
tests/ui/specialization/issue-44861.rs:4:#![allow(incomplete_features)]
tests/ui/specialization/issue-59435.rs:1:#![feature(specialization)]
tests/ui/specialization/issue-59435.rs:2:#![allow(incomplete_features)]
tests/ui/specialization/issue-40582.rs:6:#![feature(specialization)]
tests/ui/specialization/issue-40582.rs:7:#![allow(incomplete_features)]
tests/ui/specialization/specialization-default-types.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-default-types.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-default-types.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-35376.rs:2:#![feature(specialization)]
tests/ui/specialization/issue-35376.rs:3://~^ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-52050.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/default-associated-type-bound-1.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/default-associated-type-bound-1.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/default-associated-type-bound-1.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-36804.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-36804.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-36804.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/README.md:4:- Feature gating
tests/ui/specialization/README.md:5:  - [On use of the `default` keyword](specialization-feature-gate-default.rs)
tests/ui/specialization/README.md:6:  - [On overlapping impls](specialization-feature-gate-overlap.rs)
tests/ui/specialization/specialization-supertraits.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/assoc-ty-graph-cycle.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-on-projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-on-projection.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-on-projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-63716-parse-async.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-63716-parse-async.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-63716-parse-async.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-51892.rs:1:#![allow(incomplete_features)]
tests/ui/specialization/issue-51892.rs:2:#![feature(generic_const_exprs)]
tests/ui/specialization/issue-51892.rs:3:#![feature(specialization)]
tests/ui/specialization/specialization-overlap-hygiene.rs:1:#![feature(decl_macro)]
tests/ui/specialization/specialization-projection.rs:4:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-38091-2.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-38091-2.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-38091-2.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-39448.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-39448.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-39448.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-projection-alias.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-projection-alias.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-projection-alias.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-default-items-drop-coherence.rs:10:#![feature(specialization)]
tests/ui/specialization/specialization-default-items-drop-coherence.rs:11:#![allow(incomplete_features)]
tests/ui/specialization/issue-50452.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-50452.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-50452.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-38091-2.rs:4:#![feature(specialization)]
tests/ui/specialization/issue-38091-2.rs:5://~^ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-basics.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-basics.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-basics.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-translate-projections.rs:6:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-39448.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-no-default.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-no-default.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-no-default.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-36804.rs:2:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/transmute-specialization.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/non-defaulted-item-fail.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/non-defaulted-item-fail.stderr:4:LL | #![feature(specialization, associated_type_defaults)]
tests/ui/specialization/non-defaulted-item-fail.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-out-of-order.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-out-of-order.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-out-of-order.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/allowed-cross-crate.rs:8:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/specialization-wfcheck.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/overlap-projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/overlap-projection.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/overlap-projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/specialization-feature-gate-default.stderr:2:  --> $DIR/specialization-feature-gate-default.rs:7:1
tests/ui/specialization/defaultimpl/specialization-feature-gate-default.stderr:10:   = help: add `#![feature(specialization)]` to the crate attributes to enable
tests/ui/specialization/defaultimpl/specialization-trait-not-implemented.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/overlap-projection.rs:7:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/specialization-wfcheck.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/specialization-wfcheck.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/specialization-wfcheck.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/specialization-no-default.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/out-of-order.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/validation.stderr:11:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/validation.stderr:14:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/validation.stderr:19:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/allowed-cross-crate.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/allowed-cross-crate.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/allowed-cross-crate.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/validation.rs:1:#![feature(negative_impls)]
tests/ui/specialization/defaultimpl/validation.rs:2:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/specialization-no-default.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/specialization-no-default.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/specialization-no-default.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/projection.rs:4:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.rs:6:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/projection.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/out-of-order.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/out-of-order.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/out-of-order.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/defaultimpl/auxiliary/go_trait.rs:1:#![feature(specialization)]
tests/ui/specialization/issue-33017.rs:4:#![allow(incomplete_features)]
tests/ui/specialization/issue-33017.rs:5:#![feature(specialization)]
tests/ui/specialization/specialization-overlap.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-52050.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-52050.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-52050.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-overlap-negative.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-overlap-negative.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-overlap-negative.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-default-methods.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-default-methods.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-default-methods.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-overlap-projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-overlap-projection.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-overlap-projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-translate-projections-with-lifetimes.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-translate-projections-with-lifetimes.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-translate-projections-with-lifetimes.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-translate-projections-with-lifetimes.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-70442.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-70442.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-70442.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-basics.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/default-associated-type-bound-1.rs:4:#![feature(specialization)]
tests/ui/specialization/non-defaulted-item-fail.rs:1:#![feature(specialization, associated_type_defaults)]
tests/ui/specialization/non-defaulted-item-fail.rs:2://~^ WARN the feature `specialization` is incomplete
tests/ui/specialization/cross-crate-defaults.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/cross-crate-defaults.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/cross-crate-defaults.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-projection-alias.rs:5:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-39618.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-39618.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-39618.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/default-generic-associated-type-bound.rs:3:#![feature(specialization)]
tests/ui/specialization/issue-50452-fail.rs:1:#![feature(specialization)]
tests/ui/specialization/issue-50452-fail.rs:2://~^ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-supertraits.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/specialization-supertraits.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/specialization-supertraits.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/specialization-overlap-projection.rs:7:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/issue-35376.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-35376.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-35376.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/issue-111232.rs:1:#![feature(min_specialization)]
tests/ui/specialization/auxiliary/specialization_cross_crate.rs:1:#![feature(specialization)]
tests/ui/specialization/auxiliary/cross_crates_defaults.rs:1:#![feature(specialization)]
tests/ui/specialization/auxiliary/go_trait.rs:1:#![feature(specialization)]
tests/ui/specialization/specialization-overlap-negative.rs:1:#![feature(negative_impls)]
tests/ui/specialization/specialization-overlap-negative.rs:2:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/specialization-default-methods.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/specialization/const_trait_impl.rs:3:#![feature(const_trait_impl, min_specialization, rustc_attrs)]
tests/ui/specialization/issue-50452-fail.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/issue-50452-fail.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/issue-50452-fail.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/specialization/transmute-specialization.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/specialization/transmute-specialization.stderr:4:LL | #![feature(specialization)]
tests/ui/specialization/transmute-specialization.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/single-use-lifetime/issue-104440.rs:1:#![feature(decl_macro, rustc_attrs)]
tests/ui/type-alias/lazy-type-alias-enum-variant.rs:4:#![feature(lazy_type_alias)]
tests/ui/invalid-compile-flags/branch-protection-missing-pac-ret.rs:10:#![feature(no_core, lang_items)]
tests/ui/query-system/issue-83479.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lang-items/issue-83471.rs:4:#![feature(no_core)]
tests/ui/lang-items/fn-fn_mut-call-ill-formed.rs:3:#![feature(lang_items)]
tests/ui/lang-items/fn-fn_mut-call-ill-formed.rs:4:#![feature(no_core)]
tests/ui/lang-items/required-lang-item.rs:3:#![feature(lang_items, no_core)]
tests/ui/lang-items/lang-item-missing.rs:6:#![feature(start, no_core)]
tests/ui/lang-items/lang-item-generic-requirements.rs:4:#![feature(lang_items, no_core)]
tests/ui/lang-items/missing-clone-for-suggestion.rs:4:#![feature(no_core, lang_items)]
tests/ui/lang-items/start_lang_item_args.rs:5:#![feature(lang_items, no_core)]
tests/ui/lang-items/bad-add-impl.rs:1:#![feature(no_core)]
tests/ui/lang-items/bad-add-impl.rs:2:#![feature(lang_items)]
tests/ui/lang-items/issue-86238.rs:3:#![feature(lang_items)]
tests/ui/lang-items/issue-86238.rs:4:#![feature(no_core)]
tests/ui/lang-items/issue-31076.rs:1:#![feature(no_core, lang_items)]
tests/ui/lang-items/issue-83471.stderr:13:   = help: add `#![feature(lang_items)]` to the crate attributes to enable
tests/ui/lang-items/issue-83471.stderr:21:   = help: add `#![feature(lang_items)]` to the crate attributes to enable
tests/ui/lang-items/issue-87573.rs:4:#![feature(no_core, lang_items)]
tests/ui/lang-items/issue-19660.rs:3:#![feature(lang_items, start, no_core)]
tests/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.stderr:8:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.stderr:22:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.stderr:31:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.stderr:4:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.stderr:10:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.stderr:15:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/deny-unstable-lint-command-line.stderr:4:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/deny-unstable-lint-command-line.stderr:10:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/deny-unstable-lint-command-line.stderr:15:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/deny-unstable-lint-inline.stderr:8:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/deny-unstable-lint-inline.stderr:22:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/unknown-unstable-lints/deny-unstable-lint-inline.stderr:31:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/dropck/negative.rs:1:#![feature(negative_impls)]
tests/ui/dropck/dropck-eyepatch-reorder.rs:1:#![feature(dropck_eyepatch)]
tests/ui/dropck/reservation.rs:1:#![feature(rustc_attrs)]
tests/ui/dropck/issue-24805-dropck-itemless.rs:8:#![feature(dropck_eyepatch)]
tests/ui/dropck/issue-28498-ugeh-with-lifetime-param.rs:8:#![feature(dropck_eyepatch)]
tests/ui/dropck/cleanup-arm-conditional.rs:3:#![allow(stable_features)]
tests/ui/dropck/cleanup-arm-conditional.rs:10:#![feature(os)]
tests/ui/dropck/dropck-eyepatch.rs:1:#![feature(dropck_eyepatch)]
tests/ui/dropck/dropck-eyepatch-implies-unsafe-impl.rs:1:#![feature(dropck_eyepatch)]
tests/ui/dropck/issue-28498-ugeh-with-passed-to-fn.rs:13:#![feature(dropck_eyepatch)]
tests/ui/dropck/auxiliary/dropck_eyepatch_extern_crate.rs:1:#![feature(dropck_eyepatch)]
tests/ui/dropck/issue-28498-ugeh-with-trait-bound.rs:8:#![feature(dropck_eyepatch)]
tests/ui/weird-exprs.rs:3:#![feature(generators)]
tests/ui/explicit-tail-calls/return-lifetime-sub.rs:2:#![allow(incomplete_features)]
tests/ui/explicit-tail-calls/return-lifetime-sub.rs:3:#![feature(explicit_tail_calls)]
tests/ui/explicit-tail-calls/return-mismatches.rs:1:#![allow(incomplete_features)]
tests/ui/explicit-tail-calls/return-mismatches.rs:2:#![feature(explicit_tail_calls)]
tests/ui/explicit-tail-calls/become-outside.rs:2:#![allow(incomplete_features)]
tests/ui/explicit-tail-calls/become-outside.rs:3:#![feature(explicit_tail_calls)]
tests/ui/unsized/unsized-fn-arg.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized/unsized3-rpass.rs:5:#![feature(unsize, ptr_metadata)]
tests/ui/unsized/unsized6.stderr:11:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:63:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:99:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:120:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:137:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:153:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:174:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:191:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:206:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized/unsized6.stderr:225:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized/issue-97732.rs:3:#![feature(coerce_unsized)]
tests/ui/unsized/issue-30355.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized/unsized-tuple-impls.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/unsized/issue-71659.rs:4:#![feature(unsize)]
tests/ui/ffi_const2.rs:1:#![feature(ffi_const, ffi_pure)]
tests/ui/panic-while-printing.rs:4:#![feature(internal_output_capture)]
tests/ui/regions/regions-dependent-addr-of.rs:5:#![feature(box_patterns)]
tests/ui/regions/regions-outlives-nominal-type-struct-region.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-mock-codegen.rs:5:#![feature(allocator_api)]
tests/ui/regions/regions-outlives-nominal-type-struct-region-rev.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-outlives-projection-container.rs:6:#![feature(rustc_attrs)]
tests/ui/regions/regions-steal-closure.rs:1:#![feature(fn_traits)]
tests/ui/regions/regions-bound-lists-feature-gate-2.rs:3:#![allow(stable_features)]
tests/ui/regions/regions-bound-lists-feature-gate-2.rs:5:#![feature(issue_5723_bootstrap)]
tests/ui/regions/regions-outlives-nominal-type-enum-type.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-outlives-nominal-type-struct-type-rev.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-outlives-nominal-type-enum-type-rev.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-outlives-nominal-type-struct-type.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-bound-lists-feature-gate.rs:4:#![allow(stable_features)]
tests/ui/regions/regions-bound-lists-feature-gate.rs:6:#![feature(issue_5723_bootstrap)]
tests/ui/regions/regions-ref-in-fn-arg.rs:1:#![feature(box_patterns)]
tests/ui/regions/regions-outlives-nominal-type-enum-region.rs:8:#![feature(rustc_attrs)]
tests/ui/regions/regions-outlives-nominal-type-enum-region-rev.rs:8:#![feature(rustc_attrs)]
tests/ui/no_send-enum.rs:1:#![feature(negative_impls)]
tests/ui/lint/trivial-casts-featuring-type-ascription.rs:2:#![feature(type_ascription)]
tests/ui/lint/issue-99387.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/lint/lint-ctypes-73251-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/lint-stability-fields.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:9:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:15:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:17:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:23:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:25:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:31:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:33:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:39:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:41:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:47:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:49:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:55:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:57:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:63:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:65:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:71:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:73:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:79:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:81:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:87:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:89:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:95:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:97:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:103:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:105:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:111:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:113:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:119:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:121:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:127:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:129:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:135:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:137:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:143:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:145:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:151:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:153:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:159:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:161:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:167:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:169:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:175:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:177:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:183:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:185:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:191:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:193:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:199:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:201:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:207:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:209:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:215:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:217:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:223:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:225:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:231:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:233:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:239:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:241:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:247:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:249:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:255:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:257:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:263:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:265:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:271:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:273:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:279:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:281:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:287:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:289:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:295:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:297:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:303:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:305:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:311:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:313:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:319:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:321:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:327:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:329:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:335:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-fields.stderr:337:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-fields.stderr:343:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-expr-stmt-attrs-for-early-lints.rs:3:#![feature(stmt_expr_attributes)]
tests/ui/lint/no-coverage.rs:1:#![feature(extern_types)]
tests/ui/lint/no-coverage.rs:2:#![feature(no_coverage)]
tests/ui/lint/no-coverage.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/lint/lint-output-format.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-output-format.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-output-format.stderr:9:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-output-format.stderr:15:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-output-format.stderr:17:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-output-format.stderr:23:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-output-format.stderr:25:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-output-format.stderr:31:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/expr_attr_paren_order.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/lint/lint-ctypes-73249-5.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/lint-stability.rs:8:#![feature(staged_api)]
tests/ui/lint/lint-stability.rs:10:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:17:    extern crate stability_cfg2; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:46:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:48:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:50:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:53:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:55:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:57:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:59:        unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:60:        Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:61:        <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:64:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.rs:66:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.rs:68:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.rs:89:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:92:            TypeUnstable = u8, //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:100:            //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:103:        let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:108:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:109:        let _ = UnstableUnitStruct; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:114:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:115:        let _ = Enum::UnstableVariant; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:120:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:121:        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:131:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:145:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:147:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:149:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:151:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:152:        Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:153:        <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:155:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.rs:157:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.rs:172:    impl UnstableTrait for S { } //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:174:    trait LocalTrait : UnstableTrait { } //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:179:        fn trait_unstable(&self) {} //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:184:    extern crate inherited_stability; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:185:    use self::inherited_stability::*; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:188:        unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:191:        stable_mod::unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:194:        unstable_mod::deprecated(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:195:        unstable_mod::unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:197:        let _ = Unstable::UnstableVariant; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:198:        let _ = Unstable::StableVariant; //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability.rs:206:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:209:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:213:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:217:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:219:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability.rs:222:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:224:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:227:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:231:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:234:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:238:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:240:        #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability.rs:243:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:245:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:250:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:253:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:257:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:259:        #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability.rs:262:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:264:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:270:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:273:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability.rs:275:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:277:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability.rs:279:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:281:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability.rs:284:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:287:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:289:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:293:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:296:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:299:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:303:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:306:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:308:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability.rs:425:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:433:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability.rs:441:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-missing-doc.rs:6:#![feature(associated_type_defaults, extern_types)]
tests/ui/lint/lint-missing-doc.rs:7:#![feature(trait_alias)]
tests/ui/lint/lint-strict-provenance-fuzzy-casts.rs:1:#![feature(strict_provenance)]
tests/ui/lint/command-line-register-lint-tool.rs:4:#![feature(register_tool)]
tests/ui/lint/reasons.rs:3:#![feature(lint_reasons)]
tests/ui/lint/inline-trait-and-foreign-items.rs:1:#![feature(extern_types)]
tests/ui/lint/inline-trait-and-foreign-items.rs:2:#![feature(impl_trait_in_assoc_type)]
tests/ui/lint/lint-ctypes-fn.rs:1:#![feature(rustc_private)]
tests/ui/lint/lint-match-arms-2.rs:1:#![feature(if_let_guard)]
tests/ui/lint/unnecessary-extern-crate.rs:4:#![feature(test, rustc_private)]
tests/ui/lint/opaque-ty-ffi-normalization-cycle.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/dead-code/anon-const-in-pat.rs:2:#![feature(inline_const_pat)]
tests/ui/lint/dead-code/anon-const-in-pat.rs:3:#![allow(incomplete_features)]
tests/ui/lint/dead-code/unused-assoc-fns.rs:1:#![feature(inherent_associated_types)]
tests/ui/lint/dead-code/unused-assoc-fns.rs:2:#![allow(incomplete_features)]
tests/ui/lint/dead-code/lint-dead-code-2.rs:3:#![feature(rustc_attrs, start)]
tests/ui/lint/dead-code/offset-of-correct-param-env.rs:3:#![feature(offset_of)]
tests/ui/lint/dead-code/offset-of.rs:1:#![feature(offset_of)]
tests/ui/lint/unused/unused-closure.rs:4:#![feature(async_closure)]
tests/ui/lint/unused/unused-closure.rs:5:#![feature(generators)]
tests/ui/lint/unused/unused-macros-decl.rs:1:#![feature(decl_macro)]
tests/ui/lint/unused/lint-unused-mut-variables.rs:6:#![feature(async_closure, raw_ref_op)]
tests/ui/lint/unused/must_use-in-stdlib-traits.rs:2:#![feature(arbitrary_self_types)]
tests/ui/lint/unused/trait-alias-supertrait.rs:6:#![feature(trait_alias)]
tests/ui/lint/unused/must_use-unit.rs:1:#![feature(never_type)]
tests/ui/lint/unused/issue-88519-unused-paren.rs:5:#![feature(type_ascription)]
tests/ui/lint/unused/issue-54538-unused-parens-lint.fixed:3:#![feature(box_patterns, stmt_expr_attributes, yeet_expr)]
tests/ui/lint/unused/unused_attributes-must_use.rs:3:#![feature(asm_experimental_arch, stmt_expr_attributes, trait_alias)]
tests/ui/lint/unused/unused-attr-duplicate.rs:6:// - target_feature: platform-specific
tests/ui/lint/unused/unused-doc-comments-edge-cases.stderr:14:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/lint/unused/issue-54538-unused-parens-lint.rs:3:#![feature(box_patterns, stmt_expr_attributes, yeet_expr)]
tests/ui/lint/unused/issue-103320-must-use-ops.rs:4:#![feature(never_type)]
tests/ui/lint/unused/issue-74883-unused-paren-baren-yield.rs:1:#![feature(generator_trait)]
tests/ui/lint/unused/issue-74883-unused-paren-baren-yield.rs:2:#![feature(generators)]
tests/ui/lint/unused/unused-allocation.rs:1:#![feature(rustc_attrs, stmt_expr_attributes)]
tests/ui/lint/unused/lint-unused-variables.rs:4:#![feature(async_closure)]
tests/ui/lint/unused/unused-doc-comments-for-macros.rs:2:#![feature(rustc_attrs)]
tests/ui/lint/unused/useless-comment.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/lint/unused/must-use-ops.rs:6:#![feature(never_type)]
tests/ui/lint/unused/issue-47390-unused-variable-in-struct-pattern.rs:3:#![feature(box_patterns)]
tests/ui/lint/unused/unused-macro-rules-decl.rs:1:#![feature(decl_macro)]
tests/ui/lint/invalid_value.rs:4:#![feature(never_type, rustc_attrs)]
tests/ui/lint/enable-unstable-lib-feature.stderr:2:  --> $DIR/enable-unstable-lib-feature.rs:11:8
tests/ui/lint/enable-unstable-lib-feature.stderr:8:  --> $DIR/enable-unstable-lib-feature.rs:6:9
tests/ui/lint/must_not_suspend/trait.rs:5:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/tuple-mismatch.rs:1:#![feature(generators)]
tests/ui/lint/must_not_suspend/warn.rs:6:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/handled.rs:3:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/generic.rs:5:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/boxed.rs:2:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/return.rs:2:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/gated.stderr:9:   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable
tests/ui/lint/must_not_suspend/gated.stderr:20:   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable
tests/ui/lint/must_not_suspend/gated.stderr:30:   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable
tests/ui/lint/must_not_suspend/mutex.rs:2:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/feature-gate-must_not_suspend.stderr:1:error[E0658]: the `#[must_not_suspend]` attribute is an experimental feature
tests/ui/lint/must_not_suspend/feature-gate-must_not_suspend.stderr:2:  --> $DIR/feature-gate-must_not_suspend.rs:3:1
tests/ui/lint/must_not_suspend/feature-gate-must_not_suspend.stderr:8:   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable
tests/ui/lint/must_not_suspend/ref.rs:6:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/unit.rs:5:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/ref-drop-tracking.rs:3:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/dedup.rs:5:#![feature(must_not_suspend)]
tests/ui/lint/must_not_suspend/other_items.rs:2:#![feature(must_not_suspend)]
tests/ui/lint/lint-strict-provenance-lossy-casts.rs:1:#![feature(strict_provenance)]
tests/ui/lint/cast_ref_to_mut.rs:3:#![feature(ptr_from_ref)]
tests/ui/lint/lint-output-format.rs:1:// compile-flags: -F unused_features
tests/ui/lint/lint-output-format.rs:6:extern crate lint_output_format; //~ ERROR use of unstable library feature
tests/ui/lint/lint-output-format.rs:7:use lint_output_format::{foo, bar}; //~ ERROR use of unstable library feature
tests/ui/lint/lint-output-format.rs:8://~| ERROR use of unstable library feature
tests/ui/lint/lint-output-format.rs:12:    let _y = bar(); //~ ERROR use of unstable library feature
tests/ui/lint/missing-doc-private-macro.rs:6:#![feature(decl_macro)]
tests/ui/lint/lint-enum-intrinsics-non-enums.rs:3:#![feature(variant_count)]
tests/ui/lint/lint-stability.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:9:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:15:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:17:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:23:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:25:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:31:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:33:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:39:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:41:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:47:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:49:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:55:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:57:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:63:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:65:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:71:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:73:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:79:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:81:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.stderr:87:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:89:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.stderr:95:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:97:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.stderr:103:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:105:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:111:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:113:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:119:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:121:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:127:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:129:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:135:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:137:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:143:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:145:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:151:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:153:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:159:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:161:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:167:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:169:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:175:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:177:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:183:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:185:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:191:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:193:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:199:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:201:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:207:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:209:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:215:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:217:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:223:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:225:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.stderr:231:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:233:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability.stderr:239:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:241:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:247:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:249:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:255:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:257:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:263:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:265:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:271:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:273:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:279:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:281:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:287:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:289:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:295:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:297:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:303:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:305:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:311:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:313:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:319:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:321:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:327:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:329:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:335:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability.stderr:337:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability.stderr:343:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/empty-lint-attributes.rs:1:#![feature(lint_reasons)]
tests/ui/lint/bare-trait-objects-path.rs:1:#![feature(associated_type_defaults)]
tests/ui/lint/invalid_value-polymorphic.rs:4:#![feature(core_intrinsics)]
tests/ui/lint/reasons-erroneous.rs:1:#![feature(lint_reasons)]
tests/ui/lint/lint-forbid-internal-unsafe.rs:2:#![feature(allow_internal_unsafe)]
tests/ui/lint/lint-stability-deprecated.rs:7:#![feature(staged_api, unstable_test_feature)]
tests/ui/lint/lint-stability-deprecated.rs:9:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:221:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:224:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:228:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:230:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:233:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:235:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:238:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:242:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:245:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:249:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:251:        #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:254:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:256:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:261:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:264:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:268:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:270:        #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:273:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:275:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:281:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:284:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability-deprecated.rs:286:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:288:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability-deprecated.rs:290:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:292:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability-deprecated.rs:295:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:298:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:300:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:304:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:307:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:310:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:314:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:317:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:319:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-deprecated.rs:435:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:443:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-deprecated.rs:451:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/opaque-ty-ffi-unsafe.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/lint-unknown-feature-default.rs:3:// Tests the default for the unused_features lint
tests/ui/lint/lint-unknown-feature-default.rs:5:#![allow(stable_features)]
tests/ui/lint/lint-unknown-feature-default.rs:7:#![feature(rust1)]
tests/ui/lint/lint-output-format-2.rs:3:#![feature(unstable_test_feature)]
tests/ui/lint/lint-ctypes-enum.rs:1:#![feature(transparent_unions)]
tests/ui/lint/lint-ctypes-enum.rs:2:#![feature(ptr_internals)]
tests/ui/lint/reasons-forbidden.rs:1:#![feature(lint_reasons)]
tests/ui/lint/expansion-time.stderr:29:warning: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable
tests/ui/lint/function-item-references.rs:2:#![feature(c_variadic)]
tests/ui/lint/suspicious-double-ref-op.rs:1:#![feature(lazy_cell)]
tests/ui/lint/lint-ctypes-73251.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/lint/lint-unknown-feature.rs:3:#![warn(unused_features)]
tests/ui/lint/lint-unknown-feature.rs:5:#![allow(stable_features)]
tests/ui/lint/lint-unknown-feature.rs:7:#![feature(rust1)]
tests/ui/lint/known-tool-in-submodule/root.rs:3:#![feature(register_tool)]
tests/ui/lint/rfc-2383-lint-reason/root-attribute-confusion.rs:5:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_with_forbid.rs:1:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_inside_macro.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.stdout:1:#![feature(prelude_import)]
tests/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.stdout:7:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_fulfilled.rs:6:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/lint-attribute-only-with-reason.rs:1:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_with_reason.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_on_fn_params.rs:2:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/multiple_expect_attrs.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_multiple_lints.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_lint_from_macro.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/catch_multiple_lint_triggers.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/crate_level_expect.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.rs:4:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.rs:1:// should error due to missing feature gate.
tests/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.rs:6://~^ ERROR: the `#[expect]` attribute is an experimental feature [E0658]
tests/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_unfulfilled.rs:6:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.stderr:1:error[E0658]: the `#[expect]` attribute is an experimental feature
tests/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.stderr:2:  --> $DIR/expect_missing_feature_gate.rs:5:1
tests/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.stderr:8:   = help: add `#![feature(lint_reasons)]` to the crate attributes to enable
tests/ui/lint/rfc-2383-lint-reason/avoid_delayed_good_path_ice.rs:2:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_tool_lint_rfc_2383.rs:2:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/fulfilled_expectation_late_lints.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/fulfilled_expectation_early_lints.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.rs:3:#![feature(lint_reasons)]
tests/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.rs:5:#![feature(lint_reasons)]
tests/ui/lint/lint-ctypes-73249-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/expansion-time.rs:14:    #[bench] //~ WARN use of unstable library feature 'test'
tests/ui/lint/enable-unstable-lib-feature.rs:1:// Test that enabling an unstable feature disables warnings
tests/ui/lint/enable-unstable-lib-feature.rs:5:#![feature(unstable_test_feature)]
tests/ui/lint/enable-unstable-lib-feature.rs:8:// Shouldn't generate a warning about unstable features
tests/ui/lint/lint-stability-2.rs:6:#![feature(staged_api)]
tests/ui/lint/lint-stability-2.rs:8:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:41:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:43:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:45:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:47:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:49:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:52:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:54:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:56:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:58:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:60:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:62:        foo.method_unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:63:        Foo::method_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:64:        <Foo>::method_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:65:        foo.trait_unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:66:        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:69:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:71:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:73:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:75:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:77:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:132:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:134:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:136:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:138:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:139:        foo.trait_unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:140:        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:142:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:144:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:155:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:157:        //~^ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:158:        foo.trait_unstable(); //~ ERROR use of unstable library feature
tests/ui/lint/lint-stability-2.rs:160:        //~^ ERROR use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.rs:171:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:174:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:178:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:180:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability-2.rs:183:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:185:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:188:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:192:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:195:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:199:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:201:        #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability-2.rs:204:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:206:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:211:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:214:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:218:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:220:        #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/lint-stability-2.rs:223:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:225:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:231:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:234:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability-2.rs:236:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:238:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability-2.rs:240:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:242:        #[stable(feature = "stable_test_feature", since = "1.0.0")] i: isize
tests/ui/lint/lint-stability-2.rs:245:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:248:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:250:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:254:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:257:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:260:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:264:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:267:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:269:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-2.rs:384:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:392:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-2.rs:400:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-ctypes-73249-3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/lint-ctypes.rs:1:#![feature(rustc_private)]
tests/ui/lint/lint-stability-2.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:9:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:15:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:17:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:23:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:25:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:31:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:33:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:39:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:41:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:47:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:49:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:55:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:57:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:63:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:65:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:71:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:73:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:79:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:81:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:87:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:89:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:95:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:97:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:103:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:105:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:111:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:113:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:119:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:121:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:127:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:129:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:135:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:137:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:143:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:145:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:151:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:153:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:159:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:161:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:167:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:169:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:175:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:177:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:183:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:185:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:191:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:193:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:199:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:201:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:207:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:209:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:215:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:217:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:223:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:225:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:231:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:233:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:239:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:241:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/lint/lint-stability-2.stderr:247:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-stability-2.stderr:249:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/lint/lint-stability-2.stderr:255:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/lint/lint-ctypes-73251-1.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lint/register-tool-lint.rs:2:#![feature(register_tool)]
tests/ui/lint/lint-stability-fields-deprecated.rs:5:#![feature(staged_api, unstable_test_feature)]
tests/ui/lint/lint-stability-fields-deprecated.rs:7:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields-deprecated.rs:158:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields-deprecated.rs:161:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:164:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:168:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields-deprecated.rs:170:                   #[stable(feature = "rust1", since = "1.0.0")] u8,
tests/ui/lint/lint-stability-fields-deprecated.rs:171:                   #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:174:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:177:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields-deprecated.rs:180:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:184:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:186:                     #[stable(feature = "rust1", since = "1.0.0")] u8,
tests/ui/lint/lint-stability-fields-deprecated.rs:187:                     #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:190:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:194:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields-deprecated.rs:196:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:200:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields-deprecated.rs:203:                       #[stable(feature = "rust1", since = "1.0.0")] u8,
tests/ui/lint/lint-stability-fields-deprecated.rs:204:                       #[unstable(feature = "unstable_test_feature", issue = "none")] u8);
tests/ui/lint/invalid_from_utf8.rs:3:#![feature(concat_bytes)]
tests/ui/lint/unused_braces_macro.rs:5:    foo::<{cfg!(feature = "foo")}>();
tests/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.rs:3:#![feature(stmt_expr_attributes)]
tests/ui/lint/auxiliary/lint_output_format.rs:3:#![feature(staged_api)]
tests/ui/lint/auxiliary/lint_output_format.rs:4:#![unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_output_format.rs:6:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_output_format.rs:12:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_output_format.rs:17:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:1:#![feature(staged_api)]
tests/ui/lint/auxiliary/lint_stability_fields.rs:2:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:4:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:7:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:10:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:12:    #[stable(feature = "rust2", since = "2.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:17:pub struct Stable2(#[stable(feature = "rust2", since = "2.0.0")] pub u8,
tests/ui/lint/auxiliary/lint_stability_fields.rs:18:                   #[unstable(feature = "unstable_test_feature", issue = "none")] pub u8,
tests/ui/lint/auxiliary/lint_stability_fields.rs:19:                   #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:23:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:26:    InheritOverride(#[stable(feature = "rust2", since = "2.0.0")] u8),
tests/ui/lint/auxiliary/lint_stability_fields.rs:27:    #[stable(feature = "rust2", since = "2.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:29:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:32:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:36:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:39:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:42:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:46:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:48:                     #[stable(feature = "rust1", since = "1.0.0")] pub u8,
tests/ui/lint/auxiliary/lint_stability_fields.rs:49:                     #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:52:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:56:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:58:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:62:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability_fields.rs:65:                       #[stable(feature = "rust1", since = "1.0.0")] pub u8,
tests/ui/lint/auxiliary/lint_stability_fields.rs:66:                       #[unstable(feature = "unstable_test_feature", issue = "none")] pub u8);
tests/ui/lint/auxiliary/stability_cfg1.rs:2:#![cfg_attr(not(foo), stable(feature = "test_feature", since = "1.0.0"))]
tests/ui/lint/auxiliary/stability_cfg1.rs:3:#![feature(staged_api)]
tests/ui/lint/auxiliary/inherited_stability.rs:3:#![unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/inherited_stability.rs:4:#![feature(staged_api)]
tests/ui/lint/auxiliary/inherited_stability.rs:8:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/inherited_stability.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/inherited_stability.rs:13:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/inherited_stability.rs:16:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/inherited_stability.rs:20:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/inherited_stability.rs:22:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/inherited_stability.rs:29:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/inherited_stability.rs:31:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/inherited_stability.rs:34:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/inherited_stability.rs:45:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/stability_cfg2.rs:3:#![cfg_attr(foo, unstable(feature = "unstable_test_feature", issue = "none"))]
tests/ui/lint/auxiliary/stability_cfg2.rs:4:#![cfg_attr(not(foo), stable(feature = "test_feature", since = "1.0.0"))]
tests/ui/lint/auxiliary/stability_cfg2.rs:5:#![feature(staged_api)]
tests/ui/lint/auxiliary/lint_stability.rs:3:#![feature(staged_api)]
tests/ui/lint/auxiliary/lint_stability.rs:4:#![feature(associated_type_defaults)]
tests/ui/lint/auxiliary/lint_stability.rs:5:#![stable(feature = "lint_stability", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:7:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:10:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:14:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:18:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:21:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:25:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:27:#[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:30:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:32:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:35:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:39:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:42:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:46:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:49:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:53:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:55:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:58:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:60:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:64:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:66:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:69:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:73:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:76:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:80:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:82:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:85:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:87:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:91:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:93:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:95:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:100:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:103:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:106:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:109:    #[stable(feature = "stable_test_feature", since = "1.0.0")] fn dummy(&self) { }
tests/ui/lint/auxiliary/lint_stability.rs:112:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:115:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/lint/auxiliary/lint_stability.rs:117:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:120:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/lint/auxiliary/lint_stability.rs:122:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:124:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/lint/auxiliary/lint_stability.rs:126:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:128:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/lint/auxiliary/lint_stability.rs:130:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:132:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:135:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:138:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:141:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:143:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:146:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:148:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:151:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:154:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:157:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:161:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:163:pub struct DeprecatedTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/lint/auxiliary/lint_stability.rs:164:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:166:pub struct DeprecatedUnstableTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/lint/auxiliary/lint_stability.rs:167:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/auxiliary/lint_stability.rs:168:pub struct UnstableTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/lint/auxiliary/lint_stability.rs:169:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:170:pub struct StableTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/lint/auxiliary/lint_stability.rs:172:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:178:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/lint_stability.rs:184:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/lint/auxiliary/stability-cfg2.rs:3:#![cfg_attr(foo, unstable(feature = "unstable_test_feature", issue = "none"))]
tests/ui/lint/auxiliary/stability-cfg2.rs:4:#![cfg_attr(not(foo), stable(feature = "test_feature", since = "1.0.0"))]
tests/ui/lint/auxiliary/stability-cfg2.rs:5:#![feature(staged_api)]
tests/ui/lint/lint-stability-fields.rs:4:#![feature(staged_api)]
tests/ui/lint/lint-stability-fields.rs:6:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields.rs:12:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields.rs:133:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields.rs:136:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:139:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:141:        #[stable(feature = "rust2", since = "2.0.0")]
tests/ui/lint/lint-stability-fields.rs:145:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields.rs:147:                   #[stable(feature = "rust2", since = "2.0.0")] u8,
tests/ui/lint/lint-stability-fields.rs:148:                   #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:151:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:154:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields.rs:157:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:161:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:163:                     #[stable(feature = "rust1", since = "1.0.0")] u8,
tests/ui/lint/lint-stability-fields.rs:164:                     #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:167:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:171:        #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/lint/lint-stability-fields.rs:173:        #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:177:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/lint/lint-stability-fields.rs:180:                       #[stable(feature = "rust1", since = "1.0.0")] u8,
tests/ui/lint/lint-stability-fields.rs:181:                       #[unstable(feature = "unstable_test_feature", issue = "none")] u8);
tests/ui/cannot-mutate-captured-non-mut-var.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/const-ptr/forbidden_slices.rs:6:#![feature(
tests/ui/const-ptr/allowed_slices.rs:2:#![feature(
tests/ui/raw-ref-op/unusual_locations.rs:3:#![feature(raw_ref_op)]
tests/ui/raw-ref-op/raw-ref-op.rs:3:#![feature(raw_ref_op)]
tests/ui/raw-ref-op/raw-ref-temp.rs:2:#![feature(raw_ref_op, type_ascription)]
tests/ui/raw-ref-op/raw-ref-temp-deref.rs:4:#![feature(raw_ref_op, type_ascription)]
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:2:  --> $DIR/feature-raw-ref-op.rs:13:5
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:8:   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:11:  --> $DIR/feature-raw-ref-op.rs:14:5
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:17:   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:20:  --> $DIR/feature-raw-ref-op.rs:19:13
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:26:   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:29:  --> $DIR/feature-raw-ref-op.rs:20:13
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:35:   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:38:  --> $DIR/feature-raw-ref-op.rs:7:10
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:44:   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:47:  --> $DIR/feature-raw-ref-op.rs:8:10
tests/ui/raw-ref-op/feature-raw-ref-op.stderr:53:   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable
tests/ui/intrinsics-always-extern.rs:1:#![feature(intrinsics)]
tests/ui/pin-macro/cant_access_internals.rs:11:    mem::take(phantom_pinned.pointer); //~ ERROR use of unstable library feature 'unsafe_pin_internals'
tests/ui/pin-macro/cant_access_internals.stderr:1:error[E0658]: use of unstable library feature 'unsafe_pin_internals'
tests/ui/pin-macro/cant_access_internals.stderr:7:   = help: add `#![feature(unsafe_pin_internals)]` to the crate attributes to enable
tests/ui/reachable/unreachable-arm.rs:1:#![feature(box_patterns)]
tests/ui/reachable/expr_add.rs:1:#![feature(never_type)]
tests/ui/reachable/reachable-unnameable-type-alias.rs:3:#![feature(staged_api)]
tests/ui/reachable/reachable-unnameable-type-alias.rs:4:#![stable(feature = "a", since = "b")]
tests/ui/reachable/reachable-unnameable-type-alias.rs:11:#[stable(feature = "a", since = "b")]
tests/ui/reachable/expr_call.rs:1:#![feature(never_type)]
tests/ui/reachable/unreachable-loop-patterns.rs:1:#![feature(never_type, never_type_fallback)]
tests/ui/reachable/unreachable-loop-patterns.rs:2:#![feature(exhaustive_patterns)]
tests/ui/reachable/unwarned-match-on-never.rs:4:#![feature(never_type)]
tests/ui/reachable/expr_unary.rs:1:#![feature(never_type)]
tests/ui/reachable/expr_tup.rs:5:#![feature(type_ascription)]
tests/ui/reachable/expr_array.rs:5:#![feature(type_ascription)]
tests/ui/reachable/expr_type.rs:5:#![feature(never_type, type_ascription)]
tests/ui/reachable/expr_return.rs:5:#![feature(type_ascription)]
tests/ui/reachable/expr_struct.rs:5:#![feature(type_ascription)]
tests/ui/reachable/unreachable-try-pattern.rs:2:#![feature(never_type, exhaustive_patterns)]
tests/ui/reachable/expr_repeat.rs:5:#![feature(type_ascription)]
tests/ui/reachable/expr_assign.rs:1:#![feature(never_type)]
tests/ui/reachable/expr_method.rs:1:#![feature(never_type)]
tests/ui/reachable/expr_cast.rs:5:#![feature(never_type, type_ascription)]
tests/ui/asm/named-asm-labels.rs:14:#![feature(naked_functions, asm_const)]
tests/ui/asm/issue-92378.rs:6:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/asm/type-check-1.rs:6:#![feature(asm_const)]
tests/ui/asm/naked-functions-unused.rs:6:#![feature(naked_functions)]
tests/ui/asm/parse-error.rs:3:#![feature(asm_const)]
tests/ui/asm/naked-functions.rs:6:#![feature(naked_functions)]
tests/ui/asm/naked-functions.rs:7:#![feature(asm_const, asm_unwind)]
tests/ui/asm/bad-arch.rs:6:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/asm/naked-invalid-attr.rs:4:#![feature(naked_functions)]
tests/ui/asm/reg-conflict.rs:4:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/asm/unpretty-expanded.stdout:1:#![feature(prelude_import)]
tests/ui/asm/naked-functions-ffi.rs:3:#![feature(naked_functions)]
tests/ui/asm/inline-syntax.rs:13:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/asm/issue-85247.rs:9:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/asm/noreturn.rs:4:#![feature(never_type)]
tests/ui/asm/generic-const.rs:4:#![feature(asm_const)]
tests/ui/asm/may_unwind.rs:4:#![feature(asm_unwind)]
tests/ui/asm/bad-template.rs:13:#![feature(no_core, lang_items, rustc_attrs, asm_const)]
tests/ui/asm/issue-99071.rs:5:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/asm/aarch64/parse-error.rs:3:#![feature(asm_const)]
tests/ui/asm/aarch64/type-check-4.rs:2:// compile-flags: -C target-feature=+neon
tests/ui/asm/aarch64/type-check-4.rs:4:#![feature(repr_simd, stdsimd, asm_const)]
tests/ui/asm/aarch64/sym.rs:6:#![feature(thread_local)]
tests/ui/asm/aarch64/bad-reg.rs:2:// compile-flags: -C target-feature=+neon
tests/ui/asm/aarch64/bad-reg.rs:4:#![feature(asm_const)]
tests/ui/asm/aarch64/type-check-2-2.rs:3:#![feature(repr_simd, never_type)]
tests/ui/asm/aarch64/const.rs:7:#![feature(asm_const)]
tests/ui/asm/aarch64/may_unwind.rs:6:#![feature(asm_unwind)]
tests/ui/asm/aarch64/type-check-3.rs:2:// compile-flags: -C target-feature=+neon
tests/ui/asm/aarch64/type-check-3.rs:4:#![feature(repr_simd, stdsimd, asm_const)]
tests/ui/asm/aarch64/type-check-2.rs:3:#![feature(repr_simd, never_type)]
tests/ui/asm/x86_64/target-feature-attr.stderr:1:error: register class `ymm_reg` requires the `avx` target feature
tests/ui/asm/x86_64/target-feature-attr.stderr:2:  --> $DIR/target-feature-attr.rs:18:40
tests/ui/asm/x86_64/target-feature-attr.stderr:7:error: register class `ymm_reg` requires the `avx` target feature
tests/ui/asm/x86_64/target-feature-attr.stderr:8:  --> $DIR/target-feature-attr.rs:18:55
tests/ui/asm/x86_64/target-feature-attr.stderr:13:error: register class `ymm_reg` requires the `avx` target feature
tests/ui/asm/x86_64/target-feature-attr.stderr:14:  --> $DIR/target-feature-attr.rs:18:70
tests/ui/asm/x86_64/target-feature-attr.stderr:19:error: register class `kreg` requires at least one of the following target features: avx512bw, avx512f
tests/ui/asm/x86_64/target-feature-attr.stderr:20:  --> $DIR/target-feature-attr.rs:33:23
tests/ui/asm/x86_64/type-check-5.rs:3:#![feature(repr_simd, never_type)]
tests/ui/asm/x86_64/type-check-3.stderr:33:error: `avx512bw` target feature is not enabled
tests/ui/asm/x86_64/type-check-4.rs:2:// compile-flags: -C target-feature=+avx512f
tests/ui/asm/x86_64/type-check-4.rs:4:#![feature(asm_const)]
tests/ui/asm/x86_64/sym.rs:6:#![feature(thread_local)]
tests/ui/asm/x86_64/x86_64_parse_error.rs:3:#![feature(asm_const)]
tests/ui/asm/x86_64/bad-reg.rs:2:// compile-flags: -C target-feature=+avx2
tests/ui/asm/x86_64/bad-reg.rs:4:#![feature(asm_const)]
tests/ui/asm/x86_64/target-feature-attr.rs:3:#![feature(avx512_target_feature)]
tests/ui/asm/x86_64/target-feature-attr.rs:7:#[target_feature(enable = "avx")]
tests/ui/asm/x86_64/target-feature-attr.rs:19:    //~^ ERROR: register class `ymm_reg` requires the `avx` target feature
tests/ui/asm/x86_64/target-feature-attr.rs:20:    //~| ERROR: register class `ymm_reg` requires the `avx` target feature
tests/ui/asm/x86_64/target-feature-attr.rs:21:    //~| ERROR: register class `ymm_reg` requires the `avx` target feature
tests/ui/asm/x86_64/target-feature-attr.rs:25:#[target_feature(enable = "avx512bw")]
tests/ui/asm/x86_64/target-feature-attr.rs:34:    //~^ ERROR: register class `kreg` requires at least one of the following target features: avx512bw, avx512f
tests/ui/asm/x86_64/const.rs:7:#![feature(asm_const)]
tests/ui/asm/x86_64/may_unwind.rs:6:#![feature(asm_unwind)]
tests/ui/asm/x86_64/type-check-3.rs:2:// compile-flags: -C target-feature=+avx512f
tests/ui/asm/x86_64/type-check-3.rs:4:#![feature(asm_const)]
tests/ui/asm/x86_64/type-check-3.rs:30:        //~^ ERROR `avx512bw` target feature is not enabled
tests/ui/asm/x86_64/issue-89875.rs:5:#![feature(target_feature_11)]
tests/ui/asm/x86_64/issue-89875.rs:9:#[target_feature(enable = "avx")]
tests/ui/asm/x86_64/type-check-2.rs:3:#![feature(repr_simd, never_type)]
tests/ui/methods/method-normalize-bounds-issue-20604.rs:4:#![allow(stable_features)]
tests/ui/methods/method-normalize-bounds-issue-20604.rs:14:#![feature(associated_types)]
tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:1:#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize)]
tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:2:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:3://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr:4:LL | #![feature(unsized_locals, unsized_fn_params)]
tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/methods/issues/issue-105732.rs:1:#![feature(auto_traits)]
tests/ui/box/into-boxed-slice-fail.rs:1:#![feature(box_into_boxed_slice)]
tests/ui/box/alloc-unstable-fail.rs:5:    //~^ ERROR use of unstable library feature 'allocator_api'
tests/ui/box/unit/unique-destructure.rs:2:#![feature(box_patterns)]
tests/ui/box/unit/unique-pat.rs:3:#![feature(box_patterns)]
tests/ui/box/unit/unique-pat-2.rs:6:#![feature(box_patterns)]
tests/ui/box/alloc-unstable.rs:2:#![feature(allocator_api)]
tests/ui/box/leak-alloc.rs:1:#![feature(allocator_api)]
tests/ui/box/into-boxed-slice.rs:2:#![feature(box_into_boxed_slice)]
tests/ui/box/thin_new.rs:1:#![feature(thin_box)]
tests/ui/box/thin_align.rs:1:#![feature(thin_box)]
tests/ui/box/thin_zst.rs:1:#![feature(thin_box)]
tests/ui/box/alloc-unstable-fail.stderr:1:error[E0658]: use of unstable library feature 'allocator_api'
tests/ui/box/alloc-unstable-fail.stderr:8:   = help: add `#![feature(allocator_api)]` to the crate attributes to enable
tests/ui/box/large-allocator-ice.rs:2:#![feature(allocator_api)]
tests/ui/box/thin_drop.rs:1:#![feature(thin_box)]
tests/ui/box/issue-95036.rs:4:#![feature(allocator_api)]
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-registers.rs:4:#![feature(cmse_nonsecure_entry, no_core, lang_items)]
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/issue-83475.rs:5:#![feature(cmse_nonsecure_entry)]
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/trustzone-only.rs:2:#![feature(cmse_nonsecure_entry)]
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/wrong-abi.rs:3:#![feature(cmse_nonsecure_entry, no_core, lang_items)]
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/gate_test.stderr:1:error[E0658]: the `#[cmse_nonsecure_entry]` attribute is an experimental feature
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/gate_test.stderr:8:   = help: add `#![feature(cmse_nonsecure_entry)]` to the crate attributes to enable
tests/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.rs:4:#![feature(cmse_nonsecure_entry, no_core, lang_items)]
tests/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-registers.rs:4:#![feature(abi_c_cmse_nonsecure_call, no_core, lang_items, intrinsics)]
tests/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-1.rs:3:#![feature(abi_c_cmse_nonsecure_call, lang_items, no_core)]
tests/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-2.rs:3:#![feature(abi_c_cmse_nonsecure_call, lang_items, no_core)]
tests/ui/cmse-nonsecure/cmse-nonsecure-call/gate_test.stderr:8:   = help: add `#![feature(abi_c_cmse_nonsecure_call)]` to the crate attributes to enable
tests/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.rs:4:#![feature(abi_c_cmse_nonsecure_call, no_core, lang_items, intrinsics)]
tests/ui/variance/variance-types-bounds.rs:4:#![feature(rustc_attrs)]
tests/ui/variance/variance-regions-direct.rs:4:#![feature(rustc_attrs)]
tests/ui/variance/variance-trait-bounds.rs:2:#![feature(rustc_attrs)]
tests/ui/variance/variance-object-types.rs:1:#![feature(rustc_attrs)]
tests/ui/variance/variance-regions-indirect.rs:5:#![feature(rustc_attrs)]
tests/ui/variance/variance-trait-object-bound.rs:7:#![feature(rustc_attrs)]
tests/ui/variance/variance-types.rs:2:#![feature(rustc_attrs)]
tests/ui/variance/variance-associated-types.rs:4:#![feature(rustc_attrs)]
tests/ui/variance/variance-associated-consts.rs:4:#![feature(rustc_attrs)]
tests/ui/variance/variance-associated-consts.rs:5:#![allow(incomplete_features)]
tests/ui/variance/variance-associated-consts.rs:6:#![feature(generic_const_exprs)]
tests/ui/crate-loading/missing-std.rs:4:#![feature(no_core)]
tests/ui/statics/uninhabited-static.rs:1:#![feature(never_type)]
tests/ui/statics/issue-17718-static-sync.rs:1:#![feature(negative_impls)]
tests/ui/dyn-star/no-unsize-coerce-dyn-trait.rs:1:#![feature(dyn_star, trait_upcasting)]
tests/ui/dyn-star/no-unsize-coerce-dyn-trait.rs:2://~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/align.over_aligned.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/align.over_aligned.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/align.over_aligned.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/upcast.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/upcast.stderr:4:LL | #![feature(dyn_star, trait_upcasting)]
tests/ui/dyn-star/upcast.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/dyn-star-to-dyn.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/dyn-star-to-dyn.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/dyn-star-to-dyn.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/feature-gate-dyn_star.stderr:2:  --> $DIR/feature-gate-dyn_star.rs:5:31
tests/ui/dyn-star/feature-gate-dyn_star.stderr:8:   = help: add `#![feature(dyn_star)]` to the crate attributes to enable
tests/ui/dyn-star/dyn-star-to-dyn.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/dyn-star-to-dyn.rs:4://~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/dont-unsize-coerce-dyn-star.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/dont-unsize-coerce-dyn-star.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/dont-unsize-coerce-dyn-star.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/feature-gate-dyn_star.rs:1:// Feature gate test for dyn_star
tests/ui/dyn-star/align.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/align.rs:4://~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/error.rs:1:#![feature(dyn_star)]
tests/ui/dyn-star/error.rs:2:#![allow(incomplete_features)]
tests/ui/dyn-star/unsize-into-ref-dyn-star.rs:1:#![feature(dyn_star)]
tests/ui/dyn-star/unsize-into-ref-dyn-star.rs:2:#![allow(incomplete_features)]
tests/ui/dyn-star/box.rs:6:#![feature(dyn_star)]
tests/ui/dyn-star/box.rs:7:#![allow(incomplete_features)]
tests/ui/dyn-star/dyn-to-rigid.rs:1:#![feature(dyn_star)]
tests/ui/dyn-star/dyn-to-rigid.rs:2:#![allow(incomplete_features)]
tests/ui/dyn-star/no-explicit-dyn-star-cast.stderr:8:   = help: add `#![feature(dyn_star)]` to the crate attributes to enable
tests/ui/dyn-star/no-explicit-dyn-star-cast.stderr:17:   = help: add `#![feature(dyn_star)]` to the crate attributes to enable
tests/ui/dyn-star/const-and-static.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/const-and-static.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/const-and-static.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/param-env-region-infer.rs:10:#![feature(dyn_star, pointer_like_trait)]
tests/ui/dyn-star/param-env-region-infer.rs:11:#![allow(incomplete_features)]
tests/ui/dyn-star/llvm-old-style-ptrs.rs:11:#![feature(dyn_star, pointer_like_trait)]
tests/ui/dyn-star/llvm-old-style-ptrs.rs:12:#![allow(incomplete_features)]
tests/ui/dyn-star/const-and-static.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/const-and-static.rs:4://~^ WARN the feature `dyn_star` is incomplete
tests/ui/dyn-star/return.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/return.rs:4://~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs:4:#![feature(dyn_star)]
tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs:5:#![allow(incomplete_features)]
tests/ui/dyn-star/check-size-at-cast.rs:1:#![feature(dyn_star)]
tests/ui/dyn-star/check-size-at-cast.rs:2:#![allow(incomplete_features)]
tests/ui/dyn-star/align.normal.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/align.normal.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/align.normal.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/drop.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/drop.rs:4:#![allow(incomplete_features)]
tests/ui/dyn-star/upcast.rs:3:#![feature(dyn_star, trait_upcasting)]
tests/ui/dyn-star/return.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/return.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/return.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/const.rs:2:#![feature(dyn_star)]
tests/ui/dyn-star/const.rs:3:#![allow(unused, incomplete_features)]
tests/ui/dyn-star/issue-102430.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/issue-102430.rs:4:#![allow(incomplete_features)]
tests/ui/dyn-star/dispatch-on-pin-mut.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/dispatch-on-pin-mut.stderr:4:LL | #![feature(dyn_star)]
tests/ui/dyn-star/dispatch-on-pin-mut.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/check-size-at-cast-polymorphic.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/check-size-at-cast-polymorphic.rs:4:#![allow(incomplete_features)]
tests/ui/dyn-star/dyn-async-trait.rs:7:#![feature(dyn_star)]
tests/ui/dyn-star/dyn-async-trait.rs:8:#![allow(incomplete_features)]
tests/ui/dyn-star/gated-span.stderr:8:   = help: add `#![feature(dyn_star)]` to the crate attributes to enable
tests/ui/dyn-star/make-dyn-star.rs:2:#![feature(dyn_star)]
tests/ui/dyn-star/make-dyn-star.rs:3:#![allow(incomplete_features)]
tests/ui/dyn-star/dispatch-on-pin-mut.rs:5:#![feature(dyn_star)]
tests/ui/dyn-star/dispatch-on-pin-mut.rs:6://~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/syntax.rs:5:#![feature(dyn_star)]
tests/ui/dyn-star/syntax.rs:6:#![allow(incomplete_features)]
tests/ui/dyn-star/method.rs:3:#![feature(dyn_star)]
tests/ui/dyn-star/method.rs:4:#![allow(incomplete_features)]
tests/ui/dyn-star/param-env-region-infer.next.stderr:18:LL | / #![feature(dyn_star, pointer_like_trait)]
tests/ui/dyn-star/param-env-region-infer.next.stderr:19:LL | | #![allow(incomplete_features)]
tests/ui/dyn-star/no-unsize-coerce-dyn-trait.stderr:1:warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/dyn-star/no-unsize-coerce-dyn-trait.stderr:4:LL | #![feature(dyn_star, trait_upcasting)]
tests/ui/dyn-star/no-unsize-coerce-dyn-trait.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/dyn-star/auxiliary/dyn-star-foreign.rs:1:#![feature(dyn_star)]
tests/ui/dyn-star/auxiliary/dyn-star-foreign.rs:2:#![allow(incomplete_features)]
tests/ui/dyn-star/dont-unsize-coerce-dyn-star.rs:4:#![feature(dyn_star)]
tests/ui/dyn-star/dont-unsize-coerce-dyn-star.rs:5://~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:1:error[E0557]: feature has been removed
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:2:  --> $DIR/renamed-features-rustdoc_internals.rs:1:12
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:4:LL | #![feature(doc_keyword)]
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:5:   |            ^^^^^^^^^^^ feature has been removed
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:7:   = note: merged into `#![feature(rustdoc_internals)]`
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:9:error[E0557]: feature has been removed
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:10:  --> $DIR/renamed-features-rustdoc_internals.rs:2:12
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:12:LL | #![feature(doc_primitive)]
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:13:   |            ^^^^^^^^^^^^^ feature has been removed
tests/ui/rustdoc/renamed-features-rustdoc_internals.stderr:15:   = note: merged into `#![feature(rustdoc_internals)]`
tests/ui/rustdoc/doc_keyword.rs:2:#![feature(rustdoc_internals)]
tests/ui/rustdoc/feature-gate-doc_primitive.stderr:2:  --> $DIR/feature-gate-doc_primitive.rs:1:1
tests/ui/rustdoc/feature-gate-doc_primitive.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/rustdoc/renamed-features-rustdoc_internals.rs:1:#![feature(doc_keyword)] //~ ERROR
tests/ui/rustdoc/renamed-features-rustdoc_internals.rs:2:#![feature(doc_primitive)] //~ ERROR
tests/ui/write-fmt-errors.rs:3:#![feature(io_error_uncategorized)]
tests/ui/simple_global_asm.rs:4:#![feature(naked_functions)]
tests/ui/privacy/privacy1.rs:1:#![feature(lang_items, start, no_core)]
tests/ui/privacy/private-in-public-type-alias-impl-trait.rs:2:#![feature(impl_trait_in_assoc_type)]
tests/ui/privacy/private-in-public-type-alias-impl-trait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/privacy/private-in-public-warn.rs:4:#![feature(associated_type_defaults)]
tests/ui/privacy/macro-private-reexport.rs:3:#![feature(decl_macro)]
tests/ui/privacy/privacy4.rs:1:#![feature(lang_items, start, no_core)]
tests/ui/privacy/private-in-public-assoc-ty.rs:4:#![feature(associated_type_defaults)]
tests/ui/privacy/private-in-public-assoc-ty.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/privacy/private-in-public-non-principal.rs:1:#![feature(auto_traits)]
tests/ui/privacy/private-in-public-non-principal.rs:2:#![feature(negative_impls)]
tests/ui/privacy/private-in-public-non-principal.rs:3:#![feature(type_privacy_lints)]
tests/ui/privacy/effective_visibilities.stderr:5:LL | | #![feature(rustc_attrs)]
tests/ui/privacy/effective_visibilities_invariants.rs:3:#![feature(staged_api)] //~ ERROR module has missing stability attribute
tests/ui/privacy/where-pub-type-impls-priv-trait.rs:4:#![feature(generic_const_exprs)]
tests/ui/privacy/where-pub-type-impls-priv-trait.rs:5:#![feature(type_privacy_lints)]
tests/ui/privacy/where-pub-type-impls-priv-trait.rs:6:#![allow(incomplete_features)]
tests/ui/privacy/private-inferred-type.rs:1:#![feature(decl_macro)]
tests/ui/privacy/associated-item-privacy-type-binding.rs:1:#![feature(decl_macro, associated_type_defaults)]
tests/ui/privacy/unnameable_types.rs:1:#![feature(type_privacy_lints)]
tests/ui/privacy/decl-macro.rs:1:#![feature(decl_macro)]
tests/ui/privacy/privacy-sanity.rs:1:#![feature(negative_impls)]
tests/ui/privacy/associated-item-privacy-inherent.rs:1:#![feature(decl_macro, associated_type_defaults)]
tests/ui/privacy/where-priv-type.rs:5:#![feature(generic_const_exprs)]
tests/ui/privacy/where-priv-type.rs:6:#![feature(type_privacy_lints)]
tests/ui/privacy/where-priv-type.rs:7:#![allow(incomplete_features)]
tests/ui/privacy/private-in-public.rs:4:#![feature(associated_type_defaults)]
tests/ui/privacy/effective_visibilities_invariants.stderr:15:LL | / #![feature(staged_api)]
tests/ui/privacy/private-in-public-non-principal-2.rs:1:#![feature(auto_traits)]
tests/ui/privacy/private-in-public-non-principal-2.rs:2:#![feature(negative_impls)]
tests/ui/privacy/privacy3.rs:3:#![feature(start, no_core)]
tests/ui/privacy/effective_visibilities_full_priv.rs:1:#![feature(rustc_attrs)]
tests/ui/privacy/effective_visibilities.rs:2:#![feature(rustc_attrs)]
tests/ui/privacy/privacy2.rs:3:#![feature(start, no_core)]
tests/ui/privacy/private-inferred-type-3.rs:11:#![feature(decl_macro)]
tests/ui/privacy/effective_visibilities_glob.rs:4:#![feature(rustc_attrs)]
tests/ui/privacy/associated-item-privacy-trait.rs:1:#![feature(decl_macro, associated_type_defaults)]
tests/ui/privacy/auxiliary/private-inferred-type.rs:1:#![feature(decl_macro)]
tests/ui/or-patterns/or-patterns-syntactic-pass.stderr:8:   = help: add `#![feature(box_patterns)]` to the crate attributes to enable
tests/ui/or-patterns/box-patterns.rs:5:#![feature(box_patterns)]
tests/ui/format-no-std.rs:4:#![feature(lang_items, start)]
tests/ui/type-alias-impl-trait/impl_trait_for_generic_tait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/cross_inference_pattern_bug.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-89686.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_defining_uses_never_type-3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/associated-type-alias-impl-trait.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/implied_bounds_from_types.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl_trait_for_same_tait.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-53092.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/auto-trait-leakage.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_lifetimes_defining_uses.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-78450.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-89952.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/higher_kinded_params2.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/wf-check-fn-ptrs.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/self-referential-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/recursive-tait-conflicting-defn-2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/not_well_formed.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-53096.rs:1:#![feature(rustc_attrs)]
tests/ui/type-alias-impl-trait/issue-53096.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait2.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-52843.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-assoc-dyn.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-84660-trait-impl-for-tait.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/higher_kinded_params3.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/hidden_behind_struct_field.rs:6:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs:3:#![feature(unboxed_closures)]
tests/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs:5:#![feature(fn_traits)]
tests/ui/type-alias-impl-trait/issue-74761.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/self-referential-3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/wf-check-fn-def.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/never_reveal_concrete_type.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-58951.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-96572-unconstrained.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs:3:#![feature(type_alias_impl_trait, rustc_attrs)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use7.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-58887.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-96572-unconstrained-mismatch.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/closure_args.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/missing_lifetime_bound.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/multi-error.rs:6:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/argument-types.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/self-referential.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl-trait-in-type-alias-with-bad-substs.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/bounds-are-checked.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_defining_uses_never_type-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/higher_kinded_params.rs:8:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-72793.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-101750.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/constrain_inputs_unsound.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/coherence.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/implied_lifetime_wf_check3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/bound_reduction2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/bounds-are-checked3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_nondefining_use.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/defining-use-submodule.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-53092-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-94429.rs:1:#![feature(impl_trait_in_assoc_type, generator_trait, generators)]
tests/ui/type-alias-impl-trait/issue-57700.rs:1:#![feature(arbitrary_self_types)]
tests/ui/type-alias-impl-trait/issue-57700.rs:2:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/implied_lifetime_wf_check4_static.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/hidden_behind_struct_field2.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.rs:7:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/imply_bounds_from_bounds.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/debug-ty-with-weak.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-nested-impl-trait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/reveal_local.stderr:17:LL | / #![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/reveal_local.stderr:41:LL | / #![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/reveal_local.stderr:87:LL | / #![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.rs:8:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-63355.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-90400-2.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/impl_for_weak_alias.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl_for_weak_alias.rs:2:#![feature(auto_traits)]
tests/ui/type-alias-impl-trait/not_a_defining_use.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-74280.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_not_used.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-60662.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-69323.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-sized.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-tuple.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/generic_lifetime_param.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type_of_a_let.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/defined-by-user-annotation.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/constrain_inputs.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/nested_type_alias_impl_trait.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-60564.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-57611-trait-alias.rs:5:#![feature(trait_alias)]
tests/ui/type-alias-impl-trait/issue-57611-trait-alias.rs:6:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-with-no-traits.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/underconstrained_lifetime.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/wf-in-associated-type.rs:7:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-70121.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-104817.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-104817.rs:2:#![cfg_attr(specialized, feature(specialization))]
tests/ui/type-alias-impl-trait/issue-104817.rs:3:#![allow(incomplete_features)]
tests/ui/type-alias-impl-trait/cross_inference.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_underconstrained2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/incomplete-inference.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-63263-closure-return.rs:7:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/weird-return-types.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/coherence_cross_crate.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/generic_underconstrained.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/bound_reduction.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/underconstrained_generic.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-57961.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-109054.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/destructuring.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-const.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/structural-match.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/normalize-hidden-types.rs:8:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_defining_uses_never_type.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/fallback.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/bounds.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/assoc-type-const.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs:1:#![feature(generators, generator_trait, rustc_attrs)]
tests/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/hidden_behind_projection_behind_struct_field.rs:7:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/inference-cycle.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/no_revealing_outside_defining_module.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/nested-tait-inference.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-60407.rs:1:#![feature(type_alias_impl_trait, rustc_attrs)]
tests/ui/type-alias-impl-trait/nested.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl_trait_for_tait.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/self_implication.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/implied_bounds.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl_trait_for_tait_bound.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/wf-nested.rs:10:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/privacy.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-assoc-impl-trait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-77179.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-55099-lifetime-inference.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/implied_bounds2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/structural-match-no-leak.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-fns.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/implied_lifetime_wf_check.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/future.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/assoc-type-lifetime.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-infer.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-84660-unsoundness.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/static-const-types.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/unnameable_type.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/unbounded_opaque_type.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-90400-1.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-ok.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/obligation_ice.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-pass.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-65918.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-74244.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/field-types.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/declared_but_never_defined.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-65384.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-65384.rs:2:#![allow(incomplete_features)]
tests/ui/type-alias-impl-trait/issue-93411.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/unused_generic_param.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use10.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-57807-associated-type.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-60564-working.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/nested-tait-inference3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/bounds-are-checked-2.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-58951-2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/auto-trait-leakage3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/recursive-tait-conflicting-defn.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/assoc-projection-ice.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/reveal_local.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait-struct.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/closure_args2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/self-referential-4.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-53092-2.stderr:18:LL | / #![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/closures_in_branches.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_defining_uses_never_type2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-60662.stdout:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_different_defining_uses.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-60371.stderr:8:   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable
tests/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/closure_wf_outlives.rs:9:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/type-alias-impl-trait.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/coherence_different_hidden_ty.rs:12:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/outlives-bound-var.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/nested_in_closure.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_defining_uses_never_type3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/coherence_generalization.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-74761-2.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-53598.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/non-defining-method.rs:6:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/closure_parent_substs.rs:10:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-63279.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/impl_trait_for_tait_bound2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-68368-non-defining-use-2.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/nested-tait-inference2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/auxiliary/collect_hidden_types.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-66580-closure-coherence.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-58662-generator-with-lifetime.rs:3:#![feature(generators, generator_trait)]
tests/ui/type-alias-impl-trait/issue-58662-generator-with-lifetime.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/not-matching-trait-refs-isnt-defining.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs:5:#![feature(impl_trait_in_assoc_type)]
tests/ui/type-alias-impl-trait/wf_check_closures.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/auto-trait-leakage2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/issue-58662-simplified.rs:3:#![feature(generators, generator_trait)]
tests/ui/type-alias-impl-trait/issue-58662-simplified.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/type-alias-impl-trait/different_defining_uses.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/empty/empty-attributes.stderr:17:LL | #[target_feature()]
tests/ui/empty/empty-attributes.stderr:20:   = note: attribute `target_feature` with an empty list has no effect
tests/ui/empty/empty-attributes.stderr:65:LL | #![feature()]
tests/ui/empty/empty-attributes.stderr:68:   = note: attribute `feature` with an empty list has no effect
tests/ui/empty/empty-attributes.rs:1:#![feature(lint_reasons)]
tests/ui/empty/empty-attributes.rs:9:#![feature()] //~ ERROR unused attribute
tests/ui/empty/empty-attributes.rs:14:#[target_feature()] //~ ERROR unused attribute
tests/ui/empty/empty-never-array.rs:1:#![feature(never_type)]
tests/ui/ffi_returns_twice.rs:1:#![feature(ffi_returns_twice)]
tests/ui/non-copyable-void.rs:3:#![feature(rustc_private)]
tests/ui/custom_attribute.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/assoc-lang-items.rs:1:#![feature(lang_items)]
tests/ui/resolve/issue-39559.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/resolve/resolve-self-in-impl.stderr:51:LL | / #![feature(associated_type_defaults)]
tests/ui/resolve/resolve-self-in-impl.rs:1:#![feature(associated_type_defaults)]
tests/ui/resolve/issue-5035.stderr:16:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/resolve/issue-82865.rs:3:#![feature(decl_macro)]
tests/ui/resolve/unboxed-closure-sugar-nonexistent-trait.stderr:13:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/resolve/issue-5035-2.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/resolve/issue-113808-invalid-unused-qualifications-suggestion.rs:4:#![feature(unsized_fn_params)]
tests/ui/resolve/issue-3907.stderr:7:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr:36:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr:49:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/resolve/issue-113808-invalid-unused-qualifications-suggestion.fixed:4:#![feature(unsized_fn_params)]
tests/ui/resolve/issue-39559-2.stderr:8:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/resolve/issue-39559-2.stderr:17:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/overloaded/issue-14958.rs:4:#![feature(fn_traits, unboxed_closures)]
tests/ui/overloaded/overloaded-calls-simple.rs:3:#![feature(lang_items, unboxed_closures, fn_traits)]
tests/ui/overloaded/overloaded-autoderef.rs:3:#![allow(stable_features)]
tests/ui/overloaded/overloaded-calls-zero-args.rs:3:#![feature(unboxed_closures, fn_traits)]
tests/ui/overloaded/overloaded-index-autoderef.rs:2:#![allow(stable_features)]
tests/ui/overloaded/overloaded-calls-nontuple.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/overloaded/overloaded-calls-param-vtables.rs:6:#![feature(unboxed_closures, fn_traits)]
tests/ui/attr-start.rs:4:#![feature(start)]
tests/ui/uniform-paths/basic-nested.rs:6:#![feature(decl_macro)]
tests/ui/associated-types/defaults-cyclic-fail-2.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-unsound-62211-1.rs:10:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-54182-2.rs:7:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-26681.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/associated-types-overridden-binding.rs:1:#![feature(trait_alias)]
tests/ui/associated-types/issue-65774-2.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/cache/project-fn-ret-invariant.rs:1:#![feature(unboxed_closures)]
tests/ui/associated-types/cache/project-fn-ret-contravariant.rs:1:#![feature(unboxed_closures)]
tests/ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:10:#![feature(lang_items)]
tests/ui/associated-types/issue-63593.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-specialization.rs:3:#![feature(associated_type_defaults, specialization)]
tests/ui/associated-types/defaults-specialization.rs:4://~^ WARN the feature `specialization` is incomplete
tests/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.rs:5:#![feature(lang_items)]
tests/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.rs:6:#![feature(no_core)]
tests/ui/associated-types/associated-type-struct-construction.rs:4:#![feature(more_qualified_paths)]
tests/ui/associated-types/issue-43924.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-in-other-trait-items-pass.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-cyclic-pass-2.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/normalization-generality.rs:6:#![feature(no_core)]
tests/ui/associated-types/issue-23595-1.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-suitability.rs:7:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-88856.rs:3:#![feature(generic_const_exprs)]
tests/ui/associated-types/issue-88856.rs:4:#![allow(incomplete_features)]
tests/ui/associated-types/associated-types-overridden-default.rs:6:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-85103.rs:1:#![feature(rustc_attrs)]
tests/ui/associated-types/bound-lifetime-in-return-only.rs:4:#![feature(rustc_attrs)]
tests/ui/associated-types/bound-lifetime-in-return-only.rs:5:#![feature(unboxed_closures)]
tests/ui/associated-types/default-associated-types.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/bound-lifetime-constrained.rs:4:#![feature(rustc_attrs)]
tests/ui/associated-types/defaults-mixed.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-41868.rs:6:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-47385.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/associated-type-tuple-struct-construction.rs:4:#![feature(more_qualified_paths)]
tests/ui/associated-types/defaults-specialization.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-types/defaults-specialization.stderr:4:LL | #![feature(associated_type_defaults, specialization)]
tests/ui/associated-types/defaults-specialization.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-types/defaults-cyclic-pass-1.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-25339.rs:4:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-23595-2.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-wf.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-65774-1.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-32350.rs:6:#![feature(associated_type_defaults)]
tests/ui/associated-types/bound-lifetime-in-binding-only.rs:4:#![feature(rustc_attrs)]
tests/ui/associated-types/bound-lifetime-in-binding-only.rs:5:#![feature(unboxed_closures)]
tests/ui/associated-types/associated-type-destructuring-assignment.rs:3:#![feature(more_qualified_paths)]
tests/ui/associated-types/associated-types-overridden-binding-2.rs:1:#![feature(trait_alias)]
tests/ui/associated-types/associated-types-impl-redirect.rs:11:#![feature(lang_items)]
tests/ui/associated-types/issue-63591.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-types/issue-63591.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/associated-types/issue-91231.rs:3:#![feature(extern_types)]
tests/ui/associated-types/defaults-in-other-trait-items.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-cyclic-fail-1.rs:1:#![feature(associated_type_defaults)]
tests/ui/associated-types/issue-54182-1.rs:12:#![feature(associated_type_defaults)]
tests/ui/associated-types/associated-types-unsized.stderr:9:   = help: unsized locals are gated as an unstable feature
tests/ui/associated-types/issue-76179.rs:3:#![feature(associated_type_defaults)]
tests/ui/associated-types/defaults-unsound-62211-2.rs:10:#![feature(associated_type_defaults)]
tests/ui/sse2.rs:3:#![allow(stable_features)]
tests/ui/sse2.rs:4:#![feature(cfg_target_feature)]
tests/ui/sse2.rs:19:        assert!(cfg!(target_feature = "sse2"),
tests/ui/sse2.rs:23:    assert!(cfg!(not(target_feature = "avx2")),
tests/ui/invalid_dispatch_from_dyn_impls.rs:1:#![feature(unsize, dispatch_from_dyn)]
tests/ui/trivial-bounds/trivial-bounds-leak-copy.rs:2:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs:4:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent.rs:5:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-projection.rs:4:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.rs:1:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-sized.rs:3:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/issue-73021-impossible-inline.rs:4:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy-reborrow.rs:2:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-leak.rs:2:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-lint.rs:1:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-well-formed.rs:3:#![feature(trivial_bounds)]
tests/ui/trivial-bounds/trivial-bounds-inconsistent-associated-functions.rs:8:#![feature(trivial_bounds)]
tests/ui/tuple/builtin-fail.rs:1:#![feature(tuple_trait)]
tests/ui/tuple/builtin.rs:3:#![feature(tuple_trait)]
tests/ui/traits/issue-33140-hack-boundaries.rs:1:#![feature(negative_impls)]
tests/ui/traits/issue-65673.rs:1:#![feature(trait_alias)] // Enabled to reduce stderr output, but can be triggered even if disabled.
tests/ui/traits/issue-96664.rs:3:#![feature(trait_alias)]
tests/ui/traits/issue-59029-1.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/only-maybe-bound.rs:4:#![feature(trait_alias)]
tests/ui/traits/alias/syntax-fail.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/self-in-const-generics.rs:1:#![allow(incomplete_features)]
tests/ui/traits/alias/self-in-const-generics.rs:2:#![feature(generic_const_exprs)]
tests/ui/traits/alias/self-in-const-generics.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/dont-elaborate-non-self.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/traits/alias/generic-default-in-dyn.stderr:8:   = help: add `#![feature(trait_alias)]` to the crate attributes to enable
tests/ui/traits/alias/issue-60021-assoc-method-resolve.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/object-fail.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/suggest-trait-alias-instead-of-type.fixed:5:#![feature(trait_alias)]
tests/ui/traits/alias/issue-83613.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/traits/alias/style_lint.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/no-duplicates.rs:5:#![feature(trait_alias)]
tests/ui/traits/alias/wf.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/object.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/maybe-bound.rs:5:#![feature(trait_alias)]
tests/ui/traits/alias/import-cross-crate.rs:4:#![feature(trait_alias)]
tests/ui/traits/alias/import.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/ambiguous.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/issue-60755.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/issue-108132-unmet-trait-alias-bound-on-generic-impl.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/bounds.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/dont-elaborate-non-self.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/issue-75983.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/self-in-generics.rs:4:#![feature(trait_alias)]
tests/ui/traits/alias/suggest-trait-alias-instead-of-type.stderr:7:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/traits/alias/cross-crate.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/issue-107747-do-not-assemble-supertraits.rs:5:#![feature(trait_alias)]
tests/ui/traits/alias/impl.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/no-extra-traits.rs:4:#![feature(trait_alias)]
tests/ui/traits/alias/suggest-trait-alias-instead-of-type.rs:5:#![feature(trait_alias)]
tests/ui/traits/alias/syntax.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/object-wf.rs:5:#![feature(trait_alias)]
tests/ui/traits/alias/issue-72415-assoc-const-resolve.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/basic.rs:3:#![feature(trait_alias)]
tests/ui/traits/alias/auxiliary/send_sync.rs:1:#![feature(trait_alias)]
tests/ui/traits/alias/auxiliary/greeter.rs:1:#![feature(trait_alias)]
tests/ui/traits/issue-78372.stderr:40:error[E0658]: use of unstable library feature 'dispatch_from_dyn'
tests/ui/traits/issue-78372.stderr:46:   = help: add `#![feature(dispatch_from_dyn)]` to the crate attributes to enable
tests/ui/traits/issue-78372.stderr:48:error[E0658]: use of unstable library feature 'dispatch_from_dyn'
tests/ui/traits/issue-78372.stderr:54:   = help: add `#![feature(dispatch_from_dyn)]` to the crate attributes to enable
tests/ui/traits/cache-reached-depth-ice.rs:1:#![feature(rustc_attrs)]
tests/ui/traits/deny-builtin-object-impl.rs:4:#![feature(rustc_attrs)]
tests/ui/traits/negative-impls/positive-specializes-negative.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/traits/negative-impls/positive-specializes-negative.rs:2:#![feature(negative_impls)]
tests/ui/traits/negative-impls/positive-specializes-negative.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-impls/positive-specializes-negative.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/negative-impls/positive-specializes-negative.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-impls/negative-default-impls.rs:1:#![feature(negative_impls)]
tests/ui/traits/negative-impls/negative-default-impls.rs:2:#![feature(specialization)]
tests/ui/traits/negative-impls/negative-default-impls.rs:3://~^ WARN the feature `specialization` is incomplete
tests/ui/traits/negative-impls/negative-specializes-negative.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-impls/negative-specializes-negative.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/negative-impls/negative-specializes-negative.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-impls/negative-specializes-positive-item.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-impls/negative-specializes-positive-item.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/negative-impls/negative-specializes-positive-item.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-impls/negative-specializes-positive.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-impls/negative-specializes-positive.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/negative-impls/negative-specializes-positive.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-impls/no-items.rs:1:#![feature(negative_impls)]
tests/ui/traits/negative-impls/negative-default-impls.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-impls/negative-default-impls.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/negative-impls/negative-default-impls.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-impls/negative-specializes-positive.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/traits/negative-impls/negative-specializes-positive.rs:2:#![feature(negative_impls)]
tests/ui/traits/negative-impls/negated-auto-traits-rpass.rs:3:#![feature(negative_impls)]
tests/ui/traits/negative-impls/negated-auto-traits-error.rs:6:#![feature(negative_impls)]
tests/ui/traits/negative-impls/eager-mono.rs:4:#![feature(negative_impls)]
tests/ui/traits/negative-impls/negative-impls-basic.rs:2:// feature gate is given.
tests/ui/traits/negative-impls/negative-impls-basic.rs:6:#![feature(negative_impls)]
tests/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs:3:#![feature(negative_impls)]
tests/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs:4:#![feature(with_negative_coherence)]
tests/ui/traits/negative-impls/explicitly-unimplemented-error-message.rs:4:#![feature(negative_impls)]
tests/ui/traits/negative-impls/negative-specializes-positive-item.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/traits/negative-impls/negative-specializes-positive-item.rs:2:#![feature(negative_impls)]
tests/ui/traits/negative-impls/feature-gate-negative_impls.stderr:2:  --> $DIR/feature-gate-negative_impls.rs:2:6
tests/ui/traits/negative-impls/feature-gate-negative_impls.stderr:8:   = help: add `#![feature(negative_impls)]` to the crate attributes to enable
tests/ui/traits/negative-impls/negative-specializes-negative.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/traits/negative-impls/negative-specializes-negative.rs:2:#![feature(negative_impls)]
tests/ui/traits/negative-impls/auxiliary/foreign_trait.rs:1:#![feature(negative_impls)]
tests/ui/traits/negative-impls/auxiliary/foreign_trait.rs:2:#![feature(with_negative_coherence)]
tests/ui/traits/pointee-deduction.rs:3:#![feature(ptr_metadata)]
tests/ui/traits/negative-bounds/associated-constraints.rs:1:#![feature(negative_bounds, associated_type_bounds)]
tests/ui/traits/negative-bounds/associated-constraints.rs:2://~^ WARN the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-bounds/supertrait.stderr:1:warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-bounds/supertrait.stderr:4:LL | #![feature(negative_bounds)]
tests/ui/traits/negative-bounds/supertrait.stderr:7:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-bounds/supertrait.rs:3:#![feature(negative_bounds)]
tests/ui/traits/negative-bounds/supertrait.rs:4://~^ WARN the feature `negative_bounds` is incomplete
tests/ui/traits/negative-bounds/associated-constraints.stderr:25:warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-bounds/associated-constraints.stderr:28:LL | #![feature(negative_bounds, associated_type_bounds)]
tests/ui/traits/negative-bounds/associated-constraints.stderr:31:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-bounds/simple.stderr:1:warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/negative-bounds/simple.stderr:4:LL | #![feature(negative_bounds, negative_impls)]
tests/ui/traits/negative-bounds/simple.stderr:7:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/negative-bounds/simple.rs:1:#![feature(negative_bounds, negative_impls)]
tests/ui/traits/negative-bounds/simple.rs:2://~^ WARN the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/reservation-impl/ok.rs:9:#![feature(rustc_attrs)]
tests/ui/traits/reservation-impl/non-lattice-ok.rs:39:#![feature(rustc_attrs, never_type)]
tests/ui/traits/reservation-impl/no-use.rs:4:#![feature(rustc_attrs)]
tests/ui/traits/reservation-impl/coherence-conflict.rs:4:#![feature(rustc_attrs)]
tests/ui/traits/ice-with-dyn-pointee-errors.rs:1:#![feature(ptr_metadata)]
tests/ui/traits/invalid_operator_trait.rs:2:#![feature(lang_items)]
tests/ui/traits/invalid_operator_trait.rs:3:#![feature(no_core)]
tests/ui/traits/pointee-tail-is-generic.rs:4:#![feature(ptr_metadata)]
tests/ui/traits/pointee-tail-is-generic.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/traits/non_lifetime_binders/universe-error1.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/universe-error1.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/universe-error1.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/on-dyn.rs:3:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/on-dyn.rs:4://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/nested-apit-mentioning-outer-bound-var.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/nested-apit-mentioning-outer-bound-var.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/drop-impl-pred.no.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/drop-impl-pred.no.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/drop-impl-pred.no.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/bad-sized-cond.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/bad-sized-cond.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/bad-sized-cond.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.rs:4:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.rs:5://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/universe-error1.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/universe-error1.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/foreach-partial-eq.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/foreach-partial-eq.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/foreach-partial-eq.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/on-ptr.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/on-ptr.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/on-ptr.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.rs:1:#![feature(non_lifetime_binders, generic_const_exprs)]
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.rs:3://~| WARN the feature `generic_const_exprs` is incomplete
tests/ui/traits/non_lifetime_binders/method-probe.rs:3:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/method-probe.rs:4://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/supertrait-object-safety.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/supertrait-object-safety.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/nested-apit-mentioning-outer-bound-var.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/nested-apit-mentioning-outer-bound-var.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/nested-apit-mentioning-outer-bound-var.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/bad-sized-cond.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/method-probe.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/method-probe.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/method-probe.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/type-match-with-late-bound.rs:6:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/drop-impl-pred.yes.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/drop-impl-pred.yes.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/drop-impl-pred.yes.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/type-match-with-late-bound.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/type-match-with-late-bound.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/type-match-with-late-bound.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/missing-assoc-item.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/missing-assoc-item.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/on-ptr.rs:3:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/on-ptr.rs:4://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/foreach-partial-eq.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/foreach-partial-eq.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/bad-copy-cond.rs:1:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/bad-copy-cond.rs:2://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/fail.rs:3:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/fail.rs:4://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.stderr:4:LL | #![feature(non_lifetime_binders, generic_const_exprs)]
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.stderr:10:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.stderr:13:LL | #![feature(non_lifetime_binders, generic_const_exprs)]
tests/ui/traits/non_lifetime_binders/bad-copy-cond.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/bad-copy-cond.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/bad-copy-cond.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/drop-impl-pred.rs:6:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/drop-impl-pred.rs:7://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/basic.rs:4:#![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/basic.rs:5://~^ WARN the feature `non_lifetime_binders` is incomplete
tests/ui/traits/non_lifetime_binders/basic.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/basic.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/basic.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/on-dyn.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/on-dyn.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/on-dyn.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/non_lifetime_binders/fail.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/non_lifetime_binders/fail.stderr:4:LL | #![feature(non_lifetime_binders)]
tests/ui/traits/non_lifetime_binders/fail.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/default-method/rustc_must_implement_one_of_duplicates.rs:1:#![feature(rustc_attrs)]
tests/ui/traits/default-method/rustc_must_implement_one_of_gated.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/traits/default-method/rustc_must_implement_one_of_misuse.rs:1:#![feature(rustc_attrs)]
tests/ui/traits/default-method/rustc_must_implement_one_of.rs:1:#![feature(rustc_attrs)]
tests/ui/traits/no_send-struct.rs:1:#![feature(negative_impls)]
tests/ui/traits/issue-87558.stderr:13:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/traits/overlap-permitted-for-marker-traits.rs:6:#![feature(marker_trait_attr)]
tests/ui/traits/overlap-permitted-for-marker-traits.rs:7:#![feature(negative_impls)]
tests/ui/traits/new-solver/negative-coherence-bounds.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/new-solver/negative-coherence-bounds.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/new-solver/negative-coherence-bounds.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/new-solver/tait-eq-proj-2.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/traits/new-solver/provisional-result-done.rs:6:#![feature(auto_traits)]
tests/ui/traits/new-solver/specialization-transmute.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/new-solver/specialization-transmute.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/new-solver/specialization-transmute.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/new-solver/negative-coherence-bounds.rs:12:#![feature(specialization)]
tests/ui/traits/new-solver/negative-coherence-bounds.rs:13://~^ WARN the feature `specialization` is incomplete
tests/ui/traits/new-solver/negative-coherence-bounds.rs:14:#![feature(with_negative_coherence)]
tests/ui/traits/new-solver/builtin-fn-must-return-sized.rs:3:#![feature(fn_traits)]
tests/ui/traits/new-solver/builtin-fn-must-return-sized.rs:4:#![feature(unboxed_closures)]
tests/ui/traits/new-solver/builtin-fn-must-return-sized.rs:5:#![feature(tuple_trait)]
tests/ui/traits/new-solver/specialization-transmute.rs:3:#![feature(specialization)]
tests/ui/traits/new-solver/specialization-transmute.rs:4://~^ WARN the feature `specialization` is incomplete
tests/ui/traits/new-solver/tait-eq-tait.rs:7:#![feature(type_alias_impl_trait)]
tests/ui/traits/new-solver/unsize-good.rs:4:#![feature(unsized_tuple_coercion)]
tests/ui/traits/new-solver/specialization-unconstrained.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/traits/new-solver/specialization-unconstrained.stderr:4:LL | #![feature(specialization)]
tests/ui/traits/new-solver/specialization-unconstrained.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/traits/new-solver/stall-num-var-auto-trait.rs:8:#![feature(negative_impls, auto_traits)]
tests/ui/traits/new-solver/opportunistic-region-resolve.rs:4:#![feature(rustc_attrs)]
tests/ui/traits/new-solver/pointer-like.rs:3:#![feature(pointer_like_trait)]
tests/ui/traits/new-solver/dont-remap-tait-substs.rs:8:#![feature(type_alias_impl_trait)]
tests/ui/traits/new-solver/upcast-right-substs.rs:4:#![feature(trait_upcasting)]
tests/ui/traits/new-solver/alias-bound-unsound.rs:5:#![feature(trivial_bounds)]
tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs:6:#![feature(negative_impls)]
tests/ui/traits/new-solver/winnow-specializing-impls.rs:6:#![feature(min_specialization)]
tests/ui/traits/new-solver/pointee.rs:3:#![feature(ptr_metadata)]
tests/ui/traits/new-solver/upcast-wrong-substs.rs:3:#![feature(trait_upcasting)]
tests/ui/traits/new-solver/specialization-unconstrained.rs:3:#![feature(specialization)]
tests/ui/traits/new-solver/specialization-unconstrained.rs:4://~^ WARN the feature `specialization` is incomplete
tests/ui/traits/new-solver/destruct.rs:4:#![feature(const_trait_impl)]
tests/ui/traits/new-solver/leak-check-coinductive-cycle.rs:3:#![feature(rustc_attrs)]
tests/ui/traits/new-solver/dont-type_of-tait-in-defining-scope.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/traits/new-solver/tait-eq-proj.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/traits/new-solver/generator.rs:6:#![feature(generator_trait, generators)]
tests/ui/traits/vtable/vtable-non-object-safe.rs:2:#![feature(rustc_attrs)]
tests/ui/traits/vtable/vtable-multi-level.rs:2:#![feature(rustc_attrs)]
tests/ui/traits/vtable/vtable-diamond.rs:2:#![feature(rustc_attrs)]
tests/ui/traits/vtable/vtable-vacant.rs:2:#![feature(rustc_attrs)]
tests/ui/traits/vtable/vtable-vacant.rs:3:#![feature(negative_impls)]
tests/ui/traits/vtable/vtable-multiple.rs:2:#![feature(rustc_attrs)]
tests/ui/traits/issue-85360-eval-obligation-ice.rs:3:#![feature(rustc_attrs)]
tests/ui/traits/project-modulo-regions.rs:5:#![feature(rustc_attrs)]
tests/ui/traits/pointee-tail-is-generic-errors.rs:3:#![feature(ptr_metadata)]
tests/ui/traits/pointee-tail-is-generic-errors.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/traits/issue-78372.rs:1:use std::ops::DispatchFromDyn; //~ ERROR use of unstable library feature 'dispatch_from_dyn'
tests/ui/traits/issue-78372.rs:5://~| ERROR use of unstable library feature 'dispatch_from_dyn'
tests/ui/traits/syntax-polarity.rs:5:#![feature(negative_impls)]
tests/ui/traits/overlap-not-permitted-for-builtin-trait.rs:2:#![feature(negative_impls)]
tests/ui/traits/issue-56488.rs:3:#![feature(trait_alias)]
tests/ui/traits/syntax-trait-polarity.rs:1:#![feature(negative_impls)]
tests/ui/traits/bound/not-on-bare-trait.stderr:22:   = help: unsized fn params are gated as an unstable feature
tests/ui/traits/item-privacy.rs:1:#![feature(associated_type_defaults)]
tests/ui/traits/inductive-overflow/supertrait-auto-trait.rs:5:#![feature(auto_traits)]
tests/ui/traits/inductive-overflow/supertrait-auto-trait.rs:6:#![feature(negative_impls)]
tests/ui/traits/issue-83538-tainted-cache-after-cycle.rs:9:#![feature(rustc_attrs)]
tests/ui/traits/ice-with-dyn-pointee.rs:2:#![feature(ptr_metadata)]
tests/ui/traits/issue-71036.rs:1:#![feature(unsize, dispatch_from_dyn)]
tests/ui/traits/trait-upcasting/alias-where-clause-isnt-supertrait.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/alias-where-clause-isnt-supertrait.rs:2:#![feature(trait_alias)]
tests/ui/traits/trait-upcasting/issue-11515-upcast-fn_mut-fn.rs:2:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/type-checking-test-2.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/correct-supertrait-substitution.rs:2:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/diamond.rs:3:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.rs:2:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/type-checking-test-3.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/subtrait-method.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/lifetime.rs:3:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/multiple_supertrait_upcastable.rs:1:#![feature(multiple_supertrait_upcastable)]
tests/ui/traits/trait-upcasting/issue-11515.current.stderr:8:   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable
tests/ui/traits/trait-upcasting/issue-11515.next.stderr:8:   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable
tests/ui/traits/trait-upcasting/type-checking-test-4.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/struct.rs:3:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/type-checking-test-1.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/replace-vptr.rs:3:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/invalid-upcast.rs:1:#![feature(trait_upcasting)]
tests/ui/traits/trait-upcasting/basic.rs:3:#![feature(trait_upcasting)]
tests/ui/traits/issue-102989.rs:3:#![feature(lang_items)]
tests/ui/traits/issue-95311.rs:5:#![feature(ptr_metadata)]
tests/ui/traits/issue-59029-2.rs:2:#![feature(trait_alias)]
tests/ui/traits/auxiliary/go_trait.rs:1:#![feature(specialization)]
tests/ui/custom-test-frameworks-simple.rs:4:#![feature(custom_test_frameworks)]
tests/ui/internal-lints/query_stability_incorrect.rs:3:#![feature(rustc_attrs)]
tests/ui/internal-lints/diagnostics_incorrect.rs:3:#![feature(rustc_attrs)]
tests/ui/internal-lints/rustc_pass_by_value_self.rs:7:#![feature(rustc_attrs)]
tests/ui/internal-lints/existing_doc_keyword.rs:3:#![feature(rustc_private)]
tests/ui/internal-lints/existing_doc_keyword.rs:4:#![feature(rustdoc_internals)]
tests/ui/editions/edition-feature-redundant.stderr:1:warning[E0705]: the feature `rust_2018_preview` is included in the Rust 2018 edition
tests/ui/editions/edition-feature-redundant.stderr:2:  --> $DIR/edition-feature-redundant.rs:4:12
tests/ui/editions/edition-feature-redundant.stderr:4:LL | #![feature(rust_2018_preview)]
tests/ui/editions/epoch-gate-feature.rs:8:#![feature(rust_2018_preview)]
tests/ui/editions/epoch-gate-feature.rs:12:// should compile without the dyn trait feature flag
tests/ui/editions/edition-keywords-2018-2015-parsing.rs:4:#![feature(async_closure)]
tests/ui/editions/edition-feature-ok.rs:3:#![feature(rust_2018_preview)]
tests/ui/editions/edition-keywords-2018-2018-parsing.rs:4:#![feature(async_closure)]
tests/ui/editions/edition-feature-redundant.rs:4:#![feature(rust_2018_preview)]
tests/ui/editions/edition-feature-redundant.rs:5://~^ WARN the feature `rust_2018_preview` is included in the Rust 2018 edition
tests/ui/print_type_sizes/uninhabited.rs:7:#![feature(never_type)]
tests/ui/print_type_sizes/generator_discr_placement.rs:8:#![feature(generators)]
tests/ui/print_type_sizes/anonymous.rs:8:#![feature(start)]
tests/ui/print_type_sizes/niche-filling.rs:17:#![feature(rustc_attrs)]
tests/ui/print_type_sizes/generator.rs:5:#![feature(generators, generator_trait)]
tests/ui/conditional-compilation/cfg-generic-params.stderr:38:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/conditional-compilation/cfg-generic-params.stderr:47:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/conditional-compilation/cfg-generic-params.stderr:56:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/conditional-compilation/cfg-attr-multi-invalid-2.rs:5://~^ ERROR the `#[no_core]` attribute is an experimental feature
tests/ui/conditional-compilation/cfg-attr-crate-2.stderr:1:error[E0658]: the `#[no_core]` attribute is an experimental feature
tests/ui/conditional-compilation/cfg-attr-crate-2.stderr:8:   = help: add `#![feature(no_core)]` to the crate attributes to enable
tests/ui/conditional-compilation/cfg-attr-syntax-validation.stderr:60:LL |         #[cfg(feature = $expr)]
tests/ui/conditional-compilation/cfg-attr-syntax-validation.stderr:71:LL |         #[cfg(feature = $expr)]
tests/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr:1:error[E0658]: the `#[no_core]` attribute is an experimental feature
tests/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr:8:   = help: add `#![feature(no_core)]` to the crate attributes to enable
tests/ui/conditional-compilation/cfg-non-opt-expr.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/conditional-compilation/cfg-non-opt-expr.rs:2:#![feature(custom_test_frameworks)]
tests/ui/conditional-compilation/cfg_accessible-input-validation.rs:1:#![feature(cfg_accessible)]
tests/ui/conditional-compilation/cfg_accessible-not_sure.rs:5:#![feature(extern_types)]
tests/ui/conditional-compilation/cfg_accessible-not_sure.rs:6:#![feature(cfg_accessible)]
tests/ui/conditional-compilation/cfg_accessible-private.rs:3:#![feature(cfg_accessible)]
tests/ui/conditional-compilation/cfg-attr-syntax-validation.rs:30:        #[cfg(feature = $expr)]
tests/ui/conditional-compilation/cfg_accessible-bugs.rs:5:#![feature(cfg_accessible)]
tests/ui/conditional-compilation/cfg_accessible-bugs.rs:6:#![feature(trait_alias)]
tests/ui/conditional-compilation/cfg_accessible-unstable.stderr:1:error[E0658]: use of unstable library feature 'cfg_accessible': `cfg_accessible` is not fully implemented
tests/ui/conditional-compilation/cfg_accessible-unstable.stderr:8:   = help: add `#![feature(cfg_accessible)]` to the crate attributes to enable
tests/ui/conditional-compilation/cfg-attr-multi-invalid-1.rs:5://~^ ERROR the `#[no_core]` attribute is an experimental feature
tests/ui/conditional-compilation/cfg_accessible-stuck.rs:1:#![feature(cfg_accessible)]
tests/ui/conditional-compilation/cfg_accessible.rs:1:#![feature(cfg_accessible)]
tests/ui/conditional-compilation/cfg-attr-crate-2.rs:6:#![cfg_attr(broken, no_core)] //~ ERROR the `#[no_core]` attribute is an experimental feature
tests/ui/conditional-compilation/cfg_accessible-unstable.rs:1:#[cfg_accessible(std)] //~ ERROR use of unstable library feature 'cfg_accessible'
tests/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr:1:error[E0658]: the `#[no_core]` attribute is an experimental feature
tests/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr:8:   = help: add `#![feature(no_core)]` to the crate attributes to enable
tests/ui/match/issue-42679.rs:2:#![feature(box_patterns)]
tests/ui/match/issue-41255.rs:3:#![feature(exclusive_range_pattern)]
tests/ui/match/issue-92100.rs:1:#![feature(half_open_range_patterns_in_slices)]
tests/ui/match/issue-112438.rs:2:#![feature(inline_const_pat)]
tests/ui/match/issue-112438.rs:4:#![allow(incomplete_features)]
tests/ui/match/match-range-fail-2.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/cast/cast-rfc0401-vtable-kinds.rs:5:#![feature(unsized_tuple_coercion)]
tests/ui/cast/fat-ptr-cast-rpass.rs:3:#![feature(ptr_metadata)]
tests/ui/sanitize/crt-static.stderr:1:error: sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`
tests/ui/sanitize/crt-static.rs:1:// compile-flags: -Z sanitizer=address -C target-feature=+crt-static --target x86_64-unknown-linux-gnu
tests/ui/sanitize/crt-static.rs:4:#![feature(no_core)]
tests/ui/sanitize/inline-always.rs:3:#![feature(no_sanitize)]
tests/ui/sanitize/memory-passing.rs:14:#![feature(core_intrinsics)]
tests/ui/sanitize/memory-passing.rs:15:#![feature(start)]
tests/ui/sanitize/sanitizer-cfi-normalize-integers-attr-cfg.rs:6:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers
tests/ui/sanitize/thread.rs:23:#![feature(raw_ref_op)]
tests/ui/sanitize/thread.rs:24:#![feature(rustc_private)]
tests/ui/sanitize/memory.rs:17:#![feature(core_intrinsics)]
tests/ui/sanitize/memory.rs:18:#![feature(start)]
tests/ui/sanitize/sanitizer-cfi-canonical-jump-tables-require-cfi.rs:4:// compile-flags: -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer-cfi-canonical-jump-tables=false
tests/ui/sanitize/sanitizer-cfi-canonical-jump-tables-require-cfi.rs:6:#![feature(no_core)]
tests/ui/sanitize/cfg.rs:20:#![feature(cfg_sanitize)]
tests/ui/sanitize/split-lto-unit-requires-lto.rs:4:// compile-flags: -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsplit-lto-unit
tests/ui/sanitize/split-lto-unit-requires-lto.rs:6:#![feature(no_core)]
tests/ui/sanitize/issue-111184-generator-witness.rs:5:// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi --edition=2021
tests/ui/sanitize/sanitizer-cfi-generalize-pointers-require-cfi.rs:5:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer-cfi-generalize-pointers
tests/ui/sanitize/sanitizer-cfi-generalize-pointers-require-cfi.rs:7:#![feature(no_core)]
tests/ui/sanitize/memory-eager.rs:17:#![feature(core_intrinsics)]
tests/ui/sanitize/memory-eager.rs:18:#![feature(start)]
tests/ui/sanitize/sanitizer-cfi-requires-lto.rs:4:// compile-flags: -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/ui/sanitize/sanitizer-cfi-requires-lto.rs:6:#![feature(no_core)]
tests/ui/sanitize/unsupported-target.rs:4:#![feature(no_core)]
tests/ui/sanitize/sanitizer-cfi-is-incompatible-with-saniziter-kcfi.rs:8:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer=kcfi
tests/ui/sanitize/sanitizer-cfi-is-incompatible-with-saniziter-kcfi.rs:10:#![feature(no_core)]
tests/ui/sanitize/cfg-kasan.rs:19:#![feature(cfg_sanitize, no_core, lang_items)]
tests/ui/sanitize/sanitizer-cfi-generalize-pointers-attr-cfg.rs:6:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers
tests/ui/sanitize/incompatible.rs:5:#![feature(no_core)]
tests/ui/sanitize/sanitizer-cfi-normalize-integers-require-cfi.rs:5:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer-cfi-normalize-integers
tests/ui/sanitize/sanitizer-cfi-normalize-integers-require-cfi.rs:7:#![feature(no_core)]
tests/ui/sanitize/sanitizer-cfi-invalid-attr-cfi-encoding.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/ui/sanitize/sanitizer-cfi-invalid-attr-cfi-encoding.rs:6:#![feature(cfi_encoding, no_core)]
tests/ui/inline-const/elided-lifetime-being-infer-vars.rs:3:#![feature(inline_const)]
tests/ui/inline-const/interpolated.rs:3:#![feature(inline_const)]
tests/ui/inline-const/pat-unsafe.rs:6:#![allow(incomplete_features)]
tests/ui/inline-const/pat-unsafe.rs:8:#![feature(inline_const_pat)]
tests/ui/inline-const/const-expr-lifetime-err.rs:1:#![feature(const_mut_refs)]
tests/ui/inline-const/const-expr-lifetime-err.rs:2:#![feature(inline_const)]
tests/ui/inline-const/const-match-pat-range.rs:3:#![allow(incomplete_features)]
tests/ui/inline-const/const-match-pat-range.rs:4:#![feature(inline_const_pat, exclusive_range_pattern)]
tests/ui/inline-const/const-match-pat.rs:3:#![allow(incomplete_features)]
tests/ui/inline-const/const-match-pat.rs:4:#![feature(inline_const_pat)]
tests/ui/inline-const/pat-unsafe-err.rs:5:#![allow(incomplete_features)]
tests/ui/inline-const/pat-unsafe-err.rs:6:#![feature(inline_const_pat)]
tests/ui/inline-const/const-expr-array-init.rs:3:#![feature(inline_const)]
tests/ui/inline-const/const-expr-reference.rs:3:#![feature(inline_const)]
tests/ui/inline-const/const-expr-inference.rs:3:#![feature(inline_const)]
tests/ui/inline-const/const-match-pat-generic.rs:1:#![allow(incomplete_features)]
tests/ui/inline-const/const-match-pat-generic.rs:2:#![feature(inline_const_pat)]
tests/ui/inline-const/expr-with-block-err.rs:1:#![feature(inline_const)]
tests/ui/inline-const/const-match-pat-inference.rs:3:#![feature(inline_const_pat)]
tests/ui/inline-const/const-match-pat-inference.rs:4:#![allow(incomplete_features)]
tests/ui/inline-const/const-expr-basic.rs:3:#![feature(inline_const)]
tests/ui/inline-const/const-expr-lifetime.rs:3:#![feature(const_mut_refs)]
tests/ui/inline-const/const-expr-lifetime.rs:4:#![feature(inline_const)]
tests/ui/inline-const/const-expr-generic-err2.rs:1:#![feature(inline_const)]
tests/ui/inline-const/const-expr-generic.rs:2:#![feature(inline_const)]
tests/ui/inline-const/expr-unsafe-err.rs:3:#![feature(inline_const)]
tests/ui/inline-const/expr-with-block.rs:2:#![feature(inline_const)]
tests/ui/inline-const/const-match-pat-lifetime.rs:3:#![allow(incomplete_features)]
tests/ui/inline-const/const-match-pat-lifetime.rs:4:#![feature(const_mut_refs)]
tests/ui/inline-const/const-match-pat-lifetime.rs:5:#![feature(inline_const)]
tests/ui/inline-const/const-match-pat-lifetime.rs:6:#![feature(inline_const_pat)]
tests/ui/inline-const/const-expr-generic-err.rs:2:#![feature(inline_const)]
tests/ui/inline-const/const-match-pat-lifetime-err.rs:3:#![allow(incomplete_features)]
tests/ui/inline-const/const-match-pat-lifetime-err.rs:4:#![feature(const_mut_refs)]
tests/ui/inline-const/const-match-pat-lifetime-err.rs:5:#![feature(inline_const_pat)]
tests/ui/inline-const/const-expr-macro.rs:3:#![feature(inline_const)]
tests/ui/inline-const/expr-unsafe.rs:5:#![feature(inline_const)]
tests/ui/panics/runtime-switch.rs:22:#![feature(panic_backtrace_config)]
tests/ui/panics/panic-handler-flail-wildly.rs:4:#![allow(stable_features)]
tests/ui/panics/panic-handler-flail-wildly.rs:9:#![feature(std_panic)]
tests/ui/panics/panic-handler-chain-update-hook.rs:3:#![allow(stable_features)]
tests/ui/panics/panic-handler-chain-update-hook.rs:7:#![feature(std_panic)]
tests/ui/panics/panic-handler-chain-update-hook.rs:8:#![feature(panic_update_hook)]
tests/ui/panics/panic-handler-set-twice.rs:4:#![allow(stable_features)]
tests/ui/panics/panic-handler-set-twice.rs:6:#![feature(std_panic)]
tests/ui/panics/abort-on-panic.rs:6:#![feature(c_unwind)]
tests/ui/panics/abort-on-panic.rs:7:#![feature(panic_always_abort)]
tests/ui/panics/panic-handler-chain.rs:3:#![allow(stable_features)]
tests/ui/panics/panic-handler-chain.rs:7:#![feature(std_panic)]
tests/ui/break-diverging-value.rs:1:#![feature(never_type)]
tests/ui/linkage-attr/linkage4.stderr:8:   = help: add `#![feature(linkage)]` to the crate attributes to enable
tests/ui/linkage-attr/incompatible-flavor.rs:5:#![feature(no_core)]
tests/ui/linkage-attr/link-attr-validation-late.rs:1:#![feature(link_cfg)]
tests/ui/linkage-attr/linkage-detect-local-generated-name-collision.rs:4:#![feature(linkage)]
tests/ui/linkage-attr/linkage1.rs:8:#![feature(linkage)]
tests/ui/linkage-attr/linkage2.rs:3:#![feature(linkage)]
tests/ui/linkage-attr/linkage3.rs:3:#![feature(linkage)]
tests/ui/linkage-attr/link-cfg-works.rs:5:#![feature(link_cfg)]
tests/ui/linkage-attr/unstable-flavor.rs:13:#![feature(no_core)]
tests/ui/linkage-attr/auxiliary/def_colliding_external.rs:1:#![feature(linkage)]
tests/ui/linkage-attr/auxiliary/link-cfg-works-transitive-rlib.rs:3:#![feature(link_cfg)]
tests/ui/linkage-attr/auxiliary/def_external.rs:1:#![feature(linkage)]
tests/ui/linkage-attr/auxiliary/link-cfg-works-transitive-dylib.rs:1:#![feature(link_cfg)]
tests/ui/on-unimplemented/feature-gate-on-unimplemented.stderr:2:  --> $DIR/feature-gate-on-unimplemented.rs:3:1
tests/ui/on-unimplemented/feature-gate-on-unimplemented.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/on-unimplemented/issue-104140.rs:1:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/impl-substs.rs:1:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/on-impl.rs:3:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/expected-comma-found-token.rs:5:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/bad-annotation.rs:3:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/on-trait.rs:3:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/multiple-impls.rs:3:#![feature(rustc_attrs)]
tests/ui/on-unimplemented/feature-gate-on-unimplemented.rs:1:// Test that `#[rustc_on_unimplemented]` is gated by `rustc_attrs` feature gate.
tests/ui/on-unimplemented/parent-label.rs:3:#![feature(rustc_attrs)]
tests/ui/lazy-type-alias-impl-trait/branches.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lazy-type-alias-impl-trait/recursion4.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lazy-type-alias-impl-trait/branches3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lazy-type-alias-impl-trait/recursion2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lazy-type-alias-impl-trait/recursion3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lazy-type-alias-impl-trait/freeze_cycle.rs:3:#![feature(generator_trait, negative_impls)]
tests/ui/lazy-type-alias-impl-trait/recursion.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/lazy-type-alias-impl-trait/branches2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/layout/homogeneous-aggr-zero-sized-repr-rust.rs:1:#![feature(rustc_attrs)]
tests/ui/layout/thumb-enum.rs:7:#![feature(never_type, rustc_attrs, no_core, lang_items)]
tests/ui/layout/unsafe-cell-hides-niche.rs:10:#![feature(repr_simd)]
tests/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.rs:3:#![feature(rustc_attrs)]
tests/ui/layout/thin-meta-implies-thin-ptr.rs:3:#![feature(ptr_metadata)]
tests/ui/layout/homogeneous-aggr-zero-sized-c-struct.rs:1:#![feature(rustc_attrs)]
tests/ui/layout/hexagon-enum.rs:7:#![feature(never_type, rustc_attrs, no_core, lang_items)]
tests/ui/layout/valid_range_oob.rs:6:#![feature(rustc_attrs)]
tests/ui/layout/debug.rs:2:#![feature(never_type, rustc_attrs, type_alias_impl_trait, repr_simd)]
tests/ui/layout/issue-96185-overaligned-enum.rs:3:#![feature(rustc_attrs)]
tests/ui/layout/zero-sized-array-enum-niche.rs:2:#![feature(rustc_attrs)]
tests/ui/layout/issue-112048-unsizing-niche.rs:5:#![feature(offset_of)]
tests/ui/layout/zero-sized-array-union.rs:1:#![feature(rustc_attrs)]
tests/ui/liveness/liveness-upvars.rs:3:#![feature(generators)]
tests/ui/const-generics/const-param-type-depends-on-type-param.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/const-param-type-depends-on-type-param.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/try_unify_ignore_lifetimes.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/try_unify_ignore_lifetimes.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/const-argument-if-length.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/const-argument-if-length.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/transmute.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/transmute.rs:3:#![feature(transmute_generic_consts)]
tests/ui/const-generics/transmute.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/array-impls/into-iter-impls-length-32.rs:3:#![feature(trusted_len)]
tests/ui/const-generics/array-impls/into-iter-impls-length-33.rs:3:#![feature(trusted_len)]
tests/ui/const-generics/early/macro_rules-braces.stderr:30:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/early/macro_rules-braces.stderr:39:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/early/macro_rules-braces.stderr:48:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/early/macro_rules-braces.stderr:57:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:26:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:35:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:44:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:53:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:62:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:71:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:80:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:89:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:98:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:107:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:116:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:125:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:134:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:143:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:152:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:161:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:170:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:179:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:188:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:197:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-arg-in-const-arg.min.stderr:206:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/transparent-maybeunit-array-wrapper.rs:4:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/transparent-maybeunit-array-wrapper.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/unused_braces.min.fixed:5:#![cfg_attr(full, feature(const_generics))]
tests/ui/const-generics/unused_braces.min.fixed:6:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/types-mismatch-const-args.rs:2:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/types-mismatch-const-args.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/generic_const_exprs/issue-76595.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-76595.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-100217.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-100217.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/subexprs_are_const_evalutable.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/subexprs_are_const_evalutable.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/unused_expr.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/unused_expr.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs:3:#![allow(incomplete_features, unused_parens, unused_braces)]
tests/ui/const-generics/generic_const_exprs/closures.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/closures.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-74634.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-74634.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/cross_crate.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/cross_crate.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/different-fn.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/different-fn.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-102074.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-102074.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/infer-too-generic.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/infer-too-generic.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-90847.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-90847.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-90847.rs:5:#![feature(adt_const_params)]
tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.min.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.min.stderr:26:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_binop_arg_tys.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_binop_arg_tys.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_ty_with_infer_2.rs:2:#![feature(inline_const, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_ty_with_infer_2.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_ty_with_infer_1.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_ty_with_infer_1.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_cast_arg_ty.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_cast_arg_ty.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.rs:1:#![feature(generic_const_exprs, generic_arg_infer)]
tests/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-69654.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-69654.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-84669.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-84669.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/simple_fail.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/simple_fail.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/nested-abstract-consts-1.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/nested-abstract-consts-1.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-72787.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/generic_const_exprs/issue-72787.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/generic_const_exprs/dependence_lint.rs:4:#![cfg_attr(gce, feature(generic_const_exprs))]
tests/ui/const-generics/generic_const_exprs/dependence_lint.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/associated-consts.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/associated-consts.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/obligation-cause.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/obligation-cause.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/typeid-equality-by-subtyping.rs:4:#![feature(const_type_id, const_trait_impl, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/typeid-equality-by-subtyping.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-80561-incorrect-param-env.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-80561-incorrect-param-env.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/let-bindings.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/let-bindings.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:3:#![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:4://~^ WARN the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:5://~^^ WARN the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]
tests/ui/const-generics/generic_const_exprs/eval-try-unify.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/eval-try-unify.stderr:4:LL | #![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/eval-try-unify.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.rs:2://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr:4:LL | #![feature(inline_const, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-2.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-2.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-96699.rs:3:#![allow(dead_code, incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-96699.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/object-safety-ok.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/object-safety-ok.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-80742.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-80742.rs:6:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-105257.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-105257.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-62504.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-62504.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/generic_const_exprs/issue-62504.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr:1:warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr:4:LL | #![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr:10:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr:13:LL | #![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/eval-try-unify.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/eval-try-unify.rs:4://~^ WARNING the feature `generic_const_exprs` is incomplete
tests/ui/const-generics/generic_const_exprs/issue-99647.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-99647.rs:5:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/inline-const-in-const-generic-defaults.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/inline-const-in-const-generic-defaults.rs:4:#![feature(inline_const)]
tests/ui/const-generics/generic_const_exprs/inline-const-in-const-generic-defaults.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/division.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/division.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/unresolved_lifetimes_error.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/unresolved_lifetimes_error.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/object-safety-err-ret.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/object-safety-err-ret.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/no_where_clause.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/no_where_clause.rs:2:#![allow(incomplete_features, unused)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-94293.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-94293.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/impl-bounds.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/impl-bounds.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-85848.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-85848.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-86710.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-86710.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-99705.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-99705.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.rs:4:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/generic_const_exprs/issue-109141.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-109141.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-105608.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-105608.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/less_than.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/less_than.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/eval-privacy.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/eval-privacy.rs:3:#![feature(type_privacy_lints)]
tests/ui/const-generics/generic_const_exprs/eval-privacy.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-82268.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-82268.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/drop_impl.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/drop_impl.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-74713.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/elaborate-trait-pred.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/elaborate-trait-pred.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-73298.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-73298.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/from-sig.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/from-sig.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/from-sig-fail.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/from-sig-fail.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-73899.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-73899.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.rs:4:#![cfg_attr(full, feature(generic_const_exprs, adt_const_params))]
tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/generic_const_exprs/evaluated-to-ambig.rs:6:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/evaluated-to-ambig.rs:7:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-83972.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-83972.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const-block-is-poly.rs:1:#![feature(inline_const, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const-block-is-poly.rs:2://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/const-generics/generic_const_exprs/issue-72787.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/issue-72787.min.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/issue-72787.min.stderr:26:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/issue-72787.min.stderr:35:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:3:#![allow(incomplete_features, unused_braces)]
tests/ui/const-generics/generic_const_exprs/abstract-consts-as-cast-5.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/abstract-consts-as-cast-5.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-89851.rs:4:#![feature(adt_const_params)]
tests/ui/const-generics/generic_const_exprs/issue-89851.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/no_dependence.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/no_dependence.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:3:#![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:4://~^ WARN the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:5://~^^ WARN the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]
tests/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-100360.rs:4:#![feature(adt_const_params)]
tests/ui/const-generics/generic_const_exprs/issue-100360.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-83765.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-83765.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/fn_call.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/fn_call.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/needs_where_clause.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/needs_where_clause.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.stderr:4:LL | #![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.stderr:2:  --> $DIR/feature-gate-generic_const_exprs.rs:1:33
tests/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/generic_const_exprs/issue-102768.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-102768.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/auxiliary/anon_const_non_local.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/auxiliary/anon_const_non_local.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/auxiliary/issue-94287-aux.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/auxiliary/const_evaluatable_lib.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/auxiliary/const_evaluatable_lib.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr:1:warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr:4:LL | #![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr:10:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr:13:LL | #![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/doesnt_unify_evaluatable.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/doesnt_unify_evaluatable.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/dropck_unifies_assoc_consts.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/dropck_unifies_assoc_consts.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/unifies_evaluatable.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/assoc_const_unification/unifies_evaluatable.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/unify-op-with-fn-call.rs:3:#![feature(generic_const_exprs, adt_const_params, const_trait_impl)]
tests/ui/const-generics/generic_const_exprs/unify-op-with-fn-call.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-84408.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/issue-84408.rs:5:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/unop.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/generic_const_exprs/unop.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/generic_const_exprs/issue-94287.stderr:7:   = note: the crate this constant originates from uses `#![feature(generic_const_exprs)]`
tests/ui/const-generics/generic_const_exprs/issue-94287.stderr:8:help: consider enabling this feature
tests/ui/const-generics/generic_const_exprs/issue-94287.stderr:11:LL + #![feature(generic_const_exprs)]
tests/ui/const-generics/transmute-const-param-static-reference.rs:4:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/transmute-const-param-static-reference.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/slice-const-param-mismatch.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/slice-const-param-mismatch.min.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/legacy-const-generics.rs:4:#![feature(rustc_attrs)]
tests/ui/const-generics/raw-ptr-const-param.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/raw-ptr-const-param.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/transmute_no_gate.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/transmute_no_gate.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/const-param-with-additional-obligations.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/const-param-with-additional-obligations.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/overlapping_impls.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/overlapping_impls.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/overlapping_impls.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/adt_const_params/const_param_ty_generic_bounds_do_not_hold.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_generic_bounds_do_not_hold.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/adt_const_params/const_param_ty_bad_empty_array.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_bad_empty_array.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.rs:2:#![feature(adt_const_params, structural_match)]
tests/ui/const-generics/adt_const_params/const_param_ty_good.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_good.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/adt_const_params/const_param_ty_bad.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_bad.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/unused_braces.full.fixed:5:#![cfg_attr(full, feature(const_generics))]
tests/ui/const-generics/unused_braces.full.fixed:6:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/different_generic_args.rs:4:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/different_generic_args.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr:14:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/projection-as-arg-const.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issue-66451.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/issue-66451.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/const-argument-non-static-lifetime.rs:6:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/const-argument-non-static-lifetime.rs:7:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/inhabited-assoc-ty-ice-1.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/inhabited-assoc-ty-ice-1.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issue-46511.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issue-80471.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/issue-80471.rs:2://~^ WARN the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]
tests/ui/const-generics/nested-type.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/nested-type.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr:8:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/const-generics/parser-error-recovery/issue-89013.stderr:20:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/const-generics/slice-const-param.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/slice-const-param.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/unify_with_nested_expr.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/unify_with_nested_expr.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/type-dependent/issue-71348.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/type-dependent/issue-71348.min.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/type-dependent/issue-71348.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/type-dependent/issue-71348.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/type-dependent/const-arg-in-const-arg.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/type-dependent/const-arg-in-const-arg.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/const-param-elided-lifetime.min.stderr:38:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/const-param-elided-lifetime.min.stderr:47:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/const-param-elided-lifetime.min.stderr:56:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/const-param-elided-lifetime.min.stderr:65:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/const-param-elided-lifetime.min.stderr:74:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/raw-ptr-const-param-deref.rs:4:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/raw-ptr-const-param-deref.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/const_trait_fn-issue-88433.rs:3:#![feature(const_trait_impl)]
tests/ui/const-generics/issue-105689.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issue-105689.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/dont-evaluate-array-len-on-err-1.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/dont-evaluate-array-len-on-err-1.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/forbid-non-structural_match-types.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/forbid-non-structural_match-types.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/std/const-generics-range.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/std/const-generics-range.min.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/std/const-generics-range.min.stderr:26:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/std/const-generics-range.min.stderr:35:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/std/const-generics-range.min.stderr:44:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/std/const-generics-range.min.stderr:53:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/std/const-generics-range.rs:4:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/std/const-generics-range.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/parent_generics_of_encoding.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/parent_generics_of_encoding.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/fn-const-param-infer.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/fn-const-param-infer.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issue-70408.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/issue-70408.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs:2:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/core-types.rs:5:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/core-types.rs:6:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issue-80471.stderr:1:warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/issue-80471.stderr:4:LL | #![feature(adt_const_params)]
tests/ui/const-generics/issue-80471.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/condition-in-trait-const-arg.rs:5:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/condition-in-trait-const-arg.rs:6:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/legacy-const-generics-bad.stderr:16:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/defaults/pretty-printing-ast.stdout:1:#![feature(prelude_import)]
tests/ui/const-generics/defaults/complex-generic-default-expr.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/defaults/complex-generic-default-expr.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/defaults/default-annotation.rs:2:#![feature(staged_api)]
tests/ui/const-generics/defaults/default-annotation.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/defaults/default-annotation.rs:7:#![stable(feature = "const_default_test", since="none")]
tests/ui/const-generics/defaults/default-annotation.rs:9:#[unstable(feature = "const_default_stable", issue="none")]
tests/ui/const-generics/defaults/default-annotation.rs:12:#[stable(feature = "const_default_unstable", since="none")]
tests/ui/const-generics/defaults/generic-expr-default-mismatched-types.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/defaults/generic-expr-default-mismatched-types.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/defaults/generic-expr-default-concrete.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/defaults/generic-expr-default-concrete.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/defaults/generic-expr-default.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/defaults/generic-expr-default.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/defaults/complex-generic-default-expr.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/defaults/complex-generic-default-expr.min.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/const-param-type-depends-on-const-param.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/const-param-type-depends-on-const-param.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/two_matching_preds.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/two_matching_preds.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/expose-default-substs-param-env.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/expose-default-substs-param-env.rs:4:#![allow(unused_braces, incomplete_features)]
tests/ui/const-generics/slice-const-param-mismatch.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/slice-const-param-mismatch.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/generic_arg_infer/dont-use-defaults.rs:2:#![feature(generic_arg_infer)]
tests/ui/const-generics/generic_arg_infer/array-repeat-expr.rs:4:#![feature(generic_arg_infer)]
tests/ui/const-generics/generic_arg_infer/infer_arg_and_const_arg.rs:2:#![feature(generic_arg_infer)]
tests/ui/const-generics/generic_arg_infer/issue-91614.rs:1:#![feature(portable_simd)]
tests/ui/const-generics/generic_arg_infer/issue-91614.rs:2:#![feature(generic_arg_infer)]
tests/ui/const-generics/generic_arg_infer/infer-arg-test.rs:1:#![feature(generic_arg_infer)]
tests/ui/const-generics/generic_arg_infer/in-signature.rs:2:#![feature(generic_arg_infer)]
tests/ui/const-generics/float-generic.simple.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/late-bound-vars/in_closure.rs:20:#![feature(generic_const_exprs)]
tests/ui/const-generics/late-bound-vars/in_closure.rs:21:#![allow(incomplete_features)]
tests/ui/const-generics/late-bound-vars/simple.rs:19:#![feature(generic_const_exprs)]
tests/ui/const-generics/late-bound-vars/simple.rs:20:#![allow(incomplete_features)]
tests/ui/const-generics/const-param-elided-lifetime.rs:6:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/const-param-elided-lifetime.rs:7:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/fn_with_two_const_inputs.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/fn_with_two_const_inputs.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/variant-discrimiant-no-generics.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/variant-discrimiant-no-generics.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/invariant.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/invariant.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/inhabited-assoc-ty-ice-2.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/inhabited-assoc-ty-ice-2.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/const-arg-in-const-arg.rs:5:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/const-arg-in-const-arg.rs:6:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/intrinsics-type_name-as-const-argument.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/intrinsics-type_name-as-const-argument.rs:5:#![cfg_attr(full, feature(adt_const_params, generic_const_exprs))]
tests/ui/const-generics/intrinsics-type_name-as-const-argument.rs:7:#![feature(core_intrinsics)]
tests/ui/const-generics/intrinsics-type_name-as-const-argument.rs:8:#![feature(const_type_name)]
tests/ui/const-generics/issue-93647.stderr:23:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/const-generics/const-argument-non-static-lifetime.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/fn_with_two_same_const_inputs.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/fn_with_two_same_const_inputs.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/outer-lifetime-in-const-generic-default.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issue-106419-struct-with-multiple-const-params.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/issue-106419-struct-with-multiple-const-params.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issue-112505-overflow.rs:1:#![feature(transmute_generic_consts)]
tests/ui/const-generics/fn-const-param-call.rs:4:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/fn-const-param-call.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/min_const_generics/complex-types.rs:1:#![feature(never_type)]
tests/ui/const-generics/min_const_generics/complex-expression.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-expression.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-expression.stderr:26:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-expression.stderr:35:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-expression.stderr:44:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-expression.stderr:53:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-expression.stderr:62:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/inferred_const.rs:1:#![feature(generic_arg_infer)]
tests/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/min_const_generics/complex-types.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/min_const_generics/complex-types.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/min_const_generics/complex-types.stderr:26:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/min_const_generics/complex-types.stderr:35:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/min_const_generics/complex-types.stderr:44:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/min_const_generics/complex-types.stderr:53:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/min_const_generics/complex-types.stderr:62:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/ensure_is_evaluatable.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/ensure_is_evaluatable.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/parent_generics_of_encoding_impl_trait.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/parent_generics_of_encoding_impl_trait.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/const-argument-if-length.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/invalid-enum.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/invalid-enum.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issue-97007.rs:3:#![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/issue-97007.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/transmute-fail.rs:1:#![feature(transmute_generic_consts)]
tests/ui/const-generics/transmute-fail.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/transmute-fail.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/const-param-type-depends-on-const-param.min.stderr:24:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/const-param-type-depends-on-const-param.min.stderr:33:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/float-generic.rs:2:#![cfg_attr(adt_const_params, feature(adt_const_params))]
tests/ui/const-generics/float-generic.rs:3:#![cfg_attr(adt_const_params, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-68615-array.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-68366.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-67945-2.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-67945-2.rs:4:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-68104-print-stack-overflow.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-68104-print-stack-overflow.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-68615-array.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-68615-array.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-73120.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-73120.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-87470.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-87470.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-67185-2.stderr:11:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/const-generics/issues/issue-67185-2.stderr:23:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/const-generics/issues/issue-83288.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-83288.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-86033.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-86033.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-88468.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-88468.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-68366.rs:6:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-68366.rs:7:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-74255.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-71202.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-71202.rs:2:#![allow(incomplete_features, const_evaluatable_unchecked)]
tests/ui/const-generics/issues/issue-67945-3.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-100313.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-100313.rs:2:#![feature(const_mut_refs)]
tests/ui/const-generics/issues/issue-100313.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/issues/issue-84659.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-84659.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-80062.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-67945-3.rs:6:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-67945-3.rs:7:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-71381.rs:2:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-71381.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-87964.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-87964.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-90318.rs:1:#![feature(const_type_id)]
tests/ui/const-generics/issues/issue-90318.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-90318.rs:3:#![feature(core_intrinsics)]
tests/ui/const-generics/issues/issue-90318.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-74101.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-74101.min.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-73491.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-73491.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-66596-impl-trait-for-str-const-arg.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/issues/issue-66596-impl-trait-for-str-const-arg.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-74950.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-74950.min.stderr:17:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-74950.min.stderr:26:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-74950.min.stderr:35:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-74950.min.stderr:44:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-74101.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-74101.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-97278.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/issues/issue-97278.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-87076.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/issues/issue-87076.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-67945-4.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-67739.rs:2:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-67739.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-86530.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-86530.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-71611.rs:2:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-71611.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-71547.rs:3:#![feature(adt_const_params)]
tests/ui/const-generics/issues/issue-71547.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-67945-1.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-67945-1.min.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-72352.rs:2:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-72352.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-62878.min.stderr:16:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-67375.rs:2:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-67375.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-80375.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-98629.rs:1:#![feature(const_trait_impl)]
tests/ui/const-generics/issues/issue-86535.rs:2:#![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/issues/issue-86535.rs:3:#![allow(incomplete_features, unused_variables)]
tests/ui/const-generics/issues/issue-92186.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-92186.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-74255.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-74255.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-71169.rs:2:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-71169.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-73727-static-reference-array-const-param.rs:6:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-73727-static-reference-array-const-param.rs:7:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-86535-2.rs:2:#![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/issues/issue-86535-2.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-88997.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-88997.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-73491.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-82956.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-82956.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-90364.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-90364.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-79674.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-79674.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-99641.rs:1:#![feature(adt_const_params)]
tests/ui/const-generics/issues/issue-99641.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-89146.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-89146.rs:4:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-88119.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-88119.rs:4:#![feature(const_trait_impl, generic_const_exprs)]
tests/ui/const-generics/issues/issue-73727-static-reference-array-const-param.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-89334.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-89334.rs:4:#![allow(unused_braces, incomplete_features)]
tests/ui/const-generics/issues/issue-89320.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-89320.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-85031-2.rs:6:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-85031-2.rs:7:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-56445-1.min.stderr:16:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-89304.rs:3:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-89304.rs:4:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-105037.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-105037.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-73260.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-73260.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-75047.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-75047.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-63322-forbid-dyn.rs:2:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-63322-forbid-dyn.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-67945-4.rs:5:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-67945-4.rs:6:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-71169.min.stderr:16:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-67375.min.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-75047.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-83249.rs:1:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-83249.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-68615-adt.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-68615-adt.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-62878.rs:2:#![cfg_attr(full, feature(adt_const_params, generic_arg_infer))]
tests/ui/const-generics/issues/issue-62878.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-90455.rs:1:#![feature(generic_const_exprs, adt_const_params)]
tests/ui/const-generics/issues/issue-90455.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-68615-adt.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/issues/issue-71382.rs:2:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-71382.rs:3:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-74950.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-74950.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-76701-ty-param-in-const.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-76701-ty-param-in-const.stderr:17:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/const-generics/issues/issue-83765.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-83765.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-67945-1.rs:2:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/issue-67945-1.rs:3:#![cfg_attr(full, feature(generic_const_exprs))]
tests/ui/const-generics/issues/issue-72845.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-72845.rs:2:#![feature(specialization)]
tests/ui/const-generics/issues/issue-72845.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-56445-1.rs:3:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/const-generics/issues/issue-56445-1.rs:4:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/issues/auxiliary/impl-const.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/issues/issue-105821.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/issues/issue-105821.rs:4:#![feature(adt_const_params, generic_const_exprs)]
tests/ui/const-generics/transmute-const-param-static-reference.min.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/different_generic_args_array.rs:2:#![feature(adt_const_params)]
tests/ui/const-generics/different_generic_args_array.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/assoc_const_eq_diagnostic.rs:1:#![feature(associated_const_equality)]
tests/ui/const-generics/nested-type.min.stderr:33:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/const-generics/auxiliary/generics_of_parent_impl_trait.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/auxiliary/generics_of_parent_impl_trait.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/auxiliary/legacy-const-generics.rs:1:#![feature(rustc_attrs)]
tests/ui/const-generics/auxiliary/generics_of_parent.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/auxiliary/generics_of_parent.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/unify-fixpoint.rs:2:#![feature(generic_const_exprs)] //~ WARN the feature `generic_const_exprs` is incomplete
tests/ui/const-generics/occurs-check/unused-substs-3.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unused-substs-3.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/unused-substs-2.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unused-substs-2.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/unused-substs-1.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unused-substs-1.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/unify-fixpoint.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/const-generics/occurs-check/unify-fixpoint.stderr:4:LL | #![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unify-fixpoint.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/const-generics/occurs-check/unused-substs-5.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unused-substs-5.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/unused-substs-4.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unused-substs-4.rs:2:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/bind-param.rs:2:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/bind-param.rs:3:#![allow(incomplete_features)]
tests/ui/const-generics/occurs-check/unify-n-nplusone.rs:1:#![feature(generic_const_exprs)]
tests/ui/const-generics/occurs-check/unify-n-nplusone.rs:2:#![allow(incomplete_features)]
tests/ui/cleanup-rvalue-scopes.rs:9:#![feature(box_patterns)]
tests/ui/tool_lints_2018_preview.rs:3:#![feature(rust_2018_preview)]
tests/ui/explore-issue-38412.rs:5:// that the compiler is letting in uses of declared feature-gated
tests/ui/explore-issue-38412.rs:6:// stuff but still rejecting uses of undeclared feature-gated stuff.
tests/ui/explore-issue-38412.rs:7:#![feature(unstable_declared)]
tests/ui/explore-issue-38412.rs:21:    //~^^ ERROR use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.rs:28:    r.a_unstable_undeclared_pub; //~ ERROR use of unstable library feature
tests/ui/explore-issue-38412.rs:35:    t.2;                         //~ ERROR use of unstable library feature
tests/ui/explore-issue-38412.rs:42:    r.unstable_undeclared_trait_method(); //~ ERROR use of unstable library feature
tests/ui/explore-issue-38412.rs:46:    r.unstable_undeclared();              //~ ERROR use of unstable library feature
tests/ui/explore-issue-38412.rs:55:    t.unstable_undeclared_trait_method(); //~ ERROR use of unstable library feature
tests/ui/explore-issue-38412.rs:59:    t.unstable_undeclared();              //~ ERROR use of unstable library feature
tests/ui/realloc-16687.rs:7:#![feature(allocator_api)]
tests/ui/realloc-16687.rs:8:#![feature(slice_ptr_get)]
tests/ui/enum/issue-67945-2.rs:1:#![feature(type_ascription)]
tests/ui/treat-err-as-bug/delay_span_bug.rs:9:#![feature(rustc_attrs)]
tests/ui/associated-item/associated-item-duplicate-bounds.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/wasm/simd-to-array-80108.rs:4:#![feature(repr_simd)]
tests/ui/wasm/wasm-import-module.rs:1:#![feature(link_cfg)]
tests/ui/definition-reachable/private-non-types.rs:6:#![feature(decl_macro, staged_api)]
tests/ui/definition-reachable/private-non-types.rs:7:#![stable(feature = "test", since = "1.0.0")]
tests/ui/definition-reachable/private-non-types.rs:12:    #[stable(feature = "test", since = "1.0.0")]
tests/ui/definition-reachable/private-non-types.rs:18:#[stable(feature = "test", since = "1.0.0")]
tests/ui/definition-reachable/auxiliary/private-use-macro.rs:1:#![feature(decl_macro)]
tests/ui/definition-reachable/auxiliary/field-method-macro.rs:1:#![feature(decl_macro)]
tests/ui/definition-reachable/auxiliary/nested-fn-macro.rs:1:#![feature(decl_macro)]
tests/ui/definition-reachable/private-types.rs:5:#![feature(decl_macro, staged_api)]
tests/ui/definition-reachable/private-types.rs:6:#![stable(feature = "test", since = "1.0.0")]
tests/ui/definition-reachable/private-types.rs:16:#[stable(feature = "test", since = "1.0.0")]
tests/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:4:#![feature(test)]
tests/ui/test-attrs/test-panic-abort.rs:14:#![feature(test)]
tests/ui/test-attrs/issue-12997-1.rs:5:#![feature(test)]
tests/ui/test-attrs/test-runner-hides-buried-main.rs:4:#![feature(rustc_attrs)]
tests/ui/test-attrs/issue-34932.rs:4:#![feature(rustc_attrs)] // Test that this is allowed on stable/beta
tests/ui/test-attrs/issue-34932.rs:5:#![feature(iter_arith_traits)] // Test that this is not unused
tests/ui/test-attrs/issue-34932.rs:6:#![deny(unused_features)]
tests/ui/test-attrs/decl-macro-test.rs:6:#![feature(decl_macro)]
tests/ui/test-attrs/custom-test-frameworks/issue-107454.rs:3:#![feature(custom_test_frameworks)]
tests/ui/test-attrs/test-main-not-dead-attr.rs:4:#![feature(rustc_attrs)]
tests/ui/test-attrs/test-runner-hides-start.rs:4:#![feature(start)]
tests/ui/test-attrs/issue-12997-2.rs:5:#![feature(test)]
tests/ui/wait-forked-but-failed-child.rs:8:#![feature(rustc_private)]
tests/ui/runtime/stdout-during-shutdown.rs:9:#![feature(rustc_private)]
tests/ui/runtime/running-with-no-runtime.rs:7:#![feature(start)]
tests/ui/runtime/out-of-stack.rs:11:#![feature(core_intrinsics)]
tests/ui/runtime/out-of-stack.rs:12:#![feature(rustc_private)]
tests/ui/runtime/signal-alternate-stack-cleanup.rs:12:#![feature(rustc_private)]
tests/ui/runtime/native-print-no-runtime.rs:3:#![feature(start)]
tests/ui/ffi_const.rs:1:#![feature(ffi_const)]
tests/ui/check-static-values-constraints.stderr:39:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/cross/cross-fn-cache-hole.stderr:8:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/annotate-snippet/multispan.rs:4:#![feature(proc_macro_hygiene)]
tests/ui/annotate-snippet/auxiliary/multispan.rs:5:#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]
tests/ui/rfcs/rfc-2497-if-let-chains/then-else-blocks.rs:3:#![feature(if_let_guard, let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs:1:#![feature(let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/issue-93150.stderr:8:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/issue-93150.stderr:18:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/ast-pretty-check.stdout:1:#![feature(prelude_import)]
tests/ui/rfcs/rfc-2497-if-let-chains/disallowed-positions.rs:20:#![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.
tests/ui/rfcs/rfc-2497-if-let-chains/irrefutable-lets.rs:4:#![feature(if_let_guard, let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/issue-92145.rs:3:#![feature(let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/ast-validate-guards.rs:1:#![feature(let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.rs:3:// Here we test feature gating for ´let_chains`.
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:2:  --> $DIR/feature-gate.rs:55:20
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:8:  --> $DIR/feature-gate.rs:45:17
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:14:  --> $DIR/feature-gate.rs:58:15
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:23:  --> $DIR/feature-gate.rs:50:10
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:29:  --> $DIR/feature-gate.rs:14:16
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:35:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:38:  --> $DIR/feature-gate.rs:17:8
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:44:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:47:  --> $DIR/feature-gate.rs:20:8
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:53:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:56:  --> $DIR/feature-gate.rs:23:8
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:62:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:65:  --> $DIR/feature-gate.rs:23:21
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:71:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:74:  --> $DIR/feature-gate.rs:32:19
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:80:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:83:  --> $DIR/feature-gate.rs:35:11
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:89:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:92:  --> $DIR/feature-gate.rs:38:11
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:98:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:101:  --> $DIR/feature-gate.rs:55:20
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:107:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:110:  --> $DIR/feature-gate.rs:45:17
tests/ui/rfcs/rfc-2497-if-let-chains/feature-gate.stderr:116:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs:3:#![feature(let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs:1:#![feature(let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/issue-99938.rs:3:#![feature(let_chains)]
tests/ui/rfcs/rfc-2497-if-let-chains/issue-90722.rs:3:#![feature(let_chains)]
tests/ui/rfcs/rfc-2457-non-ascii-idents/extern_block_nonascii_forbidden.rs:1:#![feature(extern_types)]
tests/ui/rfcs/rfc-2093-infer-outlives/self-structs.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/nested-regions.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/explicit-union.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/nested-structs.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/cross-crate.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/enum.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/explicit-projection.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/projection.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/explicit-enum.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/nested-union.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/reference.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/explicit-dyn.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/nested-enum.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/explicit-struct.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2093-infer-outlives/self-dyn.rs:1:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2397-do-not-recommend/unstable-feature.rs:5://~^ ERROR the `#[do_not_recommend]` attribute is an experimental feature
tests/ui/rfcs/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.stderr:2:  --> $DIR/feature-gate-do_not_recommend.rs:19:11
tests/ui/rfcs/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.stderr:11:  --> $DIR/feature-gate-do_not_recommend.rs:13:14
tests/ui/rfcs/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.stderr:18:  --> $DIR/feature-gate-do_not_recommend.rs:16:13
tests/ui/rfcs/rfc-2397-do-not-recommend/unstable-feature.stderr:1:error[E0658]: the `#[do_not_recommend]` attribute is an experimental feature
tests/ui/rfcs/rfc-2397-do-not-recommend/unstable-feature.stderr:2:  --> $DIR/unstable-feature.rs:4:1
tests/ui/rfcs/rfc-2397-do-not-recommend/unstable-feature.stderr:8:   = help: add `#![feature(do_not_recommend)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.rs:1:#![feature(do_not_recommend)]
tests/ui/rfcs/rfc-2397-do-not-recommend/incorrect-locations.rs:1:#![feature(do_not_recommend)]
tests/ui/rfcs/rfc-1789-as-cell/from-mut.rs:3:#![feature(as_array_of_cells)]
tests/ui/rfcs/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs:2:// rust-lang/rust#2329), that starts passing with this feature in
tests/ui/rfcs/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs:1:#![feature(if_let_guard)]
tests/ui/rfcs/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs:1:#![feature(if_let_guard)]
tests/ui/rfcs/rfc-2151-raw-identifiers/macros.rs:2:#![feature(decl_macro)]
tests/ui/rfcs/rfc-2294-if-let-guard/typeck.rs:1:#![feature(if_let_guard)]
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:2:  --> $DIR/feature-gate.rs:10:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:8:  --> $DIR/feature-gate.rs:15:18
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:14:  --> $DIR/feature-gate.rs:28:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:20:  --> $DIR/feature-gate.rs:33:24
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:26:  --> $DIR/feature-gate.rs:38:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:32:  --> $DIR/feature-gate.rs:38:31
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:38:  --> $DIR/feature-gate.rs:46:42
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:44:  --> $DIR/feature-gate.rs:46:55
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:50:  --> $DIR/feature-gate.rs:46:68
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:56:  --> $DIR/feature-gate.rs:78:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:62:  --> $DIR/feature-gate.rs:82:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:68:  --> $DIR/feature-gate.rs:92:15
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:77:  --> $DIR/feature-gate.rs:71:10
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:83:  --> $DIR/feature-gate.rs:10:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:90:  --> $DIR/feature-gate.rs:10:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:96:  --> $DIR/feature-gate.rs:15:18
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:103:  --> $DIR/feature-gate.rs:15:18
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:109:  --> $DIR/feature-gate.rs:28:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:116:  --> $DIR/feature-gate.rs:28:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:122:  --> $DIR/feature-gate.rs:33:24
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:129:  --> $DIR/feature-gate.rs:33:24
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:135:  --> $DIR/feature-gate.rs:38:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:142:  --> $DIR/feature-gate.rs:38:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:148:  --> $DIR/feature-gate.rs:38:31
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:155:  --> $DIR/feature-gate.rs:38:31
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:161:  --> $DIR/feature-gate.rs:46:42
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:168:  --> $DIR/feature-gate.rs:46:42
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:174:  --> $DIR/feature-gate.rs:46:55
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:181:  --> $DIR/feature-gate.rs:46:42
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:187:  --> $DIR/feature-gate.rs:46:68
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:194:  --> $DIR/feature-gate.rs:46:42
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:200:  --> $DIR/feature-gate.rs:78:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:207:  --> $DIR/feature-gate.rs:78:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:213:  --> $DIR/feature-gate.rs:82:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:220:  --> $DIR/feature-gate.rs:82:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:226:  --> $DIR/feature-gate.rs:7:12
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:232:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:236:  --> $DIR/feature-gate.rs:20:12
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:242:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:246:  --> $DIR/feature-gate.rs:24:12
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:252:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:256:  --> $DIR/feature-gate.rs:46:12
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:262:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:266:  --> $DIR/feature-gate.rs:61:12
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:272:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:276:  --> $DIR/feature-gate.rs:88:12
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:282:   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:286:  --> $DIR/feature-gate.rs:10:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:292:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:295:  --> $DIR/feature-gate.rs:15:18
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:301:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:304:  --> $DIR/feature-gate.rs:20:23
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:310:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:313:  --> $DIR/feature-gate.rs:24:15
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:319:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:322:  --> $DIR/feature-gate.rs:28:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:328:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:331:  --> $DIR/feature-gate.rs:33:24
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:337:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:340:  --> $DIR/feature-gate.rs:38:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:346:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:349:  --> $DIR/feature-gate.rs:38:31
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:355:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:358:  --> $DIR/feature-gate.rs:46:15
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:364:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:367:  --> $DIR/feature-gate.rs:46:28
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:373:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:376:  --> $DIR/feature-gate.rs:46:42
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:382:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:385:  --> $DIR/feature-gate.rs:46:55
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:391:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:394:  --> $DIR/feature-gate.rs:46:68
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:400:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:403:  --> $DIR/feature-gate.rs:61:15
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:409:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:412:  --> $DIR/feature-gate.rs:78:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:418:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:421:  --> $DIR/feature-gate.rs:82:16
tests/ui/rfcs/rfc-2294-if-let-guard/feature-gate.stderr:427:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2294-if-let-guard/bindings.rs:1:#![feature(if_let_guard)]
tests/ui/rfcs/rfc-2294-if-let-guard/warns.rs:1:#![feature(if_let_guard)]
tests/ui/rfcs/rfc-2294-if-let-guard/run-pass.rs:3:#![feature(if_let_guard)]
tests/ui/rfcs/rfc-2008-non-exhaustive/omitted-patterns.rs:3:#![feature(non_exhaustive_omitted_patterns_lint, unstable_test_feature)]
tests/ui/rfcs/rfc-2008-non-exhaustive/omitted-patterns.rs:148:    // Ok: the feature is on and all variants are matched
tests/ui/rfcs/rfc-2008-non-exhaustive/omitted-patterns.rs:157:    // Ok: the feature is on and both variants are matched
tests/ui/rfcs/rfc-2008-non-exhaustive/omitted-patterns.rs:176:    // OK: both unstable fields are matched with feature on
tests/ui/rfcs/rfc-2008-non-exhaustive/omitted-patterns.rs:184:    // OK: both unstable and stable fields are matched with feature on
tests/ui/rfcs/rfc-2008-non-exhaustive/stable-omitted-patterns.rs:4:#![feature(non_exhaustive_omitted_patterns_lint)]
tests/ui/rfcs/rfc-2008-non-exhaustive/stable-omitted-patterns.rs:28:    // since there is no stable variants and the feature is off
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match.rs:2:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_same_crate.rs:1:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs:1:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs:31:// indirection from the defining crate will not compile without `#![feature(exhaustive_patterns)]`.
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs:4:#![feature(exhaustive_patterns)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs:5:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs:35:// will compile. In particular, this enables the `exhaustive_patterns` feature as this can
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/patterns.rs:4:#![feature(exhaustive_patterns)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.rs:2:#![feature(exhaustive_patterns)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.rs:3:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match.rs:2:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.rs:1:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs:3:#![feature(exhaustive_patterns)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs:4:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs:18:// will not compile. In particular, this enables the `exhaustive_patterns` feature as this can
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs:4:#![feature(exhaustive_patterns)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs:5:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs:27:// will compile. In particular, this enables the `exhaustive_patterns` feature as this can
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/coercions.rs:2:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/issue-65157-repeated-match-arm.rs:3:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs:3:#![feature(exhaustive_patterns)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs:4:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs:19:// `exhaustive_patterns` feature as this can change the branch used in the compiler to determine
tests/ui/rfcs/rfc-2008-non-exhaustive/uninhabited/auxiliary/uninhabited.rs:2:#![feature(never_type)]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:1:#![feature(staged_api)]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:2:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:4:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:7:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:9:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:11:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:15:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:18:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:20:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:25:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:32:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:35:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:37:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:39:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:43:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:46:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:48:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/rfcs/rfc-2008-non-exhaustive/auxiliary/unstable.rs:53:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:3:#![feature(type_changing_struct_update)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:4:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/lifetime-update.rs:1:#![feature(type_changing_struct_update)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/lifetime-update.rs:2:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/type-generic-update.rs:1:#![feature(type_changing_struct_update)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/type-generic-update.rs:2:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/coerce-in-base-expr.rs:3:#![feature(type_changing_struct_update)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/coerce-in-base-expr.rs:4:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2528-type-changing-struct-update/feature-gate.stderr:2:  --> $DIR/feature-gate.rs:22:11
tests/ui/rfcs/rfc-2528-type-changing-struct-update/feature-gate.stderr:8:   = help: add `#![feature(type_changing_struct_update)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2528-type-changing-struct-update/feature-gate.stderr:11:  --> $DIR/feature-gate.rs:22:11
tests/ui/rfcs/rfc-2005-default-binding-mode/box.rs:3:#![feature(box_patterns)]
tests/ui/rfcs/rfc-1717-dllimport/rename-modifiers.rs:4:#![feature(native_link_modifiers_as_needed)]
tests/ui/rfcs/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr:3:help: skipping check that does not even have a feature gate
tests/ui/rfcs/rfc-2091-track-caller/error-with-start.rs:1:#![feature(start)]
tests/ui/rfcs/rfc-2091-track-caller/const-caller-location.rs:5:#![feature(const_caller_location)]
tests/ui/rfcs/rfc-2091-track-caller/error-with-naked.rs:2:#![feature(naked_functions)]
tests/ui/rfcs/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.rs:9:#![feature(core_intrinsics, const_caller_location)]
tests/ui/rfcs/rfc-2091-track-caller/tracked-closure.rs:3:#![feature(stmt_expr_attributes)]
tests/ui/rfcs/rfc-2091-track-caller/tracked-closure.rs:4:#![feature(closure_track_caller)]
tests/ui/rfcs/rfc-2091-track-caller/tracked-closure.rs:5:#![feature(generator_trait)]
tests/ui/rfcs/rfc-2091-track-caller/tracked-closure.rs:6:#![feature(generators)]
tests/ui/rfcs/rfc-1937-termination-trait/issue-103052-2.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/rfcs/rfc-1937-termination-trait/issue-103052-2.rs:2:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-1937-termination-trait/termination-trait-in-test-should-panic.rs:3:#![feature(test)]
tests/ui/rfcs/rfc-1937-termination-trait/termination-trait-in-test.rs:6:#![feature(test)]
tests/ui/rfcs/rfc-2027-object-safe-for-dispatch/manual-self-impl-for-unsafe-obj.rs:5:#![feature(object_safe_for_dispatch)]
tests/ui/rfcs/rfc-2027-object-safe-for-dispatch/static-dispatch-unsafe-object.rs:6:#![feature(object_safe_for_dispatch)]
tests/ui/rfcs/rfc-2027-object-safe-for-dispatch/downcast-unsafe-trait-objects.rs:6:#![feature(object_safe_for_dispatch)]
tests/ui/rfcs/rfc-2565-param-attrs/param-attrs-pretty.rs:5:#![feature(c_variadic)]
tests/ui/rfcs/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs:3:#![feature(c_variadic)]
tests/ui/rfcs/rfc-2565-param-attrs/param-attrs-cfg.rs:4:#![feature(async_closure)]
tests/ui/rfcs/rfc-2632-const-trait-impl/impl-with-default-fn-fail.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-const-specialized.rs:6:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-const-specialized.rs:7:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs:6:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs:7:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-impl-non-const-specialized-impl.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-impl-non-const-specialized-impl.rs:4:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs:4:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs:5:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs:6:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/default-keyword.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/default-keyword.rs:4:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.rs:6:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.rs:7:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs:7:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs:8:#![feature(min_specialization)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs:9:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-use.rs:2:#![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-gate.stderr:1:error[E0658]: use of unstable library feature 'derive_const'
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-gate.stderr:7:   = help: add `#![feature(derive_const)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-gate.rs:1:#[derive_const(Default)] //~ ERROR use of unstable library feature
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.rs:2:#![feature(derive_const)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-use.stderr:1:error[E0635]: unknown feature `const_cmp`
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-use.stderr:4:LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-use.stderr:7:error[E0635]: unknown feature `const_default_impls`
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-use.stderr:10:LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-with-params.rs:3:#![feature(derive_const)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const_derives/derive-const-with-params.rs:4:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/hir-const-check.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/match-non-const-eq.rs:2:#![cfg_attr(gated, feature(const_trait_impl))]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-closure-trait-method.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/std-impl-gate.stock.stderr:8:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/const-closures.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/impl-tilde-const-trait.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-88155.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-twice.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api-user-crate.stderr:8:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/cross-crate.stock.stderr:8:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs:2:#![feature(associated_type_bounds)]
tests/ui/rfcs/rfc-2632-const-trait-impl/do-not-const-check.rs:2:#![feature(const_trait_impl, rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-100222.rs:3:#![feature(const_trait_impl, associated_type_defaults, const_mut_refs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-default-method-bodies.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/non-const-op-in-closure-in-const.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs:2:#![feature(generic_arg_infer)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs:3:#![feature(generic_const_exprs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs:4:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-closure-trait-method-fail.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/super-traits-fail.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-92230-wf-super-trait-env.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:3:#![feature(staged_api)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:4:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:5:#![feature(const_t_try)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:6:#![feature(const_try)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:7:#![feature(try_trait_v2)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:9:#![stable(feature = "foo", since = "1.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:13:#[stable(feature = "foo", since = "1.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:16:#[stable(feature = "foo", since = "1.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:17:#[rustc_const_unstable(feature = "const_t_try", issue = "none")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:31:#[stable(feature = "foo", since = "1.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:32:#[rustc_const_unstable(feature = "const_t_try", issue = "none")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:39:#[stable(feature = "foo", since = "1.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:42:    #[stable(feature = "foo", since = "1.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-default-body-stability.rs:46:        // Must enable unstable features to call this trait fn in const contexts.
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-where-clause-run.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-92111.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-const-trait-method-fail.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-impl-norecover.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-impl-requires-const-trait.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop.rs:4:#![feature(const_mut_refs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop.rs:5:#![feature(never_type)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop.rs:6:#![cfg_attr(precise, feature(const_precise_live_drops))]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-fail-2.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-fail-2.rs:3:#![feature(const_mut_refs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-fail-2.rs:4:#![cfg_attr(precise, feature(const_precise_live_drops))]
tests/ui/rfcs/rfc-2632-const-trait-impl/non-const-op-const-closure-non-const-outer.rs:1:#![feature(const_closures, const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/non-const-op-const-closure-non-const-outer.rs:2:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.stable.stderr:18:LL | |     // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.stable.stderr:20:LL | |     // ^ fails, because the `foo` feature is not active
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-79450.rs:1:#![feature(const_fmt_arguments_new)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-79450.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specializing-constness-2.rs:1:#![feature(const_trait_impl, min_specialization, rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/assoc-type.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde-const-syntax.rs:4:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/gate.stderr:8:   = help: add `#![feature(const_closures)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/gate.stderr:17:   = help: add `#![feature(const_closures)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/assoc-type-const-bound-usage.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.gated.stderr:2:  --> $DIR/feature-gate.rs:14:1
tests/ui/rfcs/rfc-2632-const-trait-impl/const-impl-recovery.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-102985.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/cross-crate-default-method-body-is-const.rs:6:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/default-method-body-is-const-with-staged-api.rs:8:#![feature(staged_api)]
tests/ui/rfcs/rfc-2632-const-trait-impl/default-method-body-is-const-with-staged-api.rs:9:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/default-method-body-is-const-with-staged-api.rs:10:#![stable(since = "1", feature = "foo")]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-generic-method-fail.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-closure-parse-not-item.rs:3:#![feature(const_trait_impl, const_closures)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-closure-parse-not-item.rs:4:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2632-const-trait-impl/super-traits.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/match-non-const-eq.stock.stderr:9:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/const-impl-trait.rs:2:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-impl-trait.rs:3:#![feature(
tests/ui/rfcs/rfc-2632-const-trait-impl/tilde_const_on_impl_bound.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.unstable.stderr:7:   = help: add `#![feature(foo)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.unstable.stderr:15:   = help: add `#![feature(foo)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/super-traits-fail-2.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.rs:4:#![cfg_attr(gated, feature(const_trait_impl))]
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.rs:5:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/std-impl-gate.gated.stderr:1:error[E0635]: unknown feature `const_default_impls`
tests/ui/rfcs/rfc-2632-const-trait-impl/std-impl-gate.gated.stderr:4:LL | #![cfg_attr(gated, feature(const_trait_impl, const_default_impls))]
tests/ui/rfcs/rfc-2632-const-trait-impl/cross-crate.rs:3:#![cfg_attr(any(gated, gatednc), feature(const_trait_impl))]
tests/ui/rfcs/rfc-2632-const-trait-impl/super-traits-fail-3.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/std-impl-gate.rs:1:// This tests feature gates for const impls in the standard library.
tests/ui/rfcs/rfc-2632-const-trait-impl/std-impl-gate.rs:6:#![cfg_attr(gated, feature(const_trait_impl, const_default_impls))]
tests/ui/rfcs/rfc-2632-const-trait-impl/impl-with-default-fn-pass.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/generic-bound.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-where-clause.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-90052.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/attr-misuse.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call.rs:3:#![feature(const_closures, const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call.rs:4:#![allow(incomplete_features)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-and-non-const-impl.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/inherent-impl.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-where-clause-self-referential.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-generic-method-chain.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/syntax.rs:4:#![feature(const_trait_bound_opt_out)]
tests/ui/rfcs/rfc-2632-const-trait-impl/syntax.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-impl-trait.stderr:1:error[E0635]: unknown feature `const_cmp`
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-bound.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-bound.rs:4:#![feature(const_precise_live_drops)]
tests/ui/rfcs/rfc-2632-const-trait-impl/inherent-impl-const-bounds.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/effects/helloworld.rs:6:#![feature(const_trait_impl, effects, rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-generic-method-pass.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-102156.rs:1:#![feature(allocator_api)]
tests/ui/rfcs/rfc-2632-const-trait-impl/issue-102156.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/without-tilde.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/do-not-const-check-override.rs:2:#![feature(const_trait_impl, rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/nested-closure.rs:3:#![feature(const_trait_impl, lazy_cell)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/hir-const-check.stderr:8:   = help: add `#![feature(const_try)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:3:#![cfg_attr(unstable, feature(unstable))] // The feature from the ./auxiliary/staged-api.rs file.
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:4:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:5:#![feature(staged_api)]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:6:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:16:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:17:#[cfg_attr(unstable, rustc_const_unstable(feature = "foo", issue = "none"))]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:18:#[cfg_attr(stable, rustc_const_stable(feature = "foo", since = "1.0.0"))]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:30:#[unstable(feature = "none", issue = "none")]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:33:    // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:37:    // ^ fails, because the `foo` feature is not active
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:40:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:41:#[cfg_attr(unstable, rustc_const_unstable(feature = "foo", issue = "none"))]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:45:    // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:49:    // ^ fails, because the `foo` feature is not active
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:52:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/staged-api.rs:53:#[rustc_const_stable(feature = "cheese", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.stock.stderr:2:  --> $DIR/feature-gate.rs:10:6
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.stock.stderr:8:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.stock.stderr:11:  --> $DIR/feature-gate.rs:8:1
tests/ui/rfcs/rfc-2632-const-trait-impl/feature-gate.stock.stderr:17:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/specializing-constness.rs:1:#![feature(const_trait_impl, min_specialization, rustc_attrs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-generic-in-impl.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/function-pointer-does-not-require-const.rs:2:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-fail.rs:4:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-fail.rs:5:#![feature(const_mut_refs)]
tests/ui/rfcs/rfc-2632-const-trait-impl/const-drop-fail.rs:6:#![cfg_attr(precise, feature(const_precise_live_drops))]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:1:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:2:#![feature(staged_api)]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:5:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:8:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:12:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:15:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/rfcs/rfc-2632-const-trait-impl/auxiliary/staged-api.rs:16:#[rustc_const_unstable(feature = "unstable", issue = "none")]
tests/ui/rfcs/rfc-2632-const-trait-impl/trait-where-clause-const.rs:5:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs:3:#![feature(const_trait_impl)]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:5:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:7:#[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:10:#[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:11:#[target_feature(enable = "bmi2")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:17:    #[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:18:    #[target_feature(enable = "bmi2")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:24:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:25:    //[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:27:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:28:    //[thir]~^^ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:30:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:31:    //[thir]~^^ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:34:#[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:37:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:38:    //[thir]~^^ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:40:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:41:    //[thir]~^^ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:44:#[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:47:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:48:    //[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:50:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:51:    //[thir]~^^ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:53:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:54:    //[thir]~^^ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:57:#[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:58:#[target_feature(enable = "bmi2")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:61:    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:62:    //[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:66://[mir]~^ ERROR call to function with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs:67://[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe
tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr:1:error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions
tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr:2:  --> $DIR/feature-gate-target_feature_11.rs:3:1
tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr:4:LL | #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr:10:   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.rs:3:#![feature(start)]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.rs:4:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.rs:7:#[target_feature(enable = "avx2")]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.rs:8://~^ ERROR `start` is not allowed to have `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.rs:3:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.rs:13:    #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.rs:17:    #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.rs:22:    #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:1:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:5:   |     ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:7:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:9:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:13:   |     ^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:15:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:17:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:21:   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:23:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:25:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:29:   |     ^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:31:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:33:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:37:   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:39:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:41:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:45:   |     ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:47:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:49:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:53:   |     ^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:55:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:57:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:61:   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:63:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:65:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:69:   |     ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:71:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:73:error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:77:   |                  ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr:79:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.rs:3:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.rs:5:#[target_feature(enable = "avx2")]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.rs:7://~^ ERROR `main` function is not allowed to have `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr:4:LL | #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr:5:   | ---------------------------------- `#[target_feature]` added here
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr:8:   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr:15:   = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr:11:   = note: `#[target_feature]` functions do not implement the `Fn` traits
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr:28:   = note: `#[target_feature]` functions do not implement the `Fn` traits
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr:45:   = note: `#[target_feature]` functions do not implement the `Fn` traits
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr:62:   = note: `#[target_feature]` functions do not implement the `Fn` traits
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr:79:   = note: `#[target_feature]` functions do not implement the `Fn` traits
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr:96:   = note: `#[target_feature]` functions do not implement the `Fn` traits
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:2:// - applying `#[target_feature]` to safe functions is allowed
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:3:// - calling functions with `#[target_feature]` is allowed in
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:4://   functions which have (at least) the same features
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:5:// - calling functions with `#[target_feature]` is allowed in
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:7:// - functions with `#[target_feature]` can coerce to unsafe fn pointers
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:14:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:16:#[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:19:#[cfg(target_feature = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:24:#[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:29:#[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:30:#[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:38:    #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs:45:    if cfg!(target_feature = "sse2") {
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.rs:3:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.rs:5:#[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.rs:8:#[target_feature(enable = "avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:1:error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:5:   |     ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:7:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:9:error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:13:   |     ^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:15:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:17:error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:21:   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:23:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:25:error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:29:   |     ^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:31:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:33:error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:37:   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:39:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:41:error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:45:   |     ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:47:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:49:error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:53:   |     ^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:55:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:57:error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:61:   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:63:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:65:error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:69:   |     ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:71:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:73:error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:77:   |                  ^^^^^^ call to function with `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr:79:   = note: can only be called if the required target features are available
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr:1:error: `#[target_feature(..)]` cannot be applied to safe trait method
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr:4:LL |     #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr:10:error: `#[target_feature(..)]` cannot be applied to safe trait method
tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr:13:LL |     #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.stderr:1:error: `start` is not allowed to have `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.stderr:2:  --> $DIR/issue-108645-target-feature-on-start.rs:7:1
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.stderr:4:LL | #[target_feature(enable = "avx2")]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.stderr:8:   | -------------------------------------------------------- `start` is not allowed to have `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/issue-99876.rs:3:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr:4:LL | #[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr:5:   | ---------------------------------- `#[target_feature]` added here
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr:8:   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr:15:   = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers
tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.rs:3:#[target_feature(enable = "sse2")] //~ ERROR can only be applied to `unsafe` functions
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.rs:5:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.rs:7:#[target_feature(enable = "sse2")]
tests/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs:1:// Tests #73631: closures inherit `#[target_feature]` annotations
tests/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs:8:#![feature(target_feature_11)]
tests/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs:10:#[target_feature(enable="avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs:15:#[target_feature(enable="avx")]
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.stderr:1:error: `main` function is not allowed to have `#[target_feature]`
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.stderr:2:  --> $DIR/issue-108645-target-feature-on-main.rs:6:1
tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.stderr:5:   | ^^^^^^^^^ `main` function is not allowed to have `#[target_feature]`
Binary file tests/ui/rfcs/rfc-3348-c-string-literals/no-nuls.rs matches
tests/ui/rfcs/rfc-3348-c-string-literals/non-ascii.rs:5:#![feature(c_str_literals)]
tests/ui/rfcs/rfc-3348-c-string-literals/basic.rs:5:#![feature(c_str_literals)]
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr:1:error[E0658]: use of unstable library feature 'structural_match'
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr:2:  --> $DIR/feature-gate.rs:29:6
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr:8:   = help: add `#![feature(structural_match)]` to the crate attributes to enable
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr:10:error[E0658]: use of unstable library feature 'structural_match'
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr:11:  --> $DIR/feature-gate.rs:31:6
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr:17:   = help: add `#![feature(structural_match)]` to the crate attributes to enable
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.rs:1:// Test that use of structural-match traits is only permitted with a feature gate,
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.rs:2:// and that if a feature gate is supplied, it permits the type to be
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.rs:10:#![feature(rustc_attrs)]
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.rs:11:#![cfg_attr(with_gate, feature(structural_match))]
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.rs:30://[no_gate]~^ ERROR use of unstable library feature 'structural_match'
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.rs:32://[no_gate]~^ ERROR use of unstable library feature 'structural_match'
tests/ui/rfcs/rfc-1445-restrict-constants-in-patterns/feature-gate.with_gate.stderr:2:  --> $DIR/feature-gate.rs:21:1
tests/ui/rfcs/rfc-1014-stdout-existential-crisis/rfc-1014-2.rs:4:#![feature(rustc_private)]
tests/ui/rfcs/rfc-1014-stdout-existential-crisis/rfc-1014.rs:6:#![feature(rustc_private)]
tests/ui/internal/internal-unstable-const.rs:1:// Don't allow unstable features in stable functions without `allow_internal_unstable`.
tests/ui/internal/internal-unstable-const.rs:3:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/internal/internal-unstable-const.rs:4:#![feature(staged_api)]
tests/ui/internal/internal-unstable-const.rs:5:#![feature(const_fn_floating_point_arithmetic)]
tests/ui/internal/internal-unstable-const.rs:7:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/internal/internal-unstable-const.rs:8:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/internal/internal-unstable-const.rs:10:    1.0 + 1.0 //~ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`
tests/ui/internal/internal-unstable-noallow.stderr:1:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable-noallow.stderr:7:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable-noallow.stderr:10:error[E0658]: use of unstable library feature 'struct_field'
tests/ui/internal/internal-unstable-noallow.stderr:16:   = help: add `#![feature(struct_field)]` to the crate attributes to enable
tests/ui/internal/internal-unstable-noallow.stderr:19:error[E0658]: use of unstable library feature 'method'
tests/ui/internal/internal-unstable-noallow.stderr:25:   = help: add `#![feature(method)]` to the crate attributes to enable
tests/ui/internal/internal-unstable-noallow.stderr:28:error[E0658]: use of unstable library feature 'struct2_field'
tests/ui/internal/internal-unstable-noallow.stderr:34:   = help: add `#![feature(struct2_field)]` to the crate attributes to enable
tests/ui/internal/internal-unstable.stderr:1:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable.stderr:7:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable.stderr:9:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable.stderr:15:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable.stderr:17:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable.stderr:23:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable.stderr:25:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable.stderr:31:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable.stderr:33:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable.stderr:42:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable-const.stderr:1:error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`
tests/ui/internal/internal-unstable-const.stderr:9:LL + #[rustc_const_unstable(feature = "...", issue = "...")]
tests/ui/internal/internal-unstable.rs:3:#![feature(allow_internal_unstable)]
tests/ui/internal/internal-unstable-thread-local.stderr:1:error[E0658]: use of unstable library feature 'function'
tests/ui/internal/internal-unstable-thread-local.stderr:7:   = help: add `#![feature(function)]` to the crate attributes to enable
tests/ui/internal/internal-unstable-noallow.rs:7:// error-pattern:use of unstable library feature 'function'
tests/ui/internal/internal-unstable-noallow.rs:8:// error-pattern:use of unstable library feature 'struct_field'
tests/ui/internal/internal-unstable-noallow.rs:9:// error-pattern:use of unstable library feature 'method'
tests/ui/internal/internal-unstable-noallow.rs:10:// error-pattern:use of unstable library feature 'struct2_field'
tests/ui/internal/auxiliary/internal_unstable.rs:1:#![feature(staged_api, allow_internal_unstable)]
tests/ui/internal/auxiliary/internal_unstable.rs:2:#![stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:4:#[unstable(feature = "function", issue = "none")]
tests/ui/internal/auxiliary/internal_unstable.rs:8:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:10:    #[unstable(feature = "struct_field", issue = "none")]
tests/ui/internal/auxiliary/internal_unstable.rs:15:    #[unstable(feature = "method", issue = "none")]
tests/ui/internal/auxiliary/internal_unstable.rs:19:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:21:    #[unstable(feature = "struct2_field", issue = "none")]
tests/ui/internal/auxiliary/internal_unstable.rs:25:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:32:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:41:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:48:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:56:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:64:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:71:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:77:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:85:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:91:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/internal/auxiliary/internal_unstable.rs:97:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/mismatched_types/overloaded-calls-bad.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/mismatched_types/E0631.rs:1:#![feature(unboxed_closures)]
tests/ui/mismatched_types/closure-arg-count.rs:1:#![feature(unboxed_closures)]
tests/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs:1:#![feature(unboxed_closures,tuple_trait)]
tests/ui/simd/portable-intrinsics-arent-exposed.rs:1:// May not matter, since people can use them with a nightly feature.
tests/ui/simd/target-feature-mixup.rs:3:#![allow(stable_features)]
tests/ui/simd/target-feature-mixup.rs:10:#![feature(repr_simd, target_feature, cfg_target_feature)]
tests/ui/simd/target-feature-mixup.rs:11:#![feature(avx512_target_feature)]
tests/ui/simd/target-feature-mixup.rs:29:        // We don't actually know if our computer has the requisite target features
tests/ui/simd/target-feature-mixup.rs:119:        #[target_feature(enable = "sse2")]
tests/ui/simd/target-feature-mixup.rs:121:        #[target_feature(enable = "avx")]
tests/ui/simd/target-feature-mixup.rs:123:        #[target_feature(enable = "avx512bw")]
tests/ui/simd/target-feature-mixup.rs:128:    #[target_feature(enable = "sse2")]
tests/ui/simd/target-feature-mixup.rs:134:    #[target_feature(enable = "sse2")]
tests/ui/simd/target-feature-mixup.rs:140:    #[target_feature(enable = "sse2")]
tests/ui/simd/target-feature-mixup.rs:146:    #[target_feature(enable = "avx")]
tests/ui/simd/target-feature-mixup.rs:152:    #[target_feature(enable = "avx")]
tests/ui/simd/target-feature-mixup.rs:158:    #[target_feature(enable = "avx")]
tests/ui/simd/target-feature-mixup.rs:164:    #[target_feature(enable = "avx512bw")]
tests/ui/simd/target-feature-mixup.rs:170:    #[target_feature(enable = "avx512bw")]
tests/ui/simd/target-feature-mixup.rs:176:    #[target_feature(enable = "avx512bw")]
tests/ui/simd/type-generic-monomorphisation-extern-nonnull-ptr.rs:4:#![feature(extern_types)]
tests/ui/simd/type-generic-monomorphisation-extern-nonnull-ptr.rs:5:#![feature(repr_simd)]
tests/ui/simd/array-trait.rs:7:#![feature(repr_simd, platform_intrinsics, generic_const_exprs)]
tests/ui/simd/array-trait.rs:8:#![allow(non_camel_case_types, incomplete_features)]
tests/ui/simd/type-generic-monomorphisation-oversized.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/issue-89193.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/type-generic-monomorphisation-non-primitive.rs:3:#![feature(repr_simd)]
tests/ui/simd/size-align.rs:5:#![feature(repr_simd)]
tests/ui/simd/libm_no_std_cant_float.rs:3:#![feature(portable_simd)]
tests/ui/simd/issue-17170.rs:2:#![feature(repr_simd)]
tests/ui/simd/issue-32947.rs:4:#![feature(repr_simd, test)]
tests/ui/simd/issue-105439.rs:4:#![feature(repr_simd)]
tests/ui/simd/issue-105439.rs:5:#![feature(platform_intrinsics)]
tests/ui/simd/intrinsic/generic-shuffle.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/float-math-pass.rs:11:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-reduction-pass.rs:8:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-cast-pass.rs:4:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-gather-pass.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-bitmask.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/issue-85855.rs:5:#![feature(platform_intrinsics)]
tests/ui/simd/intrinsic/ptr-cast.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-reduction.rs:7:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-arithmetic-pass.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-as.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-arithmetic-2.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-comparison-pass.rs:6:#![feature(repr_simd, platform_intrinsics, concat_idents)]
tests/ui/simd/intrinsic/generic-elements-pass.rs:4:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-elements-pass.rs:5:#![feature(inline_const)]
tests/ui/simd/intrinsic/generic-arithmetic-saturating-2.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-select.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-elements.rs:3:#![feature(repr_simd, platform_intrinsics, rustc_attrs)]
tests/ui/simd/intrinsic/generic-cast-pointer-width.rs:2:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-bitmask-pass.rs:9:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/float-minmax-pass.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-comparison.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/inlining-issue67557.rs:6:#![feature(platform_intrinsics, repr_simd)]
tests/ui/simd/intrinsic/inlining-issue67557-ice.rs:6:#![feature(platform_intrinsics, repr_simd)]
tests/ui/simd/intrinsic/generic-select-pass.rs:9:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/intrinsic/generic-cast.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/type-generic-monomorphisation-empty.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/generics.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/type-generic-monomorphisation-wide-ptr.rs:3:#![feature(repr_simd)]
tests/ui/simd/type-generic-monomorphisation-power-of-two.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/type-generic-monomorphisation.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/type-wide-ptr.rs:3:#![feature(repr_simd)]
tests/ui/simd/issue-85915-simd-ptrs.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/monomorphize-heterogeneous.rs:1:#![feature(repr_simd)]
tests/ui/simd/simd-bitmask.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/array-type.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/wasm-simd-indirect.rs:6:        a::api_with_simd_feature();
tests/ui/simd/wasm-simd-indirect.rs:14:    #[target_feature(enable = "simd128")]
tests/ui/simd/wasm-simd-indirect.rs:15:    pub unsafe fn api_with_simd_feature() {
tests/ui/simd/monomorphize-shuffle-index.rs:2:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/libm_std_can_float.rs:4:#![feature(portable_simd)]
tests/ui/simd/shuffle-not-out-of-bounds.rs:3:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/issue-39720.rs:4:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/shuffle.rs:2:#![feature(repr_simd, platform_intrinsics)]
tests/ui/simd/type-len.rs:1:#![feature(repr_simd)]
tests/ui/label/label_break_value_desugared_break.rs:2:#![feature(try_blocks)]
tests/ui/meta/no_std-extern-libc.rs:5:#![feature(rustc_private)]
tests/ui/no_share-struct.rs:1:#![feature(negative_impls)]
tests/ui/async-await/try-on-option-in-async.rs:1:#![feature(async_closure)]
tests/ui/async-await/track-caller/panic-track-caller.nofeat.stderr:12:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/async-await/track-caller/panic-track-caller.nofeat.stderr:26:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/async-await/track-caller/async-block.stderr:8:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/async-await/track-caller/async-closure-gate.rs:3:#![feature(async_closure, stmt_expr_attributes)]
tests/ui/async-await/track-caller/async-closure-gate.stderr:8:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/async-await/track-caller/async-block.rs:3:#![feature(stmt_expr_attributes)]
tests/ui/async-await/track-caller/panic-track-caller.rs:5:#![feature(async_closure, stmt_expr_attributes)]
tests/ui/async-await/track-caller/panic-track-caller.rs:6:#![cfg_attr(feat, feature(closure_track_caller))]
tests/ui/async-await/issue-64130-1-sync.rs:4:#![feature(negative_impls)]
tests/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs:3:// Test that a feature gate is needed to use `impl Trait` as the
tests/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:6:// (This used to require a feature gate.)
tests/ui/async-await/suggest-missing-await-closure.fixed:4:#![feature(async_closure)]
tests/ui/async-await/feature-async-closure.stderr:2:  --> $DIR/feature-async-closure.rs:5:13
tests/ui/async-await/feature-async-closure.stderr:8:   = help: add `#![feature(async_closure)]` to the crate attributes to enable
tests/ui/async-await/issue-74072-lifetime-name-annotations.rs:2:#![feature(async_closure)]
tests/ui/async-await/issue-93197.rs:6:#![feature(try_blocks)]
tests/ui/async-await/issue-64130-2-send.rs:4:#![feature(negative_impls)]
tests/ui/async-await/generator-desc.rs:2:#![feature(async_closure)]
tests/ui/async-await/large_moves.rs:2:#![feature(large_assignments)]
tests/ui/async-await/in-trait/async-example-desugared-boxed.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-boxed.rs:4:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-boxed.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-recursive.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-recursive.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/dont-project-to-specializable-projection.next.stderr:21:   = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed
tests/ui/async-await/in-trait/async-example-desugared-manual.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-manual.rs:4:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-manual.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/return-not-existing-type-wrapping-rpitit.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/missing-feature-flag.next.stderr:2:  --> $DIR/missing-feature-flag.rs:14:1
tests/ui/async-await/in-trait/missing-feature-flag.next.stderr:11:  --> $DIR/missing-feature-flag.rs:18:5
tests/ui/async-await/in-trait/missing-feature-flag.next.stderr:22:  --> $DIR/missing-feature-flag.rs:18:42
tests/ui/async-await/in-trait/async-example-desugared-extra.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-extra.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-extra.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/missing-feature-flag.current.stderr:2:  --> $DIR/missing-feature-flag.rs:14:1
tests/ui/async-await/in-trait/missing-feature-flag.current.stderr:11:  --> $DIR/missing-feature-flag.rs:18:5
tests/ui/async-await/in-trait/missing-feature-flag.current.stderr:22:  --> $DIR/missing-feature-flag.rs:18:42
tests/ui/async-await/in-trait/early-bound-2.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/early-bound-2.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-associated-types.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-associated-types.rs:5:#![feature(impl_trait_projections)]
tests/ui/async-await/in-trait/async-associated-types.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-example.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-generics.rs:5:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-generics.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/missing-feature-flag.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/missing-feature-flag.rs:4:#![feature(min_specialization)]
tests/ui/async-await/in-trait/lifetime-mismatch.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/issue-102219.rs:5:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/issue-102219.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs:4:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/dont-project-to-specializable-projection.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/dont-project-to-specializable-projection.rs:5:#![feature(min_specialization)]
tests/ui/async-await/in-trait/return-not-existing-pair.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/missing-send-bound.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/missing-feature-flag.stderr:2:  --> $DIR/missing-feature-flag.rs:12:1
tests/ui/async-await/in-trait/missing-feature-flag.stderr:11:  --> $DIR/missing-feature-flag.rs:16:5
tests/ui/async-await/in-trait/missing-feature-flag.stderr:22:  --> $DIR/missing-feature-flag.rs:16:42
tests/ui/async-await/in-trait/fn-not-async-err2.stderr:8:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/async-await/in-trait/return-type-suggestion.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/fn-not-async-err2.current.stderr:8:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/async-await/in-trait/async-example-desugared.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-lifetimes.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-lifetimes.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/nested-rpit.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/nested-rpit.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/nested-rpit.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/issue-102138.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/issue-102138.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-recursive-generic.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-recursive-generic.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/fn-not-async-err.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/fn-not-async-err.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/fn-not-async-err2.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/fn-not-async-err2.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/implied-bounds.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/implied-bounds.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/normalize-opaque-with-bound-vars.rs:8:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-default-fn-overridden.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/dont-project-to-specializable-projection.stderr:21:   = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed
tests/ui/async-await/in-trait/async-lifetimes-and-bounds.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-lifetimes-and-bounds.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/issue-102310.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/issue-102310.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/object-safety.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/bad-signatures.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/issue-104678.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/issue-104678.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/generics-mismatch.rs:3:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/generics-mismatch.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/dont-project-to-specializable-projection.current.stderr:7:   = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed
tests/ui/async-await/in-trait/early-bound-1.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/early-bound-1.rs:5:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/async-generics-and-bounds.rs:5:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-generics-and-bounds.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/in-trait/fn-not-async-err2.next.stderr:8:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/async-await/in-trait/async-example-desugared-in-trait.rs:4:#![feature(async_fn_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-in-trait.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/in-trait/async-example-desugared-in-trait.rs:6:#![allow(incomplete_features)]
tests/ui/async-await/async-trait-fn.current.stderr:12:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.current.stderr:25:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.current.stderr:38:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/no-params-non-move-async-closure.rs:3:#![feature(async_closure)]
tests/ui/async-await/feature-self-return-type.stderr:2:  --> $DIR/feature-self-return-type.rs:22:18
tests/ui/async-await/feature-gate-async_fn_in_trait.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/feature-gate-async_fn_in_trait.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/async-await/feature-gate-async_fn_in_trait.rs:12:// feature-gate-return_position_impl_trait_in_trait.rs)
tests/ui/async-await/issue-64130-non-send-future-diags.rs:2:#![feature(must_not_suspend)]
tests/ui/async-await/issue-64130-3-other.rs:4:#![feature(auto_traits)]
tests/ui/async-await/issue-64130-3-other.rs:5:#![feature(negative_impls)]
tests/ui/async-await/edition-deny-async-fns-2015.current.stderr:93:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/return-type-notation/issue-110963-early.rs:4:#![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-early.rs:5:#![feature(async_fn_in_trait)]
tests/ui/async-await/return-type-notation/issue-110963-late.current.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/issue-110963-late.current.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-late.current.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/super-method-bound.rs:4:#![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/super-method-bound.rs:5://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/async-await/return-type-notation/super-method-bound.current.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/super-method-bound.current.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/super-method-bound.current.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/ty-or-ct-params.current.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/ty-or-ct-params.current.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/ty-or-ct-params.current.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/super-method-bound-ambig.rs:3:#![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/super-method-bound-ambig.rs:4://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/async-await/return-type-notation/issue-110963-early.current.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/issue-110963-early.current.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-early.current.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/issue-110963-late.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/issue-110963-late.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-late.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/issue-110963-early.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/issue-110963-early.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-early.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/supertrait-bound.current.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/supertrait-bound.current.stderr:4:LL | #![feature(return_position_impl_trait_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/supertrait-bound.current.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/ty-or-ct-params.next.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/ty-or-ct-params.next.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/ty-or-ct-params.next.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/super-method-bound.next.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/super-method-bound.next.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/super-method-bound.next.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/rtn-implied-in-supertrait.rs:4:#![feature(async_fn_in_trait, return_position_impl_trait_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/rtn-implied-in-supertrait.rs:5://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/async-await/return-type-notation/ty-or-ct-params.rs:3:#![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/ty-or-ct-params.rs:4://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/async-await/return-type-notation/supertrait-bound.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/supertrait-bound.stderr:4:LL | #![feature(return_position_impl_trait_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/supertrait-bound.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/issue-110963-late.next.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/issue-110963-late.next.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-late.next.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/issue-110963-late.rs:4:#![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-late.rs:5://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/async-await/return-type-notation/issue-110963-late.rs:6:#![feature(async_fn_in_trait)]
tests/ui/async-await/return-type-notation/supertrait-bound.next.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/supertrait-bound.next.stderr:4:LL | #![feature(return_position_impl_trait_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/supertrait-bound.next.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/issue-110963-early.next.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/issue-110963-early.next.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/issue-110963-early.next.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/ty-or-ct-params.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/ty-or-ct-params.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/ty-or-ct-params.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/super-method-bound-ambig.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/super-method-bound-ambig.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/super-method-bound-ambig.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/super-method-bound.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/super-method-bound.stderr:4:LL | #![feature(async_fn_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/super-method-bound.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/rtn-implied-in-supertrait.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/rtn-implied-in-supertrait.stderr:4:LL | #![feature(async_fn_in_trait, return_position_impl_trait_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/rtn-implied-in-supertrait.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/return-type-notation/rtn-in-impl-signature.rs:1:#![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/rtn-in-impl-signature.rs:2://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/async-await/return-type-notation/supertrait-bound.rs:3:#![feature(return_position_impl_trait_in_trait, return_type_notation)]
tests/ui/async-await/return-type-notation/supertrait-bound.rs:4://~^ WARN the feature `return_type_notation` is incomplete and may not be safe to use
tests/ui/async-await/return-type-notation/rtn-in-impl-signature.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/async-await/return-type-notation/rtn-in-impl-signature.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/async-await/return-type-notation/rtn-in-impl-signature.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/async-await/async-borrowck-escaping-closure-error.rs:2:#![feature(async_closure)]
tests/ui/async-await/async-closure.rs:9:#![feature(async_closure)]
tests/ui/async-await/issue-61949-self-return-type.stderr:8:   = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable
tests/ui/async-await/suggest-missing-await-closure.rs:4:#![feature(async_closure)]
tests/ui/async-await/issue-72590-type-error-sized.stderr:25:   = help: unsized fn params are gated as an unstable feature
tests/ui/async-await/edition-deny-async-fns-2015.stderr:93:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.next.stderr:12:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.next.stderr:25:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.next.stderr:38:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.stderr:12:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.stderr:25:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/async-trait-fn.stderr:38:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/feature-gate-async_fn_in_trait.stderr:2:  --> $DIR/feature-gate-async_fn_in_trait.rs:8:5
tests/ui/async-await/feature-gate-async_fn_in_trait.stderr:12:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/feature-gate-async_fn_in_trait.stderr:15:  --> $DIR/feature-gate-async_fn_in_trait.rs:14:5
tests/ui/async-await/feature-gate-async_fn_in_trait.stderr:25:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/feature-gate-async_fn_in_trait.stderr:28:  --> $DIR/feature-gate-async_fn_in_trait.rs:22:5
tests/ui/async-await/feature-gate-async_fn_in_trait.stderr:38:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/edition-deny-async-fns-2015.next.stderr:93:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/generator-not-future.rs:2:#![feature(generators, generator_trait)]
tests/ui/async-await/async-closure-matches-expr.rs:4:#![feature(async_closure)]
tests/ui/async-await/issues/issue-65419/issue-65419-async-fn-resume-after-panic.rs:10:#![feature(generators, generator_trait)]
tests/ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:11:#![feature(generators, generator_trait)]
tests/ui/async-await/issues/issue-65419/issue-65419-async-fn-resume-after-completion.rs:10:#![feature(generators, generator_trait)]
tests/ui/async-await/issues/issue-62009-2.rs:3:#![feature(async_closure)]
tests/ui/async-await/issues/issue-60655-latebound-regions.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/async-await/issues/issue-53249.rs:4:#![feature(arbitrary_self_types)]
tests/ui/async-await/issues/issue-78600.stderr:10:   = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable
tests/ui/async-await/issues/issue-78654.full.stderr:1:error[E0573]: expected type, found built-in attribute `feature`
tests/ui/async-await/issues/issue-78654.full.stderr:4:LL | impl<const H: feature> Foo {
tests/ui/async-await/issues/issue-78654.full.stderr:10:LL | impl<const H: feature> Foo {
tests/ui/async-await/issues/issue-95307.stderr:12:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/async-await/issues/issue-95307.stderr:27:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/async-await/issues/issue-78654.rs:4:#![cfg_attr(full, feature(adt_const_params))]
tests/ui/async-await/issues/issue-78654.rs:5:#![cfg_attr(full, allow(incomplete_features))]
tests/ui/async-await/issues/issue-78654.rs:9:impl<const H: feature> Foo {
tests/ui/async-await/issues/issue-78654.rs:10://~^ ERROR: expected type, found built-in attribute `feature`
tests/ui/async-await/issues/issue-78654.min.stderr:1:error[E0573]: expected type, found built-in attribute `feature`
tests/ui/async-await/issues/issue-78654.min.stderr:4:LL | impl<const H: feature> Foo {
tests/ui/async-await/issues/issue-78654.min.stderr:10:LL | impl<const H: feature> Foo {
tests/ui/async-await/non-trivial-drop.rs:7:#![feature(generators)]
tests/ui/async-await/feature-self-return-type.rs:2:#![feature(impl_trait_projections)]
tests/ui/async-await/issue-68523-start.rs:3:#![feature(start)]
tests/ui/async-await/issue-71137.rs:2:#![feature(must_not_suspend)]
tests/ui/async-await/interior-with-const-generic-expr.rs:4:#![allow(incomplete_features)]
tests/ui/async-await/interior-with-const-generic-expr.rs:5:#![feature(generic_const_exprs)]
tests/ui/async-await/partial-drop-partial-reinit.rs:5:#![feature(negative_impls)]
tests/ui/expr/if/attrs/stmt-expr-gated.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/expr/if/attrs/let-chains-attr.rs:3:#![feature(let_chains)]
tests/ui/expr/if/attrs/bad-cfg.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/expr/if/bad-if-let-suggestion.stderr:58:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/array-slice-vec/array_const_index-2.rs:3:#![allow(stable_features)]
tests/ui/array-slice-vec/array_const_index-2.rs:5:#![feature(const_indexing)]
tests/ui/array-slice-vec/slice-of-zero-size-elements.rs:2:#![allow(stable_features)]
tests/ui/array-slice-vec/slice-of-zero-size-elements.rs:6:#![feature(iter_to_slice)]
tests/ui/array-slice-vec/vec-macro-no-std.rs:5:#![feature(lang_items, start, rustc_private)]
tests/ui/array-slice-vec/suggest-array-length.stderr:50:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/suggest-array-length.stderr:59:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/suggest-array-length.stderr:68:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/suggest-array-length.stderr:77:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/suggest-array-length.stderr:86:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/suggest-array-length.stderr:95:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/suggest-array-length.stderr:104:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/array-slice-vec/slice_is_sorted_by_borrow.rs:4:#![feature(is_sorted)]
tests/ui/entry-point/imported_main_unused_not_trigger_feature_gate.rs:2:#![feature(rustc_attrs)]
tests/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs:1:#![feature(imported_main)]
tests/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs:3:#![allow(incomplete_features)]
tests/ui/entry-point/imported_main_conflict.rs:1:#![feature(imported_main)]
tests/ui/entry-point/imported_main_from_extern_crate.rs:4:#![feature(imported_main)]
tests/ui/entry-point/imported_main_from_inner_mod.rs:2:#![feature(imported_main)]
tests/ui/entry-point/imported_main_const_forbidden.rs:1:#![feature(imported_main)]
tests/ui/dst/dst-bad-coerce4.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/dst/dst-bad-coerce1.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/dst/dst-bad-assign-3.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/dst/dst-bad-deep-2.rs:6:#![feature(unsized_tuple_coercion)]
tests/ui/dst/dst-bad-coerce3.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/invalid/invalid-plugin-attr.rs:2:#![feature(plugin)]
tests/ui/invalid/invalid_rustc_layout_scalar_valid_range.rs:1:#![feature(rustc_attrs)]
tests/ui/invalid/invalid-no-sanitize.rs:1:#![feature(no_sanitize)]
tests/ui/invalid/invalid-rustc_legacy_const_generics-arguments.rs:1:#![feature(rustc_attrs)]
tests/ui/marker_trait_attr/overlap-doesnt-conflict-with-specialization.rs:3:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/overlap-doesnt-conflict-with-specialization.rs:4:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/marker_trait_attr/overlap-permitted-for-annotated-marker-traits.rs:6:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/overlap-marker-trait-with-static-lifetime.rs:6:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/unsound-overlap.rs:1:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/overlap-marker-trait.rs:6:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/overlap-doesnt-conflict-with-specialization.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/marker_trait_attr/overlap-doesnt-conflict-with-specialization.stderr:4:LL | #![feature(specialization)]
tests/ui/marker_trait_attr/overlap-doesnt-conflict-with-specialization.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/marker_trait_attr/marker-attribute-with-values.rs:1:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/overlap-marker-trait-with-underscore-lifetime.rs:1:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/marker-attribute-on-non-trait.rs:1:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/issue-61651-type-mismatch.rs:7:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/overlapping-impl-1-modulo-regions.rs:10:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/marker-trait-with-associated-items.rs:1:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/marker-trait-with-associated-items.rs:2:#![feature(associated_type_defaults)]
tests/ui/marker_trait_attr/override-item-on-marker-trait.rs:1:#![feature(marker_trait_attr)]
tests/ui/marker_trait_attr/region-overlap.rs:1:#![feature(marker_trait_attr)]
tests/ui/hygiene/privacy-early.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/unpretty-debug.stdout:8:#![feature /* 0#0 */(no_core)]
tests/ui/hygiene/stdlib-prelude-from-opaque-early.rs:4:#![feature(decl_macro)]
tests/ui/hygiene/stdlib-prelude-from-opaque-early.rs:5:#![feature(prelude_import)]
tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/arguments.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/rustc-macro-transparency.rs:1:#![feature(decl_macro, rustc_attrs)]
tests/ui/hygiene/wrap_unhygienic_example.rs:6:#![feature(decl_macro)]
tests/ui/hygiene/legacy_interaction.rs:6:#![feature(decl_macro)]
tests/ui/hygiene/no_implicit_prelude.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/issue-44128.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/transparent-basic.rs:4:#![feature(decl_macro, rustc_attrs)]
tests/ui/hygiene/trait_items-2.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/globs.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/impl_items-2.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/macro-metavars-legacy.rs:3:#![feature(rustc_attrs)]
tests/ui/hygiene/cross-crate-define-and-use.rs:9:#![feature(type_name_of_val)]
tests/ui/hygiene/fields.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/specialization.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/fields-definition.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/generic_params.rs:5:#![feature(decl_macro, rustc_attrs)]
tests/ui/hygiene/issue-47311.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/fields-move.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/impl_items.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/generate-mod.rs:3:#![feature(decl_macro, rustc_attrs)]
tests/ui/hygiene/items.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/issue-47312.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/privacy.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/duplicate_lifetimes.rs:4:#![feature(decl_macro, rustc_attrs)]
tests/ui/hygiene/extern-prelude-from-opaque-fail-2018.rs:2:#![feature(decl_macro)]
tests/ui/hygiene/unpretty-debug.rs:8:#![feature(no_core)]
tests/ui/hygiene/traits-in-scope.rs:7:#![feature(decl_macro)]
tests/ui/hygiene/traits-in-scope.rs:8:#![feature(trait_alias)]
tests/ui/hygiene/format-args.rs:4:#![feature(format_args_nl)]
tests/ui/hygiene/assoc_item_ctxt.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/xcrate.rs:5:#![feature(decl_macro)]
tests/ui/hygiene/assoc_ty_bindings.rs:3:#![feature(decl_macro, associated_type_defaults)]
tests/ui/hygiene/lexical.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/trait_items.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/intercrate.rs:3:#![feature(decl_macro)]
tests/ui/hygiene/extern-prelude-from-opaque-fail.rs:2:#![feature(decl_macro)]
tests/ui/hygiene/macro-metavars-transparent.rs:4:#![feature(rustc_attrs)]
tests/ui/hygiene/nested_macro_privacy.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/stdlib-prelude.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/opaque-hygiene.rs:4:#![feature(proc_macro_quote)]
tests/ui/hygiene/auxiliary/codegen-attrs.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/variants.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/transparent-basic.rs:1:#![feature(decl_macro, rustc_attrs)]
tests/ui/hygiene/auxiliary/methods.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/needs_hygiene.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/fields.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/pub_hygiene.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/xcrate.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/intercrate.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/auxiliary/use_by_macro.rs:1:#![feature(decl_macro)]
tests/ui/hygiene/dollar-crate-modern.rs:6:#![feature(decl_macro)]
tests/ui/ffi_pure.rs:1:#![feature(ffi_pure)]
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:2:  --> $DIR/feature-gate-custom_attribute2.rs:4:15
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:8:  --> $DIR/feature-gate-custom_attribute2.rs:6:15
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:14:  --> $DIR/feature-gate-custom_attribute2.rs:9:13
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:20:  --> $DIR/feature-gate-custom_attribute2.rs:11:13
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:26:  --> $DIR/feature-gate-custom_attribute2.rs:14:14
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:32:  --> $DIR/feature-gate-custom_attribute2.rs:16:14
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:38:  --> $DIR/feature-gate-custom_attribute2.rs:19:13
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:44:  --> $DIR/feature-gate-custom_attribute2.rs:21:13
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:50:  --> $DIR/feature-gate-custom_attribute2.rs:24:8
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:56:  --> $DIR/feature-gate-custom_attribute2.rs:26:8
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:62:  --> $DIR/feature-gate-custom_attribute2.rs:29:8
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:68:  --> $DIR/feature-gate-custom_attribute2.rs:33:8
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:74:  --> $DIR/feature-gate-custom_attribute2.rs:38:11
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:80:  --> $DIR/feature-gate-custom_attribute2.rs:40:11
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:86:  --> $DIR/feature-gate-custom_attribute2.rs:44:15
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:92:  --> $DIR/feature-gate-custom_attribute2.rs:46:15
tests/ui/feature-gates/feature-gate-custom_attribute2.stderr:98:  --> $DIR/feature-gate-custom_attribute2.rs:51:21
tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr:2:  --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:1:24
tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr:8:   = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr:11:  --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32
tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr:17:   = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unsized_tuple_coercion.stderr:2:  --> $DIR/feature-gate-unsized_tuple_coercion.rs:2:28
tests/ui/feature-gates/feature-gate-unsized_tuple_coercion.stderr:8:   = help: add `#![feature(unsized_tuple_coercion)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-may-dangle.stderr:2:  --> $DIR/feature-gate-may-dangle.rs:6:13
tests/ui/feature-gates/feature-gate-may-dangle.stderr:8:   = help: add `#![feature(dropck_eyepatch)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:2:  --> $DIR/feature-gate-unsized_fn_params.rs:17:8
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:19:  --> $DIR/feature-gate-unsized_fn_params.rs:21:8
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:25:   = help: unsized fn params are gated as an unstable feature
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:36:  --> $DIR/feature-gate-unsized_fn_params.rs:25:8
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:42:   = help: unsized fn params are gated as an unstable feature
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:49:  --> $DIR/feature-gate-unsized_fn_params.rs:29:9
tests/ui/feature-gates/feature-gate-unsized_fn_params.stderr:56:   = help: unsized fn params are gated as an unstable feature
tests/ui/feature-gates/stability-attribute-consistency.stderr:1:error[E0711]: feature `foo` is declared stable since 1.29.0, but was previously declared stable since 1.0.0
tests/ui/feature-gates/stability-attribute-consistency.stderr:4:LL | #[stable(feature = "foo", since = "1.29.0")]
tests/ui/feature-gates/stability-attribute-consistency.stderr:7:error[E0711]: feature `foo` is declared unstable, but was previously declared stable
tests/ui/feature-gates/stability-attribute-consistency.stderr:10:LL | #[unstable(feature = "foo", issue = "none")]
tests/ui/feature-gates/feature-gate-try_blocks.stderr:2:  --> $DIR/feature-gate-try_blocks.rs:4:33
tests/ui/feature-gates/feature-gate-try_blocks.stderr:12:   = help: add `#![feature(try_blocks)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-is_sorted.rs:4:    //~^ ERROR: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.rs:6:    //~^ ERROR: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.rs:10:    //~^ ERROR: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.rs:12:    //~^ ERROR: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-abi.rs:5:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-format_args_nl.stderr:1:error[E0658]: use of unstable library feature 'format_args_nl': `format_args_nl` is only for internal language use and is subject to change
tests/ui/feature-gates/feature-gate-format_args_nl.stderr:2:  --> $DIR/feature-gate-format_args_nl.rs:2:5
tests/ui/feature-gates/feature-gate-format_args_nl.stderr:7:   = help: add `#![feature(format_args_nl)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-staged_api.stderr:2:  --> $DIR/feature-gate-staged_api.rs:8:1
tests/ui/feature-gates/feature-gate-staged_api.stderr:4:LL | #[stable(feature = "a", since = "b")]
tests/ui/feature-gates/feature-gate-staged_api.stderr:8:  --> $DIR/feature-gate-staged_api.rs:1:1
tests/ui/feature-gates/feature-gate-staged_api.stderr:10:LL | #![stable(feature = "a", since = "b")]
tests/ui/feature-gates/feature-gate-cfi_encoding.stderr:1:error[E0658]: the `#[cfi_encoding]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-cfi_encoding.stderr:2:  --> $DIR/feature-gate-cfi_encoding.rs:3:1
tests/ui/feature-gates/feature-gate-cfi_encoding.stderr:8:   = help: add `#![feature(cfi_encoding)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-asm_const.stderr:2:  --> $DIR/feature-gate-asm_const.rs:6:25
tests/ui/feature-gates/feature-gate-asm_const.stderr:8:   = help: add `#![feature(asm_const)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-asm_const.stderr:11:  --> $DIR/feature-gate-asm_const.rs:13:29
tests/ui/feature-gates/feature-gate-asm_const.stderr:17:   = help: add `#![feature(asm_const)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustc_const_unstable.rs:1:// Test internal const fn feature gate.
tests/ui/feature-gates/feature-gate-rustc_const_unstable.rs:3:#[rustc_const_unstable(feature="fzzzzzt")] //~ stability attributes may not be used outside
tests/ui/feature-gates/trace_macros-gate.stderr:1:error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change
tests/ui/feature-gates/trace_macros-gate.stderr:8:   = help: add `#![feature(trace_macros)]` to the crate attributes to enable
tests/ui/feature-gates/trace_macros-gate.stderr:16:error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change
tests/ui/feature-gates/trace_macros-gate.stderr:23:   = help: add `#![feature(trace_macros)]` to the crate attributes to enable
tests/ui/feature-gates/trace_macros-gate.stderr:25:error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change
tests/ui/feature-gates/trace_macros-gate.stderr:32:   = help: add `#![feature(trace_macros)]` to the crate attributes to enable
tests/ui/feature-gates/trace_macros-gate.stderr:34:error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change
tests/ui/feature-gates/trace_macros-gate.stderr:44:   = help: add `#![feature(trace_macros)]` to the crate attributes to enable
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:357:LL | #[feature(x0600)]
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1025:LL |     mod inner { #![feature(x0600)] }
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1031:LL |     #[feature(x0600)] fn f() { }
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1037:LL |     #[feature(x0600)] struct S;
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1043:LL |     #[feature(x0600)] type T = S;
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1049:LL |     #[feature(x0600)] impl S { }
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1172:warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1175:LL | #![feature(rust1)]
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr:1178:   = note: `#[warn(stable_features)]` on by default
tests/ui/feature-gates/feature-gate-link_cfg.stderr:2:  --> $DIR/feature-gate-link_cfg.rs:1:22
tests/ui/feature-gates/feature-gate-link_cfg.stderr:7:   = help: add `#![feature(link_cfg)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:2:  --> $DIR/feature-gate-thiscall.rs:12:8
tests/ui/feature-gates/feature-gate-thiscall.stderr:7:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:10:  --> $DIR/feature-gate-thiscall.rs:13:8
tests/ui/feature-gates/feature-gate-thiscall.stderr:15:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:18:  --> $DIR/feature-gate-thiscall.rs:16:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:23:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:26:  --> $DIR/feature-gate-thiscall.rs:17:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:31:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:34:  --> $DIR/feature-gate-thiscall.rs:19:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:39:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:42:  --> $DIR/feature-gate-thiscall.rs:20:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:47:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:50:  --> $DIR/feature-gate-thiscall.rs:25:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:55:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:58:  --> $DIR/feature-gate-thiscall.rs:26:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:63:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:66:  --> $DIR/feature-gate-thiscall.rs:30:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:71:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:74:  --> $DIR/feature-gate-thiscall.rs:31:12
tests/ui/feature-gates/feature-gate-thiscall.stderr:79:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:82:  --> $DIR/feature-gate-thiscall.rs:34:18
tests/ui/feature-gates/feature-gate-thiscall.stderr:87:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:90:  --> $DIR/feature-gate-thiscall.rs:35:19
tests/ui/feature-gates/feature-gate-thiscall.stderr:95:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:98:  --> $DIR/feature-gate-thiscall.rs:37:8
tests/ui/feature-gates/feature-gate-thiscall.stderr:103:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thiscall.stderr:106:  --> $DIR/feature-gate-thiscall.rs:38:8
tests/ui/feature-gates/feature-gate-thiscall.stderr:111:   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:19:// order that they occur in `librustc_feature`.
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:39:#![feature(test)]
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:90:#![feature(rust1)]
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:92://~| NOTE `#[warn(stable_features)]` on by default
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:676:#[feature(x0600)]
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:678:mod feature {
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:679:    mod inner { #![feature(x0600)] }
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:682:    #[feature(x0600)] fn f() { }
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:685:    #[feature(x0600)] struct S;
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:688:    #[feature(x0600)] type T = S;
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs:691:    #[feature(x0600)] impl S { }
tests/ui/feature-gates/rustc-private.rs:3:extern crate libc; //~ ERROR  use of unstable library feature 'rustc_private'
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:2:  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:3:1
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:8:   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:12:  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:7:1
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:18:   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:21:  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:3:1
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:27:   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:30:  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:7:1
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:36:   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:39:  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:3:1
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:45:   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:48:  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:7:1
tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr:54:   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable
tests/ui/feature-gates/unknown-feature.stderr:1:error[E0635]: unknown feature `unknown_rust_feature`
tests/ui/feature-gates/unknown-feature.stderr:2:  --> $DIR/unknown-feature.rs:1:12
tests/ui/feature-gates/unknown-feature.stderr:4:LL | #![feature(unknown_rust_feature)]
tests/ui/feature-gates/feature-gate-asm_experimental_arch.rs:4:#![feature(no_core, lang_items, rustc_attrs)]
tests/ui/feature-gates/feature-gate-collapse_debuginfo.stderr:1:error[E0658]: the `#[collapse_debuginfo]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-collapse_debuginfo.stderr:2:  --> $DIR/feature-gate-collapse_debuginfo.rs:1:1
tests/ui/feature-gates/feature-gate-collapse_debuginfo.stderr:8:   = help: add `#![feature(collapse_debuginfo)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-alloc-error-handler.rs:8:#[alloc_error_handler] //~ ERROR use of unstable library feature 'alloc_error_handler'
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:2:  --> $DIR/feature-gate-associated_type_bounds.rs:12:22
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:8:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:11:  --> $DIR/feature-gate-associated_type_bounds.rs:16:22
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:17:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:20:  --> $DIR/feature-gate-associated_type_bounds.rs:20:20
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:26:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:29:  --> $DIR/feature-gate-associated_type_bounds.rs:27:18
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:35:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:38:  --> $DIR/feature-gate-associated_type_bounds.rs:34:19
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:44:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:47:  --> $DIR/feature-gate-associated_type_bounds.rs:41:37
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:53:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:56:  --> $DIR/feature-gate-associated_type_bounds.rs:44:22
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:62:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:65:  --> $DIR/feature-gate-associated_type_bounds.rs:46:26
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:71:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:74:  --> $DIR/feature-gate-associated_type_bounds.rs:49:24
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:80:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:83:  --> $DIR/feature-gate-associated_type_bounds.rs:52:31
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:89:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:92:  --> $DIR/feature-gate-associated_type_bounds.rs:55:23
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:98:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:101:  --> $DIR/feature-gate-associated_type_bounds.rs:61:24
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:107:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:110:  --> $DIR/feature-gate-associated_type_bounds.rs:68:21
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:116:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:119:  --> $DIR/feature-gate-associated_type_bounds.rs:55:14
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:125:  --> $DIR/feature-gate-associated_type_bounds.rs:61:15
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:131:  --> $DIR/feature-gate-associated_type_bounds.rs:68:12
tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr:137:  --> $DIR/feature-gate-associated_type_bounds.rs:12:28
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:2:  --> $DIR/feature-gate-rustc-attrs.rs:8:3
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:8:  --> $DIR/feature-gate-rustc-attrs.rs:8:3
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:14:  --> $DIR/feature-gate-rustc-attrs.rs:13:12
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:20:  --> $DIR/feature-gate-rustc-attrs.rs:13:3
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:26:  --> $DIR/feature-gate-rustc-attrs.rs:20:3
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:32:  --> $DIR/feature-gate-rustc-attrs.rs:20:3
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:38:  --> $DIR/feature-gate-rustc-attrs.rs:18:1
tests/ui/feature-gates/feature-gate-rustc-attrs.stderr:43:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-c_variadic.stderr:2:  --> $DIR/feature-gate-c_variadic.rs:3:1
tests/ui/feature-gates/feature-gate-c_variadic.stderr:8:   = help: add `#![feature(c_variadic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-naked_functions.stderr:1:error[E0658]: the `#[naked]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-naked_functions.stderr:2:  --> $DIR/feature-gate-naked_functions.rs:5:1
tests/ui/feature-gates/feature-gate-naked_functions.stderr:8:   = help: add `#![feature(naked_functions)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-naked_functions.stderr:10:error[E0658]: the `#[naked]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-naked_functions.stderr:11:  --> $DIR/feature-gate-naked_functions.rs:11:1
tests/ui/feature-gates/feature-gate-naked_functions.stderr:17:   = help: add `#![feature(naked_functions)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-negative_bounds.stderr:2:  --> $DIR/feature-gate-negative_bounds.rs:1:12
tests/ui/feature-gates/feature-gate-allocator_internals.rs:1:#![default_lib_allocator] //~ ERROR: attribute is an experimental feature
tests/ui/feature-gates/feature-gate-feature-gate.stderr:1:error: unstable feature
tests/ui/feature-gates/feature-gate-feature-gate.stderr:2:  --> $DIR/feature-gate-feature-gate.rs:2:12
tests/ui/feature-gates/feature-gate-feature-gate.stderr:4:LL | #![feature(intrinsics)]
tests/ui/feature-gates/feature-gate-feature-gate.stderr:8:  --> $DIR/feature-gate-feature-gate.rs:1:11
tests/ui/feature-gates/feature-gate-feature-gate.stderr:10:LL | #![forbid(unstable_features)]
tests/ui/feature-gates/feature-gate-optimize_attribute.rs:2:#![optimize(speed)] //~ ERROR the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.rs:4:#[optimize(size)] //~ ERROR the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.rs:7:#[optimize(size)] //~ ERROR the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.rs:10:#[optimize(speed)] //~ ERROR the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.rs:14://~^ ERROR the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-no_sanitize.stderr:1:error[E0658]: the `#[no_sanitize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-no_sanitize.stderr:2:  --> $DIR/feature-gate-no_sanitize.rs:1:1
tests/ui/feature-gates/feature-gate-no_sanitize.stderr:8:   = help: add `#![feature(no_sanitize)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr:2:  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:8:17
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr:8:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr:11:  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:9:21
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr:17:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr:20:  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:15:23
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr:26:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-asm_experimental_arch.stderr:2:  --> $DIR/feature-gate-asm_experimental_arch.rs:19:5
tests/ui/feature-gates/feature-gate-asm_experimental_arch.stderr:8:   = help: add `#![feature(asm_experimental_arch)]` to the crate attributes to enable
tests/ui/feature-gates/allow-features-empty.rs:1:// compile-flags: -Z allow_features=
tests/ui/feature-gates/allow-features-empty.rs:4:#![feature(lang_items)] //~ ERROR
tests/ui/feature-gates/allow-features-empty.rs:6:#![feature(unknown_stdlib_feature)] //~ ERROR
tests/ui/feature-gates/feature-gate-inline_const_pat.stderr:2:  --> $DIR/feature-gate-inline_const_pat.rs:2:9
tests/ui/feature-gates/feature-gate-inline_const_pat.stderr:8:   = help: add `#![feature(inline_const_pat)]` to the crate attributes to enable
tests/ui/feature-gates/duplicate-features.rs:1:#![allow(stable_features)]
tests/ui/feature-gates/duplicate-features.rs:3:#![feature(rust1)]
tests/ui/feature-gates/duplicate-features.rs:4:#![feature(rust1)] //~ ERROR the feature `rust1` has already been declared
tests/ui/feature-gates/duplicate-features.rs:6:#![feature(if_let)]
tests/ui/feature-gates/duplicate-features.rs:7:#![feature(if_let)] //~ ERROR the feature `if_let` has already been declared
tests/ui/feature-gates/gated-bad-feature.rs:1:#![feature(foo_bar_baz, foo(bar), foo = "baz", foo)]
tests/ui/feature-gates/gated-bad-feature.rs:2://~^ ERROR malformed `feature`
tests/ui/feature-gates/gated-bad-feature.rs:3://~| ERROR malformed `feature`
tests/ui/feature-gates/gated-bad-feature.rs:4://~| ERROR unknown feature `foo`
tests/ui/feature-gates/gated-bad-feature.rs:5://~| ERROR unknown feature `foo_bar_baz`
tests/ui/feature-gates/gated-bad-feature.rs:6:#![feature] //~ ERROR malformed `feature` attribute
tests/ui/feature-gates/gated-bad-feature.rs:7:#![feature = "foo"] //~ ERROR malformed `feature` attribute
tests/ui/feature-gates/gated-bad-feature.rs:8:#![feature(test_removed_feature)] //~ ERROR: feature has been removed
tests/ui/feature-gates/feature-gate-repr-simd.stderr:2:  --> $DIR/feature-gate-repr-simd.rs:1:1
tests/ui/feature-gates/feature-gate-repr-simd.stderr:8:   = help: add `#![feature(repr_simd)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-repr-simd.stderr:11:  --> $DIR/feature-gate-repr-simd.rs:6:1
tests/ui/feature-gates/feature-gate-repr-simd.stderr:17:   = help: add `#![feature(repr_simd)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-repr-simd.stderr:20:  --> $DIR/feature-gate-repr-simd.rs:4:8
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:2:  --> $DIR/feature-gate-cfg-target-has-atomic.rs:2:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:8:   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:11:  --> $DIR/feature-gate-cfg-target-has-atomic.rs:4:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:17:   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:20:  --> $DIR/feature-gate-cfg-target-has-atomic.rs:6:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:26:   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:29:  --> $DIR/feature-gate-cfg-target-has-atomic.rs:8:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:35:   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:38:  --> $DIR/feature-gate-cfg-target-has-atomic.rs:10:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:44:   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:47:  --> $DIR/feature-gate-cfg-target-has-atomic.rs:12:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr:53:   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:2:  --> $DIR/feature-gate-cfg-version.rs:1:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:8:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:11:  --> $DIR/feature-gate-cfg-version.rs:1:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:17:  --> $DIR/feature-gate-cfg-version.rs:4:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:23:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:26:  --> $DIR/feature-gate-cfg-version.rs:4:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:32:  --> $DIR/feature-gate-cfg-version.rs:7:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:38:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:41:  --> $DIR/feature-gate-cfg-version.rs:10:11
tests/ui/feature-gates/feature-gate-cfg-version.stderr:47:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:50:  --> $DIR/feature-gate-cfg-version.rs:14:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:56:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:59:  --> $DIR/feature-gate-cfg-version.rs:14:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:65:  --> $DIR/feature-gate-cfg-version.rs:17:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:71:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:74:  --> $DIR/feature-gate-cfg-version.rs:17:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:80:  --> $DIR/feature-gate-cfg-version.rs:20:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:86:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:89:  --> $DIR/feature-gate-cfg-version.rs:20:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:95:  --> $DIR/feature-gate-cfg-version.rs:23:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:101:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:104:  --> $DIR/feature-gate-cfg-version.rs:23:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:110:  --> $DIR/feature-gate-cfg-version.rs:26:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:116:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:119:  --> $DIR/feature-gate-cfg-version.rs:26:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:125:  --> $DIR/feature-gate-cfg-version.rs:29:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:131:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:134:  --> $DIR/feature-gate-cfg-version.rs:29:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:140:  --> $DIR/feature-gate-cfg-version.rs:32:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:146:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:149:  --> $DIR/feature-gate-cfg-version.rs:32:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:155:  --> $DIR/feature-gate-cfg-version.rs:35:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:161:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:164:  --> $DIR/feature-gate-cfg-version.rs:38:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:170:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:173:  --> $DIR/feature-gate-cfg-version.rs:38:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:179:  --> $DIR/feature-gate-cfg-version.rs:41:7
tests/ui/feature-gates/feature-gate-cfg-version.stderr:185:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-version.stderr:188:  --> $DIR/feature-gate-cfg-version.rs:41:15
tests/ui/feature-gates/feature-gate-cfg-version.stderr:194:  --> $DIR/feature-gate-cfg-version.rs:48:18
tests/ui/feature-gates/feature-gate-cfg-version.stderr:200:   = help: add `#![feature(cfg_version)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:2:  --> $DIR/feature-gate-vectorcall.rs:12:8
tests/ui/feature-gates/feature-gate-vectorcall.stderr:7:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:10:  --> $DIR/feature-gate-vectorcall.rs:15:12
tests/ui/feature-gates/feature-gate-vectorcall.stderr:15:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:18:  --> $DIR/feature-gate-vectorcall.rs:17:12
tests/ui/feature-gates/feature-gate-vectorcall.stderr:23:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:26:  --> $DIR/feature-gate-vectorcall.rs:22:12
tests/ui/feature-gates/feature-gate-vectorcall.stderr:31:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:34:  --> $DIR/feature-gate-vectorcall.rs:26:12
tests/ui/feature-gates/feature-gate-vectorcall.stderr:39:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:42:  --> $DIR/feature-gate-vectorcall.rs:29:18
tests/ui/feature-gates/feature-gate-vectorcall.stderr:47:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-vectorcall.stderr:50:  --> $DIR/feature-gate-vectorcall.rs:31:8
tests/ui/feature-gates/feature-gate-vectorcall.stderr:55:   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfi_encoding.rs:3:#[cfi_encoding = "3Bar"] //~ERROR 3:1: 3:25: the `#[cfi_encoding]` attribute is an experimental feature [E0658]
tests/ui/feature-gates/feature-gate-ffi_pure.rs:4:    #[ffi_pure] //~ ERROR the `#[ffi_pure]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-concat_bytes.stderr:1:error[E0658]: use of unstable library feature 'concat_bytes'
tests/ui/feature-gates/feature-gate-concat_bytes.stderr:2:  --> $DIR/feature-gate-concat_bytes.rs:2:13
tests/ui/feature-gates/feature-gate-concat_bytes.stderr:8:   = help: add `#![feature(concat_bytes)]` to the crate attributes to enable
tests/ui/feature-gates/issue-49983-see-issue-0.rs:4:#[allow(unused_imports)] use core::ptr::Unique; //~ ERROR use of unstable library feature
tests/ui/feature-gates/feature-gate-allow-internal-unsafe-nested-macro.stderr:2:  --> $DIR/feature-gate-allow-internal-unsafe-nested-macro.rs:8:9
tests/ui/feature-gates/feature-gate-allow-internal-unsafe-nested-macro.stderr:10:   = help: add `#![feature(allow_internal_unsafe)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:1:error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arbitrary_self_types` feature
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:2:  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:4:18
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:8:   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:11:error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:12:  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:18:   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:21:error[E0658]: `*const Self` cannot be used as the type of `self` without the `arbitrary_self_types` feature
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:22:  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:9:18
tests/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr:28:   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-naked_functions.rs:6://~^ the `#[naked]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-naked_functions.rs:12://~^ the `#[naked]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-compiler-builtins.stderr:2:  --> $DIR/feature-gate-compiler-builtins.rs:1:1
tests/ui/feature-gates/feature-gate-compiler-builtins.stderr:7:   = help: add `#![feature(compiler_builtins)]` to the crate attributes to enable
tests/ui/feature-gates/stability-attribute-consistency.rs:1:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/feature-gates/stability-attribute-consistency.rs:3:#![feature(staged_api)]
tests/ui/feature-gates/stability-attribute-consistency.rs:5:#[stable(feature = "foo", since = "1.0.0")]
tests/ui/feature-gates/stability-attribute-consistency.rs:8:#[stable(feature = "foo", since = "1.29.0")]
tests/ui/feature-gates/stability-attribute-consistency.rs:9://~^ ERROR feature `foo` is declared stable since 1.29.0
tests/ui/feature-gates/stability-attribute-consistency.rs:12:#[unstable(feature = "foo", issue = "none")]
tests/ui/feature-gates/stability-attribute-consistency.rs:13://~^ ERROR feature `foo` is declared unstable
tests/ui/feature-gates/feature-gate-doc_notable_trait.stderr:2:  --> $DIR/feature-gate-doc_notable_trait.rs:1:1
tests/ui/feature-gates/feature-gate-doc_notable_trait.stderr:8:   = help: add `#![feature(doc_notable_trait)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustc-attrs-1.rs:1:// Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.
tests/ui/feature-gates/feature-gate-simd-ffi.rs:1:#![feature(repr_simd)]
tests/ui/feature-gates/feature-gate-cfg-target-thread-local.stderr:2:  --> $DIR/feature-gate-cfg-target-thread-local.rs:9:16
tests/ui/feature-gates/feature-gate-cfg-target-thread-local.stderr:8:   = help: add `#![feature(cfg_target_thread_local)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-deprecated_safe.rs:1:#[deprecated_safe(since = "TBD", note = "...")] //~ ERROR: the `#[deprecated_safe]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-deprecated_safe.rs:4:#[deprecated_safe(since = "TBD", note = "...")] //~ ERROR: the `#[deprecated_safe]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-marker_trait_attr.stderr:1:error[E0658]: the `#[marker]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-marker_trait_attr.stderr:2:  --> $DIR/feature-gate-marker_trait_attr.rs:3:1
tests/ui/feature-gates/feature-gate-marker_trait_attr.stderr:8:   = help: add `#![feature(marker_trait_attr)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.rs:4:#![allow(incomplete_features)]
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.rs:5:#![feature(async_fn_in_trait)]
tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.rs:13:// feature-gate-async_fn_in_trait.rs)
tests/ui/feature-gates/feature-gate-adt_const_params.stderr:2:  --> $DIR/feature-gate-adt_const_params.rs:1:24
tests/ui/feature-gates/feature-gate-adt_const_params.stderr:8:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/feature-gates/feature-gate-fundamental.rs:1:#[fundamental] //~ ERROR the `#[fundamental]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-large-assignments.rs:1:// check that `move_size_limit is feature-gated
tests/ui/feature-gates/feature-gate-large-assignments.rs:3:#![move_size_limit = "42"] //~ ERROR the `#[move_size_limit]` attribute is an experimental feature
tests/ui/feature-gates/feature-gated-feature-in-macro-arg.stderr:2:  --> $DIR/feature-gated-feature-in-macro-arg.rs:8:16
tests/ui/feature-gates/feature-gated-feature-in-macro-arg.stderr:7:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_ascription.stderr:1:error[E0658]: use of unstable library feature 'type_ascription': placeholder syntax for type ascription
tests/ui/feature-gates/feature-gate-type_ascription.stderr:2:  --> $DIR/feature-gate-type_ascription.rs:4:13
tests/ui/feature-gates/feature-gate-type_ascription.stderr:8:   = help: add `#![feature(type_ascription)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-explicit_tail_calls.stderr:2:  --> $DIR/feature-gate-explicit_tail_calls.rs:2:5
tests/ui/feature-gates/feature-gate-explicit_tail_calls.stderr:8:   = help: add `#![feature(explicit_tail_calls)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-explicit_tail_calls.stderr:11:  --> $DIR/feature-gate-explicit_tail_calls.rs:6:5
tests/ui/feature-gates/feature-gate-explicit_tail_calls.stderr:17:   = help: add `#![feature(explicit_tail_calls)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.rs:3:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.rs:4:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.rs:9:// feature gate is not used.
tests/ui/feature-gates/feature-gate-custom_test_frameworks.rs:1:#![test_runner(main)] //~ ERROR custom test frameworks are an unstable feature
tests/ui/feature-gates/feature-gate-custom_test_frameworks.rs:3:#[test_case] //~ ERROR custom test frameworks are an unstable feature
tests/ui/feature-gates/feature-gated-feature-in-macro-arg.rs:1:// tests that input to a macro is checked for use of gated features. If this
tests/ui/feature-gates/feature-gated-feature-in-macro-arg.rs:2:// test succeeds due to the acceptance of a feature, pick a new feature to
tests/ui/feature-gates/feature-gate-ffi_returns_twice.stderr:1:error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-ffi_returns_twice.stderr:2:  --> $DIR/feature-gate-ffi_returns_twice.rs:4:5
tests/ui/feature-gates/feature-gate-ffi_returns_twice.stderr:8:   = help: add `#![feature(ffi_returns_twice)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-auto-traits.stderr:2:  --> $DIR/feature-gate-auto-traits.rs:6:1
tests/ui/feature-gates/feature-gate-auto-traits.stderr:8:   = help: add `#![feature(auto_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-auto-traits.stderr:11:  --> $DIR/feature-gate-auto-traits.rs:9:6
tests/ui/feature-gates/feature-gate-auto-traits.stderr:17:   = help: add `#![feature(negative_impls)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr:2:  --> $DIR/feature-gate-return_type_notation.rs:14:17
tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr:8:   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr:11:  --> $DIR/feature-gate-return_type_notation.rs:14:17
tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr:19:  --> $DIR/feature-gate-return_type_notation.rs:14:17
tests/ui/feature-gates/feature-gate-trait_upcasting.stderr:2:  --> $DIR/feature-gate-trait_upcasting.rs:11:25
tests/ui/feature-gates/feature-gate-trait_upcasting.stderr:8:   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-profiler-runtime.stderr:2:  --> $DIR/feature-gate-profiler-runtime.rs:1:1
tests/ui/feature-gates/feature-gate-profiler-runtime.stderr:7:   = help: add `#![feature(profiler_runtime)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-negate-unsigned.stderr:2:  --> $DIR/feature-gate-negate-unsigned.rs:10:23
tests/ui/feature-gates/feature-gate-negate-unsigned.stderr:13:  --> $DIR/feature-gate-negate-unsigned.rs:14:14
tests/ui/feature-gates/feature-gate-overlapping_marker_traits.stderr:2:  --> $DIR/feature-gate-overlapping_marker_traits.rs:6:1
tests/ui/feature-gates/feature-gate-no_coverage.rs:3:#[derive(PartialEq, Eq)] // ensure deriving `Eq` does not enable `feature(no_coverage)`
tests/ui/feature-gates/feature-gate-no_coverage.rs:9:#[no_coverage] //~ ERROR the `#[no_coverage]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-no_coverage.rs:10:fn requires_feature_no_coverage() -> bool {
tests/ui/feature-gates/feature-gate-fundamental.stderr:1:error[E0658]: the `#[fundamental]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-fundamental.stderr:2:  --> $DIR/feature-gate-fundamental.rs:1:1
tests/ui/feature-gates/feature-gate-fundamental.stderr:8:   = help: add `#![feature(fundamental)]` to the crate attributes to enable
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:1:error[E0658]: the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:2:  --> $DIR/feature-gate-optimize_attribute.rs:7:1
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:8:   = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:10:error[E0658]: the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:11:  --> $DIR/feature-gate-optimize_attribute.rs:10:1
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:17:   = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:19:error[E0658]: the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:20:  --> $DIR/feature-gate-optimize_attribute.rs:13:1
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:26:   = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:28:error[E0658]: the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:29:  --> $DIR/feature-gate-optimize_attribute.rs:4:1
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:35:   = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:37:error[E0658]: the `#[optimize]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:38:  --> $DIR/feature-gate-optimize_attribute.rs:2:1
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:44:   = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-optimize_attribute.stderr:47:  --> $DIR/feature-gate-optimize_attribute.rs:13:12
tests/ui/feature-gates/feature-gate-intrinsics.stderr:2:  --> $DIR/feature-gate-intrinsics.rs:1:8
tests/ui/feature-gates/feature-gate-intrinsics.stderr:7:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-intrinsics.stderr:10:  --> $DIR/feature-gate-intrinsics.rs:5:8
tests/ui/feature-gates/feature-gate-intrinsics.stderr:15:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-intrinsics.stderr:18:  --> $DIR/feature-gate-intrinsics.rs:2:5
tests/ui/feature-gates/feature-gate-intrinsics.stderr:24:  --> $DIR/feature-gate-intrinsics.rs:5:34
tests/ui/feature-gates/feature-gate-trait-alias.stderr:2:  --> $DIR/feature-gate-trait-alias.rs:1:1
tests/ui/feature-gates/feature-gate-trait-alias.stderr:8:   = help: add `#![feature(trait_alias)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-auto-traits.rs:2:// `auto_traits` feature gate
tests/ui/feature-gates/stable-features.stderr:1:error: the feature `test_accepted_feature` has been stable since 1.0.0 and no longer requires an attribute to enable
tests/ui/feature-gates/stable-features.stderr:2:  --> $DIR/stable-features.rs:6:12
tests/ui/feature-gates/stable-features.stderr:4:LL | #![feature(test_accepted_feature)]
tests/ui/feature-gates/stable-features.stderr:8:  --> $DIR/stable-features.rs:4:9
tests/ui/feature-gates/stable-features.stderr:10:LL | #![deny(stable_features)]
tests/ui/feature-gates/stable-features.stderr:13:error: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable
tests/ui/feature-gates/stable-features.stderr:14:  --> $DIR/stable-features.rs:9:12
tests/ui/feature-gates/stable-features.stderr:16:LL | #![feature(rust1)]
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_next.stderr:2:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_next.stderr:8:   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_next.stderr:11:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_next.stderr:19:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-extern_prelude.stderr:2:  --> $DIR/feature-gate-extern_prelude.rs:1:4
tests/ui/feature-gates/feature-gate-concat_idents2.stderr:1:error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-concat_idents2.stderr:2:  --> $DIR/feature-gate-concat_idents2.rs:2:5
tests/ui/feature-gates/feature-gate-concat_idents2.stderr:8:   = help: add `#![feature(concat_idents)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-concat_idents2.stderr:11:  --> $DIR/feature-gate-concat_idents2.rs:2:5
tests/ui/feature-gates/feature-gate-start.stderr:2:  --> $DIR/feature-gate-start.rs:2:1
tests/ui/feature-gates/feature-gate-start.stderr:8:   = help: add `#![feature(start)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-min_const_fn.rs:1:// Test use of min_const_fn without feature gate.
tests/ui/feature-gates/feature-gate-extern_absolute_paths.stderr:2:  --> $DIR/feature-gate-extern_absolute_paths.rs:1:5
tests/ui/feature-gates/feature-gate-extern_absolute_paths.stderr:10:  --> $DIR/feature-gate-extern_absolute_paths.rs:4:19
tests/ui/feature-gates/issue-43106-gating-of-derive.stderr:23:   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable
tests/ui/feature-gates/bench.stderr:1:error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable
tests/ui/feature-gates/bench.stderr:11:error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable
tests/ui/feature-gates/feature-gate-wasm_abi.rs:4:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-cfg_overflow_checks.stderr:2:  --> $DIR/feature-gate-cfg_overflow_checks.rs:3:7
tests/ui/feature-gates/feature-gate-cfg_overflow_checks.stderr:8:   = help: add `#![feature(cfg_overflow_checks)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-register_tool.rs:1:#![register_tool(tool)] //~ ERROR the `#[register_tool]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-allow-internal-unstable.stderr:1:error[E0658]: allow_internal_unstable side-steps feature gating and stability checks
tests/ui/feature-gates/feature-gate-allow-internal-unstable.stderr:2:  --> $DIR/feature-gate-allow-internal-unstable.rs:3:1
tests/ui/feature-gates/feature-gate-allow-internal-unstable.stderr:7:   = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-inherent_associated_types.rs:2:// feature gate is not used.
tests/ui/feature-gates/feature-gate-abi_unadjusted.stderr:2:  --> $DIR/feature-gate-abi_unadjusted.rs:1:8
tests/ui/feature-gates/feature-gate-abi_unadjusted.stderr:7:   = help: add `#![feature(abi_unadjusted)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr:2:  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:6:16
tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr:8:   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr:11:  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:13:16
tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr:17:   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr:20:  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:13:5
tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr:26:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:1:error[E0658]: use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:2:  --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:4:5
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:8:   = help: add `#![feature(fn_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:10:error[E0658]: use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:11:  --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:5:5
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:17:   = help: add `#![feature(fn_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:19:error[E0658]: use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:20:  --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:6:5
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr:26:   = help: add `#![feature(fn_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-feature-gate.rs:1:#![forbid(unstable_features)]
tests/ui/feature-gates/feature-gate-feature-gate.rs:2:#![feature(intrinsics)] //~ ERROR unstable feature
tests/ui/feature-gates/feature-gate-custom_mir.stderr:2:  --> $DIR/feature-gate-custom_mir.rs:5:1
tests/ui/feature-gates/feature-gate-custom_mir.stderr:7:   = help: add `#![feature(custom_mir)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr:2:  --> $DIR/feature-gate-default_type_parameter_fallback.rs:3:8
tests/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr:12:  --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6
tests/ui/feature-gates/soft-syntax-gates-with-errors.stderr:8:   = help: add `#![feature(decl_macro)]` to the crate attributes to enable
tests/ui/feature-gates/soft-syntax-gates-with-errors.stderr:17:   = help: add `#![feature(decl_macro)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-fn_align.stderr:2:  --> $DIR/feature-gate-fn_align.rs:3:8
tests/ui/feature-gates/feature-gate-fn_align.stderr:8:   = help: add `#![feature(fn_align)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:2:  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:2:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:8:   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:11:  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:4:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:17:   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:20:  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:6:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:26:   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:29:  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:8:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:35:   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:38:  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:10:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:44:   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:47:  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:12:10
tests/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr:53:   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.rs:3:#![feature(arbitrary_self_types, unsize, coerce_unsized)]
tests/ui/feature-gates/feature-gate-extern_types.stderr:2:  --> $DIR/feature-gate-extern_types.rs:2:5
tests/ui/feature-gates/feature-gate-extern_types.stderr:8:   = help: add `#![feature(extern_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:1:error[E0658]: use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:2:  --> $DIR/feature-gate-unboxed-closures-method-calls.rs:4:7
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:8:   = help: add `#![feature(fn_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:10:error[E0658]: use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:11:  --> $DIR/feature-gate-unboxed-closures-method-calls.rs:5:7
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:17:   = help: add `#![feature(fn_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:19:error[E0658]: use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:20:  --> $DIR/feature-gate-unboxed-closures-method-calls.rs:6:7
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr:26:   = help: add `#![feature(fn_traits)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-exhaustive-patterns.stderr:2:  --> $DIR/feature-gate-exhaustive-patterns.rs:8:9
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:2:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:7:8
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:8:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:11:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:11:12
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:17:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:20:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:12:12
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:26:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:29:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:18:12
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:35:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:38:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:23:12
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:44:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:47:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:27:19
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:53:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:56:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:29:8
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:62:   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:65:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:29:1
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:71:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:7:1
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:77:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:12:5
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:83:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:18:5
tests/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr:89:  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:23:5
tests/ui/feature-gates/issue-43106-gating-of-bench.rs:5:#![feature(custom_inner_attributes)]
tests/ui/feature-gates/feature-gate-thread_local.stderr:1:error[E0658]: `#[thread_local]` is an experimental feature, and does not currently handle destructors
tests/ui/feature-gates/feature-gate-thread_local.stderr:2:  --> $DIR/feature-gate-thread_local.rs:8:1
tests/ui/feature-gates/feature-gate-thread_local.stderr:8:   = help: add `#![feature(thread_local)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr:2:  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:32:25
tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr:11:  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:25:18
tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr:19:  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:32:5
tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr:28:  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:25:18
tests/ui/feature-gates/feature-gate-builtin_syntax.stderr:2:  --> $DIR/feature-gate-builtin_syntax.rs:6:15
tests/ui/feature-gates/feature-gate-builtin_syntax.stderr:8:   = help: add `#![feature(builtin_syntax)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-min_const_fn.stderr:2:  --> $DIR/feature-gate-min_const_fn.rs:6:5
tests/ui/feature-gates/feature-gate-min_const_fn.stderr:8:  --> $DIR/feature-gate-min_const_fn.rs:7:5
tests/ui/feature-gates/feature-gate-min_const_fn.stderr:14:  --> $DIR/feature-gate-min_const_fn.rs:11:5
tests/ui/feature-gates/duplicate-features.stderr:1:error[E0636]: the feature `if_let` has already been declared
tests/ui/feature-gates/duplicate-features.stderr:2:  --> $DIR/duplicate-features.rs:7:12
tests/ui/feature-gates/duplicate-features.stderr:4:LL | #![feature(if_let)]
tests/ui/feature-gates/duplicate-features.stderr:7:error[E0636]: the feature `rust1` has already been declared
tests/ui/feature-gates/duplicate-features.stderr:8:  --> $DIR/duplicate-features.rs:4:12
tests/ui/feature-gates/duplicate-features.stderr:10:LL | #![feature(rust1)]
tests/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.stderr:2:  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:1:50
tests/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.stderr:8:   = help: add `#![feature(native_link_modifiers_as_needed)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg_sanitize.stderr:2:  --> $DIR/feature-gate-cfg_sanitize.rs:1:11
tests/ui/feature-gates/feature-gate-cfg_sanitize.stderr:8:   = help: add `#![feature(cfg_sanitize)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-asm_unwind.stderr:2:  --> $DIR/feature-gate-asm_unwind.rs:7:9
tests/ui/feature-gates/feature-gate-asm_unwind.stderr:8:   = help: add `#![feature(asm_unwind)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_alias_impl_trait.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/feature-gates/feature-gate-thiscall.rs:5:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-thiscall.rs:9:// Test that the "thiscall" ABI is feature-gated, and cannot be used when
tests/ui/feature-gates/feature-gate-thiscall.rs:10:// the `abi_thiscall` feature gate is not used.
tests/ui/feature-gates/feature-gate-linkage.stderr:2:  --> $DIR/feature-gate-linkage.rs:2:5
tests/ui/feature-gates/feature-gate-linkage.stderr:8:   = help: add `#![feature(linkage)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-closure_track_caller.stderr:2:  --> $DIR/feature-gate-closure_track_caller.rs:6:20
tests/ui/feature-gates/feature-gate-closure_track_caller.stderr:8:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-closure_track_caller.stderr:11:  --> $DIR/feature-gate-closure_track_caller.rs:7:22
tests/ui/feature-gates/feature-gate-closure_track_caller.stderr:17:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-closure_track_caller.stderr:20:  --> $DIR/feature-gate-closure_track_caller.rs:8:19
tests/ui/feature-gates/feature-gate-closure_track_caller.stderr:26:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generators.stderr:2:  --> $DIR/feature-gate-generators.rs:2:5
tests/ui/feature-gates/feature-gate-generators.stderr:8:   = help: add `#![feature(generators)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generators.stderr:11:  --> $DIR/feature-gate-generators.rs:8:5
tests/ui/feature-gates/feature-gate-generators.stderr:17:   = help: add `#![feature(generators)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generators.stderr:20:  --> $DIR/feature-gate-generators.rs:9:5
tests/ui/feature-gates/feature-gate-generators.stderr:26:   = help: add `#![feature(generators)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generators.stderr:29:  --> $DIR/feature-gate-generators.rs:2:5
tests/ui/feature-gates/feature-gate-imported_main.stderr:2:  --> $DIR/feature-gate-imported_main.rs:6:5
tests/ui/feature-gates/feature-gate-imported_main.stderr:8:   = help: add `#![feature(imported_main)]` to the crate attributes to enable
tests/ui/feature-gates/unknown-feature.rs:1:#![feature(unknown_rust_feature)] //~ ERROR unknown feature
tests/ui/feature-gates/feature-gate-inline_const.stderr:2:  --> $DIR/feature-gate-inline_const.rs:2:13
tests/ui/feature-gates/feature-gate-inline_const.stderr:8:   = help: add `#![feature(inline_const)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures.stderr:2:  --> $DIR/feature-gate-unboxed-closures.rs:10:12
tests/ui/feature-gates/feature-gate-unboxed-closures.stderr:8:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures.stderr:11:  --> $DIR/feature-gate-unboxed-closures.rs:5:6
tests/ui/feature-gates/feature-gate-unboxed-closures.stderr:17:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures.stderr:20:  --> $DIR/feature-gate-unboxed-closures.rs:5:6
tests/ui/feature-gates/feature-gate-unboxed-closures.stderr:25:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr:2:  --> $DIR/feature-gate-exclusive-range-pattern.rs:3:9
tests/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr:8:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-link_llvm_intrinsics.stderr:2:  --> $DIR/feature-gate-link_llvm_intrinsics.rs:3:5
tests/ui/feature-gates/feature-gate-link_llvm_intrinsics.stderr:8:   = help: add `#![feature(link_llvm_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-closure_track_caller.rs:2:#![feature(stmt_expr_attributes)]
tests/ui/feature-gates/feature-gate-closure_track_caller.rs:3:#![feature(generators)]
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:1:error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:2:  --> $DIR/feature-gate-arbitrary-self-types.rs:22:18
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:8:   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:11:error[E0658]: `Box<Ptr<Bar>>` cannot be used as the type of `self` without the `arbitrary_self_types` feature
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:12:  --> $DIR/feature-gate-arbitrary-self-types.rs:26:18
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:18:   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:21:error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbitrary_self_types` feature
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:22:  --> $DIR/feature-gate-arbitrary-self-types.rs:16:18
tests/ui/feature-gates/feature-gate-arbitrary-self-types.stderr:28:   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:2:  --> $DIR/feature-gate-generic_arg_infer.rs:11:27
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:8:  --> $DIR/feature-gate-generic_arg_infer.rs:14:18
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:14:  --> $DIR/feature-gate-generic_arg_infer.rs:14:18
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:20:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:23:  --> $DIR/feature-gate-generic_arg_infer.rs:20:20
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:29:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:32:  --> $DIR/feature-gate-generic_arg_infer.rs:11:27
tests/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr:38:   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr:2:  --> $DIR/feature-gate-return_type_notation.rs:14:17
tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr:8:   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-yeet_expr.stderr:2:  --> $DIR/feature-gate-yeet_expr.rs:4:5
tests/ui/feature-gates/feature-gate-yeet_expr.stderr:8:   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-yeet_expr.stderr:11:  --> $DIR/feature-gate-yeet_expr.rs:8:5
tests/ui/feature-gates/feature-gate-yeet_expr.stderr:17:   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-no_coverage.stderr:1:error[E0658]: the `#[no_coverage]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-no_coverage.stderr:2:  --> $DIR/feature-gate-no_coverage.rs:9:1
tests/ui/feature-gates/feature-gate-no_coverage.stderr:8:   = help: add `#![feature(no_coverage)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-with_negative_coherence.stderr:2:  --> $DIR/feature-gate-with_negative_coherence.rs:5:1
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.rs:4:    f.call(()); //~ ERROR use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.rs:5:    f.call_mut(()); //~ ERROR use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-method-calls.rs:6:    f.call_once(()); //~ ERROR use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr:1:error[E0658]: allow_internal_unstable side-steps feature gating and stability checks
tests/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr:2:  --> $DIR/feature-gate-allow-internal-unstable-struct.rs:4:1
tests/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr:7:   = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr:10:  --> $DIR/feature-gate-allow-internal-unstable-struct.rs:4:1
tests/ui/feature-gates/feature-gate-rustc_const_unstable.stderr:2:  --> $DIR/feature-gate-rustc_const_unstable.rs:3:1
tests/ui/feature-gates/feature-gate-rustc_const_unstable.stderr:4:LL | #[rustc_const_unstable(feature="fzzzzzt")]
tests/ui/feature-gates/feature-gate-unix_sigpipe.stderr:1:error[E0658]: the `#[unix_sigpipe]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-unix_sigpipe.stderr:2:  --> $DIR/feature-gate-unix_sigpipe.rs:3:1
tests/ui/feature-gates/feature-gate-unix_sigpipe.stderr:8:   = help: add `#![feature(unix_sigpipe)]` to the crate attributes to enable
tests/ui/feature-gates/unstable-attribute-allow-issue-0.stderr:4:LL | #[unstable(feature = "unstable_test_feature", issue = "0")]
tests/ui/feature-gates/unstable-attribute-allow-issue-0.stderr:12:LL | #[unstable(feature = "unstable_test_feature", issue = "something")]
tests/ui/feature-gates/feature-gate-log_syntax2.stderr:1:error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-log_syntax2.stderr:2:  --> $DIR/feature-gate-log_syntax2.rs:2:22
tests/ui/feature-gates/feature-gate-log_syntax2.stderr:8:   = help: add `#![feature(log_syntax)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:2:  --> $DIR/feature-gate-custom_attribute.rs:3:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:8:  --> $DIR/feature-gate-custom_attribute.rs:4:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:14:  --> $DIR/feature-gate-custom_attribute.rs:5:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:20:  --> $DIR/feature-gate-custom_attribute.rs:6:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:26:  --> $DIR/feature-gate-custom_attribute.rs:7:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:32:  --> $DIR/feature-gate-custom_attribute.rs:8:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:38:  --> $DIR/feature-gate-custom_attribute.rs:9:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:44:  --> $DIR/feature-gate-custom_attribute.rs:10:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:50:  --> $DIR/feature-gate-custom_attribute.rs:11:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:56:  --> $DIR/feature-gate-custom_attribute.rs:12:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:62:  --> $DIR/feature-gate-custom_attribute.rs:13:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:68:  --> $DIR/feature-gate-custom_attribute.rs:14:3
tests/ui/feature-gates/feature-gate-custom_attribute.stderr:74:  --> $DIR/feature-gate-custom_attribute.rs:15:3
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:2:  --> $DIR/feature-gate-abi_ptx.rs:8:8
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:8:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:11:  --> $DIR/feature-gate-abi_ptx.rs:11:12
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:17:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:20:  --> $DIR/feature-gate-abi_ptx.rs:12:12
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:26:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:29:  --> $DIR/feature-gate-abi_ptx.rs:17:12
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:35:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:38:  --> $DIR/feature-gate-abi_ptx.rs:21:12
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:44:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:47:  --> $DIR/feature-gate-abi_ptx.rs:24:19
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:53:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:56:  --> $DIR/feature-gate-abi_ptx.rs:26:8
tests/ui/feature-gates/feature-gate-abi_ptx.stderr:62:   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:2:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:9:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:13:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:20:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:23:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:30:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:33:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:40:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:43:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:50:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:53:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:60:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:63:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:70:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:73:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:80:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:83:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:90:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:93:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:100:   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:103:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:20:11
tests/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr:109:  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:12:15
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:2:  --> $DIR/feature-gate-trivial_bounds.rs:10:14
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:9:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:12:  --> $DIR/feature-gate-trivial_bounds.rs:12:16
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:19:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:22:  --> $DIR/feature-gate-trivial_bounds.rs:14:15
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:29:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:32:  --> $DIR/feature-gate-trivial_bounds.rs:16:15
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:39:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:42:  --> $DIR/feature-gate-trivial_bounds.rs:20:23
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:49:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:52:  --> $DIR/feature-gate-trivial_bounds.rs:28:14
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:59:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:62:  --> $DIR/feature-gate-trivial_bounds.rs:36:38
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:68:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:71:  --> $DIR/feature-gate-trivial_bounds.rs:40:20
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:79:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:82:  --> $DIR/feature-gate-trivial_bounds.rs:52:32
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:89:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:92:  --> $DIR/feature-gate-trivial_bounds.rs:55:26
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:99:  --> $DIR/feature-gate-trivial_bounds.rs:48:8
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:104:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:107:  --> $DIR/feature-gate-trivial_bounds.rs:59:30
tests/ui/feature-gates/feature-gate-trivial_bounds.stderr:114:   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
tests/ui/feature-gates/rustc-private.stderr:1:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui/feature-gates/rustc-private.stderr:8:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-doc_cfg.stderr:2:  --> $DIR/feature-gate-doc_cfg.rs:1:1
tests/ui/feature-gates/feature-gate-doc_cfg.stderr:8:   = help: add `#![feature(doc_cfg)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.no_current.stderr:2:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-return_type_notation.no_current.stderr:8:   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-transparent_unions.stderr:2:  --> $DIR/feature-gate-transparent_unions.rs:2:1
tests/ui/feature-gates/feature-gate-transparent_unions.stderr:8:   = help: add `#![feature(transparent_unions)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-staged_api.rs:1:#![stable(feature = "a", since = "b")]
tests/ui/feature-gates/feature-gate-staged_api.rs:8:#[stable(feature = "a", since = "b")]
tests/ui/feature-gates/feature-gate-non_lifetime_binders.stderr:2:  --> $DIR/feature-gate-non_lifetime_binders.rs:1:20
tests/ui/feature-gates/feature-gate-non_lifetime_binders.stderr:8:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustdoc_internals.stderr:2:  --> $DIR/feature-gate-rustdoc_internals.rs:1:1
tests/ui/feature-gates/feature-gate-rustdoc_internals.stderr:8:   = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustdoc_internals.stderr:11:  --> $DIR/feature-gate-rustdoc_internals.rs:7:1
tests/ui/feature-gates/feature-gate-rustdoc_internals.stderr:17:   = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-box_patterns.stderr:2:  --> $DIR/feature-gate-box_patterns.rs:2:9
tests/ui/feature-gates/feature-gate-box_patterns.stderr:8:   = help: add `#![feature(box_patterns)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:2:  --> $DIR/feature-gate-abi-x86-interrupt.rs:8:8
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:8:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:11:  --> $DIR/feature-gate-abi-x86-interrupt.rs:10:12
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:17:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:20:  --> $DIR/feature-gate-abi-x86-interrupt.rs:11:12
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:26:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:29:  --> $DIR/feature-gate-abi-x86-interrupt.rs:18:12
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:35:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:38:  --> $DIR/feature-gate-abi-x86-interrupt.rs:23:12
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:44:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:47:  --> $DIR/feature-gate-abi-x86-interrupt.rs:26:18
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:53:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:56:  --> $DIR/feature-gate-abi-x86-interrupt.rs:28:8
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr:62:   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-alloc-error-handler.stderr:1:error[E0658]: use of unstable library feature 'alloc_error_handler'
tests/ui/feature-gates/feature-gate-alloc-error-handler.stderr:2:  --> $DIR/feature-gate-alloc-error-handler.rs:8:3
tests/ui/feature-gates/feature-gate-alloc-error-handler.stderr:8:   = help: add `#![feature(alloc_error_handler)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.stderr:1:error[E0658]: rustc_allow_const_fn_unstable side-steps feature gating and stability checks
tests/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.stderr:2:  --> $DIR/feature-gate-rustc-allow-const-fn-unstable.rs:3:1
tests/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.stderr:8:   = help: add `#![feature(rustc_allow_const_fn_unstable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-exhaustive-patterns.rs:1:#![feature(never_type)]
tests/ui/feature-gates/feature-gate-rustc-attrs-1.stderr:2:  --> $DIR/feature-gate-rustc-attrs-1.rs:3:1
tests/ui/feature-gates/feature-gate-rustc-attrs-1.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustc-attrs-1.stderr:10:  --> $DIR/feature-gate-rustc-attrs-1.rs:4:1
tests/ui/feature-gates/feature-gate-rustc-attrs-1.stderr:15:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustc-attrs-1.stderr:18:  --> $DIR/feature-gate-rustc-attrs-1.rs:5:1
tests/ui/feature-gates/feature-gate-rustc-attrs-1.stderr:23:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-ffi_returns_twice.rs:4:    #[ffi_returns_twice] //~ ERROR the `#[ffi_returns_twice]` attribute is an experimental feature
tests/ui/feature-gates/stable-features.rs:1:// Testing that the stable_features lint catches use of stable
tests/ui/feature-gates/stable-features.rs:2:// language and lib features.
tests/ui/feature-gates/stable-features.rs:4:#![deny(stable_features)]
tests/ui/feature-gates/stable-features.rs:6:#![feature(test_accepted_feature)]
tests/ui/feature-gates/stable-features.rs:7://~^ ERROR the feature `test_accepted_feature` has been stable since 1.0.0
tests/ui/feature-gates/stable-features.rs:9:#![feature(rust1)]
tests/ui/feature-gates/stable-features.rs:10://~^ ERROR the feature `rust1` has been stable since 1.0.0
tests/ui/feature-gates/feature-gate-unsized_locals.stderr:2:  --> $DIR/feature-gate-unsized_locals.rs:1:6
tests/ui/feature-gates/feature-gate-unsized_locals.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/feature-gates/feature-gate-inherent_associated_types.stderr:2:  --> $DIR/feature-gate-inherent_associated_types.rs:7:5
tests/ui/feature-gates/feature-gate-inherent_associated_types.stderr:8:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.rs:4:    Fn::call(&f, ()); //~ ERROR use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.rs:5:    FnMut::call_mut(&mut f, ()); //~ ERROR use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.rs:6:    FnOnce::call_once(f, ()); //~ ERROR use of unstable library feature 'fn_traits'
tests/ui/feature-gates/feature-gate-return_type_notation.rs:7:#![feature(async_fn_in_trait)]
tests/ui/feature-gates/feature-gate-custom_test_frameworks.stderr:1:error[E0658]: use of unstable library feature 'custom_test_frameworks': custom test frameworks are an unstable feature
tests/ui/feature-gates/feature-gate-custom_test_frameworks.stderr:2:  --> $DIR/feature-gate-custom_test_frameworks.rs:3:3
tests/ui/feature-gates/feature-gate-custom_test_frameworks.stderr:8:   = help: add `#![feature(custom_test_frameworks)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-custom_test_frameworks.stderr:10:error[E0658]: custom test frameworks are an unstable feature
tests/ui/feature-gates/feature-gate-custom_test_frameworks.stderr:11:  --> $DIR/feature-gate-custom_test_frameworks.rs:1:1
tests/ui/feature-gates/feature-gate-custom_test_frameworks.stderr:17:   = help: add `#![feature(custom_test_frameworks)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:2:  --> $DIR/feature-gate-cfg-target-abi.rs:1:7
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:8:   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:11:  --> $DIR/feature-gate-cfg-target-abi.rs:4:12
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:17:   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:20:  --> $DIR/feature-gate-cfg-target-abi.rs:7:19
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:26:   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:29:  --> $DIR/feature-gate-cfg-target-abi.rs:11:10
tests/ui/feature-gates/feature-gate-cfg-target-abi.stderr:35:   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures.rs:1:#![feature(fn_traits)]
tests/ui/feature-gates/feature-gate-repr128.stderr:2:  --> $DIR/feature-gate-repr128.rs:2:1
tests/ui/feature-gates/feature-gate-repr128.stderr:8:   = help: add `#![feature(repr128)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi_ptx.rs:4:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_current.stderr:2:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_current.stderr:8:   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_current.stderr:11:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-return_type_notation.cfg_current.stderr:19:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/issue-49983-see-issue-0.stderr:1:error[E0658]: use of unstable library feature 'ptr_internals': use `NonNull` instead and consider `PhantomData<T>` (if you also use `#[may_dangle]`), `Send`, and/or `Sync`
tests/ui/feature-gates/issue-49983-see-issue-0.stderr:7:   = help: add `#![feature(ptr_internals)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-simd.stderr:2:  --> $DIR/feature-gate-simd.rs:3:1
tests/ui/feature-gates/feature-gate-simd.stderr:8:   = help: add `#![feature(repr_simd)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-thread_local.rs:2:// feature gate.
tests/ui/feature-gates/feature-gate-thread_local.rs:8:#[thread_local] //~ ERROR `#[thread_local]` is an experimental feature
tests/ui/feature-gates/feature-gate-prelude_import.stderr:2:  --> $DIR/feature-gate-prelude_import.rs:1:1
tests/ui/feature-gates/feature-gate-prelude_import.stderr:7:   = help: add `#![feature(prelude_import)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-decl_macro.stderr:2:  --> $DIR/feature-gate-decl_macro.rs:3:1
tests/ui/feature-gates/feature-gate-decl_macro.stderr:8:   = help: add `#![feature(decl_macro)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-marker_trait_attr.rs:4://~^ ERROR the `#[marker]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-associated_type_bounds.rs:58:// FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.
tests/ui/feature-gates/feature-gate-associated_type_bounds.rs:64:// FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.
tests/ui/feature-gates/feature-gate-associated_type_bounds.rs:71:    // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.stderr:1:error: the feature `unsafe_pin_internals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.stderr:2:  --> $DIR/feature-gate-unsafe_pin_internals.rs:3:12
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.stderr:4:LL | #![feature(unsafe_pin_internals)]
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.stderr:8:  --> $DIR/feature-gate-unsafe_pin_internals.rs:2:11
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.stderr:10:LL | #![forbid(incomplete_features, unsafe_code)]
tests/ui/feature-gates/feature-gate-allocator_internals.stderr:1:error[E0658]: the `#[default_lib_allocator]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-allocator_internals.stderr:2:  --> $DIR/feature-gate-allocator_internals.rs:1:1
tests/ui/feature-gates/feature-gate-allocator_internals.stderr:7:   = help: add `#![feature(allocator_internals)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-never_type.rs:1:// Test that ! errors when used in illegal positions with feature(never_type) disabled
tests/ui/feature-gates/feature-gate-generic_arg_infer.rs:1:// [feature] run-pass
tests/ui/feature-gates/feature-gate-generic_arg_infer.rs:2:// revisions: normal feature
tests/ui/feature-gates/feature-gate-generic_arg_infer.rs:4:#![cfg_attr(feature, feature(generic_arg_infer))]
tests/ui/feature-gates/trace_macros-gate.rs:1:// Test that the trace_macros feature gate is on.
tests/ui/feature-gates/soft-syntax-gates-without-errors.stderr:8:   = help: add `#![feature(decl_macro)]` to the crate attributes to enable
tests/ui/feature-gates/soft-syntax-gates-without-errors.stderr:19:   = help: add `#![feature(decl_macro)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:2:  --> $DIR/feature-gate-wasm_abi.rs:8:8
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:8:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:11:  --> $DIR/feature-gate-wasm_abi.rs:11:12
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:17:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:20:  --> $DIR/feature-gate-wasm_abi.rs:12:12
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:26:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:29:  --> $DIR/feature-gate-wasm_abi.rs:17:12
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:35:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:38:  --> $DIR/feature-gate-wasm_abi.rs:21:12
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:44:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:47:  --> $DIR/feature-gate-wasm_abi.rs:24:19
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:53:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:56:  --> $DIR/feature-gate-wasm_abi.rs:26:8
tests/ui/feature-gates/feature-gate-wasm_abi.stderr:62:   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-simd-ffi.stderr:2:  --> $DIR/feature-gate-simd-ffi.rs:9:17
tests/ui/feature-gates/feature-gate-simd-ffi.stderr:7:   = help: add `#![feature(simd_ffi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-simd-ffi.stderr:10:  --> $DIR/feature-gate-simd-ffi.rs:10:15
tests/ui/feature-gates/feature-gate-simd-ffi.stderr:15:   = help: add `#![feature(simd_ffi)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:2:  --> $DIR/feature-gate-type_privacy_lints.rs:3:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:9:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:13:  --> $DIR/feature-gate-type_privacy_lints.rs:6:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:20:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:23:  --> $DIR/feature-gate-type_privacy_lints.rs:9:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:30:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:33:  --> $DIR/feature-gate-type_privacy_lints.rs:3:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:40:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:43:  --> $DIR/feature-gate-type_privacy_lints.rs:6:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:50:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:53:  --> $DIR/feature-gate-type_privacy_lints.rs:9:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:60:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:63:  --> $DIR/feature-gate-type_privacy_lints.rs:3:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:70:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:73:  --> $DIR/feature-gate-type_privacy_lints.rs:6:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:80:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:83:  --> $DIR/feature-gate-type_privacy_lints.rs:9:1
tests/ui/feature-gates/feature-gate-type_privacy_lints.stderr:90:   = help: add `#![feature(type_privacy_lints)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-concat_bytes.rs:2:    let a = concat_bytes!(b'A', b"BC"); //~ ERROR use of unstable library feature 'concat_bytes'
tests/ui/feature-gates/feature-gate-trivial_bounds-lint.rs:4:#![deny(trivial_bounds)] // Ignored without the trivial_bounds feature flag.
tests/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr:2:  --> $DIR/feature-gate-closure_lifetime_binder.rs:2:5
tests/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr:8:   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr:12:  --> $DIR/feature-gate-closure_lifetime_binder.rs:4:5
tests/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr:18:   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr:22:  --> $DIR/feature-gate-closure_lifetime_binder.rs:6:5
tests/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr:28:   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-ffi_const.rs:4:    #[ffi_const] //~ ERROR the `#[ffi_const]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-no_sanitize.rs:2://~^ the `#[no_sanitize]` attribute is an experimental feature
tests/ui/feature-gates/allow-features-empty.stderr:1:error[E0725]: the feature `lang_items` is not in the list of allowed features
tests/ui/feature-gates/allow-features-empty.stderr:2:  --> $DIR/allow-features-empty.rs:4:12
tests/ui/feature-gates/allow-features-empty.stderr:4:LL | #![feature(lang_items)]
tests/ui/feature-gates/allow-features-empty.stderr:7:error[E0725]: the feature `unknown_stdlib_feature` is not in the list of allowed features
tests/ui/feature-gates/allow-features-empty.stderr:8:  --> $DIR/allow-features-empty.rs:6:12
tests/ui/feature-gates/allow-features-empty.stderr:10:LL | #![feature(unknown_stdlib_feature)]
tests/ui/feature-gates/feature-gate-lang-items.stderr:2:  --> $DIR/feature-gate-lang-items.rs:1:1
tests/ui/feature-gates/feature-gate-lang-items.stderr:7:   = help: add `#![feature(lang_items)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-lang-items.stderr:10:  --> $DIR/feature-gate-lang-items.rs:1:1
tests/ui/feature-gates/feature-gate-is_sorted.stderr:1:error[E0658]: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.stderr:2:  --> $DIR/feature-gate-is_sorted.rs:3:33
tests/ui/feature-gates/feature-gate-is_sorted.stderr:8:   = help: add `#![feature(is_sorted)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-is_sorted.stderr:10:error[E0658]: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.stderr:11:  --> $DIR/feature-gate-is_sorted.rs:5:39
tests/ui/feature-gates/feature-gate-is_sorted.stderr:17:   = help: add `#![feature(is_sorted)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-is_sorted.stderr:19:error[E0658]: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.stderr:20:  --> $DIR/feature-gate-is_sorted.rs:9:26
tests/ui/feature-gates/feature-gate-is_sorted.stderr:26:   = help: add `#![feature(is_sorted)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-is_sorted.stderr:28:error[E0658]: use of unstable library feature 'is_sorted': new API
tests/ui/feature-gates/feature-gate-is_sorted.stderr:29:  --> $DIR/feature-gate-is_sorted.rs:11:32
tests/ui/feature-gates/feature-gate-is_sorted.stderr:35:   = help: add `#![feature(is_sorted)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:2:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:39
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:8:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:4:23
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:16:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:45
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:22:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:7:8
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:38:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:39
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:44:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:11:8
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:53:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:47
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:59:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:22
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:68:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr:74:  --> $DIR/feature-gate-object_safe_for_dispatch.rs:4:23
tests/ui/feature-gates/feature-gate-generic_associated_types_extended.rs:1:// This feature doesn't *currently* fire on any specific code; it's just a
tests/ui/feature-gates/feature-gate-public_private_dependencies.rs:1:// This test is different from other feature gate tests.
tests/ui/feature-gates/feature-gate-public_private_dependencies.rs:2:// Instead of checking that an error occurs without the feature gate,
tests/ui/feature-gates/feature-gate-public_private_dependencies.rs:3:// it checks that *no* errors/warnings occurs without the feature gate.
tests/ui/feature-gates/feature-gate-public_private_dependencies.rs:10:// Without ![feature(public_private_dependencies)],
tests/ui/feature-gates/feature-gate-trace_macros.stderr:1:error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-trace_macros.stderr:2:  --> $DIR/feature-gate-trace_macros.rs:2:5
tests/ui/feature-gates/feature-gate-trace_macros.stderr:8:   = help: add `#![feature(trace_macros)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-may-dangle.rs:3:// Check that `may_dangle` is rejected if `dropck_eyepatch` feature gate is absent.
tests/ui/feature-gates/feature-gate-doc_masked.stderr:2:  --> $DIR/feature-gate-doc_masked.rs:1:1
tests/ui/feature-gates/feature-gate-doc_masked.stderr:8:   = help: add `#![feature(doc_masked)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-deprecated_safe.stderr:1:error[E0658]: the `#[deprecated_safe]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-deprecated_safe.stderr:2:  --> $DIR/feature-gate-deprecated_safe.rs:1:1
tests/ui/feature-gates/feature-gate-deprecated_safe.stderr:8:   = help: add `#![feature(deprecated_safe)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-deprecated_safe.stderr:10:error[E0658]: the `#[deprecated_safe]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-deprecated_safe.stderr:11:  --> $DIR/feature-gate-deprecated_safe.rs:4:1
tests/ui/feature-gates/feature-gate-deprecated_safe.stderr:17:   = help: add `#![feature(deprecated_safe)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rustc-attrs.rs:1:// Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.
tests/ui/feature-gates/feature-gate-rustc-attrs.rs:3:#![feature(decl_macro)]
tests/ui/feature-gates/feature-gate-concat_idents3.stderr:1:error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-concat_idents3.stderr:2:  --> $DIR/feature-gate-concat_idents3.rs:5:20
tests/ui/feature-gates/feature-gate-concat_idents3.stderr:8:   = help: add `#![feature(concat_idents)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-concat_idents3.stderr:10:error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-concat_idents3.stderr:11:  --> $DIR/feature-gate-concat_idents3.rs:6:20
tests/ui/feature-gates/feature-gate-concat_idents3.stderr:17:   = help: add `#![feature(concat_idents)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr:2:  --> $DIR/feature-gate-precise_pointer_size_matching.rs:2:11
tests/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr:9:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching
tests/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr:17:  --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11
tests/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr:24:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/feature-gates/feature-gate-abi-x86-interrupt.rs:4:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-vectorcall.rs:5:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-vectorcall.rs:9:// Test that the "vectorcall" ABI is feature-gated, and cannot be used when
tests/ui/feature-gates/feature-gate-vectorcall.rs:10:// the `vectorcall` feature gate is not used.
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:2:  --> $DIR/feature-gate-rust_cold_cc.rs:3:8
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:8:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:11:  --> $DIR/feature-gate-rust_cold_cc.rs:6:12
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:17:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:20:  --> $DIR/feature-gate-rust_cold_cc.rs:7:12
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:26:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:29:  --> $DIR/feature-gate-rust_cold_cc.rs:12:12
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:35:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:38:  --> $DIR/feature-gate-rust_cold_cc.rs:16:12
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:44:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:47:  --> $DIR/feature-gate-rust_cold_cc.rs:19:19
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:53:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:56:  --> $DIR/feature-gate-rust_cold_cc.rs:21:8
tests/ui/feature-gates/feature-gate-rust_cold_cc.stderr:62:   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-ffi_const.stderr:1:error[E0658]: the `#[ffi_const]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-ffi_const.stderr:2:  --> $DIR/feature-gate-ffi_const.rs:4:5
tests/ui/feature-gates/feature-gate-ffi_const.stderr:8:   = help: add `#![feature(ffi_const)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-thread-local.rs:4:#![feature(thread_local)]
tests/ui/feature-gates/feature-gate-dispatch-from-dyn-cell.stderr:2:  --> $DIR/feature-gate-dispatch-from-dyn-cell.rs:6:19
tests/ui/feature-gates/feature-gate-used_with_arg.stderr:2:  --> $DIR/feature-gate-used_with_arg.rs:1:1
tests/ui/feature-gates/feature-gate-used_with_arg.stderr:8:   = help: add `#![feature(used_with_arg)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-used_with_arg.stderr:11:  --> $DIR/feature-gate-used_with_arg.rs:4:1
tests/ui/feature-gates/feature-gate-used_with_arg.stderr:17:   = help: add `#![feature(used_with_arg)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-test_unstable_lint.stderr:2:  --> $DIR/feature-gate-test_unstable_lint.rs:4:1
tests/ui/feature-gates/feature-gate-test_unstable_lint.stderr:8:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-test_unstable_lint.stderr:12:  --> $DIR/feature-gate-test_unstable_lint.rs:4:1
tests/ui/feature-gates/feature-gate-test_unstable_lint.stderr:18:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-test_unstable_lint.stderr:21:  --> $DIR/feature-gate-test_unstable_lint.rs:4:1
tests/ui/feature-gates/feature-gate-test_unstable_lint.stderr:27:   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:2:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:12:12
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:8:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:11:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:19:12
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:17:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:20:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:26:12
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:26:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:29:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:33:12
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:35:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:38:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:44:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:47:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:52:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:55:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:60:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:63:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:69:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:75:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:81:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:84:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:89:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:92:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:98:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:101:  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr:106:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-generic_associated_types_extended.stderr:2:  --> $DIR/feature-gate-generic_associated_types_extended.rs:3:1
tests/ui/feature-gates/feature-gate-generic_associated_types_extended.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-no_core.rs:3:#![no_core] //~ ERROR the `#[no_core]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:2:  --> $DIR/feature-gate-abi-avr-interrupt.rs:11:8
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:8:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:11:  --> $DIR/feature-gate-abi-avr-interrupt.rs:13:8
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:17:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:20:  --> $DIR/feature-gate-abi-avr-interrupt.rs:17:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:26:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:29:  --> $DIR/feature-gate-abi-avr-interrupt.rs:19:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:35:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:38:  --> $DIR/feature-gate-abi-avr-interrupt.rs:22:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:44:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:47:  --> $DIR/feature-gate-abi-avr-interrupt.rs:24:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:53:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:56:  --> $DIR/feature-gate-abi-avr-interrupt.rs:30:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:62:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:65:  --> $DIR/feature-gate-abi-avr-interrupt.rs:32:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:71:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:74:  --> $DIR/feature-gate-abi-avr-interrupt.rs:37:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:80:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:83:  --> $DIR/feature-gate-abi-avr-interrupt.rs:39:12
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:89:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:92:  --> $DIR/feature-gate-abi-avr-interrupt.rs:43:18
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:98:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:101:  --> $DIR/feature-gate-abi-avr-interrupt.rs:45:19
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:107:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:110:  --> $DIR/feature-gate-abi-avr-interrupt.rs:48:8
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:116:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:119:  --> $DIR/feature-gate-abi-avr-interrupt.rs:50:8
tests/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr:125:   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-needs-allocator.stderr:1:error[E0658]: the `#[needs_allocator]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-needs-allocator.stderr:2:  --> $DIR/feature-gate-needs-allocator.rs:1:1
tests/ui/feature-gates/feature-gate-needs-allocator.stderr:7:   = help: add `#![feature(allocator_internals)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-stmt_expr_attributes.stderr:2:  --> $DIR/feature-gate-stmt_expr_attributes.rs:1:16
tests/ui/feature-gates/feature-gate-stmt_expr_attributes.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/feature-gates/allow-features.stderr:1:error[E0725]: the feature `unknown_stdlib_feature` is not in the list of allowed features
tests/ui/feature-gates/allow-features.stderr:2:  --> $DIR/allow-features.rs:6:12
tests/ui/feature-gates/allow-features.stderr:4:LL | #![feature(unknown_stdlib_feature)]
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:2:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:8:8
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:8:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:11:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:12:12
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:17:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:20:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:15:12
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:26:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:29:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:21:12
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:35:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:38:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:26:12
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:44:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:47:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:30:18
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:53:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:56:  --> $DIR/feature-gate-abi-msp430-interrupt.rs:33:8
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr:62:   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-return_type_notation.no_next.stderr:2:  --> $DIR/feature-gate-return_type_notation.rs:17:17
tests/ui/feature-gates/feature-gate-return_type_notation.no_next.stderr:8:   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr:1:error[E0658]: allow_internal_unstable side-steps feature gating and stability checks
tests/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr:2:  --> $DIR/feature-gate-allow-internal-unstable-nested-macro.rs:8:9
tests/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr:10:   = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-custom_mir.rs:1:#![feature(core_intrinsics)]
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:2:  --> $DIR/feature-gate-cfg-target-compact.rs:1:7
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:8:   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:11:  --> $DIR/feature-gate-cfg-target-compact.rs:4:12
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:17:   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:20:  --> $DIR/feature-gate-cfg-target-compact.rs:7:19
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:26:   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:29:  --> $DIR/feature-gate-cfg-target-compact.rs:11:10
tests/ui/feature-gates/feature-gate-cfg-target-compact.stderr:35:   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable
tests/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.rs:125:    // for `fn f()` case, see feature-gate-start.rs
tests/ui/feature-gates/feature-gate-ffi_pure.stderr:1:error[E0658]: the `#[ffi_pure]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-ffi_pure.stderr:2:  --> $DIR/feature-gate-ffi_pure.rs:4:5
tests/ui/feature-gates/feature-gate-ffi_pure.stderr:8:   = help: add `#![feature(ffi_pure)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-const_refs_to_cell.rs:3:#![feature(const_refs_to_cell)]
tests/ui/feature-gates/feature-gate-more-qualified-paths.stderr:2:  --> $DIR/feature-gate-more-qualified-paths.rs:3:9
tests/ui/feature-gates/feature-gate-more-qualified-paths.stderr:8:   = help: add `#![feature(more_qualified_paths)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-more-qualified-paths.stderr:11:  --> $DIR/feature-gate-more-qualified-paths.rs:5:13
tests/ui/feature-gates/feature-gate-more-qualified-paths.stderr:17:   = help: add `#![feature(more_qualified_paths)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-more-qualified-paths.stderr:20:  --> $DIR/feature-gate-more-qualified-paths.rs:7:9
tests/ui/feature-gates/feature-gate-more-qualified-paths.stderr:26:   = help: add `#![feature(more_qualified_paths)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-object_safe_for_dispatch.rs:2:// are gated by `object_safe_for_dispatch` feature gate.
tests/ui/feature-gates/feature-gate-large-assignments.stderr:1:error[E0658]: the `#[move_size_limit]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-large-assignments.stderr:2:  --> $DIR/feature-gate-large-assignments.rs:3:1
tests/ui/feature-gates/feature-gate-large-assignments.stderr:8:   = help: add `#![feature(large_assignments)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-omit-gdb-pretty-printer-section.stderr:2:  --> $DIR/feature-gate-omit-gdb-pretty-printer-section.rs:1:1
tests/ui/feature-gates/feature-gate-omit-gdb-pretty-printer-section.stderr:7:   = help: add `#![feature(omit_gdb_pretty_printer_section)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-log_syntax.stderr:1:error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-log_syntax.stderr:2:  --> $DIR/feature-gate-log_syntax.rs:2:5
tests/ui/feature-gates/feature-gate-log_syntax.stderr:8:   = help: add `#![feature(log_syntax)]` to the crate attributes to enable
tests/ui/feature-gates/gated-bad-feature.stderr:1:error[E0556]: malformed `feature` attribute input
tests/ui/feature-gates/gated-bad-feature.stderr:2:  --> $DIR/gated-bad-feature.rs:1:25
tests/ui/feature-gates/gated-bad-feature.stderr:4:LL | #![feature(foo_bar_baz, foo(bar), foo = "baz", foo)]
tests/ui/feature-gates/gated-bad-feature.stderr:7:error[E0556]: malformed `feature` attribute input
tests/ui/feature-gates/gated-bad-feature.stderr:8:  --> $DIR/gated-bad-feature.rs:1:35
tests/ui/feature-gates/gated-bad-feature.stderr:10:LL | #![feature(foo_bar_baz, foo(bar), foo = "baz", foo)]
tests/ui/feature-gates/gated-bad-feature.stderr:13:error[E0557]: feature has been removed
tests/ui/feature-gates/gated-bad-feature.stderr:14:  --> $DIR/gated-bad-feature.rs:8:12
tests/ui/feature-gates/gated-bad-feature.stderr:16:LL | #![feature(test_removed_feature)]
tests/ui/feature-gates/gated-bad-feature.stderr:17:   |            ^^^^^^^^^^^^^^^^^^^^ feature has been removed
tests/ui/feature-gates/gated-bad-feature.stderr:19:error: malformed `feature` attribute input
tests/ui/feature-gates/gated-bad-feature.stderr:20:  --> $DIR/gated-bad-feature.rs:6:1
tests/ui/feature-gates/gated-bad-feature.stderr:22:LL | #![feature]
tests/ui/feature-gates/gated-bad-feature.stderr:23:   | ^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name2, ...)]`
tests/ui/feature-gates/gated-bad-feature.stderr:25:error: malformed `feature` attribute input
tests/ui/feature-gates/gated-bad-feature.stderr:26:  --> $DIR/gated-bad-feature.rs:7:1
tests/ui/feature-gates/gated-bad-feature.stderr:28:LL | #![feature = "foo"]
tests/ui/feature-gates/gated-bad-feature.stderr:29:   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name2, ...)]`
tests/ui/feature-gates/gated-bad-feature.stderr:31:error[E0635]: unknown feature `foo_bar_baz`
tests/ui/feature-gates/gated-bad-feature.stderr:32:  --> $DIR/gated-bad-feature.rs:1:12
tests/ui/feature-gates/gated-bad-feature.stderr:34:LL | #![feature(foo_bar_baz, foo(bar), foo = "baz", foo)]
tests/ui/feature-gates/gated-bad-feature.stderr:37:error[E0635]: unknown feature `foo`
tests/ui/feature-gates/gated-bad-feature.stderr:38:  --> $DIR/gated-bad-feature.rs:1:48
tests/ui/feature-gates/gated-bad-feature.stderr:40:LL | #![feature(foo_bar_baz, foo(bar), foo = "baz", foo)]
tests/ui/feature-gates/feature-gate-assoc-type-defaults.stderr:2:  --> $DIR/feature-gate-assoc-type-defaults.rs:4:5
tests/ui/feature-gates/feature-gate-assoc-type-defaults.stderr:8:   = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-associated_const_equality.stderr:2:  --> $DIR/feature-gate-associated_const_equality.rs:10:28
tests/ui/feature-gates/feature-gate-associated_const_equality.stderr:8:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-concat_idents.stderr:1:error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-concat_idents.stderr:2:  --> $DIR/feature-gate-concat_idents.rs:5:13
tests/ui/feature-gates/feature-gate-concat_idents.stderr:8:   = help: add `#![feature(concat_idents)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-concat_idents.stderr:10:error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change
tests/ui/feature-gates/feature-gate-concat_idents.stderr:11:  --> $DIR/feature-gate-concat_idents.rs:6:13
tests/ui/feature-gates/feature-gate-concat_idents.stderr:17:   = help: add `#![feature(concat_idents)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-register_tool.stderr:1:error[E0658]: the `#[register_tool]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-register_tool.stderr:2:  --> $DIR/feature-gate-register_tool.rs:1:1
tests/ui/feature-gates/feature-gate-register_tool.stderr:8:   = help: add `#![feature(register_tool)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-no_core.stderr:1:error[E0658]: the `#[no_core]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-no_core.stderr:2:  --> $DIR/feature-gate-no_core.rs:3:1
tests/ui/feature-gates/feature-gate-no_core.stderr:8:   = help: add `#![feature(no_core)]` to the crate attributes to enable
tests/ui/feature-gates/allow-features.rs:1:// compile-flags: -Z allow_features=lang_items
tests/ui/feature-gates/allow-features.rs:4:#![feature(lang_items)]
tests/ui/feature-gates/allow-features.rs:6:#![feature(unknown_stdlib_feature)] //~ ERROR
tests/ui/feature-gates/bench.rs:3:#[bench] //~ ERROR use of unstable library feature 'test'
tests/ui/feature-gates/bench.rs:7:use bench as _; //~ ERROR use of unstable library feature 'test'
tests/ui/feature-gates/feature-gate-abi.stderr:2:  --> $DIR/feature-gate-abi.rs:15:8
tests/ui/feature-gates/feature-gate-abi.stderr:7:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:10:  --> $DIR/feature-gate-abi.rs:17:8
tests/ui/feature-gates/feature-gate-abi.stderr:16:   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:19:  --> $DIR/feature-gate-abi.rs:19:8
tests/ui/feature-gates/feature-gate-abi.stderr:25:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:28:  --> $DIR/feature-gate-abi.rs:23:12
tests/ui/feature-gates/feature-gate-abi.stderr:33:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:36:  --> $DIR/feature-gate-abi.rs:25:12
tests/ui/feature-gates/feature-gate-abi.stderr:42:   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:45:  --> $DIR/feature-gate-abi.rs:27:12
tests/ui/feature-gates/feature-gate-abi.stderr:51:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:54:  --> $DIR/feature-gate-abi.rs:29:12
tests/ui/feature-gates/feature-gate-abi.stderr:60:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:63:  --> $DIR/feature-gate-abi.rs:36:12
tests/ui/feature-gates/feature-gate-abi.stderr:68:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:71:  --> $DIR/feature-gate-abi.rs:38:12
tests/ui/feature-gates/feature-gate-abi.stderr:77:   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:80:  --> $DIR/feature-gate-abi.rs:40:12
tests/ui/feature-gates/feature-gate-abi.stderr:86:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:89:  --> $DIR/feature-gate-abi.rs:45:12
tests/ui/feature-gates/feature-gate-abi.stderr:94:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:97:  --> $DIR/feature-gate-abi.rs:47:12
tests/ui/feature-gates/feature-gate-abi.stderr:103:   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:106:  --> $DIR/feature-gate-abi.rs:49:12
tests/ui/feature-gates/feature-gate-abi.stderr:112:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:115:  --> $DIR/feature-gate-abi.rs:53:18
tests/ui/feature-gates/feature-gate-abi.stderr:120:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:123:  --> $DIR/feature-gate-abi.rs:54:18
tests/ui/feature-gates/feature-gate-abi.stderr:129:   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:132:  --> $DIR/feature-gate-abi.rs:55:18
tests/ui/feature-gates/feature-gate-abi.stderr:138:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:141:  --> $DIR/feature-gate-abi.rs:58:8
tests/ui/feature-gates/feature-gate-abi.stderr:146:   = help: add `#![feature(intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:149:  --> $DIR/feature-gate-abi.rs:59:8
tests/ui/feature-gates/feature-gate-abi.stderr:155:   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:158:  --> $DIR/feature-gate-abi.rs:60:8
tests/ui/feature-gates/feature-gate-abi.stderr:164:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi.stderr:167:  --> $DIR/feature-gate-abi.rs:23:32
tests/ui/feature-gates/feature-gate-abi.stderr:173:  --> $DIR/feature-gate-abi.rs:25:36
tests/ui/feature-gates/feature-gate-abi.stderr:179:  --> $DIR/feature-gate-abi.rs:15:33
tests/ui/feature-gates/feature-gate-abi.stderr:185:  --> $DIR/feature-gate-abi.rs:17:37
tests/ui/feature-gates/feature-gate-abi.stderr:191:  --> $DIR/feature-gate-abi.rs:36:37
tests/ui/feature-gates/feature-gate-abi.stderr:197:  --> $DIR/feature-gate-abi.rs:38:41
tests/ui/feature-gates/feature-gate-abi.stderr:203:  --> $DIR/feature-gate-abi.rs:45:38
tests/ui/feature-gates/feature-gate-abi.stderr:209:  --> $DIR/feature-gate-abi.rs:47:42
tests/ui/feature-gates/unstable-attribute-allow-issue-0.rs:3:#![feature(staged_api)]
tests/ui/feature-gates/unstable-attribute-allow-issue-0.rs:4:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/feature-gates/unstable-attribute-allow-issue-0.rs:6:#[unstable(feature = "unstable_test_feature", issue = "0")]
tests/ui/feature-gates/unstable-attribute-allow-issue-0.rs:9:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/feature-gates/unstable-attribute-allow-issue-0.rs:12:#[unstable(feature = "unstable_test_feature", issue = "something")]
tests/ui/feature-gates/feature-gate-collapse_debuginfo.rs:2://~^ ERROR the `#[collapse_debuginfo]` attribute is an experimental feature
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:2:  --> $DIR/feature-gate-strict_provenance.rs:3:1
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:9:   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:13:  --> $DIR/feature-gate-strict_provenance.rs:7:1
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:20:   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:23:  --> $DIR/feature-gate-strict_provenance.rs:3:1
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:30:   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:33:  --> $DIR/feature-gate-strict_provenance.rs:7:1
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:40:   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:43:  --> $DIR/feature-gate-strict_provenance.rs:3:1
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:50:   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:53:  --> $DIR/feature-gate-strict_provenance.rs:7:1
tests/ui/feature-gates/feature-gate-strict_provenance.stderr:60:   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-never_type.stderr:2:  --> $DIR/feature-gate-never_type.rs:7:17
tests/ui/feature-gates/feature-gate-never_type.stderr:8:   = help: add `#![feature(never_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-never_type.stderr:11:  --> $DIR/feature-gate-never_type.rs:8:20
tests/ui/feature-gates/feature-gate-never_type.stderr:17:   = help: add `#![feature(never_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-never_type.stderr:20:  --> $DIR/feature-gate-never_type.rs:9:24
tests/ui/feature-gates/feature-gate-never_type.stderr:26:   = help: add `#![feature(never_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-never_type.stderr:29:  --> $DIR/feature-gate-never_type.rs:10:27
tests/ui/feature-gates/feature-gate-never_type.stderr:35:   = help: add `#![feature(never_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-never_type.stderr:38:  --> $DIR/feature-gate-never_type.rs:13:16
tests/ui/feature-gates/feature-gate-never_type.stderr:44:   = help: add `#![feature(never_type)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-unix_sigpipe.rs:3:#[unix_sigpipe = "inherit"] //~ the `#[unix_sigpipe]` attribute is an experimental feature
tests/ui/feature-gates/auxiliary/cfg-target-thread-local.rs:1:#![feature(thread_local)]
tests/ui/feature-gates/auxiliary/cfg-target-thread-local.rs:2:#![feature(cfg_target_thread_local)]
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.rs:2:// a feature gate. In fact, the specialized check for these cases
tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.rs:6:#![feature(fn_traits)]
tests/ui/feature-gates/feature-gate-type_ascription.rs:4:    let a = type_ascribe!(10, u8); //~ ERROR use of unstable library feature 'type_ascription': placeholder syntax for type ascription
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.rs:2:#![forbid(incomplete_features, unsafe_code)]
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.rs:3:#![feature(unsafe_pin_internals)]
tests/ui/feature-gates/feature-gate-unsafe_pin_internals.rs:4://~^ ERROR the feature `unsafe_pin_internals` is incomplete and may not be safe to use
tests/ui/feature-gates/feature-gate-yeet_expr-in-cfg.stderr:2:  --> $DIR/feature-gate-yeet_expr-in-cfg.rs:6:9
tests/ui/feature-gates/feature-gate-yeet_expr-in-cfg.stderr:8:   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-yeet_expr-in-cfg.stderr:11:  --> $DIR/feature-gate-yeet_expr-in-cfg.rs:14:5
tests/ui/feature-gates/feature-gate-yeet_expr-in-cfg.stderr:17:   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-abi-msp430-interrupt.rs:4:#![feature(no_core, lang_items)]
tests/ui/feature-gates/feature-gate-lint-reasons.stderr:2:  --> $DIR/feature-gate-lint-reasons.rs:1:28
tests/ui/feature-gates/feature-gate-lint-reasons.stderr:8:   = help: add `#![feature(lint_reasons)]` to the crate attributes to enable
tests/ui/feature-gates/feature-gate-lint-reasons.stderr:11:  --> $DIR/feature-gate-lint-reasons.rs:1:28
tests/ui/feature-gates/feature-gate-lint-reasons.stderr:17:   = help: add `#![feature(lint_reasons)]` to the crate attributes to enable
tests/ui/instrument-xray/target-not-supported.rs:7:#![feature(no_core)]
tests/ui/imports/extern-prelude-extern-crate-cfg.rs:2:// compile-flags:--cfg my_feature
tests/ui/imports/extern-prelude-extern-crate-cfg.rs:6:#[cfg(my_feature)]
tests/ui/imports/extern-prelude-extern-crate-cfg.rs:10:    #[cfg(my_feature)]
tests/ui/imports/local-modularized-tricky-pass-2.rs:6:#![feature(decl_macro)]
tests/ui/imports/issue-37887.stderr:9:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui/imports/issue-37887.stderr:16:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui/imports/local-modularized-tricky-fail-1.rs:1:#![feature(decl_macro)]
tests/ui/imports/glob-shadowing.rs:1:#![feature(decl_macro)]
tests/ui/lowering/issue-96847.rs:6:#![feature(stmt_expr_attributes)]
tests/ui/lowering/issue-96847.rs:7:#![feature(lang_items)]
tests/ui/missing/missing-stability.rs:4:#![feature(staged_api)]
tests/ui/missing/missing-stability.rs:6:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/missing/missing-stability.rs:13:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/missing/missing-stability.rs:19:#[stable(feature = "stable_test_feature", since="1.0.0")]
tests/ui/missing/missing-allocator.rs:6:#![feature(alloc_error_handler)]
tests/ui/parser/assoc-static-semantic-fail.stderr:169:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/parser/assoc-static-semantic-fail.stderr:172:LL | #![feature(specialization)]
tests/ui/parser/assoc-static-semantic-fail.stderr:177:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/parser/recover-assoc-const-constraint.stderr:8:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/parser/recover-assoc-const-constraint.stderr:17:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/parser/variadic-ffi-semantic-restrictions.rs:1:#![feature(c_variadic)]
tests/ui/parser/recover-range-pats.rs:6:#![feature(exclusive_range_pattern)]
tests/ui/parser/trait-item-with-defaultness-fail-semantic.stderr:49:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/parser/trait-item-with-defaultness-fail-semantic.stderr:52:LL | #![feature(specialization)]
tests/ui/parser/trait-item-with-defaultness-fail-semantic.stderr:57:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/parser/recover-quantified-closure.stderr:14:   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable
tests/ui/parser/recover-quantified-closure.stderr:24:   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable
tests/ui/parser/trait-item-with-defaultness-fail-semantic.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/parser/assoc-static-semantic-fail.rs:3:#![feature(specialization)]
tests/ui/parser/assoc-static-semantic-fail.rs:4://~^ WARN the feature `specialization` is incomplete
tests/ui/parser/issue-104620.rs:1:#![feature(rustc_attrs)]
tests/ui/parser/bad-lit-suffixes.rs:1:#![feature(rustc_attrs)]
tests/ui/parser/issue-103381.rs:3:#![feature(let_chains)]
tests/ui/parser/issue-103381.rs:41:    #[cfg(feature = "full")]
tests/ui/parser/builtin-syntax.rs:1:#![feature(builtin_syntax)]
tests/ui/parser/issue-103381.fixed:3:#![feature(let_chains)]
tests/ui/parser/issue-103381.fixed:41:    #[cfg(feature = "full")]
tests/ui/parser/attr.rs:1:#![feature(lang_items)]
tests/ui/parser/fn-header-semantic-fail.stderr:150:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/parser/fn-header-semantic-fail.stderr:163:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/parser/fn-header-semantic-fail.stderr:176:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/parser/fn-header-semantic-fail.stderr:189:   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable
tests/ui/parser/default.stderr:28:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/parser/default.stderr:31:LL | #![feature(specialization)]
tests/ui/parser/default.stderr:36:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/parser/constraints-before-generic-args-syntactic-pass.stderr:8:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/parser/constraints-before-generic-args-syntactic-pass.stderr:19:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/parser/do-catch-suggests-try.rs:1:#![feature(try_blocks)]
tests/ui/parser/foreign-ty-semantic-fail.rs:1:#![feature(extern_types)]
tests/ui/parser/deli-ident-issue-1.rs:1:#![feature(let_chains)]
tests/ui/parser/inner-attr.rs:1:#[feature(lang_items)]
tests/ui/parser/block-no-opening-brace.rs:3:#![feature(try_blocks)]
tests/ui/parser/impl-item-type-no-body-semantic-fail.stderr:52:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/parser/impl-item-type-no-body-semantic-fail.stderr:61:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/parser/impl-item-type-no-body-semantic-fail.stderr:70:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/parser/impl-item-type-no-body-semantic-fail.stderr:79:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/parser/mut-patterns.rs:5:#![feature(box_patterns)]
tests/ui/parser/fn-header-semantic-fail.rs:5:#![feature(const_extern_fn)]
tests/ui/parser/virtual-structs.rs:1:// Test diagnostics for the removed struct inheritance feature.
tests/ui/parser/stmt_expr_attrs_placement.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/parser/issues/issue-20711.stderr:6:LL |     #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/parser/issues/issue-63115-range-pat-interpolated.rs:3:#![feature(exclusive_range_pattern)]
tests/ui/parser/issues/issue-14303-fncall.rs:4:#![cfg_attr(generic_arg, feature(generic_arg_infer))]
tests/ui/parser/issues/issue-20711-2.rs:6:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/parser/issues/issue-20711-2.stderr:7:LL |     #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/parser/issues/issue-65846-rollback-gating-failing-matcher.rs:4:// even though they use a feature that is pre-expansion gated.
tests/ui/parser/issues/issue-20711.rs:4:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/parser/issues/issue-35813-postfix-after-cast.rs:3:#![feature(type_ascription)]
tests/ui/parser/default.rs:3:#![feature(specialization)]
tests/ui/parser/default.rs:4://~^ WARN the feature `specialization` is incomplete
tests/ui/parser/inner-attr.stderr:4:LL | #[feature(lang_items)]
tests/ui/parser/inner-attr-after-doc-comment.rs:1:#![feature(lang_items)]
tests/ui/parser/trait-object-bad-parens.rs:1:#![feature(auto_traits)]
tests/ui/parser/trait-object-bad-parens.rs:2:#![feature(negative_impls)]
tests/ui/packed/issue-46152.rs:4:#![feature(unsize, coerce_unsized)]
tests/ui/packed/packed-struct-drop-aligned.rs:2:#![feature(generators)]
tests/ui/packed/packed-struct-drop-aligned.rs:3:#![feature(generator_trait)]
tests/ui/packed/packed-struct-address-of-element.rs:3:#![feature(raw_ref_op)]
tests/ui/binding/empty-types-in-patterns.rs:3:#![feature(never_type, never_type_fallback)]
tests/ui/binding/empty-types-in-patterns.rs:4:#![feature(exhaustive_patterns)]
tests/ui/binding/func-arg-ref-pattern.rs:7:#![feature(box_patterns)]
tests/ui/binding/range-inclusive-pattern-precedence.rs:2:#![feature(box_patterns)]
tests/ui/binding/match-unique-bind.rs:2:#![feature(box_patterns)]
tests/ui/binding/match-range.rs:3:#![feature(exclusive_range_pattern)]
tests/ui/codegen/init-large-type.rs:12:#![feature(intrinsics)]
tests/ui/codegen/freeze-on-polymorphic-projection.rs:4:#![feature(specialization)]
tests/ui/codegen/freeze-on-polymorphic-projection.rs:5://~^ WARN the feature `specialization` is incomplete
tests/ui/codegen/issue-99551.rs:2:#![feature(trait_upcasting)]
tests/ui/codegen/freeze-on-polymorphic-projection.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/codegen/freeze-on-polymorphic-projection.stderr:4:LL | #![feature(specialization)]
tests/ui/codegen/freeze-on-polymorphic-projection.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/cfg/cfg-false-feature.stderr:2:  --> $DIR/cfg-false-feature.rs:12:1
tests/ui/cfg/cfg-false-feature.stderr:8:   = help: add `#![feature(trait_alias)]` to the crate attributes to enable
tests/ui/cfg/cfg-false-feature.stderr:13:  --> $DIR/cfg-false-feature.rs:16:9
tests/ui/cfg/cfg-false-feature.stderr:19:   = help: add `#![feature(box_patterns)]` to the crate attributes to enable
tests/ui/cfg/crt-static-off-works.rs:3:#![allow(stable_features)]
tests/ui/cfg/crt-static-off-works.rs:4:// compile-flags:-C target-feature=-crt-static -Z unstable-options
tests/ui/cfg/crt-static-off-works.rs:7:#![feature(cfg_target_feature)]
tests/ui/cfg/crt-static-off-works.rs:9:#[cfg(not(target_feature = "crt-static"))]
tests/ui/cfg/cfg-target-compact.rs:2:#![feature(cfg_target_compact)]
tests/ui/cfg/crt-static-on-works.rs:2:// compile-flags:-C target-feature=+crt-static
tests/ui/cfg/crt-static-on-works.rs:5:#[cfg(target_feature = "crt-static")]
tests/ui/cfg/cfg-false-feature.rs:1:// Features above `cfg(FALSE)` are in effect in a fully unconfigured crate (issue #104633).
tests/ui/cfg/cfg-false-feature.rs:6:#![feature(decl_macro)]
tests/ui/cfg/cfg-false-feature.rs:8:#![feature(box_syntax)]
tests/ui/cfg/assume-incomplete-release/assume-incomplete.rs:6:#![feature(cfg_version)]
tests/ui/cfg/diagnostics-cross-crate.stderr:36:   = note: the item is gated behind the `what-a-cool-feature` feature
tests/ui/cfg/diagnostics-same-crate.rs:12:        #[cfg(feature = "suggesting me fails the test!!")]
tests/ui/cfg/diagnostics-same-crate.rs:17:        #[cfg(feature = "what-a-cool-feature")]
tests/ui/cfg/diagnostics-same-crate.rs:44:    //~| NOTE the item is gated behind the `what-a-cool-feature` feature
tests/ui/cfg/diagnostics-cross-crate.rs:25:    //~| NOTE the item is gated behind the `what-a-cool-feature` feature
tests/ui/cfg/cfg-stmt-recovery.rs:3:#![feature(cfg_eval)]
tests/ui/cfg/cfg-stmt-recovery.rs:4:#![feature(stmt_expr_attributes)]
tests/ui/cfg/diagnostics-not-a-def.rs:3:        #[cfg(feature = "another one that doesn't exist")]
tests/ui/cfg/cfg_stmt_expr.rs:6:#![feature(stmt_expr_attributes)]
tests/ui/cfg/diagnostics-same-crate.stderr:30:   = note: the item is gated behind the `what-a-cool-feature` feature
tests/ui/cfg/cfg-target-compact-errors.rs:3:#![feature(cfg_target_compact)]
tests/ui/cfg/cfg-target-abi.rs:2:#![feature(cfg_target_abi)]
tests/ui/cfg/auxiliary/cfged_out.rs:11:        #[cfg(feature = "suggesting me fails the test!!")]
tests/ui/cfg/auxiliary/cfged_out.rs:16:        #[cfg(feature = "what-a-cool-feature")]
tests/ui/tool-attributes/diagnostic_item3.rs:2:#![feature(rustc_attrs)]
tests/ui/tool-attributes/diagnostic_item.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/tool-attributes/auxiliary/p1.rs:1:#![feature(rustc_attrs)]
tests/ui/tool-attributes/auxiliary/p2.rs:1:#![feature(rustc_attrs)]
tests/ui/tool-attributes/duplicate-diagnostic.rs:7:#![feature(rustc_attrs)]
tests/ui/lifetimes/issue-54378.rs:5:#![feature(never_type)]
tests/ui/lifetimes/issue-95023.stderr:21:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/lifetimes/issue-64173-unused-lifetimes.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/lifetimes/unusual-rib-combinations.stderr:64:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/lifetimes/unusual-rib-combinations.stderr:73:   = help: more complex types are supported with `#![feature(adt_const_params)]`
tests/ui/lifetimes/unusual-rib-combinations.rs:1:#![feature(inline_const)]
tests/ui/lifetimes/issue-76168-hr-outlives.rs:4:#![feature(unboxed_closures)]
tests/ui/lifetimes/auxiliary/issue-91763-aux.rs:6://#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]
tests/ui/associated-inherent-types/issue-109299.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-109299.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/issue-109768.stderr:30:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/associated-inherent-types/issue-109790.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-109790.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/normalize-projection-1.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/normalize-projection-1.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:1:error: the associated type `X` exists for `S<Featureless, Featureless>`, but its trait bounds were not satisfied
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:6:LL | struct Featureless;
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:9:   | doesn't satisfy `Featureless: One`
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:10:   | doesn't satisfy `Featureless: Two`
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:12:LL |     let _: S::<Featureless, Featureless>::X;
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:13:   |                                           ^ associated type cannot be referenced on `S<Featureless, Featureless>` due to unsatisfied trait bounds
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:16:           `Featureless: One`
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.stderr:17:           `Featureless: Two`
tests/ui/associated-inherent-types/generic-associated-types-bad.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/generic-associated-types-bad.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/normalize-projection-0.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/normalize-projection-0.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/assoc-inherent-no-body.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/assoc-inherent-no-body.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/substitute-params.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/substitute-params.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/regionck-2.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/regionck-2.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/unsatisfied-bounds-inferred-type.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/unsatisfied-bounds-inferred-type.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/dispatch-on-self-type-2.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/dispatch-on-self-type-2.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/normalization-overflow.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/normalization-overflow.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/assoc-inherent-unstable.stderr:1:error[E0658]: use of unstable library feature 'data'
tests/ui/associated-inherent-types/assoc-inherent-unstable.stderr:7:   = help: add `#![feature(data)]` to the crate attributes to enable
tests/ui/associated-inherent-types/assoc-inherent-private.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/assoc-inherent-private.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/unsatisfied-bounds-where-clause-on-assoc-ty.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/unsatisfied-bounds-where-clause-on-assoc-ty.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/late-bound-regions.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/late-bound-regions.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/assoc-inherent-use.rs:2:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/assoc-inherent-use.rs:3:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/style.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/style.rs:2:#![allow(incomplete_features, dead_code)]
tests/ui/associated-inherent-types/bugs/wf-check-skipped.rs:4:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/bugs/wf-check-skipped.rs:5:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-adt.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-adt.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-adt.stderr:32:LL | / #![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-adt.stderr:33:LL | | #![allow(incomplete_features)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-where-predicate.stderr:26:LL | / #![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-where-predicate.stderr:27:LL | | #![allow(incomplete_features)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-where-predicate.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/bugs/cycle-iat-inside-of-where-predicate.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/issue-109299-1.rs:1:#![feature(inherent_associated_types, non_lifetime_binders, type_alias_impl_trait)]
tests/ui/associated-inherent-types/issue-109299-1.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/ambiguity.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/ambiguity.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/generic-const-exprs.rs:3:#![feature(inherent_associated_types, generic_const_exprs)]
tests/ui/associated-inherent-types/generic-const-exprs.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/assoc-inherent-unstable.rs:4:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/assoc-inherent-unstable.rs:5:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/assoc-inherent-unstable.rs:7:type Data = aux::Owner::Data; //~ ERROR use of unstable library feature 'data'
tests/ui/associated-inherent-types/substitute-params-bad.rs:4:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/substitute-params-bad.rs:5:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/former-subst-ice.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/former-subst-ice.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/const-generics.rs:4:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/const-generics.rs:5:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/issue-111404-0.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-111404-0.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/dont-select-if-disabled.stderr:19:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/associated-inherent-types/issue-109789.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-109789.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/issue-111404-1.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-111404-1.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/private-in-public.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/private-in-public.rs:2:#![feature(type_privacy_lints)]
tests/ui/associated-inherent-types/private-in-public.rs:3:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-self-type-differs.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/not-found-self-type-differs.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/inference-fail.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/inference-fail.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.rs:5:struct Featureless;
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.rs:10:impl<T: One> S<Featureless, T> {
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.rs:14:impl<T: Two> S<T, Featureless> {
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-in-multiple-impls.rs:19:    let _: S::<Featureless, Featureless>::X; //~ ERROR the associated type `X` exists for `S<Featureless, Featureless>`, but its trait bounds were not satisfied
tests/ui/associated-inherent-types/issue-109071.rs:2:#![cfg_attr(with_gate, feature(inherent_associated_types))]
tests/ui/associated-inherent-types/issue-109071.rs:3:#![cfg_attr(with_gate, allow(incomplete_features))]
tests/ui/associated-inherent-types/issue-109071.no_gate.stderr:30:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/associated-inherent-types/dont-select-if-disabled.rs:3:// Don't perform selection if the feature is not enabled to prevent cycle errors
tests/ui/associated-inherent-types/dont-select-if-disabled.rs:5:// feature-gate error. See the aforementioned issue.
tests/ui/associated-inherent-types/issue-111879-0.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-111879-0.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/regionck-1.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/regionck-1.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/dispatch-on-self-type-1.rs:3:#![feature(inherent_associated_types, auto_traits, negative_impls)]
tests/ui/associated-inherent-types/dispatch-on-self-type-1.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/inference.rs:6:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/inference.rs:7:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-self-type-differs-shadowing-trait-item.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/not-found-self-type-differs-shadowing-trait-item.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-0.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-0.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/type-alias-bounds-are-enforced.rs:4:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/type-alias-bounds-are-enforced.rs:5:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/regionck-0.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/regionck-0.rs:2:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/dispatch-on-self-type-0.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/dispatch-on-self-type-0.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/issue-104260.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-104260.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-1.rs:3:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-1.rs:4:#![allow(incomplete_features)]
tests/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs:1:#![feature(staged_api)]
tests/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs:2:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs:3:#![stable(feature = "main", since = "1.0.0")]
tests/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs:5:#[stable(feature = "main", since = "1.0.0")]
tests/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs:9:    #[unstable(feature = "data", issue = "none")]
tests/ui/associated-inherent-types/issue-111879-1.rs:1:#![feature(inherent_associated_types)]
tests/ui/associated-inherent-types/issue-111879-1.rs:2:#![allow(incomplete_features)]
tests/ui/malformed/malformed-plugin-1.rs:1:#![feature(plugin)]
tests/ui/malformed/malformed-interpolated.rs:1:#![feature(rustc_attrs)]
tests/ui/malformed/malformed-plugin-3.rs:1:#![feature(plugin)]
tests/ui/malformed/malformed-plugin-2.rs:1:#![feature(plugin)]
tests/ui/env-null-vars.rs:10:#![feature(rustc_private)]
tests/ui/abi/c-stack-as-value.rs:5:#![feature(rustc_private)]
tests/ui/abi/variadic-ffi.rs:3:#![feature(c_variadic)]
tests/ui/abi/statics/static-mut-foreign.rs:8:#![feature(rustc_private)]
tests/ui/abi/c-stack-returning-int64.rs:5:#![feature(rustc_private)]
tests/ui/abi/unsupported.rs:12:#![feature(
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:1:// This test check that even if we mixup target feature of function with homogenous floats,
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:4:// This is basically the same test as tests/ui/simd/target-feature-mixup.rs but for floats and
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:11:#![feature(avx512_target_feature)]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:42:        // We don't actually know if our computer has the requisite target features
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:126:        #[target_feature(enable = "sse2")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:128:        #[target_feature(enable = "avx")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:130:        #[target_feature(enable = "avx512bw")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:134:    #[target_feature(enable = "sse2")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:140:    #[target_feature(enable = "sse2")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:146:    #[target_feature(enable = "sse2")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:152:    #[target_feature(enable = "avx")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:158:    #[target_feature(enable = "avx")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:164:    #[target_feature(enable = "avx")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:170:    #[target_feature(enable = "avx512bw")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:176:    #[target_feature(enable = "avx512bw")]
tests/ui/abi/homogenous-floats-target-feature-mixup.rs:182:    #[target_feature(enable = "avx512bw")]
tests/ui/abi/cross-crate/auxiliary/anon-extern-mod-cross-crate-1.rs:2:#![feature(rustc_private)]
tests/ui/abi/segfault-no-out-of-stack.rs:7:#![feature(rustc_private)]
tests/ui/abi/rustcall-generic.rs:5:#![feature(unboxed_closures, tuple_trait)]
tests/ui/abi/extern/extern-call-indirect.rs:4:#![feature(rustc_private)]
tests/ui/abi/extern/extern-call-deep2.rs:4:#![feature(rustc_private)]
tests/ui/abi/extern/extern-crosscrate.rs:5:#![feature(rustc_private)]
tests/ui/abi/extern/extern-call-deep.rs:5:#![feature(rustc_private)]
tests/ui/abi/extern/extern-call-scrub.rs:8:#![feature(rustc_private)]
tests/ui/abi/extern/auxiliary/extern-crosscrate-source.rs:3:#![feature(rustc_private)]
tests/ui/abi/issues/issue-22565-rust-call.rs:1:#![feature(unboxed_closures)]
tests/ui/abi/foreign/foreign-no-abi.rs:7:#![feature(rustc_private)]
tests/ui/abi/foreign/foreign-call-no-runtime.rs:4:#![feature(rustc_private)]
tests/ui/abi/foreign/auxiliary/foreign_lib.rs:2:#![feature(rustc_private)]
tests/ui/abi/anon-extern-mod.rs:5:#![feature(rustc_private)]
tests/ui/coherence/strict-coherence-needs-negative-coherence.rs:1:#![feature(rustc_attrs)]
tests/ui/coherence/strict-coherence-needs-negative-coherence.rs:5://~^ ERROR to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled
tests/ui/coherence/coherence-conflicting-negative-trait-impl.rs:1:#![feature(negative_impls)]
tests/ui/coherence/coherence-conflicting-negative-trait-impl.rs:2:#![feature(marker_trait_attr)]
tests/ui/coherence/coherence-negative-impls-safe-rpass.rs:5:#![feature(negative_impls)]
tests/ui/coherence/coherence-impls-copy.rs:1:#![feature(negative_impls)]
tests/ui/coherence/coherence-negative-inherent.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-negative-inherent.rs:4:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-negative-inherent.rs:5:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-impl-trait-for-marker-trait-positive.rs:1:#![feature(auto_traits)]
tests/ui/coherence/coherence-impl-trait-for-marker-trait-positive.rs:2:#![feature(negative_impls)]
tests/ui/coherence/coherence-impls-send.rs:1:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-negate-use-feature-gate.rs:3:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-unsafe-trait-object-impl.rs:4:#![feature(object_safe_for_dispatch)]
tests/ui/coherence/coherence-overlap-with-regions.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-with-regions.rs:4:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-overlap-with-regions.rs:5:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-with-generator.rs:2:#![feature(type_alias_impl_trait, generators)]
tests/ui/coherence/coherence-with-generator.rs:3:#![cfg_attr(specialized, feature(specialization))]
tests/ui/coherence/coherence-with-generator.rs:4:#![allow(incomplete_features)]
tests/ui/coherence/issue-99663.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr:4:LL | #![feature(specialization)]
tests/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/coherence/coherence-impl-trait-for-marker-trait-negative.rs:1:#![feature(auto_traits)]
tests/ui/coherence/coherence-impl-trait-for-marker-trait-negative.rs:2:#![feature(negative_impls)]
tests/ui/coherence/strict-coherence-needs-negative-coherence.stderr:1:error: to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled
tests/ui/coherence/coherence-overlap-trait-alias.rs:1:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-overlap-trait-alias.rs:2:#![feature(trait_alias)]
tests/ui/coherence/coherence-overlap-trait-alias.rs:3:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-overlap-negative-trait.rs:6:#![feature(with_negative_coherence)]
tests/ui/coherence/deep-bad-copy-reason.rs:1:#![feature(extern_types)]
tests/ui/coherence/issue-85026.rs:1:#![feature(auto_traits)]
tests/ui/coherence/coherence-impls-sized.rs:1:#![feature(negative_impls)]
tests/ui/coherence/coherence-negative-impls-copy.rs:4:#![feature(negative_impls, extern_types)]
tests/ui/coherence/coherence-overlap-negate-strict.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-negate-strict.rs:4:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-overlap-negate-strict.rs:5:#![feature(trait_alias)]
tests/ui/coherence/coherence-overlap-negate-strict.rs:6:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-overlap-negate-alias-strict.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-negate-alias-strict.rs:4:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-overlap-negate-alias-strict.rs:5:#![feature(trait_alias)]
tests/ui/coherence/coherence-overlap-negate-alias-strict.rs:6:#![feature(with_negative_coherence)]
tests/ui/coherence/issue-99663-2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/coherence/coherence-overlap-double-negative.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-double-negative.rs:4:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-projection-conflict-orphan.rs:1:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs:6:#![feature(specialization)]
tests/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs:7://~^ WARN the feature `specialization` is incomplete
tests/ui/coherence/coherence-orphan.rs:2:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-negative-trait2.rs:6:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-overlap-negative-trait2.rs:7:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-doesnt-use-infcx-evaluate.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/coherence/coherence-doesnt-use-infcx-evaluate.stderr:4:LL | #![feature(specialization)]
tests/ui/coherence/coherence-doesnt-use-infcx-evaluate.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/coherence/coherence-negative-outlives-lifetimes.rs:4:#![feature(negative_impls)]
tests/ui/coherence/coherence-negative-outlives-lifetimes.rs:5:#![cfg_attr(with_negative_coherence, feature(with_negative_coherence))]
tests/ui/coherence/coherence-overlap-negate-not-use-feature-gate.stderr:2:  --> $DIR/coherence-overlap-negate-not-use-feature-gate.rs:5:1
tests/ui/coherence/coherence-negative-impls-safe.rs:1:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-super-negative.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-super-negative.rs:4:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-overlap-super-negative.rs:5:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-doesnt-use-infcx-evaluate.rs:7:#![feature(specialization)]
tests/ui/coherence/coherence-doesnt-use-infcx-evaluate.rs:8://~^ WARN the feature `specialization` is incomplete
tests/ui/coherence/impl-foreign-for-locally-defined-fundamental.rs:1:#![feature(fundamental)]
tests/ui/coherence/coherence-negative-inherent-where-bounds.rs:3:#![feature(negative_impls)]
tests/ui/coherence/coherence-negative-inherent-where-bounds.rs:4:#![feature(rustc_attrs)]
tests/ui/coherence/coherence-negative-inherent-where-bounds.rs:5:#![feature(with_negative_coherence)]
tests/ui/coherence/coherence-overlap-negative-impls.rs:9:#![feature(negative_impls)]
tests/ui/coherence/coherence-overlap-negative-impls.rs:10:#![feature(auto_traits)]
tests/ui/coherence/impl-foreign-for-locally-defined-fundamental[foreign].rs:1:#![feature(fundamental)]
tests/ui/coherence/coherence-negative-impls-copy-bad.rs:1:#![feature(negative_impls)]
tests/ui/coherence/coherence-default-trait-impl.rs:1:#![feature(auto_traits)]
tests/ui/coherence/coherence-default-trait-impl.rs:2:#![feature(negative_impls)]
tests/ui/coherence/auxiliary/error_lib.rs:2:#![feature(negative_impls)]
tests/ui/coherence/auxiliary/error_lib.rs:3:#![feature(with_negative_coherence)]
tests/ui/coherence/auxiliary/coherence_fundamental_trait_lib.rs:2:#![feature(fundamental)]
tests/ui/coherence/auxiliary/coherence_copy_like_lib.rs:2:#![feature(fundamental)]
tests/ui/coherence/auxiliary/option_future.rs:2:#![feature(negative_impls)]
tests/ui/coherence/auxiliary/option_future.rs:3:#![feature(rustc_attrs)]
tests/ui/coherence/auxiliary/option_future.rs:4:#![feature(with_negative_coherence)]
tests/ui/coherence/auxiliary/go_trait.rs:1:#![feature(specialization)]
tests/ui/coherence/coherence-with-closure.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/try-trait/yeet-for-result.rs:3:#![feature(yeet_expr)]
tests/ui/try-trait/bad-interconversion.rs:1:#![feature(control_flow_enum)]
tests/ui/try-trait/try-as-monad.rs:3:#![feature(try_trait_v2)]
tests/ui/try-trait/try-operator-on-main.rs:1:#![feature(try_trait_v2)]
tests/ui/try-trait/yeet-for-option.rs:3:#![feature(yeet_expr)]
tests/ui/try-trait/try-operator-custom.rs:3:#![feature(control_flow_enum)]
tests/ui/try-trait/try-operator-custom.rs:4:#![feature(try_trait_v2)]
tests/ui/rustc-error.rs:1:#![feature(rustc_attrs)]
tests/ui/phantom-auto-trait.rs:4:#![feature(auto_traits)]
tests/ui/borrowck/issue-31287-drop-in-guard.rs:1:#![feature(if_let_guard)]
tests/ui/borrowck/borrow-raw-address-of-deref-mutability.rs:3:#![feature(raw_ref_op)]
tests/ui/borrowck/borrowck-report-with-custom-diagnostic.rs:1:#![feature(rustc_attrs)]
tests/ui/borrowck/borrow-raw-address-of-mutability.rs:1:#![feature(raw_ref_op)]
tests/ui/borrowck/mut-borrow-outside-loop.rs:2:#![feature(rustc_attrs)]
tests/ui/borrowck/borrow-raw-address-of-borrowed.rs:1:#![feature(raw_ref_op)]
tests/ui/borrowck/suggest-assign-rvalue.rs:2:#![feature(never_type)]
tests/ui/borrowck/borrow-raw-address-of-deref-mutability-ok.rs:3:#![feature(raw_ref_op)]
tests/ui/borrowck/anonymous-region-in-apit.rs:1:#![feature(anonymous_lifetime_in_impl_trait)]
tests/ui/borrowck/borrowck-mutate-in-guard.rs:1:#![feature(if_let_guard)]
tests/ui/borrowck/issue-64453.stderr:7:   = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable
tests/ui/borrowck/borrow-immutable-upvar-mutation.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/borrowck/borrowck-vec-pattern-nesting.rs:1:#![feature(box_patterns)]
tests/ui/borrowck/borrow-raw-address-of-mutability-ok.rs:3:#![feature(raw_ref_op)]
tests/ui/borrowck/borrowck-drop-from-guard.rs:1:#![feature(if_let_guard)]
tests/ui/borrowck/issue-25793.rs:1:#![feature(rustc_attrs)]
tests/ui/borrowck/issue-25793.rs:23:    // deliberately avoids NLL's two phase borrow feature.
tests/ui/borrowck/fsu-moves-and-copies.rs:4:#![allow(stable_features)]
tests/ui/borrowck/fsu-moves-and-copies.rs:8:#![feature(core)]
tests/ui/borrowck/issue-92157.rs:1:#![feature(no_core)]
tests/ui/borrowck/issue-92157.rs:2:#![feature(lang_items)]
tests/ui/borrowck/assign-never-type.rs:5:#![feature(never_type)]
tests/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.rs:1:#![feature(thread_local)]
tests/ui/borrowck/borrowck-loan-in-overloaded-op.rs:1:#![feature(box_patterns)]
tests/ui/borrowck/borrow-immutable-upvar-mutation-impl-trait.rs:1:#![feature(unboxed_closures)]
tests/ui/borrowck/borrowck-overloaded-call.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/borrowck/borrowck-macro-interaction-issue-6304.rs:9:#![feature(box_patterns)]
tests/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:1:// Tests using a combination of pattern features has the expected borrow checking behavior
tests/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:2:#![feature(box_patterns)]
tests/ui/borrowck/issue-17545.rs:1:#![feature(fn_traits)]
tests/ui/borrowck/issue-47215-ice-from-drop-elab.rs:10:#![feature(thread_local)]
tests/ui/borrowck/borrowck-move-by-capture.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/deriving/deriving-with-helper.rs:4:#![feature(decl_macro)]
tests/ui/deriving/deriving-with-helper.rs:5:#![feature(lang_items)]
tests/ui/deriving/deriving-with-helper.rs:6:#![feature(no_core)]
tests/ui/deriving/deriving-with-helper.rs:7:#![feature(rustc_attrs)]
tests/ui/deriving/deriving-all-codegen.stdout:1:#![feature(prelude_import)]
tests/ui/kindck/kindck-inherited-copy-bound.rs:5:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/use/use.rs:3:#![allow(stable_features)]
tests/ui/use/use.rs:7:#![feature(start, no_core, core)]
tests/ui/generator/static-reference-across-yield.rs:2:#![feature(generators)]
tests/ui/generator/generator-with-nll.rs:1:#![feature(generators)]
tests/ui/generator/issue-57478.rs:7:#![feature(negative_impls, generators)]
tests/ui/generator/yield-while-iterating.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/yield-while-local-borrowed.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/resume-after-return.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/drop-control-flow.rs:8:#![feature(generators, negative_impls)]
tests/ui/generator/issue-53548.rs:20:#![feature(generators)]
tests/ui/generator/live-upvar-across-yield.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/reborrow-mut-upvar.rs:3:#![feature(generators)]
tests/ui/generator/drop-tracking-parent-expression.rs:5:#![feature(generators, negative_impls, rustc_attrs)]
tests/ui/generator/yield-in-args-rev.rs:8:#![feature(generators)]
tests/ui/generator/yield-while-ref-reborrowed.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/generator-yielding-or-returning-itself.rs:1:#![feature(generator_trait)]
tests/ui/generator/generator-yielding-or-returning-itself.rs:2:#![feature(generators)]
tests/ui/generator/clone-impl-static.rs:4:#![feature(generators, generator_clone)]
tests/ui/generator/smoke-resume-args.rs:6:#![feature(generators, generator_trait)]
tests/ui/generator/iterator-count.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/issue-93161.rs:7:#![feature(never_type)]
tests/ui/generator/auto-trait-regions.rs:4:#![feature(generators)]
tests/ui/generator/auto-trait-regions.rs:5:#![feature(auto_traits)]
tests/ui/generator/auto-trait-regions.rs:6:#![feature(negative_impls)]
tests/ui/generator/borrowing.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/async-generator-issue-67158.rs:1:#![feature(generators)]
tests/ui/generator/static-mut-reference-across-yield.rs:7:#![feature(generators)]
tests/ui/generator/issue-91477.rs:1:#![feature(generators)]
tests/ui/generator/issue-58888.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/panic-drops.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/metadata-sufficient-for-layout.rs:8:#![feature(type_alias_impl_trait, rustc_attrs)]
tests/ui/generator/metadata-sufficient-for-layout.rs:9:#![feature(generator_trait)]
tests/ui/generator/discriminant.rs:6:#![feature(generators, generator_trait, core_intrinsics, discriminant_kind)]
tests/ui/generator/clone-impl-async.rs:3:// Verifies that feature(generator_clone) doesn't allow async blocks to be cloned/copied.
tests/ui/generator/clone-impl-async.rs:5:#![feature(generators, generator_clone)]
tests/ui/generator/resume-live-across-yield.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/ref-upvar-not-send.rs:4:#![feature(generators)]
tests/ui/generator/nested_generators.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/not-send-sync.rs:4:#![feature(generators)]
tests/ui/generator/not-send-sync.rs:5:#![feature(negative_impls)]
tests/ui/generator/yield-outside-generator-issue-78653.rs:1:#![feature(generators)]
tests/ui/generator/generator-region-requirements.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/niche-in-generator.rs:5:#![feature(generators)]
tests/ui/generator/layout-error.rs:6:#![feature(type_alias_impl_trait)]
tests/ui/generator/issue-102645.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/too-many-parameters.rs:1:#![feature(generators)]
tests/ui/generator/partial-initialization-across-yield.rs:4:#![feature(generators)]
tests/ui/generator/resume-arg-late-bound.rs:4:#![feature(generators, generator_trait)]
tests/ui/generator/control-flow.rs:6:#![feature(generators, generator_trait)]
tests/ui/generator/generator-resume-after-panic.rs:8:#![feature(generators, generator_trait)]
tests/ui/generator/issue-87142.rs:7:#![feature(impl_trait_in_assoc_type, generator_trait, generators)]
tests/ui/generator/yield-in-initializer.rs:3:#![feature(generators)]
tests/ui/generator/dropck-resume.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/yield-in-function.rs:1:#![feature(generators)]
tests/ui/generator/drop-track-addassign-yield.rs:7:#![feature(generators)]
tests/ui/generator/derived-drop-parent-expr.rs:5:#![feature(generators)]
tests/ui/generator/print/generator-print-verbose-1.rs:8:#![feature(generators, generator_trait)]
tests/ui/generator/print/generator-print-verbose-2.rs:7:#![feature(generators)]
tests/ui/generator/print/generator-print-verbose-2.rs:8:#![feature(negative_impls)]
tests/ui/generator/print/generator-print-verbose-3.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/sized-yield.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/yielding-in-match-guards.rs:13:#![feature(if_let_guard)]
tests/ui/generator/issue-105084.rs:9:#![feature(generators)]
tests/ui/generator/issue-105084.rs:10:#![feature(generator_clone)]
tests/ui/generator/issue-105084.rs:11:#![feature(generator_trait)]
tests/ui/generator/issue-105084.rs:12:#![feature(rustc_attrs, stmt_expr_attributes)]
tests/ui/generator/drop-and-replace.rs:7:#![feature(generators, generator_trait)]
tests/ui/generator/yield-in-args.rs:1:#![feature(generators)]
tests/ui/generator/borrow-in-tail-expr.rs:3:#![feature(generators)]
tests/ui/generator/issue-88653.rs:4:#![feature(generators, generator_trait)]
tests/ui/generator/xcrate-reachable.rs:5:#![feature(generator_trait)]
tests/ui/generator/retain-resume-ref.rs:7:#![feature(generators, generator_trait)]
tests/ui/generator/smoke.rs:9:#![feature(generators, generator_trait)]
tests/ui/generator/issue-69017.rs:7:#![feature(generator_trait)]
tests/ui/generator/issue-69017.rs:8:#![feature(generators)]
tests/ui/generator/too-live-local-in-immovable-gen.rs:4:#![feature(generators)]
tests/ui/generator/conditional-drop.rs:6:#![feature(generators, generator_trait)]
tests/ui/generator/ref-escapes-but-not-over-yield.rs:1:#![feature(generators)]
tests/ui/generator/clone-impl.rs:5:#![feature(generators, generator_clone)]
tests/ui/generator/reinit-in-match-guard.rs:3:#![feature(generators)]
tests/ui/generator/pattern-borrow.rs:1:#![feature(generators)]
tests/ui/generator/drop-yield-twice.rs:1:#![feature(negative_impls, generators)]
tests/ui/generator/issue-64620-yield-array-element.rs:3:#![feature(generators)]
tests/ui/generator/resume-arg-size.rs:1:#![feature(generators)]
tests/ui/generator/issue-48048.rs:1:#![feature(generators)]
tests/ui/generator/type-mismatch-signature-deduction.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/issue-52304.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/static-generators.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/pin-box-generator.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/drop-env.rs:6:#![feature(generators, generator_trait)]
tests/ui/generator/drop-tracking-yielding-in-match-guards.rs:7:#![feature(generators)]
tests/ui/generator/non-static-is-unpin.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/yield-subtype.rs:5:#![feature(generators)]
tests/ui/generator/yield-in-static.rs:1:#![feature(generators)]
tests/ui/generator/panic-safe.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/panic-drops-resume.rs:6:#![feature(generators, generator_trait)]
tests/ui/generator/overlap-locals.rs:3:#![feature(generators)]
tests/ui/generator/xcrate.rs:5:#![feature(generators, generator_trait)]
tests/ui/generator/issue-68112.rs:4:#![feature(generators, generator_trait)]
tests/ui/generator/issue-69039.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/type-mismatch-error.rs:4:#![feature(generators, generator_trait)]
tests/ui/generator/dropck.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/yield-in-const.rs:1:#![feature(generators)]
tests/ui/generator/issue-57017.rs:7:#![feature(generators, negative_impls)]
tests/ui/generator/issue-110929-generator-conflict-error-ice.rs:3:#![feature(generators)]
tests/ui/generator/static-not-unpin.rs:4:#![feature(generators)]
tests/ui/generator/size-moved-locals.rs:17:#![feature(generators, generator_trait)]
tests/ui/generator/match-bindings.rs:4:#![feature(generators)]
tests/ui/generator/issue-52398.rs:4:#![feature(generators)]
tests/ui/generator/drop-tracking-error-body.rs:3:#![feature(generators)]
tests/ui/generator/partial-drop.rs:6:#![feature(negative_impls, generators)]
tests/ui/generator/issue-61442-stmt-expr-with-drop.rs:7:#![feature(generators, generator_trait)]
tests/ui/generator/issue-45729-unsafe-in-generator.rs:4:#![feature(generators)]
tests/ui/generator/addassign-yield.rs:11:#![feature(generators)]
tests/ui/generator/auxiliary/metadata-sufficient-for-layout.rs:2:#![feature(generators, generator_trait)]
tests/ui/generator/auxiliary/xcrate-reachable.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/auxiliary/xcrate.rs:1:#![feature(generators, generator_trait)]
tests/ui/generator/issue-57084.rs:5:#![feature(generators,generator_trait)]
tests/ui/generator/issue-44197.rs:3:#![feature(generators, generator_trait)]
tests/ui/generator/parent-expression.rs:5:#![feature(generators, negative_impls, rustc_attrs)]
tests/ui/attributes/used_with_arg.rs:1:#![feature(used_with_arg)]
tests/ui/attributes/rustc-box.rs:1:#![feature(rustc_attrs, stmt_expr_attributes)]
tests/ui/attributes/class-attributes-2.rs:3:#![feature(rustc_attrs)]
tests/ui/attributes/attr-before-view-item.rs:4:#![feature(rustc_attrs)]
tests/ui/attributes/attr-before-view-item.rs:5:#![feature(test)]
tests/ui/attributes/method-attributes.rs:5:#![feature(rustc_attrs)]
tests/ui/attributes/used_with_multi_args.rs:1:#![feature(used_with_arg)]
tests/ui/attributes/attrs-with-no-formal-in-generics-2.rs:5:#![feature(rustc_attrs)]
tests/ui/attributes/multiple-invalid.stderr:13:LL | #[target_feature(enable = "sse2")]
tests/ui/attributes/used_with_arg_no_mangle.rs:3:#![feature(used_with_arg)]
tests/ui/attributes/multiple-invalid.rs:6:#[target_feature(enable = "sse2")]
tests/ui/attributes/rustc_confusables.rs:3:#![feature(rustc_attrs)]
tests/ui/attributes/suffixed-literal-meta.rs:1:#![feature(rustc_attrs)]
tests/ui/attributes/issue-105594-invalid-attr-validation.rs:5:#![feature(cmse_nonsecure_entry)]
tests/ui/attributes/no-mangle-closure.rs:4:#![feature(stmt_expr_attributes)]
tests/ui/attributes/attr-mix-new.rs:4:#![feature(rustc_attrs)]
tests/ui/attributes/attr-mix-new.rs:8:  #![feature(globs)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-wrong.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-start.rs:1:#![feature(start)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-start.rs:2:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-inherit.rs:4:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-struct.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-duplicates.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-error.rs:4:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-non-root-main.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-only-feature.rs:4:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-only-feature.rs:9:    // Only #![feature(unix_sigpipe)] is enabled, not #[unix_sigpipe = "..."].
tests/ui/attributes/unix_sigpipe/unix_sigpipe-rustc_main.rs:4:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-rustc_main.rs:5:#![feature(rustc_attrs)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-non-main-fn.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-sig_dfl.rs:4:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-list.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/unix_sigpipe-crate.rs:1:#![feature(unix_sigpipe)]
tests/ui/attributes/unix_sigpipe/auxiliary/sigpipe-utils.rs:1:#![feature(rustc_private)]
tests/ui/attributes/unknown-attr.rs:3:#![feature(custom_inner_attributes)]
tests/ui/attributes/const-stability-on-macro.stderr:4:LL | #[rustc_const_stable(feature = "foo", since = "0")]
tests/ui/attributes/const-stability-on-macro.stderr:13:LL | #[rustc_const_unstable(feature = "bar", issue="none")]
tests/ui/attributes/unrestricted-attribute-tokens.rs:3:#![feature(rustc_attrs)]
tests/ui/attributes/const-stability-on-macro.rs:1:#![feature(staged_api)]
tests/ui/attributes/const-stability-on-macro.rs:2:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/attributes/const-stability-on-macro.rs:4:#[rustc_const_stable(feature = "foo", since = "0")]
tests/ui/attributes/const-stability-on-macro.rs:10:#[rustc_const_unstable(feature = "bar", issue="none")]
tests/ui/attributes/collapse-debuginfo-invalid.rs:1:#![feature(collapse_debuginfo)]
tests/ui/attributes/collapse-debuginfo-invalid.rs:2:#![feature(stmt_expr_attributes)]
tests/ui/attributes/collapse-debuginfo-invalid.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/attributes/item-attributes.rs:7:#![feature(rustc_attrs)]
tests/ui/attributes/key-value-expansion.rs:6:#![feature(rustc_attrs)]
tests/ui/attributes/key-value-expansion-on-mac.rs:1:#![feature(rustc_attrs)]
tests/ui/attributes/duplicated-attributes.rs:8:#![feature(test)]
tests/ui/attributes/duplicated-attributes.rs:9:#![feature(cfg_eval)]
tests/ui/attributes/class-attributes-1.rs:4:#![feature(rustc_attrs)]
tests/ui/attributes/z-crate-attr.rs:2:// This test checks if an unstable feature is enabled with the -Zcrate-attr=feature(foo) flag. If
tests/ui/attributes/z-crate-attr.rs:3:// the exact feature used here is causing problems feel free to replace it with another
tests/ui/attributes/z-crate-attr.rs:4:// perma-unstable feature.
tests/ui/attributes/z-crate-attr.rs:6:// compile-flags: -Zcrate-attr=feature(abi_unadjusted)
tests/ui/attributes/attrs-with-no-formal-in-generics-1.rs:5:#![feature(rustc_attrs)]
tests/ui/attributes/attr-before-view-item2.rs:4:#![feature(rustc_attrs)]
tests/ui/attributes/attr-before-view-item2.rs:5:#![feature(test)]
tests/ui/attributes/variant-attributes.rs:6:#![feature(rustc_attrs)]
tests/ui/attributes/auxiliary/rustc_confusables_across_crate.rs:1:#![feature(rustc_attrs)]
tests/ui/attributes/key-value-non-ascii.rs:1:#![feature(rustc_attrs)]
tests/ui/target-feature/feature-hierarchy.rs:2:// [aarch64-neon] compile-flags: -Ctarget-feature=+neon --target=aarch64-unknown-linux-gnu
tests/ui/target-feature/feature-hierarchy.rs:4:// [aarch64-sve2] compile-flags: -Ctarget-feature=-neon,+sve2 --target=aarch64-unknown-linux-gnu
tests/ui/target-feature/feature-hierarchy.rs:9:#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]
tests/ui/target-feature/feature-hierarchy.rs:10:#![stable(feature = "test", since = "1.0.0")]
tests/ui/target-feature/feature-hierarchy.rs:12:// Tests vetting "feature hierarchies" in the cases where we impose them.
tests/ui/target-feature/feature-hierarchy.rs:22:    #[rustc_const_stable(feature = "test", since = "1.0.0")]
tests/ui/target-feature/feature-hierarchy.rs:48:    // This checks that a normal aarch64 target doesn't suddenly jump up the feature hierarchy.
tests/ui/target-feature/feature-hierarchy.rs:49:    assert!(cfg!(target_feature = "neon"));
tests/ui/target-feature/feature-hierarchy.rs:50:    assert!(cfg!(not(target_feature = "sve2")));
tests/ui/target-feature/feature-hierarchy.rs:56:    assert!(cfg!(target_feature = "neon"));
tests/ui/target-feature/feature-hierarchy.rs:57:    assert!(cfg!(target_feature = "sve2"));
tests/ui/target-feature/missing-plusminus.rs:1:// compile-flags: -Ctarget-feature=banana --crate-type=rlib
tests/ui/target-feature/tied-features-cli.two.stderr:1:error: the target features paca, pacg must all be either enabled or disabled together
tests/ui/target-feature/tied-features-cli.rs:7:// [one] compile-flags: -C target-feature=+paca
tests/ui/target-feature/tied-features-cli.rs:9:// [two] compile-flags: -C target-feature=-pacg,+pacg
tests/ui/target-feature/tied-features-cli.rs:11:// [three] compile-flags: -C target-feature=+paca,+pacg,-paca
tests/ui/target-feature/tied-features-cli.rs:13:// [four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca
tests/ui/target-feature/tied-features-cli.rs:14:#![feature(no_core, lang_items)]
tests/ui/target-feature/rust-specific-name-no-warnings.rs:3:// compile-flags: -C target-feature=+pclmulqdq
tests/ui/target-feature/invalid-attribute.rs:17:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:22:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:27:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:32:#[target_feature = "+sse2"]
tests/ui/target-feature/invalid-attribute.rs:33://~^ ERROR malformed `target_feature` attribute
tests/ui/target-feature/invalid-attribute.rs:34:#[target_feature(enable = "foo")]
tests/ui/target-feature/invalid-attribute.rs:37:#[target_feature(bar)]
tests/ui/target-feature/invalid-attribute.rs:38://~^ ERROR malformed `target_feature` attribute
tests/ui/target-feature/invalid-attribute.rs:39:#[target_feature(disable = "baz")]
tests/ui/target-feature/invalid-attribute.rs:40://~^ ERROR malformed `target_feature` attribute
tests/ui/target-feature/invalid-attribute.rs:43:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:44://~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions
tests/ui/target-feature/invalid-attribute.rs:49:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:54:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:59:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:64:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:69:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:77:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:82:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:89:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:92:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:97:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:102:#[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:112:    #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:113:    //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions
tests/ui/target-feature/invalid-attribute.rs:120:    #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.rs:128:    #[target_feature(enable = "sse2")]
tests/ui/target-feature/aarch64-neon-works.rs:9:    let _zero = if is_aarch64_feature_detected!("neon") {
tests/ui/target-feature/aarch64-neon-works.rs:20:#[target_feature(enable = "neon")]
tests/ui/target-feature/tied-features-cli.one.stderr:1:error: the target features paca, pacg must all be either enabled or disabled together
tests/ui/target-feature/similar-feature-suggestion.rs:1:// compile-flags: -Ctarget-feature=+rdrnd --crate-type=rlib --target=x86_64-unknown-linux-gnu
tests/ui/target-feature/similar-feature-suggestion.rs:5:#![feature(no_core)]
tests/ui/target-feature/tied-features-cli.three.stderr:1:error: the target features paca, pacg must all be either enabled or disabled together
tests/ui/target-feature/similar-feature-suggestion.stderr:1:warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`
tests/ui/target-feature/gate.stderr:1:error[E0658]: the target feature `avx512bw` is currently unstable
tests/ui/target-feature/gate.stderr:4:LL | #[target_feature(enable = "avx512bw")]
tests/ui/target-feature/gate.stderr:8:   = help: add `#![feature(avx512_target_feature)]` to the crate attributes to enable
tests/ui/target-feature/missing-plusminus-2.rs:1:// compile-flags: -Ctarget-feature=rdrand --crate-type=rlib --target=x86_64-unknown-linux-gnu
tests/ui/target-feature/missing-plusminus-2.rs:5:#![feature(no_core)]
tests/ui/target-feature/invalid-attribute.stderr:1:error: malformed `target_feature` attribute input
tests/ui/target-feature/invalid-attribute.stderr:4:LL | #[target_feature = "+sse2"]
tests/ui/target-feature/invalid-attribute.stderr:5:   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = "name")]`
tests/ui/target-feature/invalid-attribute.stderr:10:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:19:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:28:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:37:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:46:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:55:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:64:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:73:LL |   #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:86:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:95:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:104:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:113:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:122:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:131:LL |       #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:143:LL |     #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:149:error: the feature named `foo` is not valid for this target
tests/ui/target-feature/invalid-attribute.stderr:152:LL | #[target_feature(enable = "foo")]
tests/ui/target-feature/invalid-attribute.stderr:155:error: malformed `target_feature` attribute input
tests/ui/target-feature/invalid-attribute.stderr:158:LL | #[target_feature(bar)]
tests/ui/target-feature/invalid-attribute.stderr:161:error: malformed `target_feature` attribute input
tests/ui/target-feature/invalid-attribute.stderr:164:LL | #[target_feature(disable = "baz")]
tests/ui/target-feature/invalid-attribute.stderr:167:error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions
tests/ui/target-feature/invalid-attribute.stderr:170:LL | #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:177:   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable
tests/ui/target-feature/invalid-attribute.stderr:179:error: cannot use `#[inline(always)]` with `#[target_feature]`
tests/ui/target-feature/invalid-attribute.stderr:185:error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions
tests/ui/target-feature/invalid-attribute.stderr:188:LL |     #[target_feature(enable = "sse2")]
tests/ui/target-feature/invalid-attribute.stderr:195:   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable
tests/ui/target-feature/missing-plusminus.stderr:1:warning: unknown feature specified for `-Ctarget-feature`: `banana`
tests/ui/target-feature/missing-plusminus.stderr:3:   = note: features must begin with a `+` to enable or `-` to disable it
tests/ui/target-feature/missing-plusminus-2.stderr:1:warning: unknown feature specified for `-Ctarget-feature`: `rdrand`
tests/ui/target-feature/missing-plusminus-2.stderr:3:   = note: features must begin with a `+` to enable or `-` to disable it
tests/ui/target-feature/wasm-safe.rs:4:#![feature(wasm_target_feature)]
tests/ui/target-feature/wasm-safe.rs:7:#[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/wasm-safe.rs:10:#[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/wasm-safe.rs:21:    #[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/wasm-safe.rs:23:    #[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/wasm-safe.rs:28:    #[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/wasm-safe.rs:30:    #[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/wasm-safe.rs:34:fn no_features_enabled_on_this_function() {
tests/ui/target-feature/wasm-safe.rs:43:#[target_feature(enable = "nontrapping-fptoint")]
tests/ui/target-feature/gate.rs:14:// gate-test-sse4a_target_feature
tests/ui/target-feature/gate.rs:15:// gate-test-powerpc_target_feature
tests/ui/target-feature/gate.rs:16:// gate-test-avx512_target_feature
tests/ui/target-feature/gate.rs:17:// gate-test-tbm_target_feature
tests/ui/target-feature/gate.rs:18:// gate-test-arm_target_feature
tests/ui/target-feature/gate.rs:19:// gate-test-hexagon_target_feature
tests/ui/target-feature/gate.rs:20:// gate-test-mips_target_feature
tests/ui/target-feature/gate.rs:21:// gate-test-wasm_target_feature
tests/ui/target-feature/gate.rs:22:// gate-test-adx_target_feature
tests/ui/target-feature/gate.rs:23:// gate-test-cmpxchg16b_target_feature
tests/ui/target-feature/gate.rs:24:// gate-test-movbe_target_feature
tests/ui/target-feature/gate.rs:25:// gate-test-rtm_target_feature
tests/ui/target-feature/gate.rs:26:// gate-test-f16c_target_feature
tests/ui/target-feature/gate.rs:27:// gate-test-riscv_target_feature
tests/ui/target-feature/gate.rs:28:// gate-test-ermsb_target_feature
tests/ui/target-feature/gate.rs:29:// gate-test-bpf_target_feature
tests/ui/target-feature/gate.rs:30:// gate-test-aarch64_ver_target_feature
tests/ui/target-feature/gate.rs:32:#[target_feature(enable = "avx512bw")]
tests/ui/target-feature/tied-features.stderr:1:error: the target features paca, pacg must all be either enabled or disabled together
tests/ui/target-feature/tied-features.stderr:2:  --> $DIR/tied-features.rs:12:5
tests/ui/target-feature/tied-features.stderr:4:LL |     #[target_feature(enable = "pacg")]
tests/ui/target-feature/tied-features.stderr:7:   = help: add the missing features in a `target_feature` attribute
tests/ui/target-feature/tied-features.stderr:9:error: the target features paca, pacg must all be either enabled or disabled together
tests/ui/target-feature/tied-features.stderr:10:  --> $DIR/tied-features.rs:24:1
tests/ui/target-feature/tied-features.stderr:12:LL | #[target_feature(enable = "paca")]
tests/ui/target-feature/tied-features.stderr:15:   = help: add the missing features in a `target_feature` attribute
tests/ui/target-feature/no-llvm-leaks.rs:2:// [aarch64] compile-flags: -Ctarget-feature=+neon,+fp16,+fhm --target=aarch64-unknown-linux-gnu
tests/ui/target-feature/no-llvm-leaks.rs:4:// [x86-64] compile-flags: -Ctarget-feature=+sse4.2,+rdrand --target=x86_64-unknown-linux-gnu
tests/ui/target-feature/no-llvm-leaks.rs:9:#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]
tests/ui/target-feature/no-llvm-leaks.rs:10:#![stable(feature = "test", since = "1.0.0")]
tests/ui/target-feature/no-llvm-leaks.rs:20:    #[rustc_const_stable(feature = "test", since = "1.0.0")]
tests/ui/target-feature/no-llvm-leaks.rs:46:    // This checks that the rustc feature name is used, not the LLVM feature.
tests/ui/target-feature/no-llvm-leaks.rs:47:    assert!(cfg!(target_feature = "neon"));
tests/ui/target-feature/no-llvm-leaks.rs:48:    assert!(cfg!(not(target_feature = "fp-armv8")));
tests/ui/target-feature/no-llvm-leaks.rs:49:    assert!(cfg!(target_feature = "fhm"));
tests/ui/target-feature/no-llvm-leaks.rs:50:    assert!(cfg!(not(target_feature = "fp16fml")));
tests/ui/target-feature/no-llvm-leaks.rs:51:    assert!(cfg!(target_feature = "fp16"));
tests/ui/target-feature/no-llvm-leaks.rs:52:    assert!(cfg!(not(target_feature = "fullfp16")));
tests/ui/target-feature/no-llvm-leaks.rs:57:    // This checks that the rustc feature name is used, not the LLVM feature.
tests/ui/target-feature/no-llvm-leaks.rs:58:    assert!(cfg!(target_feature = "rdrand"));
tests/ui/target-feature/no-llvm-leaks.rs:59:    assert!(cfg!(not(target_feature = "rdrnd")));
tests/ui/target-feature/no-llvm-leaks.rs:61:    // Likewise: We enable LLVM's crc32 feature with SSE4.2, but Rust says it's just SSE4.2
tests/ui/target-feature/no-llvm-leaks.rs:62:    assert!(cfg!(target_feature = "sse4.2"));
tests/ui/target-feature/no-llvm-leaks.rs:63:    assert!(cfg!(not(target_feature = "crc32")));
tests/ui/target-feature/tied-features.rs:4:#![feature(no_core, lang_items)]
tests/ui/target-feature/tied-features.rs:12:    #[target_feature(enable = "pacg")]
tests/ui/target-feature/tied-features.rs:24:#[target_feature(enable = "paca")]
tests/ui/target-feature/tied-features.rs:29:#[target_feature(enable = "paca,pacg")]
tests/ui/target-feature/tied-features.rs:32:#[target_feature(enable = "paca")]
tests/ui/target-feature/tied-features.rs:33:#[target_feature(enable = "pacg")]
tests/ui/duplicate_entry_error.rs:6:#![feature(lang_items)]
tests/ui/lto/weak-works.rs:6:#![feature(linkage)]
tests/ui/lto/issue-100772.rs:3:// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/ui/lto/issue-100772.rs:7:#![feature(allocator_api)]
tests/ui/lto/auxiliary/thinlto-dylib.rs:2:// breaking the panic hook feature.
tests/ui/panic-handler/panic-handler-missing.rs:4:#![feature(lang_items)]
tests/ui/panic-handler/panic-handler-requires-panic-info.rs:4:#![feature(lang_items)]
tests/ui/panic-handler/panic-handler-requires-panic-info.rs:5:#![feature(no_core)]
tests/ui/panic-handler/panic-handler-twice.rs:4:#![feature(lang_items)]
tests/ui/panic-handler/panic-handler-duplicate.rs:3:#![feature(lang_items)]
tests/ui/macros/issue-68060.stderr:4:LL |             #[target_feature(enable = "")]
tests/ui/macros/issue-68060.stderr:10:error: the feature named `` is not valid for this target
tests/ui/macros/issue-68060.stderr:13:LL |             #[target_feature(enable = "")]
tests/ui/macros/issue-68060.stderr:23:   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable
tests/ui/macros/macro-lifetime-used-with-labels.rs:2:#![allow(stable_features)]
tests/ui/macros/duplicate-builtin.rs:2:#![feature(decl_macro)]
tests/ui/macros/duplicate-builtin.rs:3:#![feature(rustc_attrs)]
tests/ui/macros/issue-68060.rs:4:            #[target_feature(enable = "")]
tests/ui/macros/issue-68060.rs:6:            //~| ERROR: feature named `` is not valid
tests/ui/macros/assert.rs:2:// [with-generic-asset] compile-flags: --cfg feature="generic_assert"
tests/ui/macros/issue-44127.rs:3:#![feature(decl_macro)]
tests/ui/macros/macro-stability.stderr:1:error[E0658]: use of unstable library feature 'local_unstable'
tests/ui/macros/macro-stability.stderr:7:   = help: add `#![feature(local_unstable)]` to the crate attributes to enable
tests/ui/macros/macro-stability.stderr:9:error[E0658]: use of unstable library feature 'local_unstable'
tests/ui/macros/macro-stability.stderr:15:   = help: add `#![feature(local_unstable)]` to the crate attributes to enable
tests/ui/macros/macro-stability.stderr:17:error[E0658]: use of unstable library feature 'unstable_macros'
tests/ui/macros/macro-stability.stderr:23:   = help: add `#![feature(unstable_macros)]` to the crate attributes to enable
tests/ui/macros/stringify.rs:5:#![feature(async_closure)]
tests/ui/macros/stringify.rs:6:#![feature(box_patterns)]
tests/ui/macros/stringify.rs:7:#![feature(const_trait_impl)]
tests/ui/macros/stringify.rs:8:#![feature(decl_macro)]
tests/ui/macros/stringify.rs:9:#![feature(generators)]
tests/ui/macros/stringify.rs:10:#![feature(more_qualified_paths)]
tests/ui/macros/stringify.rs:11:#![feature(raw_ref_op)]
tests/ui/macros/stringify.rs:12:#![feature(trait_alias)]
tests/ui/macros/stringify.rs:13:#![feature(try_blocks)]
tests/ui/macros/stringify.rs:14:#![feature(type_ascription)]
tests/ui/macros/restricted-shadowing-legacy.rs:78:#![feature(decl_macro, rustc_attrs)]
tests/ui/macros/macro-comma-behavior.rs:6:#![feature(lang_items)]
tests/ui/macros/attr-empty-expr.rs:3:#![feature(custom_test_frameworks)]
tests/ui/macros/attr-empty-expr.rs:4:#![feature(stmt_expr_attributes)]
tests/ui/macros/attr-empty-expr.rs:5:#![feature(test)]
tests/ui/macros/macro-stability-rpass.rs:4:#![unstable(feature = "one_two_three_testing", issue = "none")]
tests/ui/macros/macro-stability-rpass.rs:5:#![feature(staged_api, unstable_macros, local_unstable)]
tests/ui/macros/macro-stability-rpass.rs:9:#[unstable(feature = "local_unstable", issue = "none")]
tests/ui/macros/parse-complex-macro-invoc-op.rs:6:#![allow(stable_features)]
tests/ui/macros/parse-complex-macro-invoc-op.rs:13:#![feature(macro_rules)]
tests/ui/macros/macro-comma-support-rpass.rs:18:#![feature(concat_idents)]
tests/ui/macros/assert-trailing-junk.rs:2:// [with-generic-asset] compile-flags: --cfg feature="generic_assert"
tests/ui/macros/ambiguity-legacy-vs-modern.rs:5:#![feature(decl_macro)]
tests/ui/macros/issue-63102.rs:3:#![feature(decl_macro)]
tests/ui/macros/macro-stability.rs:3:#![feature(decl_macro)]
tests/ui/macros/macro-stability.rs:4:#![feature(staged_api)]
tests/ui/macros/macro-stability.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/macros/macro-stability.rs:10:#[unstable(feature = "local_unstable", issue = "none")]
tests/ui/macros/macro-stability.rs:13:#[unstable(feature = "local_unstable", issue = "none")]
tests/ui/macros/macro-stability.rs:16:#[stable(feature = "deprecated_macros", since = "1.0.0")]
tests/ui/macros/macro-stability.rs:22:    local_unstable!(); //~ ERROR use of unstable library feature 'local_unstable'
tests/ui/macros/macro-stability.rs:23:    local_unstable_modern!(); //~ ERROR use of unstable library feature 'local_unstable'
tests/ui/macros/macro-stability.rs:24:    unstable_macro!(); //~ ERROR use of unstable library feature 'unstable_macros'
tests/ui/macros/macro-stability.rs:25:    // unstable_macro_modern!(); // ERROR use of unstable library feature 'unstable_macros'
tests/ui/macros/assert-matches-macro-msg.rs:7:#![feature(assert_matches)]
tests/ui/macros/macro-nested_expr.rs:4:#![feature(decl_macro)]
tests/ui/macros/macro-reexport-removed.rs:3:#![feature(macro_reexport)] //~ ERROR feature has been removed
tests/ui/macros/macro-shadowing-relaxed.rs:4:#![feature(decl_macro)]
tests/ui/macros/rfc-2011-nicer-assert-messages/assert-without-captures-does-not-create-unnecessary-code.rs:6:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout:1:#![feature(prelude_import)]
tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout:6:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/rfc-2011-nicer-assert-messages/assert-with-custom-errors-does-not-create-unnecessary-code.rs:4:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/rfc-2011-nicer-assert-messages/all-not-available-cases.rs:7:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.rs:4:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/rfc-2011-nicer-assert-messages/feature-gate-generic_assert.rs:5:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/rfc-2011-nicer-assert-messages/all-expr-kinds.rs:8:#![feature(core_intrinsics, generic_assert)]
tests/ui/macros/macro-reexport-removed.stderr:1:error[E0557]: feature has been removed
tests/ui/macros/macro-reexport-removed.stderr:4:LL | #![feature(macro_reexport)]
tests/ui/macros/macro-reexport-removed.stderr:5:   |            ^^^^^^^^^^^^^^ feature has been removed
tests/ui/macros/macro-path-prelude-shadowing.rs:3:#![feature(decl_macro)]
tests/ui/macros/issue-77475.rs:4:#![feature(decl_macro)]
tests/ui/macros/macro-inner-attributes.rs:1:#![feature(rustc_attrs)]
tests/ui/macros/macros-nonfatal-errors.rs:6:#![feature(trace_macros, concat_idents)]
tests/ui/macros/macros-nonfatal-errors.rs:7:#![feature(stmt_expr_attributes)]
tests/ui/macros/rfc-3086-metavar-expr/dollar-dollar-has-correct-behavior.rs:3:#![feature(macro_metavar_expr)]
tests/ui/macros/rfc-3086-metavar-expr/syntax-errors.rs:1:#![feature(macro_metavar_expr)]
tests/ui/macros/rfc-3086-metavar-expr/count-and-length-are-distinct.rs:3:#![feature(macro_metavar_expr)]
tests/ui/macros/rfc-3086-metavar-expr/out-of-bounds-arguments.rs:1:#![feature(macro_metavar_expr)]
tests/ui/macros/rfc-3086-metavar-expr/feature-gate-macro_metavar_expr.rs:3:#![feature(macro_metavar_expr)]
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:2:  --> $DIR/required-feature.rs:3:10
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:8:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:11:  --> $DIR/required-feature.rs:11:16
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:17:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:20:  --> $DIR/required-feature.rs:11:20
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:26:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:29:  --> $DIR/required-feature.rs:11:39
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:35:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:38:  --> $DIR/required-feature.rs:11:43
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:44:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:47:  --> $DIR/required-feature.rs:22:13
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:53:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:56:  --> $DIR/required-feature.rs:22:26
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:62:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:65:  --> $DIR/required-feature.rs:30:19
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:71:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:74:  --> $DIR/required-feature.rs:37:13
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:80:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:83:  --> $DIR/required-feature.rs:37:26
tests/ui/macros/rfc-3086-metavar-expr/required-feature.stderr:89:   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable
tests/ui/macros/rfc-3086-metavar-expr/macro-expansion.rs:3:#![feature(macro_metavar_expr)]
tests/ui/macros/log_syntax-trace_macros-macro-locations.rs:4:#![feature(trace_macros, log_syntax)]
tests/ui/macros/macros-in-extern.rs:4:#![feature(decl_macro)]
tests/ui/macros/nonterminal-matching.rs:4:#![feature(decl_macro)]
tests/ui/macros/issue-104769-concat_bytes-invalid-literal.rs:1:#![feature(concat_bytes)]
tests/ui/macros/macro-outer-attributes.rs:1:#![feature(rustc_attrs)]
tests/ui/macros/concat-bytes-error.rs:1:#![feature(concat_bytes)]
tests/ui/macros/unknown-builtin.rs:3:#![feature(rustc_attrs)]
tests/ui/macros/trace_macros-format.rs:1:#![feature(trace_macros)]
tests/ui/macros/meta-variable-depth-outside-repeat.rs:1:#![feature(macro_metavar_expr)]
tests/ui/macros/macro-in-fn.rs:2:#![feature(decl_macro)]
tests/ui/macros/concat-bytes.rs:2:#![feature(concat_bytes)]
tests/ui/macros/restricted-shadowing-modern.rs:78:#![feature(decl_macro, rustc_attrs)]
tests/ui/macros/auxiliary/macro-def-site-super.rs:1:#![feature(decl_macro)]
tests/ui/macros/auxiliary/proc_macro_def.rs:5:#![feature(proc_macro_quote)]
tests/ui/macros/auxiliary/proc_macro_sequence.rs:5:#![feature(proc_macro_span, proc_macro_quote)]
tests/ui/macros/auxiliary/issue-100199.rs:5:#![feature(proc_macro_quote)]
tests/ui/macros/auxiliary/unstable-macros.rs:1:#![feature(decl_macro)]
tests/ui/macros/auxiliary/unstable-macros.rs:2:#![feature(staged_api)]
tests/ui/macros/auxiliary/unstable-macros.rs:3:#![stable(feature = "unit_test", since = "1.0.0")]
tests/ui/macros/auxiliary/unstable-macros.rs:5:#[unstable(feature = "unstable_macros", issue = "none")]
tests/ui/macros/auxiliary/unstable-macros.rs:9:#[stable(feature = "deprecated_macros", since = "1.0.0")]
tests/ui/macros/auxiliary/unstable-macros.rs:15:// #[unstable(feature = "unstable_macros", issue = "none")]
tests/ui/macros/syntax-extension-source-utils.rs:2:#![allow(stable_features)]
tests/ui/syntax-extension-minor.rs:3:#![feature(concat_idents)]
tests/ui/symbol-names/trait-objects.rs:8:#![feature(rustc_attrs)]
tests/ui/symbol-names/types.rs:7:#![feature(never_type)]
tests/ui/symbol-names/types.rs:8:#![feature(rustc_attrs)]
tests/ui/symbol-names/impl1.rs:7:#![feature(auto_traits, rustc_attrs)]
tests/ui/symbol-names/foreign-types.rs:4:#![feature(extern_types)]
tests/ui/symbol-names/foreign-types.rs:5:#![feature(rustc_attrs)]
tests/ui/symbol-names/issue-75326.rs:7:#![feature(rustc_attrs)]
tests/ui/symbol-names/x86-stdcall.rs:6:#![feature(abi_vectorcall)]
tests/ui/symbol-names/issue-60925.rs:6:#![feature(rustc_attrs)]
tests/ui/symbol-names/const-generics-str-demangling.rs:4:#![feature(adt_const_params, rustc_attrs)]
tests/ui/symbol-names/const-generics-str-demangling.rs:5:#![allow(incomplete_features)]
tests/ui/symbol-names/const-generics-structural-demangling.rs:6:#![feature(adt_const_params, decl_macro, rustc_attrs)]
tests/ui/symbol-names/const-generics-structural-demangling.rs:7:#![allow(incomplete_features)]
tests/ui/symbol-names/impl2.rs:3:#![feature(rustc_attrs)]
tests/ui/symbol-names/const-generics-demangling.rs:8:#![feature(rustc_attrs)]
tests/ui/symbol-names/basic.rs:6:#![feature(rustc_attrs)]
tests/ui/stdlib-unit-tests/matches2021.rs:6:#![feature(assert_matches)]
tests/ui/stdlib-unit-tests/volatile-fat-ptr.rs:3:#![allow(stable_features)]
tests/ui/stdlib-unit-tests/volatile-fat-ptr.rs:4:#![feature(volatile)]
tests/ui/ufcs/ufcs-partially-resolved.stderr:25:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/ufcs/ufcs-partially-resolved.stderr:54:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/ufcs/ufcs-partially-resolved.stderr:101:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/ufcs/ufcs-partially-resolved.stderr:130:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/ufcs/ufcs-partially-resolved.rs:1:#![feature(associated_type_defaults)]
tests/ui/impl-trait/unsafety-checking-cycle.rs:6:#![feature(rustc_attrs)]
tests/ui/impl-trait/nested-return-type3-tait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/multiple-lifetimes/error-handling-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/multiple-lifetimes/error-handling.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/coherence-treats-tait-ambig.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/auto-trait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/associated-impl-trait-type-trivial.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/async_scope_creep.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/type-alias-impl-trait-in-fn-body.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/two_tait_defining_each_other3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/two_tait_defining_each_other.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/equality2.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/impl-trait/two_tait_defining_each_other2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/normalize-tait-in-const.rs:8:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/normalize-tait-in-const.rs:9:#![feature(const_trait_impl)]
tests/ui/impl-trait/normalize-tait-in-const.rs:10:#![feature(const_refs_to_cell)]
tests/ui/impl-trait/normalize-tait-in-const.rs:11:#![feature(inline_const)]
tests/ui/impl-trait/equality-rpass.rs:3:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/impl-trait/nested-return-type2-tait.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/in-trait/default-body.rs:4:#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/default-body.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/where-clause.rs:4:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/where-clause.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/variances-of-gat.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/signature-mismatch.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/signature-mismatch.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/method-signature-matches.rs:4:#![feature(return_position_impl_trait_in_trait, async_fn_in_trait)]
tests/ui/impl-trait/in-trait/method-signature-matches.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/issue-102140.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/issue-102140.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/default-body-type-err.rs:1:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/default-body-type-err.rs:2:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/encode.rs:4:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/encode.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:4:#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/deep-match-works.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/deep-match-works.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/specialization-broken.next.stderr:27:   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed
tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/unconstrained-lt.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/specialization-broken.current.stderr:27:   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed
tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/wf-bounds.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/wf-bounds.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/issue-102571.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/issue-102571.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/specialization-broken.rs:4:#![feature(specialization)]
tests/ui/impl-trait/in-trait/specialization-broken.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/specialization-broken.rs:6:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/nested-rpitit.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/nested-rpitit.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/specialization-substs-remap.rs:3:#![feature(specialization)]
tests/ui/impl-trait/in-trait/specialization-substs-remap.rs:4:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/specialization-substs-remap.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/return-dont-satisfy-bounds.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/opaque-in-impl.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/opaque-in-impl.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/deep-match.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/deep-match.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/default-method-constraint.rs:5:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/reveal.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/reveal.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/object-safety.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/object-safety.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/suggest-missing-item.fixed:4:#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/early.rs:4:#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/early.rs:5:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/default-body-type-err-2.rs:3:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/default-body-type-err-2.rs:4:#![feature(async_fn_in_trait)]
tests/ui/impl-trait/in-trait/suggest-missing-item.rs:4:#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/issue-102301.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/issue-102301.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/specialization-broken.stderr:27:   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed
tests/ui/impl-trait/in-trait/generics-mismatch.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/generics-mismatch.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/doesnt-satisfy.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/doesnt-satisfy.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/auxiliary/rpitit.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/success.rs:3:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/success.rs:4:#![allow(incomplete_features)]
tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.rs:1:#![feature(return_position_impl_trait_in_trait)]
tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.rs:2:#![allow(incomplete_features)]
tests/ui/impl-trait/recursive-generator.rs:1:#![feature(generators, generator_trait)]
tests/ui/impl-trait/nested_impl_trait.rs:1:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/issue-108592.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issue-55872.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/bound-normalization-pass.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issue-55872-3.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/feature-self-return-type.stderr:2:  --> $DIR/feature-self-return-type.rs:23:22
tests/ui/impl-trait/feature-self-return-type.stderr:15:  --> $DIR/feature-self-return-type.rs:63:17
tests/ui/impl-trait/feature-self-return-type.stderr:28:  --> $DIR/feature-self-return-type.rs:95:17
tests/ui/impl-trait/issue-55872-2.rs:6:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/hidden-type-is-opaque-2.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/associated-impl-trait-type-generic-trait.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/issue-86465.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/where-allowed.rs:3:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/where-allowed.rs:4:#![feature(custom_inner_attributes)]
tests/ui/impl-trait/equality-rpass.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/impl-trait/equality-rpass.stderr:4:LL | #![feature(specialization)]
tests/ui/impl-trait/equality-rpass.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/impl-trait/impl_fn_associativity.rs:2:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/equality.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/impl-trait/equality.stderr:4:LL | #![feature(specialization)]
tests/ui/impl-trait/equality.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/impl-trait/issue-99642-2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issue-55872-1.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/hidden-type-is-opaque.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/equality2.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/impl-trait/equality2.stderr:4:LL | #![feature(specialization)]
tests/ui/impl-trait/equality2.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/impl-trait/in-assoc-type.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/recursive-impl-trait-type-indirect.rs:8:#![feature(generators)]
tests/ui/impl-trait/static-lifetime-return-position-impl-trait.rs:3:#![allow(incomplete_features)]
tests/ui/impl-trait/static-lifetime-return-position-impl-trait.rs:4:#![feature(adt_const_params, return_position_impl_trait_in_trait)]
tests/ui/impl-trait/lifetimes.rs:4:#![feature(generators)]
tests/ui/impl-trait/issue-108591.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/associated-impl-trait-type.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/in-assoc-type-unconstrained.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/bound-normalization-fail.stderr:29:   = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable
tests/ui/impl-trait/impl-fn-predefined-lifetimes.rs:1:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/type-alias-generic-param.rs:6:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/nested-return-type2-tait2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/nested-return-type3-tait2.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/impl-fn-hrtb-bounds-2.rs:1:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/negative-reasoning.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/impl-fn-hrtb-bounds.rs:1:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/impl-fn-parsing-ambiguities.rs:1:#![feature(impl_trait_in_fn_trait_return)]
tests/ui/impl-trait/issues/issue-78722.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-86201.rs:1:#![feature(unboxed_closures)]
tests/ui/impl-trait/issues/issue-86201.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-58504.rs:1:#![feature(generators, generator_trait, never_type)]
tests/ui/impl-trait/issues/issue-86719.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/issues/issue-99348-impl-compatibility.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-78722.stderr:8:   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable
tests/ui/impl-trait/issues/issue-70877.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-53457.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-82139.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/issues/issue-86800.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-87340.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/issues/issue-89312.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-74282.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-77987.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/issues/issue-83919.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/impl-trait/issues/issue-78722-2.stderr:8:   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable
tests/ui/impl-trait/issues/issue-78722-2.rs:5:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/equality.rs:1:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/impl-trait/deduce-signature-from-supertrait.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/feature-self-return-type.rs:2:#![feature(impl_trait_projections)]
tests/ui/impl-trait/where-allowed.stderr:26:   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable
tests/ui/impl-trait/where-allowed.stderr:35:   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable
tests/ui/impl-trait/where-allowed.stderr:44:   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable
tests/ui/impl-trait/where-allowed.stderr:155:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/impl-trait/where-allowed.stderr:164:   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable
tests/ui/impl-trait/example-calendar.rs:3:#![feature(fn_traits,
tests/ui/impl-trait/nested-return-type2-tait3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/impl-trait/nested-return-type3-tait3.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/drop/dynamic-drop.rs:4:#![feature(generators, generator_trait)]
tests/ui/drop/drop_order.rs:3:#![feature(let_chains)]
tests/ui/drop/issue-100276.rs:3:#![feature(let_chains)]
tests/ui/drop/dropck-eyepatch-reorder.rs:2:#![feature(dropck_eyepatch)]
tests/ui/drop/dropck-eyepatch.rs:2:#![feature(dropck_eyepatch)]
tests/ui/drop/dropck-eyepatch-manuallydrop.rs:3:#![feature(dropck_eyepatch)]
tests/ui/drop/auxiliary/dropck_eyepatch_extern_crate.rs:1:#![feature(dropck_eyepatch)]
tests/ui/unknown-language-item.rs:2:#![feature(lang_items)]
tests/ui/structs-enums/rec-align-u64.rs:8:#![feature(intrinsics)]
tests/ui/structs-enums/enum-null-pointer-opt.rs:2:#![feature(transparent_unions)]
tests/ui/structs-enums/type-sizes.rs:5:#![feature(never_type)]
tests/ui/structs-enums/type-sizes.rs:6:#![feature(pointer_is_aligned)]
tests/ui/structs-enums/type-sizes.rs:7:#![feature(ptr_from_ref)]
tests/ui/structs-enums/type-sizes.rs:8:#![feature(strict_provenance)]
tests/ui/structs-enums/rec-align-u32.rs:6:#![feature(intrinsics)]
tests/ui/type/type-ascription.rs:7:#![feature(type_ascription)]
tests/ui/type/type-ascription-precedence.rs:3:#![feature(type_ascription)]
tests/ui/type/type-ascription-soundness.rs:3:#![feature(type_ascription)]
tests/ui/generic-associated-types/generic-associated-types-where.rs:1:// Checking the interaction with this other feature
tests/ui/generic-associated-types/generic-associated-types-where.rs:2:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/issue-87258_a.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/generic-associated-types/parameter_number_and_kind.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/projection-bound-cycle.rs:5:#![feature(trivial_bounds)]
tests/ui/generic-associated-types/issue-87429-specialization.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/generic-associated-types/issue-87429-specialization.stderr:4:LL | #![feature(specialization)]
tests/ui/generic-associated-types/issue-87429-specialization.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/generic-associated-types/trait-objects.rs:3:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/trait-objects.rs:4:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/issue-74816.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/gat-in-trait-path.rs:5:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/gat-in-trait-path.rs:6:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/gat-in-trait-path.rs:7:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/issue-90014.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/generic-associated-types/issue-88595.rs:1:#![feature(impl_trait_in_assoc_type)]
tests/ui/generic-associated-types/issue-87429-associated-type-default.rs:3:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/issue-90014-tait2.rs:23:#![feature(type_alias_impl_trait)]
tests/ui/generic-associated-types/issue-90014-tait2.rs:24:#![allow(incomplete_features)]
tests/ui/generic-associated-types/collections-project-default.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/issue-86218-2.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/generic-associated-types/issue-90014-tait.rs:7:#![feature(impl_trait_in_assoc_type, inherent_associated_types)]
tests/ui/generic-associated-types/issue-90014-tait.rs:8:#![allow(incomplete_features)]
tests/ui/generic-associated-types/cross-crate-bounds.rs:2:// We handled bounds differently when `feature(generic_associated_types)` was enabled
tests/ui/generic-associated-types/impl_bounds_ok.rs:3:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/projection-bound-cycle-generic.rs:2:// `feature(trivial_bounds)`.
tests/ui/generic-associated-types/impl_bounds.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/issue-79422.rs:3:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/issue-79422.rs:4:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/parameter_number_and_kind_impl.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/extended/lending_iterator_2.rs:5:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/extended/lending_iterator_2.rs:6:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/extended/lending_iterator.rs:5:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/extended/lending_iterator.rs:6:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/issue-67510-pass.rs:5:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/issue-67510-pass.rs:6:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/issue-87429-specialization.rs:3:#![feature(specialization)]
tests/ui/generic-associated-types/issue-86218.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/ui/generic-associated-types/issue-89008.rs:4:#![feature(impl_trait_in_assoc_type)]
tests/ui/generic-associated-types/issue-76535.rs:3:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/issue-76535.rs:4:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/issue-74824.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/issue-87258_b.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/generic-associated-types/issue-95305.rs:5:#![feature(anonymous_lifetime_in_impl_trait)]
tests/ui/generic-associated-types/issue-78671.rs:3:#![cfg_attr(extended, feature(generic_associated_types_extended))]
tests/ui/generic-associated-types/issue-78671.rs:4:#![cfg_attr(extended, allow(incomplete_features))]
tests/ui/generic-associated-types/collections.rs:1:#![feature(associated_type_defaults)]
tests/ui/generic-associated-types/issue-88287.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/span/gated-features-attr-spans.stderr:2:  --> $DIR/gated-features-attr-spans.rs:1:1
tests/ui/span/gated-features-attr-spans.stderr:8:   = help: add `#![feature(repr_simd)]` to the crate attributes to enable
tests/ui/span/borrowck-call-is-borrow-issue-12224.rs:1:#![feature(fn_traits)]
tests/ui/span/issue-23827.rs:3:#![feature(fn_traits, unboxed_closures)]
tests/ui/span/issue-11925.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/span/regionck-unboxed-closure-lifetimes.rs:1:#![feature(rustc_attrs)]
tests/ui/span/range-2.rs:2:#![feature(rustc_attrs)]
tests/ui/span/issue-42234-unknown-receiver-type.rs:2:#![cfg_attr(generic_arg, feature(generic_arg_infer))]
tests/ui/functions-closures/parallel-codegen-closures.rs:4:#![allow(stable_features)]
tests/ui/functions-closures/parallel-codegen-closures.rs:11:#![feature(iter_arith)]
tests/ui/object-safety/object-safety-sized.rs:6:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/object-safety/object-safety-no-static.rs:6:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/object-safety/object-safety-generics.rs:6:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/object-safety/object-safety-sized-2.rs:6:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/object-safety/object-safety-by-value-self-use.rs:4:#![feature(rustc_attrs)]
tests/ui/object-safety/object-safety-mentions-Self.rs:7:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/object-safety/object-safety-associated-consts.rs:6:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/check-static-recursion-foreign.rs:10:#![feature(rustc_private)]
tests/ui/self/elision/ref-self-async.rs:4:#![feature(arbitrary_self_types)]
tests/ui/self/elision/multiple-ref-self-async.rs:4:#![feature(arbitrary_self_types)]
tests/ui/self/elision/ref-self.rs:1:#![feature(arbitrary_self_types)]
tests/ui/self/elision/multiple-ref-self.rs:3:#![feature(arbitrary_self_types)]
tests/ui/self/arbitrary_self_types_stdlib_pointers.rs:2:#![feature(arbitrary_self_types)]
tests/ui/self/arbitrary_self_types_stdlib_pointers.rs:3:#![feature(rustc_attrs)]
tests/ui/self/arbitrary_self_types_raw_pointer_trait.rs:2:#![feature(arbitrary_self_types)]
tests/ui/self/arbitrary_self_types_silly.rs:2:#![feature(arbitrary_self_types)]
tests/ui/self/arbitrary-self-from-method-substs.rs:1:#![feature(arbitrary_self_types)]
tests/ui/self/arbitrary_self_types_raw_pointer_struct.rs:2:#![feature(arbitrary_self_types)]
tests/ui/self/arbitrary_self_types_pointers_and_wrappers.rs:2:#![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]
tests/ui/self/arbitrary_self_types_pointers_and_wrappers.rs:3:#![feature(rustc_attrs)]
tests/ui/self/arbitrary-self-types-not-object-safe.rs:3:#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]
tests/ui/underscore-imports/macro-expanded.rs:5:#![feature(decl_macro, rustc_attrs)]
tests/ui/underscore-imports/hygiene-2.rs:6:#![feature(decl_macro)]
tests/ui/underscore-imports/hygiene.rs:5:#![feature(decl_macro)]
tests/ui/half-open-range-patterns/pat-tuple-4.rs:3:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/pat-tuple-5.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/half-open-range-pats-syntactic-pass.rs:5:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/half-open-range-pats-exhaustive-pass.rs:5:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/range_pat_interactions3.stderr:8:   = help: add `#![feature(inline_const_pat)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/range_pat_interactions3.stderr:17:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/range_pat_interactions3.stderr:26:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/range_pat_interactions3.stderr:35:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/range_pat_interactions3.stderr:44:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/slice_pattern_syntax_problem1.rs:1:// Instead of allowing the previous case, maintain the feature gate for slice patterns for now.
tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.rs:1:#![feature(half_open_range_patterns_in_slices)]
tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.rs:2:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/half-open-range-pats-semantics.rs:6:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/slice_pattern_syntax_problem0.rs:1:#![feature(half_open_range_patterns_in_slices)]
tests/ui/half-open-range-patterns/slice_pattern_syntax_problem0.rs:2:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/feature-gate-half-open-range-patterns-in-slices.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/range_pat_interactions1.stderr:22:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/range_pat_interactions1.stderr:31:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/feature-gate-half-open-range-patterns-in-slices.stderr:2:  --> $DIR/feature-gate-half-open-range-patterns-in-slices.rs:5:10
tests/ui/half-open-range-patterns/feature-gate-half-open-range-patterns-in-slices.stderr:8:   = help: add `#![feature(half_open_range_patterns_in_slices)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/half-open-range-pats-bad-types.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.rs:3:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/slice_pattern_syntax_problem1.stderr:8:   = help: add `#![feature(half_open_range_patterns_in_slices)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/slice_pattern_syntax_problem1.stderr:17:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/slice_pattern_syntax_problem1.stderr:26:   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable
tests/ui/half-open-range-patterns/range_pat_interactions0.rs:2:#![allow(incomplete_features)]
tests/ui/half-open-range-patterns/range_pat_interactions0.rs:3:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/range_pat_interactions0.rs:4:#![feature(inline_const_pat)]
tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.rs:1:#![feature(half_open_range_patterns_in_slices)]
tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.rs:2:#![feature(exclusive_range_pattern)]
tests/ui/unsafe/unsafe-unstable-const-fn.rs:4:#![stable(feature = "foo", since = "1.33.0")]
tests/ui/unsafe/unsafe-unstable-const-fn.rs:5:#![feature(staged_api)]
tests/ui/unsafe/unsafe-unstable-const-fn.rs:7:#[stable(feature = "foo", since = "1.33.0")]
tests/ui/unsafe/unsafe-unstable-const-fn.rs:8:#[rustc_const_unstable(feature = "const_foo", issue = "none")]
tests/ui/unsafe/ranged_ints.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints_macro.rs:5:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints3_const.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints2_const.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints_const.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints2_const.mirunsafeck.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints2_const.mirunsafeck.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints2_const.mirunsafeck.stderr:26:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints3_match.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints2.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints4_const.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints2_const.thirunsafeck.stderr:16:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints2_const.thirunsafeck.stderr:25:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints2_const.thirunsafeck.stderr:34:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints3_const.mirunsafeck.stderr:8:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints3_const.mirunsafeck.stderr:17:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints3.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints4.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs:6:// a bug in the implementation of feature(capture_disjoint_fields) () was
tests/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs:7:// exposed to non-feature-gated code by a diagnostic changing PR that removed
tests/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs:11:// expected in the *absence* of that feature gate. At the time of this writing,
tests/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs:12:// enabling the feature gate will cause this test to fail. We obviously cannot
tests/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs:13:// stabilize that feature until it can correctly handle this test.
tests/ui/unsafe/unsafe-borrow.rs:4:#![feature(rustc_attrs)]
tests/ui/unsafe/ranged_ints3_const.thirunsafeck.stderr:16:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/unsafe/ranged_ints3_const.thirunsafeck.stderr:25:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/unsafe/unsafe-assign.rs:4:#![feature(rustc_attrs)]
tests/ui/associated-consts/projection-unspecified-but-bounded.rs:1:#![feature(associated_const_equality)]
tests/ui/associated-consts/issue-105330.stderr:25:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/associated-consts/issue-105330.stderr:34:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/associated-consts/issue-88599-ref-self.rs:2:#![feature(generic_const_exprs)]
tests/ui/associated-consts/issue-88599-ref-self.rs:3:#![allow(incomplete_features)]
tests/ui/associated-consts/assoc-const-ty-mismatch.rs:1:#![feature(associated_const_equality)]
tests/ui/associated-consts/issue-102335-const.rs:1:#![feature(associated_const_equality)]
tests/ui/associated-consts/assoc-const.rs:2:#![feature(associated_const_equality)]
tests/ui/associated-consts/issue-93835.rs:1:#![feature(type_ascription)]
tests/ui/associated-consts/issue-93835.stderr:26:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/associated-consts/issue-93835.stderr:35:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-consts/mismatched_impl_ty_1.rs:2:#![feature(generic_const_exprs)]
tests/ui/associated-consts/mismatched_impl_ty_1.rs:3:#![allow(incomplete_features)]
tests/ui/associated-consts/assoc-const-eq-missing.rs:1:#![feature(associated_const_equality)]
tests/ui/associated-consts/issue-110933.rs:3:#![feature(associated_const_equality)]
tests/ui/associated-consts/associated-const-type-parameter-arrays.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/static/static-extern-type.rs:2:#![feature(extern_types)]
tests/ui/static/static_sized_requirement.rs:3:#![feature(no_core, lang_items)]
tests/ui/static/thread-local-in-ctfe.rs:1:#![feature(thread_local)]
tests/ui/track-diagnostics/track6.stderr:6:-Ztrack-diagnostics: created at compiler/rustc_ast_passes/src/feature_gate.rs:LL:CC
tests/ui/track-diagnostics/track6.stderr:9:   = help: add `#![feature(specialization)]` to the crate attributes to enable
tests/ui/track-diagnostics/track.stderr:17:note: the compiler expectedly panicked. this is a feature.
tests/ui/typeid-intrinsic.rs:7:#![feature(core_intrinsics)]
tests/ui/numbers-arithmetic/saturating-float-casts-wasm.rs:3:// compile-flags: -Zmir-opt-level=0 -C target-feature=+nontrapping-fptoint
tests/ui/numbers-arithmetic/saturating-float-casts-wasm.rs:5:#![feature(test, stmt_expr_attributes)]
tests/ui/numbers-arithmetic/i128.rs:4:#![feature(test)]
tests/ui/numbers-arithmetic/overflow-attribute-works-2.rs:4:#![feature(cfg_overflow_checks)]
tests/ui/numbers-arithmetic/saturating-float-casts.rs:4:#![feature(test, stmt_expr_attributes)]
tests/ui/numbers-arithmetic/num-wrapping.rs:8:#![feature(test)]
tests/ui/numbers-arithmetic/u128.rs:3:#![feature(test)]
tests/ui/numbers-arithmetic/issue-8460.rs:5:#![feature(rustc_attrs)]
tests/ui/numbers-arithmetic/float_math.rs:2:#![feature(core_intrinsics)]
tests/ui/numbers-arithmetic/issue-105626.rs:4:// compile-flags: -Ctarget-feature=+sse2
tests/ui/numbers-arithmetic/overflow-attribute-works-1.rs:4:#![feature(cfg_overflow_checks)]
tests/ui/numbers-arithmetic/u128-as-f32.rs:3:#![feature(test)]
tests/ui/debuginfo/debuginfo-box-with-large-allocator.rs:5:#![feature(allocator_api)]
tests/ui/error-codes/E0075.rs:1:#![feature(repr_simd)]
tests/ui/error-codes/E0789.rs:3:#![feature(rustc_attrs)]
tests/ui/error-codes/E0789.rs:4:#![feature(staged_api)]
tests/ui/error-codes/E0789.rs:5:#![unstable(feature = "foo_module", reason = "...", issue = "123")]
tests/ui/error-codes/E0789.rs:8:// #[stable(feature = "foo", since = "1.0")]
tests/ui/error-codes/E0396-fixed.rs:1:#![feature(const_mut_refs)]
tests/ui/error-codes/E0705.stderr:1:warning[E0705]: the feature `test_2018_feature` is included in the Rust 2018 edition
tests/ui/error-codes/E0705.stderr:4:LL | #![feature(test_2018_feature)]
tests/ui/error-codes/E0376.rs:1:#![feature(coerce_unsized)]
tests/ui/error-codes/E0092.rs:1:#![feature(intrinsics)]
tests/ui/error-codes/E0377.rs:1:#![feature(coerce_unsized)]
tests/ui/error-codes/E0161.rs:8:#![allow(incomplete_features)]
tests/ui/error-codes/E0161.rs:9:#![cfg_attr(ul, feature(unsized_locals))]
tests/ui/error-codes/E0520.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/error-codes/E0520.stderr:4:LL | #![feature(specialization)]
tests/ui/error-codes/E0520.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/error-codes/E0093.rs:1:#![feature(intrinsics)]
tests/ui/error-codes/E0705.rs:3:// This is a stub feature that doesn't control anything, so to make tidy happy,
tests/ui/error-codes/E0705.rs:4:// gate-test-test_2018_feature
tests/ui/error-codes/E0705.rs:6:#![feature(test_2018_feature)]
tests/ui/error-codes/E0705.rs:7://~^ WARN the feature `test_2018_feature` is included in the Rust 2018 edition
tests/ui/error-codes/E0705.rs:8:#![feature(rust_2018_preview)]
tests/ui/error-codes/E0711.stderr:1:error[E0711]: feature `foo` is declared stable since 1.29.0, but was previously declared stable since 1.0.0
tests/ui/error-codes/E0711.stderr:4:LL | #[stable(feature = "foo", since = "1.29.0")]
tests/ui/error-codes/E0711.stderr:7:error[E0711]: feature `foo` is declared unstable, but was previously declared stable
tests/ui/error-codes/E0711.stderr:10:LL | #[unstable(feature = "foo", issue = "none")]
tests/ui/error-codes/E0463.rs:1:#![feature(plugin)]
tests/ui/error-codes/E0259.rs:1:#![feature(rustc_private)]
tests/ui/error-codes/E0208.rs:1:#![feature(rustc_attrs)]
tests/ui/error-codes/E0199.rs:1:#![feature(negative_impls)]
tests/ui/error-codes/E0711.rs:1:// copied from: tests/ui/feature-gates/stability-attribute-consistency.rs
tests/ui/error-codes/E0711.rs:3:#![feature(staged_api)]
tests/ui/error-codes/E0711.rs:5:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/error-codes/E0711.rs:7:#[stable(feature = "foo", since = "1.0.0")]
tests/ui/error-codes/E0711.rs:10:#[stable(feature = "foo", since = "1.29.0")]
tests/ui/error-codes/E0711.rs:11://~^ ERROR feature `foo` is declared stable since 1.29.0
tests/ui/error-codes/E0711.rs:14:#[unstable(feature = "foo", issue = "none")]
tests/ui/error-codes/E0711.rs:15://~^ ERROR feature `foo` is declared unstable
tests/ui/error-codes/E0522.rs:1:#![feature(lang_items)]
tests/ui/error-codes/E0396.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/error-codes/E0396.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/error-codes/E0396.stderr:26:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/error-codes/E0388.stderr:29:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/error-codes/E0198.rs:1:#![feature(negative_impls)]
tests/ui/error-codes/E0017.stderr:29:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/error-codes/E0308.rs:1:#![feature(intrinsics)]
tests/ui/error-codes/E0308.rs:2:#![feature(rustc_attrs)]
tests/ui/error-codes/E0658.stderr:8:   = help: add `#![feature(repr128)]` to the crate attributes to enable
tests/ui/error-codes/E0328.rs:1:#![feature(unsize)]
tests/ui/error-codes/E0277.stderr:10:   = help: unsized fn params are gated as an unstable feature
tests/ui/error-codes/E0771.rs:1:#![feature(adt_const_params)]
tests/ui/error-codes/E0771.rs:2://~^ WARN the feature `adt_const_params` is incomplete
tests/ui/error-codes/E0476.rs:1:#![feature(coerce_unsized)]
tests/ui/error-codes/E0476.rs:2:#![feature(unsize)]
tests/ui/error-codes/E0445.rs:1:#![feature(type_privacy_lints)]
tests/ui/error-codes/E0647.rs:2:#![feature(start)]
tests/ui/error-codes/E0511.rs:3:#![feature(platform_intrinsics)]
tests/ui/error-codes/E0622.rs:1:#![feature(intrinsics)]
tests/ui/error-codes/E0059.rs:1:#![feature(unboxed_closures)]
tests/ui/error-codes/E0520.rs:1:#![feature(specialization)]
tests/ui/error-codes/E0520.rs:2://~^ WARN the feature `specialization` is incomplete
tests/ui/error-codes/E0138.rs:1:#![feature(start)]
tests/ui/error-codes/E0374.rs:1:#![feature(coerce_unsized)]
tests/ui/error-codes/E0077.rs:1:#![feature(repr_simd)]
tests/ui/error-codes/E0152.rs:2:#![feature(lang_items)]
tests/ui/error-codes/E0094.rs:1:#![feature(intrinsics)]
tests/ui/error-codes/E0076.rs:1:#![feature(repr_simd)]
tests/ui/error-codes/E0264.rs:1:#![feature(lang_items)]
tests/ui/error-codes/E0375.rs:1:#![feature(coerce_unsized)]
tests/ui/error-codes/E0132.rs:1:#![feature(start)]
tests/ui/error-codes/E0718.rs:1:#![feature(lang_items)]
tests/ui/error-codes/E0771.stderr:9:warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/error-codes/E0771.stderr:12:LL | #![feature(adt_const_params)]
tests/ui/error-codes/E0771.stderr:16:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/error-codes/E0225.rs:1:#![feature(trait_alias)]
tests/ui/allocator/xcrate-use.rs:7:#![feature(allocator_api)]
tests/ui/allocator/xcrate-use.rs:8:#![feature(slice_ptr_get)]
tests/ui/allocator/custom.rs:6:#![feature(allocator_api)]
tests/ui/allocator/custom.rs:7:#![feature(slice_ptr_get)]
tests/ui/allocator/object-safe.rs:5:#![feature(allocator_api)]
tests/ui/allocator/no_std-alloc-error-handler-default.rs:10:#![feature(rustc_private, lang_items)]
tests/ui/allocator/xcrate-use2.rs:8:#![feature(allocator_api)]
tests/ui/allocator/no_std-alloc-error-handler-custom.rs:10:#![feature(rustc_private, lang_items)]
tests/ui/allocator/no_std-alloc-error-handler-custom.rs:11:#![feature(alloc_error_handler)]
tests/ui/allocator/auxiliary/custom.rs:3:#![feature(allocator_api)]
tests/ui/attr-shebang.rs:3:#![allow(stable_features)]
tests/ui/attr-shebang.rs:4:#![feature(rust1)]
tests/ui/thread-local/thread-local-issue-37508.rs:9:#![feature(thread_local, lang_items)]
tests/ui/thread-local/tls-dylib-access.rs:5:#![feature(cfg_target_thread_local)]
tests/ui/thread-local/thread-local-static-ref-use-after-free.rs:8:#![feature(thread_local)]
tests/ui/thread-local/thread-local-mutation.rs:5:#![feature(thread_local)]
tests/ui/thread-local/thread-local-static.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/thread-local/thread-local-static.stderr:31:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/thread-local/non-static.rs:2:#![feature(thread_local)]
tests/ui/thread-local/tls.rs:6:#![feature(thread_local)]
tests/ui/thread-local/thread-local-static.rs:3:#![feature(thread_local)]
tests/ui/thread-local/thread-local-static.rs:4:#![feature(const_swap)]
tests/ui/thread-local/auxiliary/tls-export.rs:2:#![feature(thread_local)]
tests/ui/thread-local/auxiliary/tls-export.rs:3:#![feature(cfg_target_thread_local)]
tests/ui/thread-local/auxiliary/tls-rlib.rs:4:#![feature(thread_local)]
tests/ui/thread-local/auxiliary/tls-rlib.rs:5:#![feature(cfg_target_thread_local)]
tests/ui/never_type/cast-never.rs:5:#![feature(never_type)]
tests/ui/never_type/impl_trait_fallback4.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/never_type/never-associated-type.rs:5:#![feature(never_type)]
tests/ui/never_type/never-result.rs:8:#![feature(never_type)]
tests/ui/never_type/fallback-closure-wrap.rs:13:#![cfg_attr(fallback, feature(never_type_fallback))]
tests/ui/never_type/try_from.rs:8:#![feature(never_type)]
tests/ui/never_type/never-assign-wrong-type.rs:3:#![feature(never_type)]
tests/ui/never_type/impl-for-never.rs:3:#![feature(never_type)]
tests/ui/never_type/feature-gate-never_type_fallback.stderr:2:  --> $DIR/feature-gate-never_type_fallback.rs:10:9
tests/ui/never_type/feature-gate-never_type_fallback.stderr:12:  --> $DIR/feature-gate-never_type_fallback.rs:13:16
tests/ui/never_type/never-from-impl-is-reserved.rs:3:#![feature(never_type)]
tests/ui/never_type/issue-51506.rs:1:#![feature(never_type, specialization)]
tests/ui/never_type/issue-51506.rs:2:#![allow(incomplete_features)]
tests/ui/never_type/never-type-arg.rs:5:#![feature(never_type)]
tests/ui/never_type/issue-52443.stderr:16:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/never_type/issue-52443.stderr:50:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/never_type/issue-52443.stderr:59:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/never_type/issue-52443.stderr:68:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/never_type/call-fn-never-arg.rs:5:#![feature(never_type)]
tests/ui/never_type/adjust_never.rs:5:#![feature(never_type)]
tests/ui/never_type/diverging-fallback-control-flow.rs:12:#![cfg_attr(fallback, feature(never_type, never_type_fallback))]
tests/ui/never_type/diverging-fallback-no-leak.rs:4:#![cfg_attr(fallback, feature(never_type, never_type_fallback))]
tests/ui/never_type/never-value-fallback-issue-66757.rs:11:#![feature(never_type)]
tests/ui/never_type/never-value-fallback-issue-66757.rs:13:#![cfg_attr(fallback, feature(never_type_fallback))]
tests/ui/never_type/issue-44402.rs:4:#![feature(never_type)]
tests/ui/never_type/issue-44402.rs:5:#![feature(exhaustive_patterns)]
tests/ui/never_type/defaulted-never-note.rs:5:// We need to opt into the `never_type_fallback` feature
tests/ui/never_type/defaulted-never-note.rs:7:#![cfg_attr(fallback, feature(never_type, never_type_fallback))]
tests/ui/never_type/call-fn-never-arg-wrong-type.rs:3:#![feature(never_type)]
tests/ui/never_type/dispatch_from_dyn_zst.rs:3:#![feature(unsize, dispatch_from_dyn, never_type)]
tests/ui/never_type/impl_trait_fallback3.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/never_type/exhaustive_patterns.rs:4:#![feature(exhaustive_patterns, never_type)]
tests/ui/never_type/auto-traits.rs:3:#![feature(auto_traits)]
tests/ui/never_type/auto-traits.rs:4:#![feature(negative_impls)]
tests/ui/never_type/auto-traits.rs:5:#![feature(never_type)]
tests/ui/never_type/diverging-fallback-unconstrained-return.rs:11:#![cfg_attr(fallback, feature(never_type, never_type_fallback))]
tests/ui/never_type/never-type-rvalues.rs:3:#![feature(never_type)]
tests/ui/never_type/feature-gate-never_type_fallback.rs:1:// This is a feature gate test for `never_type_fallback`.
tests/ui/never_type/feature-gate-never_type_fallback.rs:3:// in the case where `#![feature(never_type_fallback)]` would change it to `!`.
tests/ui/never_type/impl_trait_fallback2.rs:1:#![feature(type_alias_impl_trait)]
tests/ui/never_type/fallback-closure-ret.rs:13:#![cfg_attr(fallback, feature(never_type_fallback))]
tests/ui/never_type/never-assign-dead-code.rs:5:#![feature(never_type)]
tests/ui/never_type/never_transmute_never.rs:5:#![feature(never_type)]
tests/ui/deprecation/deprecated_no_stack_check.rs:2:#![feature(no_stack_check)]
tests/ui/deprecation/deprecated_no_stack_check.rs:3://~^ ERROR: feature has been removed [E0557]
tests/ui/deprecation/suggestion.fixed:3:#![feature(staged_api)]
tests/ui/deprecation/suggestion.fixed:4:#![feature(deprecated_suggestion)]
tests/ui/deprecation/suggestion.fixed:6:#![stable(since = "1.0.0", feature = "test")]
tests/ui/deprecation/suggestion.fixed:19:    #[stable(since = "1.0.0", feature = "test")]
tests/ui/deprecation/suggestion.fixed:31:    #[stable(since = "1.0.0", feature = "test")]
tests/ui/deprecation/suggestion.rs:3:#![feature(staged_api)]
tests/ui/deprecation/suggestion.rs:4:#![feature(deprecated_suggestion)]
tests/ui/deprecation/suggestion.rs:6:#![stable(since = "1.0.0", feature = "test")]
tests/ui/deprecation/suggestion.rs:19:    #[stable(since = "1.0.0", feature = "test")]
tests/ui/deprecation/suggestion.rs:31:    #[stable(since = "1.0.0", feature = "test")]
tests/ui/deprecation/feature-gate-deprecated_suggestion.stderr:2:  --> $DIR/feature-gate-deprecated_suggestion.rs:5:14
tests/ui/deprecation/feature-gate-deprecated_suggestion.stderr:7:   = help: add `#![feature(deprecated_suggestion)]` to the crate root
tests/ui/deprecation/deprecation-in-future.stderr:4:LL |     deprecated_future(); // ok; deprecated_in_future only applies with `#![feature(staged_api)]`
tests/ui/deprecation/staged-deprecation-in-future.rs:3:#![feature(staged_api)]
tests/ui/deprecation/staged-deprecation-in-future.rs:5:#![stable(feature = "rustc_deprecation-in-future-test", since = "1.0.0")]
tests/ui/deprecation/staged-deprecation-in-future.rs:8:#[stable(feature = "rustc_deprecation-in-future-test", since = "1.0.0")]
tests/ui/deprecation/staged-deprecation-in-future.rs:12:#[stable(feature = "rustc_deprecation-in-future-test", since = "1.0.0")]
tests/ui/deprecation/deprecated_no_stack_check.stderr:1:error[E0557]: feature has been removed
tests/ui/deprecation/deprecated_no_stack_check.stderr:4:LL | #![feature(no_stack_check)]
tests/ui/deprecation/deprecated_no_stack_check.stderr:5:   |            ^^^^^^^^^^^^^^ feature has been removed
tests/ui/deprecation/deprecation-in-future.rs:9:    deprecated_future(); // ok; deprecated_in_future only applies with `#![feature(staged_api)]`
tests/ui/deprecation/deprecation-lint.rs:263:        // Future deprecations are only permitted with `#![feature(staged_api)]`
tests/ui/deprecation/auxiliary/deprecation-lint.rs:1:#![feature(deprecated)]
tests/ui/rust-2018/proc-macro-crate-in-paths.rs:7:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-nested-paths.rs:3:#![feature(rust_2018_preview)]
tests/ui/rust-2018/issue-51008-1.rs:7:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-paths.rs:4:#![feature(rust_2018_preview)]
tests/ui/rust-2018/extern-crate-idiomatic.rs:9:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-nested-paths.fixed:3:#![feature(rust_2018_preview)]
tests/ui/rust-2018/extern-crate-submod.fixed:8:#![feature(rust_2018_preview)]
tests/ui/rust-2018/extern-crate-referenced-by-self-path.rs:9:#![feature(rust_2018_preview)]
tests/ui/rust-2018/uniform-paths/macro-rules.rs:3:#![feature(decl_macro)]
tests/ui/rust-2018/uniform-paths/from-decl-macro.rs:4:#![feature(decl_macro)]
tests/ui/rust-2018/extern-crate-referenced-by-self-path.fixed:9:#![feature(rust_2018_preview)]
tests/ui/rust-2018/extern-crate-submod.rs:8:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-nested-empty-paths.rs:3:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-fully-qualified-paths.fixed:3:#![feature(rust_2018_preview)]
tests/ui/rust-2018/issue-51008.rs:7:#![feature(rust_2018_preview)]
tests/ui/rust-2018/extern-crate-rename.fixed:7:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-infer-outlives.fixed:788:// feature-gate for now
tests/ui/rust-2018/extern-crate-idiomatic.fixed:9:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-infer-outlives.rs:788:// feature-gate for now
tests/ui/rust-2018/suggestions-not-always-applicable.rs:7:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-fully-qualified-paths.rs:3:#![feature(rust_2018_preview)]
tests/ui/rust-2018/suggestions-not-always-applicable.fixed:7:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-nested-empty-paths.fixed:3:#![feature(rust_2018_preview)]
tests/ui/rust-2018/edition-lint-paths.fixed:4:#![feature(rust_2018_preview)]
tests/ui/rust-2018/extern-crate-rename.rs:7:#![feature(rust_2018_preview)]
tests/ui/incoherent-inherent-impls/needs-has-incoherent-impls.rs:2:#![feature(rustc_attrs)]
tests/ui/incoherent-inherent-impls/auxiliary/extern-crate.rs:1:#![feature(rustc_attrs)]
tests/ui/for/issue-20605.next.stderr:15:   = help: unsized locals are gated as an unstable feature
tests/ui/for/issue-20605.next.stderr:51:   = help: unsized locals are gated as an unstable feature
tests/ui/mut/mutable-enum-indirect.rs:4:#![feature(negative_impls)]
tests/ui/transmute/transmute-different-sizes.rs:6:#![feature(specialization)]
tests/ui/transmute/transmute-padding-ice.rs:2:#![feature(transmutability)]
tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-85455.rs:1:#![feature(unboxed_closures)]
tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-71955.rs:2:#![feature(rustc_attrs)]
tests/ui/higher-ranked/trait-bounds/future.rs:14:#![feature(unboxed_closures)]
tests/ui/higher-ranked/trait-bounds/hrtb-wrong-kind.stderr:8:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/higher-ranked/trait-bounds/hrtb-wrong-kind.stderr:17:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/stack-protector/warn-stack-protector-unsupported.rs:10:#![feature(no_core, lang_items)]
tests/ui/bounds-lifetime.stderr:26:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/bounds-lifetime.stderr:35:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:2:  --> $DIR/uninhabited-matches-feature-gated.rs:6:19
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:20:  --> $DIR/uninhabited-matches-feature-gated.rs:15:19
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:26:  --> $DIR/uninhabited-matches-feature-gated.rs:2:6
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:40:  --> $DIR/uninhabited-matches-feature-gated.rs:18:19
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:54:  --> $DIR/uninhabited-matches-feature-gated.rs:21:19
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:68:  --> $DIR/uninhabited-matches-feature-gated.rs:24:19
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:81:  --> $DIR/uninhabited-matches-feature-gated.rs:32:19
tests/ui/uninhabited/uninhabited-matches-feature-gated.stderr:99:  --> $DIR/uninhabited-matches-feature-gated.rs:37:9
tests/ui/uninhabited/uninhabited-irrefutable.rs:1:#![feature(never_type)]
tests/ui/uninhabited/uninhabited-irrefutable.rs:2:#![feature(exhaustive_patterns)]
tests/ui/uninhabited/exhaustive-wo-nevertype-issue-51221.rs:3:#![feature(exhaustive_patterns)]
tests/ui/uninhabited/projection.rs:3:#![feature(never_type, exhaustive_patterns)]
tests/ui/uninhabited/uninhabited-matches-feature-gated.rs:13:    // this test only checks that these are feature-gated.
tests/ui/uninhabited/uninhabited-patterns.rs:1:#![feature(box_patterns)]
tests/ui/uninhabited/uninhabited-patterns.rs:2:#![feature(never_type)]
tests/ui/uninhabited/uninhabited-patterns.rs:3:#![feature(exhaustive_patterns)]
tests/ui/derives/derive-hygiene.rs:7:#![feature(decl_macro)]
tests/ui/dep-graph/dep-graph-trait-impl.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-caller-callee.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-struct-signature.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-variance-alias.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-trait-impl-two-traits.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-type-alias.rs:6:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-trait-impl-two-traits-same-method.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-assoc-type-codegen.rs:7:#![feature(rustc_attrs)]
tests/ui/dep-graph/dep-graph-check-attr.rs:4:#![feature(rustc_attrs)]
tests/ui/nll/region-ends-after-if-condition.rs:6:#![feature(rustc_attrs)]
tests/ui/nll/issue-27282-move-match-input-into-guard.rs:10:#![feature(if_let_guard)]
tests/ui/nll/return_from_loop.rs:6:#![feature(rustc_attrs)]
tests/ui/nll/issue-27282-mutate-before-diverging-arm-1.rs:5:// Basically this is testing that our new NLL feature of emitting a
tests/ui/nll/match-guards-always-borrow.rs:1:#![feature(if_let_guard)]
tests/ui/nll/issue-78561.rs:2:#![feature(impl_trait_in_assoc_type)]
tests/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.rs:9:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.rs:4:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/projection-one-region-closure.rs:18:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.rs:10:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.rs:8:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs:11:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.rs:4:#![feature(rustc_attrs)]
tests/ui/nll/ty-outlives/projection-no-regions-closure.rs:8:#![feature(rustc_attrs)]
tests/ui/nll/extra-unused-mut.rs:5:#![feature(generators)]
tests/ui/nll/projection-return.rs:3:#![feature(rustc_attrs)]
tests/ui/nll/issue-16223.rs:18:#![feature(box_patterns)]
tests/ui/nll/drop-no-may-dangle.rs:7:#![feature(dropck_eyepatch)]
tests/ui/nll/issue-42574-diagnostic-in-nested-closure.rs:1:// This test illustrates a case where full NLL (enabled by the feature
tests/ui/nll/issue-51770.rs:5:// In an older version, when NLL was still a feature, the following previously did not compile
tests/ui/nll/issue-24535-allow-mutable-borrow-in-match-guard.rs:8:#![feature(if_let_guard)]
tests/ui/nll/decl-macro-illegal-copy.rs:3:#![feature(decl_macro)]
tests/ui/nll/loan_ends_mid_block_vec.rs:2:#![feature(rustc_attrs)]
tests/ui/nll/constant-thread-locals-issue-47053.rs:3:#![feature(thread_local)]
tests/ui/nll/generator-distinct-lifetime.rs:1:#![feature(generators)]
tests/ui/nll/generator-upvar-mutability.rs:3:#![feature(generators)]
tests/ui/nll/borrowck-thread-local-static-mut-borrow-outlives-fn.rs:6:#![feature(thread_local)]
tests/ui/nll/issue-27282-move-ref-mut-into-guard.rs:5:#![feature(if_let_guard)]
tests/ui/nll/issue-27282-reborrow-ref-mut-in-guard.rs:8:#![feature(if_let_guard)]
tests/ui/nll/loan_ends_mid_block_pair.rs:2:#![feature(rustc_attrs)]
tests/ui/nll/issue-55850.rs:2:#![feature(generators, generator_trait)]
tests/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.rs:6:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-approximated-ref.rs:17:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs:7:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-from-trait-match.rs:9:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/escape-upvar-nested.rs:10:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs:8:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs:9:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/return-wrong-bound-region.rs:7:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/escape-upvar-ref.rs:14:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/escape-argument-callee.rs:17:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.rs:12:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.rs:12:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-despite-same-free-region.rs:9:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/propagate-approximated-val.rs:10:#![feature(rustc_attrs)]
tests/ui/nll/closure-requirements/escape-argument.rs:17:#![feature(rustc_attrs)]
tests/ui/nll/issue-48623-generator.rs:5:#![feature(generators, generator_trait)]
tests/ui/nll/trait-associated-constant.rs:4:#![feature(rustc_attrs)]
tests/ui/nll/match-cfg-fake-edges.rs:4:#![feature(if_let_guard)]
tests/ui/nll/issue-27282-mutation-in-guard.rs:1:#![feature(if_let_guard)]
tests/ui/nll/issue-27282-mutate-before-diverging-arm-3.rs:5:// Basically this is testing that our new NLL feature of emitting a
tests/ui/nll/user-annotations/dump-fn-method.rs:6:#![feature(rustc_attrs)]
tests/ui/nll/user-annotations/normalization-2.rs:5:#![feature(more_qualified_paths)]
tests/ui/nll/user-annotations/type_ascription_static_lifetime.rs:2:#![feature(type_ascription)]
tests/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.rs:4:#![feature(type_ascription)]
tests/ui/nll/user-annotations/dump-adt-brace-struct.rs:7:#![feature(rustc_attrs)]
tests/ui/nll/drop-may-dangle.rs:8:#![feature(dropck_eyepatch)]
tests/ui/nll/match-guards-partially-borrow.rs:8:#![feature(if_let_guard)]
tests/ui/nll/issue-27282-mutate-before-diverging-arm-2.rs:5:// Basically this is testing that our new NLL feature of emitting a
tests/ui/inference/inference_unstable_forced.stderr:1:error[E0658]: use of unstable library feature 'ipu_flatten'
tests/ui/inference/inference_unstable_forced.stderr:8:   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable
tests/ui/inference/inference_unstable.stderr:10:   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`
tests/ui/inference/inference_unstable.stderr:22:   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_by_value_vs_by_ref`
tests/ui/inference/inference_unstable.stderr:33:   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_by_ref_vs_by_ref_mut`
tests/ui/inference/inference_unstable.stderr:44:   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_by_mut_ptr_vs_by_const_ptr`
tests/ui/inference/inference_unstable.stderr:54:   = help: add `#![feature(assoc_const_ipu_iter)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::C`
tests/ui/inference/inference_unstable.rs:1:// Ensures #[unstable] functions without opting in the corresponding #![feature]
tests/ui/inference/inference_unstable_forced.rs:2:// still emit E0658 "use of unstable library feature".
tests/ui/inference/inference_unstable_featured.stderr:2:  --> $DIR/inference_unstable_featured.rs:16:20
tests/ui/inference/inference_unstable_featured.rs:2:// the feature.
tests/ui/inference/inference_unstable_featured.rs:7:#![feature(ipu_flatten)]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:1:#![feature(staged_api)]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:2:#![feature(arbitrary_self_types)]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:4:#![stable(feature = "ipu_iterator", since = "1.0.0")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:6:#[stable(feature = "ipu_iterator", since = "1.0.0")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:8:    #[unstable(feature = "ipu_flatten", issue = "99999")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:13:    #[unstable(feature = "ipu_flatten", issue = "99999")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:18:    #[unstable(feature = "ipu_flatten", issue = "99999")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:23:    #[unstable(feature = "ipu_flatten", issue = "99999")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:28:    #[unstable(feature = "assoc_const_ipu_iter", issue = "99999")]
tests/ui/inference/auxiliary/inference_unstable_iterator.rs:32:#[stable(feature = "ipu_iterator", since = "1.0.0")]
tests/ui/inference/auxiliary/inference_unstable_itertools.rs:1:#![feature(arbitrary_self_types)]
tests/ui/alloc-error/alloc-error-handler-bad-signature-1.rs:3:#![feature(alloc_error_handler)]
tests/ui/alloc-error/alloc-error-handler-bad-signature-3.rs:3:#![feature(alloc_error_handler)]
tests/ui/alloc-error/alloc-error-handler-bad-signature-2.rs:3:#![feature(alloc_error_handler)]
tests/ui/dynamically-sized-types/dst-tuple-sole.rs:2:#![allow(stable_features)]
tests/ui/dynamically-sized-types/dst-tuple-sole.rs:8:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-coerce-rc.rs:3:#![allow(stable_features)]
tests/ui/dynamically-sized-types/dst-coerce-rc.rs:6:#![feature(core, rc_weak)]
tests/ui/dynamically-sized-types/dst-raw.rs:5:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-trait-tuple.rs:4:#![allow(unused_features)]
tests/ui/dynamically-sized-types/dst-trait-tuple.rs:5:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-irrefutable-bind.rs:2:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-tuple-no-reorder.rs:3:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-tuple.rs:4:#![feature(unsized_tuple_coercion)]
tests/ui/dynamically-sized-types/dst-coerce-custom.rs:4:#![feature(unsize, coerce_unsized)]
tests/ui/loops/loop-break-value.rs:1:#![feature(never_type)]
tests/ui/loops/dont-suggest-break-thru-item.rs:3:#![feature(inline_const)]
tests/ui/using-target-feature-unstable.rs:3:// aux-build:using-target-feature-unstable.rs
tests/ui/using-target-feature-unstable.rs:5:extern crate using_target_feature_unstable;
tests/ui/using-target-feature-unstable.rs:9:        using_target_feature_unstable::foo();
tests/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs:1:#![feature(core_intrinsics)]
tests/ui/enum-discriminant/repr128.stderr:1:warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/enum-discriminant/repr128.stderr:4:LL | #![feature(repr128, core_intrinsics, discriminant_kind)]
tests/ui/enum-discriminant/repr128.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/enum-discriminant/issue-43398.stderr:1:warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/enum-discriminant/issue-43398.stderr:4:LL | #![feature(repr128)]
tests/ui/enum-discriminant/issue-43398.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/enum-discriminant/issue-43398.rs:3:#![feature(core_intrinsics)]
tests/ui/enum-discriminant/issue-43398.rs:4:#![feature(repr128)]
tests/ui/enum-discriminant/issue-43398.rs:5://~^ WARN the feature `repr128` is incomplete
tests/ui/enum-discriminant/discriminant_value.rs:2:#![allow(stable_features)]
tests/ui/enum-discriminant/discriminant_value.rs:3:#![feature(core, core_intrinsics)]
tests/ui/enum-discriminant/discriminant_size.rs:2:#![feature(core_intrinsics, repr128)]
tests/ui/enum-discriminant/discriminant_size.rs:3://~^ WARN the feature `repr128` is incomplete
tests/ui/enum-discriminant/arbitrary_enum_discriminant.rs:2:#![feature(test)]
tests/ui/enum-discriminant/issue-70509-partial_eq.rs:2:#![feature(repr128)]
tests/ui/enum-discriminant/issue-70509-partial_eq.rs:3://~^ WARN the feature `repr128` is incomplete
tests/ui/enum-discriminant/discriminant_size.stderr:1:warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/enum-discriminant/discriminant_size.stderr:4:LL | #![feature(core_intrinsics, repr128)]
tests/ui/enum-discriminant/discriminant_size.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/enum-discriminant/forbidden-discriminant-kind-impl.rs:1:#![feature(discriminant_kind)]
tests/ui/enum-discriminant/issue-51582.rs:2:#![feature(core_intrinsics)]
tests/ui/enum-discriminant/issue-70509-partial_eq.stderr:1:warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/enum-discriminant/issue-70509-partial_eq.stderr:4:LL | #![feature(repr128)]
tests/ui/enum-discriminant/issue-70509-partial_eq.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs:1:#![feature(core_intrinsics)]
tests/ui/enum-discriminant/actually_not_an_enum-discriminant.rs:2:#![feature(core_intrinsics)]
tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice.rs:1:#![feature(core_intrinsics)]
tests/ui/enum-discriminant/repr128.rs:2:#![feature(repr128, core_intrinsics, discriminant_kind)]
tests/ui/enum-discriminant/repr128.rs:3://~^ WARN the feature `repr128` is incomplete
tests/ui/proc-macro/attr-stmt-expr-rpass.rs:4:#![feature(stmt_expr_attributes, proc_macro_hygiene)]
tests/ui/proc-macro/crt-static.rs:3:// override -Ctarget-feature=-crt-static from compiletest
tests/ui/proc-macro/crt-static.rs:4:// compile-flags: --crate-type proc-macro -Ctarget-feature=
tests/ui/proc-macro/crt-static.rs:18:#[cfg(target_feature = "crt-static")]
tests/ui/proc-macro/weird-hygiene.rs:3:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/weird-hygiene.rs:4:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/proc-macro-gates2.rs:3:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/proc-macro-gates2.rs:10:// should either require a feature gate or not be allowed on stable.
tests/ui/proc-macro/expand-to-unstable.rs:9://~^ ERROR: use of unstable library feature
tests/ui/proc-macro/allowed-attr-stmt-expr.rs:6:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/allowed-attr-stmt-expr.rs:7:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/allowed-attr-stmt-expr.rs:8:#![feature(rustc_attrs)]
tests/ui/proc-macro/attr-invalid-exprs.rs:5:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/attr-invalid-exprs.rs:6:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/quote-debug.stdout:1:#![feature(prelude_import)]
tests/ui/proc-macro/quote-debug.stdout:11:#![feature(proc_macro_quote)]
tests/ui/proc-macro/expand-to-derive.rs:5:#![feature(rustc_attrs)]
tests/ui/proc-macro/expr-stmt-nonterminal-tokens.rs:4:#![feature(decl_macro)]
tests/ui/proc-macro/expr-stmt-nonterminal-tokens.rs:5:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/meta-macro-hygiene.stdout:4:#![feature /* 0#0 */(prelude_import)]
tests/ui/proc-macro/keep-expr-tokens.rs:4:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/keep-expr-tokens.rs:5:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/keep-expr-tokens.rs:6:#![feature(rustc_attrs)]
tests/ui/proc-macro/nonterminal-token-hygiene.rs:10:#![feature(decl_macro)]
tests/ui/proc-macro/issue-81555.rs:3:#![feature(stmt_expr_attributes, proc_macro_hygiene)]
tests/ui/proc-macro/issue-42708.rs:4:#![feature(decl_macro)]
tests/ui/proc-macro/custom-attr-only-one-derive.rs:4:#![feature(rust_2018_preview)]
tests/ui/proc-macro/proc-macro-gates.stderr:8:   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:17:   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:32:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:41:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:50:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:59:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:68:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/proc-macro-gates.stderr:77:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/expand-to-unstable.stderr:1:error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library
tests/ui/proc-macro/expand-to-unstable.stderr:7:   = help: add `#![feature(core_intrinsics)]` to the crate attributes to enable
tests/ui/proc-macro/issue-50061.rs:6:#![feature(decl_macro)]
tests/ui/proc-macro/issue-79825.rs:3:#![feature(trait_alias)]
tests/ui/proc-macro/ambiguous-builtin-attrs.stderr:82:error[E0659]: `feature` is ambiguous
tests/ui/proc-macro/ambiguous-builtin-attrs.stderr:85:LL | #![feature(decl_macro)]
tests/ui/proc-macro/ambiguous-builtin-attrs.stderr:89:   = note: `feature` could refer to a built-in attribute
tests/ui/proc-macro/ambiguous-builtin-attrs.stderr:90:note: `feature` could also refer to the attribute macro imported here
tests/ui/proc-macro/ambiguous-builtin-attrs.stderr:95:   = help: use `crate::feature` to refer to this attribute macro unambiguously
tests/ui/proc-macro/attribute-with-error.rs:3:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/issue-81007-item-attrs.rs:6:#![feature(rustc_attrs)]
tests/ui/proc-macro/cfg-eval-fail.rs:1:#![feature(cfg_eval)]
tests/ui/proc-macro/cfg-eval-fail.rs:2:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/crate-attrs-multiple.rs:6:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/crate-attrs-multiple.rs:7:#![feature(prelude_import)]
tests/ui/proc-macro/issue-59191-replace-root-with-fn.rs:8:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/proc-macro-gates.rs:4:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/parent-source-spans.rs:3:#![feature(decl_macro)]
tests/ui/proc-macro/issue-83510.stderr:32:   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable
tests/ui/proc-macro/inner-attr-non-inline-mod.stderr:8:   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/inner-attr-non-inline-mod.stderr:17:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/inner-attr-non-inline-mod.stderr:26:   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/ambiguous-builtin-attrs-test.rs:4:#![feature(decl_macro, test)]
tests/ui/proc-macro/macro-rules-derive-cfg.rs:5:#![feature(rustc_attrs)]
tests/ui/proc-macro/macro-rules-derive-cfg.rs:6:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/unsafe-mod.rs:4:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/inner-attrs.rs:6:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/inner-attrs.rs:7:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/inner-attrs.rs:8:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/inner-attrs.rs:9:#![feature(rustc_attrs)]
tests/ui/proc-macro/ambiguous-builtin-attrs.rs:3:#![feature(decl_macro)] //~ ERROR `feature` is ambiguous
tests/ui/proc-macro/attr-stmt-expr.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/attr-stmt-expr.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/macro-namespace-reserved.rs:4:#![feature(decl_macro)]
tests/ui/proc-macro/pretty-print-tts.rs:5:#![feature(rustc_attrs)]
tests/ui/proc-macro/expand-expr.rs:4:#![feature(concat_bytes)]
tests/ui/proc-macro/attributes-on-modules-fail.stderr:16:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/attributes-on-modules-fail.stderr:25:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/attributes-on-modules-fail.stderr:34:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/attributes-on-modules-fail.stderr:43:   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable
tests/ui/proc-macro/nonterminal-token-hygiene.stdout:24:#![feature /* 0#0 */(prelude_import)]
tests/ui/proc-macro/nonterminal-token-hygiene.stdout:35:#![feature /* 0#0 */(decl_macro)]
tests/ui/proc-macro/weird-braces.rs:5:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/no-macro-use-attr.rs:3:#![feature(rustc_attrs)]
tests/ui/proc-macro/attr-stmt-expr.rs:5:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/attr-stmt-expr.rs:6:#![feature(rustc_attrs)]
tests/ui/proc-macro/attr-stmt-expr.rs:26:    //~| HELP add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/attr-stmt-expr.rs:64:    //~| HELP add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/proc-macro/cfg-eval-inner.rs:5:#![feature(cfg_eval)]
tests/ui/proc-macro/cfg-eval-inner.rs:6:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/cfg-eval-inner.rs:7:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/cfg-eval-inner.rs:8:#![feature(rustc_attrs)]
tests/ui/proc-macro/attr-complex-fn.rs:5:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/attr-complex-fn.rs:6:#![feature(custom_inner_attributes)]
tests/ui/proc-macro/attr-complex-fn.rs:7:#![feature(rustc_attrs)]
tests/ui/proc-macro/quote-debug.rs:9:#![feature(proc_macro_quote)]
tests/ui/proc-macro/cfg-eval.rs:5:#![feature(cfg_eval)]
tests/ui/proc-macro/cfg-eval.rs:6:#![feature(proc_macro_hygiene)]
tests/ui/proc-macro/cfg-eval.rs:7:#![feature(stmt_expr_attributes)]
tests/ui/proc-macro/cfg-eval.rs:8:#![feature(rustc_attrs)]
tests/ui/proc-macro/auxiliary/span-api-tests.rs:5:#![feature(proc_macro_span)]
tests/ui/proc-macro/auxiliary/macro-only-syntax.rs:13:#![feature(proc_macro_span)]
tests/ui/proc-macro/auxiliary/invalid-punct-ident.rs:5:#![feature(proc_macro_raw_ident)]
tests/ui/proc-macro/auxiliary/span-from-proc-macro.rs:4:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/span-from-proc-macro.rs:5:#![feature(proc_macro_internals)] // FIXME - this shouldn't be necessary
tests/ui/proc-macro/auxiliary/resolved-located-at.rs:4:#![feature(proc_macro_def_site)]
tests/ui/proc-macro/auxiliary/resolved-located-at.rs:5:#![feature(proc_macro_diagnostic)]
tests/ui/proc-macro/auxiliary/resolved-located-at.rs:6:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/mixed-site-span.rs:4:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/hygiene_example_codegen.rs:4:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/three-equals.rs:5:#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]
tests/ui/proc-macro/auxiliary/multispan.rs:5:#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]
tests/ui/proc-macro/auxiliary/custom-quote.rs:5:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/assert-span-pos.rs:4:#![feature(proc_macro_diagnostic, proc_macro_span)]
tests/ui/proc-macro/auxiliary/parent-source-spans.rs:4:#![feature(proc_macro_diagnostic, proc_macro_span)]
tests/ui/proc-macro/auxiliary/count_compound_ops.rs:4:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/meta-macro.rs:5:#![feature(proc_macro_def_site)]
tests/ui/proc-macro/auxiliary/double.rs:4:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/builtin-attrs.rs:10:pub fn feature(_: TokenStream, input: TokenStream) -> TokenStream {
tests/ui/proc-macro/auxiliary/cond_plugin.rs:5:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/expand-expr.rs:6:#![feature(proc_macro_expand, proc_macro_span)]
tests/ui/proc-macro/auxiliary/api/mod.rs:6:#![feature(proc_macro_span)]
tests/ui/proc-macro/auxiliary/generate-dollar-ident.rs:4:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/attributes-on-definitions.rs:4:#![feature(allow_internal_unsafe)]
tests/ui/proc-macro/auxiliary/attributes-on-definitions.rs:5:#![feature(allow_internal_unstable)]
tests/ui/proc-macro/auxiliary/nonterminal-recollect-attr.rs:5:#![feature(proc_macro_quote)]
tests/ui/proc-macro/auxiliary/subspan.rs:5:#![feature(proc_macro_diagnostic, proc_macro_span)]
tests/ui/fn/fn-ptr-trait.rs:1:#![feature(fn_ptr_trait)]
tests/ui/fn/issue-39259.rs:1:#![feature(fn_traits)]
tests/ui/fn/issue-39259.rs:2:#![feature(unboxed_closures)]
tests/ui/suggestions/unsized-function-parameter.rs:8://~| HELP unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.rs:14://~| HELP unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.rs:20://~| HELP unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.stderr:21:   = help: unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.stderr:34:   = help: unsized fn params are gated as an unstable feature
tests/ui/suggestions/suggest-boxed-empty-block.rs:1:#![feature(async_closure)]
tests/ui/suggestions/suggest-boxed-empty-block.fixed:1:#![feature(async_closure)]
tests/ui/suggestions/missing-assoc-fn.stderr:8:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/suggestions/issue-84973-blacklist.rs:4:#![feature(generators)]
tests/ui/suggestions/issue-104328.rs:1:#![feature(object_safe_for_dispatch)]
tests/ui/suggestions/option-to-bool.rs:1:#![cfg_attr(let_chains, feature(let_chains))]
tests/ui/suggestions/type-ascription-instead-of-path-in-type.stderr:19:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/suggestions/suggest-on-bare-closure-call.rs:3:#![feature(async_closure)]
tests/ui/suggestions/fn-trait-notation.stderr:8:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/suggestions/fn-trait-notation.stderr:17:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/suggestions/fn-trait-notation.stderr:26:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/suggestions/unnamable-types.rs:4:#![feature(generators)]
tests/ui/suggestions/unsized-function-parameter.fixed:8://~| HELP unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.fixed:14://~| HELP unsized fn params are gated as an unstable feature
tests/ui/suggestions/unsized-function-parameter.fixed:20://~| HELP unsized fn params are gated as an unstable feature
tests/ui/suggestions/path-by-value.stderr:10:   = help: unsized fn params are gated as an unstable feature
tests/ui/suggestions/impl-trait-missing-lifetime.rs:3:#![feature(anonymous_lifetime_in_impl_trait)]
tests/ui/suggestions/type-ascription-instead-of-path-in-type.rs:10:    //~| HELP add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:2:#![feature(async_closure)]
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:79:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:91:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:103:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:115:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:127:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:139:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:151:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.stderr:163:   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable
tests/ui/suggestions/impl-trait-missing-lifetime-gated.rs:3:// Verify the behaviour of `feature(anonymous_lifetime_in_impl_trait)`.
tests/ui/suggestions/auxiliary/proc-macro-type-error.rs:4:#![feature(proc_macro_quote)]
tests/ui/suggestions/issue-101465.rs:1:#![feature(trait_alias)]
tests/ui/intrinsics/unchecked_math_unstable.rs:4:        let add = std::intrinsics::unchecked_add(x, y); //~ ERROR use of unstable library feature
tests/ui/intrinsics/unchecked_math_unstable.rs:5:        let sub = std::intrinsics::unchecked_sub(x, y); //~ ERROR use of unstable library feature
tests/ui/intrinsics/unchecked_math_unstable.rs:6:        let mul = std::intrinsics::unchecked_mul(x, y); //~ ERROR use of unstable library feature
tests/ui/intrinsics/non-integer-atomic.rs:3:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-raw_eq-const-padding.rs:1:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-raw_eq-const-padding.rs:2:#![feature(const_intrinsic_raw_eq)]
tests/ui/intrinsics/const-eval-select.rs:3:#![feature(const_eval_select)]
tests/ui/intrinsics/const-eval-select.rs:4:#![feature(core_intrinsics)]
tests/ui/intrinsics/unchecked_math_unsafe.rs:4:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-alignment.rs:4:#![feature(intrinsics)]
tests/ui/intrinsics/intrinsic-raw_eq-const.rs:3:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-raw_eq-const.rs:4:#![feature(const_intrinsic_raw_eq)]
tests/ui/intrinsics/bad-intrinsic-monomorphization.rs:3:#![feature(repr_simd, platform_intrinsics, core_intrinsics)]
tests/ui/intrinsics/const-eval-select-x86_64.rs:4:#![feature(const_eval_select)]
tests/ui/intrinsics/const-eval-select-x86_64.rs:5:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-atomics.rs:2:#![feature(intrinsics)]
tests/ui/intrinsics/const-eval-select-stability.rs:1:#![feature(staged_api)]
tests/ui/intrinsics/const-eval-select-stability.rs:2:#![feature(const_eval_select)]
tests/ui/intrinsics/const-eval-select-stability.rs:3:#![feature(core_intrinsics)]
tests/ui/intrinsics/const-eval-select-stability.rs:4:#![stable(since = "1.0", feature = "ui_test")]
tests/ui/intrinsics/const-eval-select-stability.rs:14:#[stable(since = "1.0", feature = "hey")]
tests/ui/intrinsics/const-eval-select-stability.rs:15:#[rustc_const_stable(since = "1.0", feature = "const_hey")]
tests/ui/intrinsics/intrinsic-assume.rs:2:#![feature(core_intrinsics)]
tests/ui/intrinsics/const-eval-select-backtrace.rs:1:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-unreachable.rs:2:#![feature(core_intrinsics)]
tests/ui/intrinsics/safe-intrinsic-mismatch.rs:1:#![feature(intrinsics)]
tests/ui/intrinsics/safe-intrinsic-mismatch.rs:2:#![feature(rustc_attrs)]
tests/ui/intrinsics/intrinsic-volatile.rs:3:#![feature(core_intrinsics)]
tests/ui/intrinsics/unchecked_math_unstable.stderr:1:error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library
tests/ui/intrinsics/unchecked_math_unstable.stderr:7:   = help: add `#![feature(core_intrinsics)]` to the crate attributes to enable
tests/ui/intrinsics/unchecked_math_unstable.stderr:9:error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library
tests/ui/intrinsics/unchecked_math_unstable.stderr:15:   = help: add `#![feature(core_intrinsics)]` to the crate attributes to enable
tests/ui/intrinsics/unchecked_math_unstable.stderr:17:error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library
tests/ui/intrinsics/unchecked_math_unstable.stderr:23:   = help: add `#![feature(core_intrinsics)]` to the crate attributes to enable
tests/ui/intrinsics/panic-uninitialized-zeroed.rs:10:#![feature(never_type)]
tests/ui/intrinsics/intrinsics-integer.rs:3:#![feature(intrinsics)]
tests/ui/intrinsics/intrinsics-integer.rs:4:#![feature(rustc_attrs)]
tests/ui/intrinsics/const-eval-select-bad.rs:1:#![feature(const_eval_select)]
tests/ui/intrinsics/const-eval-select-bad.rs:2:#![feature(core_intrinsics)]
tests/ui/intrinsics/intrinsic-nearby.rs:2:#![feature(core_intrinsics)]
tests/ui/intrinsics/auxiliary/cci_intrinsic.rs:1:#![feature(intrinsics)]
tests/ui/intrinsics/issue-28575.rs:4:#![feature(intrinsics)]
tests/ui/explore-issue-38412.stderr:1:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:8:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/explore-issue-38412.stderr:10:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:17:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/explore-issue-38412.stderr:37:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:44:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/explore-issue-38412.stderr:64:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:71:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/explore-issue-38412.stderr:73:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:80:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/explore-issue-38412.stderr:115:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:122:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/explore-issue-38412.stderr:124:error[E0658]: use of unstable library feature 'unstable_undeclared'
tests/ui/explore-issue-38412.stderr:131:   = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable
tests/ui/pub/issue-33174-restricted-type-in-public-interface.rs:1:#![feature(type_privacy_lints)]
tests/ui/pub/pub-restricted-non-path.rs:1:#![feature(pub_restricted)]
tests/ui/command/command-setgroups.rs:8:#![feature(rustc_private)]
tests/ui/command/command-setgroups.rs:9:#![feature(setgroups)]
tests/ui/command/command-exec.rs:3:#![allow(stable_features)]
tests/ui/command/command-exec.rs:9:#![feature(process_exec)]
tests/ui/command/command-pre-exec.rs:5:#![allow(stable_features)]
tests/ui/command/command-pre-exec.rs:10:#![feature(process_exec, rustc_private)]
tests/ui/command/command-create-pidfd.rs:4:#![feature(linux_pidfd)]
tests/ui/command/command-create-pidfd.rs:5:#![feature(rustc_private)]
tests/ui/command/command-uid-gid.rs:7:#![feature(rustc_private)]
tests/ui/dyn-keyword/dyn-2015-idents-in-decl-macros-unlinted.rs:11:#![feature(decl_macro)]
tests/ui/stmt_expr_attrs_no_feature.rs:1:#![feature(rustc_attrs)]
tests/ui/closures/issue-78720.stderr:40:   = help: unsized fn params are gated as an unstable feature
tests/ui/closures/binder/implicit-stuff.rs:1:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/type-bound.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/closures/binder/type-bound.stderr:4:LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]
tests/ui/closures/binder/type-bound.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/closures/binder/implicit-return.rs:1:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/nested-closures.rs:3:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/type-bound-2.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/closures/binder/type-bound-2.stderr:4:LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]
tests/ui/closures/binder/type-bound-2.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/closures/binder/disallow-const.stderr:8:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/closures/binder/disallow-ty.stderr:8:   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable
tests/ui/closures/binder/type-bound-2.rs:1:#![feature(closure_lifetime_binder, non_lifetime_binders)]
tests/ui/closures/binder/suggestion-for-introducing-lifetime-into-binder.rs:1:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/const-bound.stderr:1:warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/closures/binder/const-bound.stderr:4:LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]
tests/ui/closures/binder/const-bound.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/closures/binder/disallow-ty.rs:1:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/nested-closures-regions.rs:3:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/nested-closures-regions.rs:4:#![feature(rustc_attrs)]
tests/ui/closures/binder/late-bound-in-body.rs:3:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/disallow-const.rs:1:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/const-bound.rs:1:#![feature(closure_lifetime_binder, non_lifetime_binders)]
tests/ui/closures/binder/type-bound.rs:1:#![feature(closure_lifetime_binder, non_lifetime_binders)]
tests/ui/closures/binder/async-closure-with-binder.rs:2:#![feature(closure_lifetime_binder)]
tests/ui/closures/binder/async-closure-with-binder.rs:3:#![feature(async_closure)]
tests/ui/closures/issue-111932.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/closures/supertrait-hint-cycle.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/closures/supertrait-hint-cycle.rs:5:#![feature(closure_lifetime_binder)]
tests/ui/closures/cannot-call-unsized-via-ptr-2.rs:1:#![feature(unsized_fn_params)]
tests/ui/closures/cannot-call-unsized-via-ptr.rs:1:#![feature(unsized_fn_params)]
tests/ui/closures/local-type-mix.rs:4:#![feature(async_closure)]
tests/ui/closures/issue-90871.rs:1:#![feature(type_ascription)]
tests/ui/closures/closure-return-type-must-be-sized.rs:1:#![feature(unboxed_closures)]
tests/ui/closures/2229_closure_analysis/multilevel-path-2.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/unsafe_ptr.rs:7:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/capture-enums.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/by_value.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed:6:#![feature(fn_traits)]
tests/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed:7:#![feature(never_type)]
tests/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs:6:#![feature(fn_traits)]
tests/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs:7:#![feature(never_type)]
tests/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed:5:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_no_migrations.rs:4:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs:5:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/unsafe_ptr.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/unsafe_ptr.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.rs:5:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/multilevel-path-2.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/repr_packed.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/by_value.rs:5:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/deep-multilevel-struct.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:4:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:5:#![feature(btree_extract_if)]
tests/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple-mut.rs:7:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/run_pass/struct-pattern-matching-with-methods.rs:5:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs:5:// a closure when the feature `capture_disjoint_fields` is enabled.
tests/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple.rs:7:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/run_pass/multivariant.rs:5:#![feature(exhaustive_patterns)]
tests/ui/closures/2229_closure_analysis/run_pass/multivariant.rs:6:#![feature(never_type)]
tests/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs:4:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/run_pass/use_of_mutable_borrow_and_fake_reads.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/capture-analysis-2.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.rs:3:#![feature(never_type)]
tests/ui/closures/2229_closure_analysis/match/patterns-capture-analysis.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/match/patterns-capture-analysis.rs:4:#![feature(stmt_expr_attributes)]
tests/ui/closures/2229_closure_analysis/destructure_patterns.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/capture-analysis-1.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/issue-88476.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/issue-88476.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/optimization/edge_case.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/optimization/edge_case.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/nested-closure.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/nested-closure.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/path-with-array-access.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/deep-multilevel-tuple.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/issue-88118-2.rs:3:#![feature(if_let_guard)]
tests/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/capture-analysis-4.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/destructure_patterns.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/destructure_patterns.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/destructure_patterns.stderr:26:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/capture-analysis-4.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/simple-struct-min-capture.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/arrays-completely-captured.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/issue-88476.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/issue-87378.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/capture-analysis-1.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/capture-analysis-3.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/preserve_field_drop_order.rs:9:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/deep-multilevel-tuple.rs:2:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/capture-analysis-3.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/capture-analysis-2.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/repr_packed.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/repr_packed.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/repr_packed.stderr:26:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/wild_patterns.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/wild_patterns.rs:9:// Note: Currently when feature `capture_disjoint_fields` is enabled
tests/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/multilevel-path-1.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/wild_patterns.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/wild_patterns.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/wild_patterns.stderr:26:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr:2:  --> $DIR/feature-gate-capture_disjoint_fields.rs:8:13
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr:11:  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:5
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr:23:  --> $DIR/feature-gate-capture_disjoint_fields.rs:14:69
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr:29:  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:5
tests/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr:41:  --> $DIR/feature-gate-capture_disjoint_fields.rs:14:69
tests/ui/closures/2229_closure_analysis/capture-enums.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/capture-enums.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/simple-struct-min-capture.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/move_closure.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:26:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:35:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:44:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:53:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:62:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:71:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:80:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:89:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/move_closure.stderr:98:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/filter-on-struct-member.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/deep-multilevel-struct.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/arrays-completely-captured.rs:2:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/path-with-array-access.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/nested-closure.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/preserve_field_drop_order.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/preserve_field_drop_order.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/preserve_field_drop_order.stderr:26:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/closures/2229_closure_analysis/multilevel-path-1.rs:3:#![feature(rustc_attrs)]
tests/ui/closures/2229_closure_analysis/issue-87378.rs:1:#![feature(rustc_attrs)]
tests/ui/closures/self-supertrait-bounds.rs:6:#![feature(trait_alias)]
tests/ui/stmt_expr_attrs_no_feature.stderr:2:  --> $DIR/stmt_expr_attrs_no_feature.rs:14:5
tests/ui/stmt_expr_attrs_no_feature.stderr:8:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:11:  --> $DIR/stmt_expr_attrs_no_feature.rs:95:18
tests/ui/stmt_expr_attrs_no_feature.stderr:17:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:20:  --> $DIR/stmt_expr_attrs_no_feature.rs:102:19
tests/ui/stmt_expr_attrs_no_feature.stderr:26:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:29:  --> $DIR/stmt_expr_attrs_no_feature.rs:108:19
tests/ui/stmt_expr_attrs_no_feature.stderr:35:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:38:  --> $DIR/stmt_expr_attrs_no_feature.rs:114:18
tests/ui/stmt_expr_attrs_no_feature.stderr:44:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:47:  --> $DIR/stmt_expr_attrs_no_feature.rs:119:10
tests/ui/stmt_expr_attrs_no_feature.stderr:53:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:56:  --> $DIR/stmt_expr_attrs_no_feature.rs:125:14
tests/ui/stmt_expr_attrs_no_feature.stderr:62:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:65:  --> $DIR/stmt_expr_attrs_no_feature.rs:130:22
tests/ui/stmt_expr_attrs_no_feature.stderr:71:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/stmt_expr_attrs_no_feature.stderr:74:  --> $DIR/stmt_expr_attrs_no_feature.rs:138:14
tests/ui/stmt_expr_attrs_no_feature.stderr:80:   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable
tests/ui/extern-flag/auxiliary/panic_handler.rs:1:#![feature(lang_items)]
tests/ui/extern-flag/auxiliary/panic_handler.rs:8:#![feature(rustc_private)]
tests/ui/cross-crate/auxiliary/xcrate_associated_type_defaults.rs:1:#![feature(associated_type_defaults)]
tests/ui/codemap_tests/unicode.expanded.stdout:1:#![feature(prelude_import)]
tests/ui/codemap_tests/issue-11715.rs:1:#![feature(rustc_attrs)]
tests/ui/codemap_tests/empty_span.rs:1:#![feature(negative_impls)]
tests/ui/codemap_tests/two_files.stderr:7:help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias
tests/ui/destructure-trait-ref.rs:4:#![feature(box_patterns)]
tests/ui/polymorphization/promoted-function-2.rs:4:#![feature(generic_const_exprs, rustc_attrs)]
tests/ui/polymorphization/promoted-function-2.rs:5://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/polymorphization/type_parameters/closures.rs:3:#![feature(stmt_expr_attributes, rustc_attrs)]
tests/ui/polymorphization/type_parameters/functions.rs:3:#![feature(rustc_attrs)]
tests/ui/polymorphization/predicates.rs:4:#![feature(rustc_attrs)]
tests/ui/polymorphization/unsized_cast.rs:3:#![feature(fn_traits, rustc_attrs, unboxed_closures)]
tests/ui/polymorphization/lifetimes.rs:3:#![feature(rustc_attrs)]
tests/ui/polymorphization/too-many-generic-params.rs:2:#![feature(rustc_attrs)]
tests/ui/polymorphization/generators.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/polymorphization/generators.stderr:4:LL | #![feature(generic_const_exprs, generators, generator_trait, rustc_attrs)]
tests/ui/polymorphization/generators.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/polymorphization/const_parameters/closures.rs:3:#![feature(generic_const_exprs, rustc_attrs)]
tests/ui/polymorphization/const_parameters/closures.rs:4://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/polymorphization/const_parameters/functions.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/polymorphization/const_parameters/functions.stderr:4:LL | #![feature(generic_const_exprs, rustc_attrs)]
tests/ui/polymorphization/const_parameters/functions.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/polymorphization/const_parameters/functions.rs:3:#![feature(generic_const_exprs, rustc_attrs)]
tests/ui/polymorphization/const_parameters/functions.rs:4://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/polymorphization/const_parameters/closures.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/polymorphization/const_parameters/closures.stderr:4:LL | #![feature(generic_const_exprs, rustc_attrs)]
tests/ui/polymorphization/const_parameters/closures.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/polymorphization/promoted-function-1.rs:4:#![feature(rustc_attrs)]
tests/ui/polymorphization/generators.rs:3:#![feature(generic_const_exprs, generators, generator_trait, rustc_attrs)]
tests/ui/polymorphization/generators.rs:4://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/polymorphization/promoted-function-2.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/polymorphization/promoted-function-2.stderr:4:LL | #![feature(generic_const_exprs, rustc_attrs)]
tests/ui/polymorphization/promoted-function-2.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/pattern/rest-pat-semantic-disallowed.rs:5:#![feature(box_patterns)]
tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs:3:#![feature(box_patterns)]
tests/ui/pattern/bindings-after-at/or-patterns-box-patterns.rs:5:#![feature(box_patterns)]
tests/ui/pattern/bindings-after-at/box-patterns.rs:5:#![feature(box_patterns)]
tests/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.rs:7:#![feature(type_ascription)]
tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs:8:#![feature(box_patterns)]
tests/ui/pattern/rest-pat-syntactic.stderr:8:   = help: add `#![feature(box_patterns)]` to the crate attributes to enable
tests/ui/pattern/rest-pat-syntactic.stderr:19:   = help: add `#![feature(box_patterns)]` to the crate attributes to enable
tests/ui/pattern/usefulness/unstable-gated-fields.rs:1:#![feature(unstable_test_feature)]
tests/ui/pattern/usefulness/uninhabited.rs:6:#![feature(never_type)]
tests/ui/pattern/usefulness/uninhabited.rs:7:#![feature(never_type_fallback)]
tests/ui/pattern/usefulness/uninhabited.rs:8:#![feature(exhaustive_patterns)]
tests/ui/pattern/usefulness/empty-match.rs:5:#![feature(never_type)]
tests/ui/pattern/usefulness/empty-match.rs:6:#![feature(never_type_fallback)]
tests/ui/pattern/usefulness/empty-match.rs:7:#![cfg_attr(exhaustive_patterns, feature(exhaustive_patterns))]
tests/ui/pattern/usefulness/issue-3601.rs:1:#![feature(box_patterns)]
tests/ui/pattern/usefulness/deny-irrefutable-let-patterns.rs:1:#![feature(if_let_guard)]
tests/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.stderr:9:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching
tests/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.stderr:24:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.rs:2:#![feature(exclusive_range_pattern)]
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.rs:3:#![cfg_attr(allow, feature(precise_pointer_size_matching))]
tests/ui/pattern/usefulness/integer-ranges/exhaustiveness.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/pattern/usefulness/integer-ranges/overlapping_range_endpoints.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/pattern/usefulness/integer-ranges/reachability.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:9:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:24:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:39:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:53:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:67:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:93:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:107:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:121:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr:147:   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching
tests/ui/pattern/usefulness/always-inhabited-union-ref.rs:4:#![feature(exhaustive_patterns)]
tests/ui/pattern/usefulness/always-inhabited-union-ref.rs:5:#![feature(never_type)]
tests/ui/pattern/usefulness/unstable-gated-patterns.rs:1:#![feature(unstable_test_feature)]
tests/ui/pattern/usefulness/guards.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/pattern/usefulness/match-privately-empty.rs:1:#![feature(never_type)]
tests/ui/pattern/usefulness/match-privately-empty.rs:2:#![feature(exhaustive_patterns)]
tests/ui/pattern/usefulness/issue-12116.rs:1:#![feature(box_patterns)]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:1:#![feature(staged_api)]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:2:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:4:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:6:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:8:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:10:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:15:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:17:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:19:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/pattern/usefulness/auxiliary/unstable.rs:21:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/pattern/non-structural-match-types.rs:2:#![allow(incomplete_features)]
tests/ui/pattern/non-structural-match-types.rs:4:#![feature(const_async_blocks)]
tests/ui/pattern/non-structural-match-types.rs:5:#![feature(inline_const_pat)]
tests/ui/reify-intrinsic.rs:3:#![feature(core_intrinsics, intrinsics)]
tests/ui/threads-sendsync/tls-try-with.rs:2:#![allow(stable_features)]
tests/ui/threads-sendsync/tls-try-with.rs:6:#![feature(thread_local_try_with)]
tests/ui/threads-sendsync/issue-43733.rs:4:#![feature(thread_local)]
tests/ui/threads-sendsync/issue-43733.rs:5:#![feature(cfg_target_thread_local, thread_local_internals)]
tests/ui/threads-sendsync/task-stderr.rs:5:#![feature(internal_output_capture)]
tests/ui/threads-sendsync/issue-43733-2.rs:3:#![feature(cfg_target_thread_local, thread_local_internals)]
tests/ui/threads-sendsync/tls-init-on-init.rs:2:#![allow(stable_features)]
tests/ui/threads-sendsync/tls-init-on-init.rs:6:#![feature(thread_local_try_with)]
tests/ui/threads-sendsync/thread-local-extern-static.rs:5:#![feature(cfg_target_thread_local, thread_local)]
tests/ui/threads-sendsync/sync-send-iterators-in-libcollections.rs:4:#![feature(drain, collections_bound, btree_range)]
tests/ui/threads-sendsync/auxiliary/thread-local-extern-static.rs:1:#![feature(cfg_target_thread_local, thread_local)]
tests/ui/panic-runtime/link-to-abort.rs:7:#![feature(panic_abort)]
tests/ui/panic-runtime/needs-gate.stderr:1:error[E0658]: the `#[panic_runtime]` attribute is an experimental feature
tests/ui/panic-runtime/needs-gate.stderr:8:   = help: add `#![feature(panic_runtime)]` to the crate attributes to enable
tests/ui/panic-runtime/needs-gate.stderr:10:error[E0658]: the `#[needs_panic_runtime]` attribute is an experimental feature
tests/ui/panic-runtime/needs-gate.stderr:17:   = help: add `#![feature(needs_panic_runtime)]` to the crate attributes to enable
tests/ui/panic-runtime/incompatible-type.rs:10:#![feature(panic_runtime)]
tests/ui/panic-runtime/incompatible-type.rs:11:#![feature(rustc_attrs)]
tests/ui/panic-runtime/link-to-unwind.rs:5:#![feature(panic_unwind)]
tests/ui/panic-runtime/needs-gate.rs:4:#![panic_runtime] //~ ERROR: is an experimental feature
tests/ui/panic-runtime/needs-gate.rs:5:#![needs_panic_runtime] //~ ERROR: is an experimental feature
tests/ui/panic-runtime/auxiliary/depends.rs:3:#![feature(panic_runtime)]
tests/ui/panic-runtime/auxiliary/panic-runtime-lang-items.rs:6:#![feature(lang_items)]
tests/ui/panic-runtime/auxiliary/needs-panic-runtime.rs:3:#![feature(needs_panic_runtime)]
tests/ui/panic-runtime/auxiliary/panic-runtime-unwind.rs:4:#![feature(panic_runtime)]
tests/ui/panic-runtime/auxiliary/panic-runtime-unwind2.rs:4:#![feature(panic_runtime)]
tests/ui/panic-runtime/auxiliary/panic-runtime-abort.rs:4:#![feature(panic_runtime)]
tests/ui/stability-attribute/generics-default-stability-trait.rs:2:#![feature(unstable_default6)]
tests/ui/stability-attribute/generics-default-stability-trait.rs:16:impl Trait1<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability-trait.rs:20:impl Trait1<isize> for S { //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability-trait.rs:24:impl Trait2<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/unresolved_stability_lint.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/unresolved_stability_lint.rs:2:#![stable(feature = "uwu", since = "1.0.0")]
tests/ui/stability-attribute/unresolved_stability_lint.rs:4:#[unstable(feature = "foo", issue = "none")]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.rs:3:#![deny(stable_features)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.rs:4:#![feature(const_foo)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.rs:5://~^ ERROR the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.rs:8:// diagnostic mentioning partial stabilization, and that given the implied unstable feature is
tests/ui/stability-attribute/allowed-through-unstable.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/allowed-through-unstable.stderr:8:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:1:error: the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:4:LL | #![feature(foo)]
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:10:LL | #![deny(stable_features)]
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:12:help: if you are using features which are still unstable, change to using `foobar`
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:14:LL | #![feature(foobar)]
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:16:help: if you are using features which are now stable, remove this line
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr:18:LL - #![feature(foo)]
tests/ui/stability-attribute/issue-28388-3.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/issue-28388-3.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.rs:4:// Tests that despite the `const_foobar` feature being implied by now-stable feature `const_foo`,
tests/ui/stability-attribute/allowed-through-unstable.rs:9:use allowed_through_unstable_core::unstable_module::NewStableTraitNotAllowedThroughUnstable; //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.rs:16:    use stable_in_unstable_core::new_unstable_module; //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.rs:17:    use stable_in_unstable_core::new_unstable_module::OldTrait; //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.rs:29:    use stable_in_unstable_core::new_unstable_module::OldTrait; //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.rs:39:    impl stable_in_unstable_core::new_unstable_module::OldTrait for LocalType {} //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.rs:49:    use stable_in_unstable_core::new_unstable_module::{OldTrait}; //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.rs:53:    use stable_in_unstable_core::new_unstable_module::*; //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stability-attribute-issue.rs:9:    //~^ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stability-attribute-issue.rs:11:    //~^ ERROR use of unstable library feature 'unstable_test_feature': message
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:1:error: the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:4:LL | #![feature(foo)]
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:10:LL | #![deny(stable_features)]
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:12:help: if you are using features which are still unstable, change to using `foobar`
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:14:LL | #![feature(foobar)]
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:16:help: if you are using features which are now stable, remove this line
tests/ui/stability-attribute/stability-attribute-implies-using-stable.stderr:18:LL - #![feature(foo)]
tests/ui/stability-attribute/default-body-stability-err.stderr:8:   = note: use of unstable library feature 'constant_default_body'
tests/ui/stability-attribute/default-body-stability-err.stderr:9:   = help: add `#![feature(constant_default_body)]` to the crate attributes to enable
tests/ui/stability-attribute/default-body-stability-err.stderr:18:   = note: use of unstable library feature 'fun_default_body'
tests/ui/stability-attribute/default-body-stability-err.stderr:19:   = help: add `#![feature(fun_default_body)]` to the crate attributes to enable
tests/ui/stability-attribute/default-body-stability-err.stderr:28:   = note: use of unstable library feature 'fun_default_body': reason
tests/ui/stability-attribute/default-body-stability-err.stderr:29:   = help: add `#![feature(fun_default_body)]` to the crate attributes to enable
tests/ui/stability-attribute/default-body-stability-err.stderr:43:   = note: use of unstable library feature 'eq_default_body'
tests/ui/stability-attribute/default-body-stability-err.stderr:44:   = help: add `#![feature(eq_default_body)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-sanity-4.stderr:5:   |     ^^^^^^^^^^^ help: must be of the form: `#[unstable(feature = "name", reason = "...", issue = "N")]`
tests/ui/stability-attribute/stability-attribute-sanity-4.stderr:11:   |     ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[unstable(feature = "name", reason = "...", issue = "N")]`
tests/ui/stability-attribute/stability-attribute-sanity-4.stderr:17:   |     ^^^^^^^^^ help: must be of the form: `#[stable(feature = "name", since = "version")]`
tests/ui/stability-attribute/stability-attribute-sanity-4.stderr:23:   |     ^^^^^^^^^^^^^^^ help: must be of the form: `#[stable(feature = "name", since = "version")]`
tests/ui/stability-attribute/issue-106589.stderr:4:LL | #[unstable(feature = "foo", issue = "none")]
tests/ui/stability-attribute/issue-106589.stderr:10:LL | #![stable(feature = "foo", since = "1.0.0")]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:1:error: the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:4:LL | #![feature(const_foo)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:10:LL | #![deny(stable_features)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:12:help: if you are using features which are still unstable, change to using `const_foobar`
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:14:LL | #![feature(const_foobar)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:16:help: if you are using features which are now stable, remove this line
tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr:18:LL - #![feature(const_foo)]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:1:#![feature(staged_api, never_type, rust_cold_cc)]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:4:#[stable(feature = "a", since = "1")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:7:#[unstable(feature = "b", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:10:#[stable(feature = "c", since = "1")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:13:#[unstable(feature = "d", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:16:#[unstable(feature = "e", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:19:#[unstable(feature = "f", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:22:#[unstable(feature = "g", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:25:#[unstable(feature = "h", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:29:#[unstable(feature = "i", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:32:#[unstable(feature = "j", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:36:#[unstable(feature = "k", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.rs:40:#[unstable(feature = "l", issue = "none")]
tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.stderr:2:  --> $DIR/const-stability-attribute-implies-no-feature.rs:12:5
tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.stderr:7:   = help: add `#![feature(const_foobar)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability-where.rs:7:impl<T> Trait3<usize> for T where T: Trait2<usize> { //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/stability-attribute-trait-impl.stderr:4:LL | #[unstable(feature = "j", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.stderr:13:LL | #[unstable(feature = "k", issue = "none")]
tests/ui/stability-attribute/stability-attribute-trait-impl.stderr:21:LL | / #![feature(staged_api, never_type, rust_cold_cc)]
tests/ui/stability-attribute/stability-attribute-trait-impl.stderr:24:LL | | #[stable(feature = "a", since = "1")]
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:1:error[E0658]: use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:10:   = help: add `#![feature(allocator_api)]` to the crate attributes to enable
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:12:error[E0658]: use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:19:   = help: add `#![feature(allocator_api)]` to the crate attributes to enable
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:27:error[E0658]: use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:34:   = help: add `#![feature(allocator_api)]` to the crate attributes to enable
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:36:error[E0658]: use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.stderr:45:   = help: add `#![feature(allocator_api)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-sanity-2.rs:3:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-sanity-2.rs:5:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity-2.rs:7:#[stable(feature = "a", feature = "b", since = "1.0.0")] //~ ERROR multiple 'feature' items
tests/ui/stability-attribute/stability-attribute-sanity-2.rs:10:#[stable(feature = "a", sinse = "1.0.0")] //~ ERROR unknown meta item 'sinse'
tests/ui/stability-attribute/stability-attribute-sanity-2.rs:13:#[unstable(feature = "a", issue = "no")]
tests/ui/stability-attribute/generics-default-stability.stderr:219:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:225:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:227:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:233:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:235:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:241:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:243:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:249:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:251:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:257:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:259:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:265:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:267:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:273:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:275:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:281:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:283:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:289:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:291:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:297:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:299:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:305:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:307:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:313:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:315:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:321:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:323:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:329:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:331:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:337:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:339:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:345:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:347:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:353:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:355:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:361:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:363:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:369:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:371:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:377:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:379:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:385:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:387:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:393:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:395:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:401:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:403:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:409:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:411:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:417:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:419:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:425:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:427:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.stderr:433:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability.stderr:435:error[E0658]: use of unstable library feature 'box_alloc_param'
tests/ui/stability-attribute/generics-default-stability.stderr:441:   = help: add `#![feature(box_alloc_param)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-issue.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stability-attribute-issue.stderr:8:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-issue.stderr:10:error[E0658]: use of unstable library feature 'unstable_test_feature': message
tests/ui/stability-attribute/stability-attribute-issue.stderr:17:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-implies-no-feature.rs:3:// Tests that despite the `foobar` feature being implied by now-stable feature `foo`, if `foobar`
tests/ui/stability-attribute/stability-attribute-implies-no-feature.rs:8://~^ ERROR use of unstable library feature 'foobar'
tests/ui/stability-attribute/stability-attribute-implies-no-feature.rs:12:    foobar(); //~ ERROR use of unstable library feature 'foobar'
tests/ui/stability-attribute/issue-28075.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/issue-28075.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/issue-28075.rs:10://~^ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stability-attribute-implies-missing.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-implies-missing.rs:2:#![stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-implies-missing.rs:6:#[unstable(feature = "foobar", issue = "1", implied_by = "bar")]
tests/ui/stability-attribute/stability-attribute-implies-missing.rs:7://~^ ERROR feature `bar` implying `foobar` does not exist
tests/ui/stability-attribute/stability-attribute-issue-43027.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-issue-43027.rs:3:#![stable(feature = "test", since = "0")]
tests/ui/stability-attribute/stability-attribute-issue-43027.rs:5:#[stable(feature = "test", since = "0")]
tests/ui/stability-attribute/stability-attribute-issue-43027.rs:8:#[stable(feature = "test", since = "0")]
tests/ui/stability-attribute/stability-attribute-issue-43027.rs:9:pub struct B<T>(#[stable(feature = "test", since = "0")] pub T);
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:1:error: the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:4:LL | #![feature(const_foo)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:10:LL | #![deny(stable_features)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:12:help: if you are using features which are still unstable, change to using `const_foobar`
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:14:LL | #![feature(const_foobar)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:16:help: if you are using features which are now stable, remove this line
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr:18:LL - #![feature(const_foo)]
tests/ui/stability-attribute/stability-attribute-sanity.rs:3:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-sanity.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:8:    #[stable(feature = "a", since = "b", reason)] //~ ERROR unknown meta item 'reason' [E0541]
tests/ui/stability-attribute/stability-attribute-sanity.rs:11:    #[stable(feature = "a", since)] //~ ERROR incorrect meta item [E0539]
tests/ui/stability-attribute/stability-attribute-sanity.rs:14:    #[stable(feature, since = "a")] //~ ERROR incorrect meta item [E0539]
tests/ui/stability-attribute/stability-attribute-sanity.rs:17:    #[stable(feature = "a", since(b))] //~ ERROR incorrect meta item [E0539]
tests/ui/stability-attribute/stability-attribute-sanity.rs:20:    #[stable(feature(b), since = "a")] //~ ERROR incorrect meta item [E0539]
tests/ui/stability-attribute/stability-attribute-sanity.rs:24:mod missing_feature_names {
tests/ui/stability-attribute/stability-attribute-sanity.rs:25:    #[unstable(issue = "none")] //~ ERROR missing 'feature' [E0546]
tests/ui/stability-attribute/stability-attribute-sanity.rs:28:    #[unstable(feature = "b")] //~ ERROR missing 'issue' [E0547]
tests/ui/stability-attribute/stability-attribute-sanity.rs:31:    #[stable(since = "a")] //~ ERROR missing 'feature' [E0546]
tests/ui/stability-attribute/stability-attribute-sanity.rs:36:    #[stable(feature = "a")] //~ ERROR missing 'since' [E0542]
tests/ui/stability-attribute/stability-attribute-sanity.rs:39:    #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:43:    #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:48:#[unstable(feature = "b", issue = "none")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:49:#[stable(feature = "a", since = "b")] //~ ERROR multiple stability levels [E0544]
tests/ui/stability-attribute/stability-attribute-sanity.rs:52:#[unstable(feature = "b", issue = "none")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:53:#[unstable(feature = "b", issue = "none")] //~ ERROR multiple stability levels [E0544]
tests/ui/stability-attribute/stability-attribute-sanity.rs:56:#[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:57:#[stable(feature = "a", since = "b")] //~ ERROR multiple stability levels [E0544]
tests/ui/stability-attribute/stability-attribute-sanity.rs:60:#[stable(feature = "a", since = "b")] //~ ERROR invalid stability version found
tests/ui/stability-attribute/stability-attribute-sanity.rs:63:#[rustc_const_unstable(feature = "c", issue = "none")]
tests/ui/stability-attribute/stability-attribute-sanity.rs:64:#[rustc_const_unstable(feature = "d", issue = "none")] //~ ERROR multiple stability levels
tests/ui/stability-attribute/stability-attribute-sanity.rs:67:#[stable(feature = "a", since = "1.0.0")] //~ ERROR invalid deprecation version found
tests/ui/stability-attribute/stability-attribute-sanity.rs:68://~^ ERROR feature `a` is declared stable since 1.0.0
tests/ui/stability-attribute/generics-default-stability-trait.stderr:1:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability-trait.stderr:7:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability-trait.stderr:9:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability-trait.stderr:15:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/generics-default-stability-trait.stderr:17:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability-trait.stderr:23:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-implies-no-feature.stderr:1:error[E0658]: use of unstable library feature 'foobar'
tests/ui/stability-attribute/stability-attribute-implies-no-feature.stderr:2:  --> $DIR/stability-attribute-implies-no-feature.rs:7:40
tests/ui/stability-attribute/stability-attribute-implies-no-feature.stderr:8:   = help: add `#![feature(foobar)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-implies-no-feature.stderr:10:error[E0658]: use of unstable library feature 'foobar'
tests/ui/stability-attribute/stability-attribute-implies-no-feature.stderr:11:  --> $DIR/stability-attribute-implies-no-feature.rs:12:5
tests/ui/stability-attribute/stability-attribute-implies-no-feature.stderr:17:   = help: add `#![feature(foobar)]` to the crate attributes to enable
tests/ui/stability-attribute/stability-attribute-sanity-2.stderr:1:error[E0538]: multiple 'feature' items
tests/ui/stability-attribute/stability-attribute-sanity-2.stderr:4:LL | #[stable(feature = "a", feature = "b", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity-2.stderr:10:LL | #[stable(feature = "a", sinse = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity-2.stderr:11:   |                         ^^^^^^^^^^^^^^^ expected one of `feature`, `since`
tests/ui/stability-attribute/stability-attribute-sanity-2.stderr:16:LL | #[unstable(feature = "a", issue = "no")]
tests/ui/stability-attribute/stability-attribute-sanity-3.rs:3:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-sanity-3.rs:5:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity-4.rs:3:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-sanity-4.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity-4.rs:20:    #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity-4.rs:24:    #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/missing-stability-attr-at-top-level.stderr:4:LL | / #![feature(staged_api)]
tests/ui/stability-attribute/allow-unstable-reexport.rs:1:// Allow an unstable re-export without requiring a feature gate.
tests/ui/stability-attribute/allow-unstable-reexport.rs:6:#![feature(staged_api)]
tests/ui/stability-attribute/allow-unstable-reexport.rs:7:#![stable(feature = "lint_stability", since = "1.0.0")]
tests/ui/stability-attribute/allow-unstable-reexport.rs:12:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/allow-unstable-reexport.rs:17:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/allow-unstable-reexport.rs:21:#[stable(feature = "lint_stability", since = "1.0.0")]
tests/ui/stability-attribute/allow-unstable-reexport.rs:23://~^ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/allow-unstable-reexport.rs:26:    // Since we didn't enable the feature in this crate, we still can't
tests/ui/stability-attribute/allow-unstable-reexport.rs:28:    unstable(); //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/allow-unstable-reexport.rs:29:    unstable_text(); //~ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/missing-const-stability.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/missing-const-stability.rs:2:#![feature(const_trait_impl)]
tests/ui/stability-attribute/missing-const-stability.rs:3:#![stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/missing-const-stability.rs:5:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/missing-const-stability.rs:8:#[unstable(feature = "unstable", issue = "none")]
tests/ui/stability-attribute/missing-const-stability.rs:11:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/missing-const-stability.rs:14:    #[stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/missing-const-stability.rs:17:    #[unstable(feature = "unstable", issue = "none")]
tests/ui/stability-attribute/missing-const-stability.rs:21:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/missing-const-stability.rs:24:    #[stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/missing-const-stability.rs:27:#[stable(feature = "stable", since = "1.0.0")]
tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs:3:#![stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs:4:#![rustc_const_stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs:9:#[stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs:10:#[rustc_const_unstable(feature = "const_foobar", issue = "1", implied_by = "const_bar")]
tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs:11://~^ ERROR feature `const_bar` implying `const_foobar` does not exist
tests/ui/stability-attribute/const-stability-attribute-implies-missing.stderr:1:error: feature `const_bar` implying `const_foobar` does not exist
tests/ui/stability-attribute/const-stability-attribute-implies-missing.stderr:4:LL | #[rustc_const_unstable(feature = "const_foobar", issue = "1", implied_by = "const_bar")]
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.rs:2:#![deny(stable_features)]
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.rs:3:#![feature(foo)]
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.rs:4://~^ ERROR the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.rs:7:// mentioning partial stabilization and that given the implied unstable feature is used (there is a
tests/ui/stability-attribute/stability-attribute-implies-using-unstable.rs:8:// `foobar` call), that the compiler suggests changing to that feature and doesn't error about its
tests/ui/stability-attribute/stability-attribute-implies-missing.stderr:1:error: feature `bar` implying `foobar` does not exist
tests/ui/stability-attribute/stability-attribute-implies-missing.stderr:4:LL | #[unstable(feature = "foobar", issue = "1", implied_by = "bar")]
tests/ui/stability-attribute/generics-default-stability.rs:2:#![feature(unstable_default6)]
tests/ui/stability-attribute/generics-default-stability.rs:23:    let _: Struct1<isize> = Struct1 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:27:    let _: Struct1<usize> = STRUCT1; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:28:    let _: Struct1<isize> = Struct1 { field: 0 }; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:32:    // and can be used without the 'unstable_default' feature.
tests/ui/stability-attribute/generics-default-stability.rs:57:    let _: Struct3<isize, usize> = STRUCT3; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:59:    let _: Struct3<isize, isize> = Struct3 { field1: 0, field2: 0 }; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:60:    let _: Struct3<usize, usize> = Struct3 { field1: 0, field2: 0 }; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:84:    let _: Struct5<isize> = Struct5 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:90:    let _: Struct5<usize> = STRUCT5; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:92:    let _: Struct5<isize> = Struct5 { field: 0 }; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:100:    let _: Alias1<isize> = Alias1::Some(1); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:104:    let _: Alias1<usize> = ALIAS1; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:105:    let _: Alias1<isize> = Alias1::Some(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:109:    // and can be used without the 'unstable_default' feature.
tests/ui/stability-attribute/generics-default-stability.rs:133:    let _: Alias3<isize, usize> = ALIAS3; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:135:    let _: Alias3<isize, isize> = Alias3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:136:    let _: Alias3<usize, usize> = Alias3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:158:    let _: Alias5<isize> = Alias5::Some(1); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:163:    let _: Alias5<usize> = ALIAS5; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:165:    let _: Alias5<isize> = Alias5::Some(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:172:    let _: Enum1<isize> = Enum1::Some(1); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:176:    let _: Enum1<usize> = ENUM1; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:177:    let _: Enum1<isize> = Enum1::Some(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:181:    // and can be used without the 'unstable_default' feature.
tests/ui/stability-attribute/generics-default-stability.rs:205:    let _: Enum3<isize, usize> = ENUM3; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:207:    let _: Enum3<isize, isize> = Enum3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:208:    let _: Enum3<usize, usize> = Enum3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:230:    let _: Enum5<isize> = Enum5::Some(1); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:235:    let _: Enum5<usize> = ENUM5; //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:237:    let _: Enum5<isize> = Enum5::Some(0); //~ ERROR use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability.rs:244:    let _: Box1<isize, System> = Box1::new(1); //~ ERROR use of unstable library feature 'box_alloc_param'
tests/ui/stability-attribute/generics-default-stability-where.stderr:1:error[E0658]: use of unstable library feature 'unstable_default'
tests/ui/stability-attribute/generics-default-stability-where.stderr:7:   = help: add `#![feature(unstable_default)]` to the crate attributes to enable
tests/ui/stability-attribute/missing-stability-attr-at-top-level.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:16:LL |     #[stable(feature = "a", since = "b", reason)]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:17:   |                                          ^^^^^^ expected one of `feature`, `since`
tests/ui/stability-attribute/stability-attribute-sanity.stderr:22:LL |     #[stable(feature = "a", since)]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:28:LL |     #[stable(feature, since = "a")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:34:LL |     #[stable(feature = "a", since(b))]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:40:LL |     #[stable(feature(b), since = "a")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:43:error[E0546]: missing 'feature'
tests/ui/stability-attribute/stability-attribute-sanity.stderr:52:LL |     #[unstable(feature = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:55:error[E0546]: missing 'feature'
tests/ui/stability-attribute/stability-attribute-sanity.stderr:64:LL |     #[stable(feature = "a")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:82:LL | #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:88:LL | #[unstable(feature = "b", issue = "none")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:94:LL | #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:100:LL | #[rustc_const_unstable(feature = "d", issue = "none")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:106:LL | #[stable(feature = "a", since = "b")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:115:LL | #[stable(feature = "a", since = "1.0.0")]
tests/ui/stability-attribute/stability-attribute-sanity.stderr:127:error[E0711]: feature `a` is declared stable since 1.0.0, but was previously declared stable since b
tests/ui/stability-attribute/stability-attribute-sanity.stderr:130:LL | #[stable(feature = "a", since = "1.0.0")]
tests/ui/stability-attribute/issue-106589.rs:1:// #![feature(staged_api)] // note: `staged_api` not enabled
tests/ui/stability-attribute/issue-106589.rs:3:#![stable(feature = "foo", since = "1.0.0")]
tests/ui/stability-attribute/issue-106589.rs:6:#[unstable(feature = "foo", issue = "none")]
tests/ui/stability-attribute/allow-unstable-reexport.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/allow-unstable-reexport.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/allow-unstable-reexport.stderr:9:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/allow-unstable-reexport.stderr:15:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/allow-unstable-reexport.stderr:17:error[E0658]: use of unstable library feature 'unstable_test_feature': text
tests/ui/stability-attribute/allow-unstable-reexport.stderr:23:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/issue-28388-3.rs:8://~^ ERROR use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/accidental-stable-in-unstable.stderr:1:error[E0658]: use of unstable library feature 'unicode_internals'
tests/ui/stability-attribute/accidental-stable-in-unstable.stderr:7:   = help: add `#![feature(unicode_internals)]` to the crate attributes to enable
tests/ui/stability-attribute/accidental-stable-in-unstable.rs:6:use core::unicode::UNICODE_VERSION; //~ ERROR use of unstable library feature 'unicode_internals'
tests/ui/stability-attribute/default-body-stability-ok-enables.rs:4:#![feature(fun_default_body, eq_default_body, constant_default_body)]
tests/ui/stability-attribute/stability-attribute-implies-using-stable.rs:2:#![deny(stable_features)]
tests/ui/stability-attribute/stability-attribute-implies-using-stable.rs:3:#![feature(foo)]
tests/ui/stability-attribute/stability-attribute-implies-using-stable.rs:4://~^ ERROR the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`
tests/ui/stability-attribute/stability-attribute-implies-using-stable.rs:7:// mentioning partial stabilization, and that given the implied unstable feature is unused (there
tests/ui/stability-attribute/stable-in-unstable.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.stderr:8:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stable-in-unstable.stderr:10:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.stderr:17:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stable-in-unstable.stderr:19:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.stderr:26:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stable-in-unstable.stderr:28:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.stderr:35:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stable-in-unstable.stderr:37:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.stderr:44:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/stable-in-unstable.stderr:46:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/stability-attribute/stable-in-unstable.stderr:53:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:3:#![stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:5:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:6:pub trait Trait1<#[unstable(feature = "unstable_default", issue = "none")] T = ()> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:7:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:11:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:12:pub trait Trait2<#[unstable(feature = "unstable_default", issue = "none")] T = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:13:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:17:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:19:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:23:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:24:pub struct Struct1<#[unstable(feature = "unstable_default", issue = "none")] T = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:25:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:29:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:31:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:35:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:36:pub struct Struct3<A = isize, #[unstable(feature = "unstable_default", issue = "none")] B = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:37:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:39:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:44:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:46:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:51:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:52:pub struct Struct5<#[unstable(feature = "unstable_default", issue = "none")] A = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:53:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:57:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:58:pub struct Struct6<#[unstable(feature = "unstable_default6", issue = "none")] T = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:59:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:63:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:66:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:69:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:72:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:75:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:78:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:79:pub enum Enum1<#[unstable(feature = "unstable_default", issue = "none")] T = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:80:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:81:    Some(#[stable(feature = "stable_test_feature", since = "1.0.0")] T),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:82:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:86:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:88:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:89:    Some(#[stable(feature = "stable_test_feature", since = "1.0.0")] T),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:90:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:94:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:95:pub enum Enum3<T = isize, #[unstable(feature = "unstable_default", issue = "none")] E = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:96:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:97:    Ok(#[stable(feature = "stable_test_feature", since = "1.0.0")] T),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:98:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:99:    Err(#[stable(feature = "stable_test_feature", since = "1.0.0")] E),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:103:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:105:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:106:    Some(#[stable(feature = "stable_test_feature", since = "1.0.0")] T),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:107:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:112:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:113:pub enum Enum5<#[unstable(feature = "unstable_default", issue = "none")] T = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:114:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:115:    Some(#[stable(feature = "stable_test_feature", since = "1.0.0")] T),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:116:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:120:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:121:pub enum Enum6<#[unstable(feature = "unstable_default6", issue = "none")] T = usize> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:122:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:123:    Some(#[stable(feature = "stable_test_feature", since = "1.0.0")] T),
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:124:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:128:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:131:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:134:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:136:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:139:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:142:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:145:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:146:pub type Alias1<#[unstable(feature = "unstable_default", issue = "none")] T = usize> = Option<T>;
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:148:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:151:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:152:pub type Alias3<T = isize, #[unstable(feature = "unstable_default", issue = "none")] E = usize> =
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:156:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:160:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:161:pub type Alias5<#[unstable(feature = "unstable_default", issue = "none")] T = usize> = Option<T>;
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:163:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:164:pub type Alias6<#[unstable(feature = "unstable_default6", issue = "none")] T = usize> = Option<T>;
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:166:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:169:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:172:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:174:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:177:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:180:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:184:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:187:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:190:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:193:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:194:pub struct Box1<T, #[unstable(feature = "box_alloc_param", issue = "none")] A: Alloc = System> {
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:200:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:206:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:213:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:219:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/unstable_generic_param.rs:225:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability-reexport.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/lint-stability-reexport.rs:3:#![stable(feature = "lint_stability", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability-reexport.rs:7:// Re-exporting without enabling the feature "unstable_test_feature" in this crate
tests/ui/stability-attribute/auxiliary/lint-stability-reexport.rs:8:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:3:#![stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:4:#![rustc_const_stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:6:#[stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:7:#[rustc_const_stable(feature = "const_foo", since = "1.62.0")]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:10:#[stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs:11:#[rustc_const_unstable(feature = "const_foobar", issue = "1", implied_by = "const_foo")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:3:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:4:#![feature(associated_type_defaults)]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:5:#![stable(feature = "lint_stability", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:7:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:10:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:14:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:18:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:21:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:25:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:27:#[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:30:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:32:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:35:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:39:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:42:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:46:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:49:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:53:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:55:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:58:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:60:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:64:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:66:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:69:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:73:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:76:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:80:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:82:    #[unstable(feature = "unstable_test_feature", reason = "text", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:85:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:87:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:91:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:93:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:95:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:100:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:103:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:106:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:109:    #[stable(feature = "stable_test_feature", since = "1.0.0")] fn dummy(&self) { }
tests/ui/stability-attribute/auxiliary/lint-stability.rs:112:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:115:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/stability-attribute/auxiliary/lint-stability.rs:117:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:120:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/stability-attribute/auxiliary/lint-stability.rs:122:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:124:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/stability-attribute/auxiliary/lint-stability.rs:126:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:128:    #[stable(feature = "stable_test_feature", since = "1.0.0")] pub i: isize
tests/ui/stability-attribute/auxiliary/lint-stability.rs:130:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:132:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:135:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:138:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:141:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:143:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:146:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:148:    #[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:151:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:154:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:157:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:161:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:163:pub struct DeprecatedTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/stability-attribute/auxiliary/lint-stability.rs:164:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:166:pub struct DeprecatedUnstableTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/stability-attribute/auxiliary/lint-stability.rs:167:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:168:pub struct UnstableTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/stability-attribute/auxiliary/lint-stability.rs:169:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:170:pub struct StableTupleStruct(#[stable(feature = "rust1", since = "1.0.0")] pub isize);
tests/ui/stability-attribute/auxiliary/lint-stability.rs:172:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:178:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/lint-stability.rs:184:#[stable(feature = "stable_test_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/ctor-stability.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/ctor-stability.rs:3:#![stable(feature = "none", since = "1.0")]
tests/ui/stability-attribute/auxiliary/ctor-stability.rs:5:#[stable(feature = "none", since = "1.0")]
tests/ui/stability-attribute/auxiliary/similar-unstable-method.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/similar-unstable-method.rs:2:#![stable(feature = "libfoo", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/similar-unstable-method.rs:4:#[unstable(feature = "foo", reason = "...", issue = "none")]
tests/ui/stability-attribute/auxiliary/similar-unstable-method.rs:7:#[stable(feature = "libfoo", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/similar-unstable-method.rs:11:    #[unstable(feature = "foo", reason = "...", issue = "none")]
tests/ui/stability-attribute/auxiliary/default_body.rs:2:#![feature(staged_api, rustc_attrs)]
tests/ui/stability-attribute/auxiliary/default_body.rs:3:#![stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:5:#[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:7:    #[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:8:    #[rustc_default_body_unstable(feature = "constant_default_body", issue = "none")]
tests/ui/stability-attribute/auxiliary/default_body.rs:11:    #[rustc_default_body_unstable(feature = "fun_default_body", issue = "none")]
tests/ui/stability-attribute/auxiliary/default_body.rs:12:    #[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:15:    #[rustc_default_body_unstable(feature = "fun_default_body", issue = "none", reason = "reason")]
tests/ui/stability-attribute/auxiliary/default_body.rs:16:    #[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:21:#[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:23:    #[rustc_default_body_unstable(feature = "eq_default_body", issue = "none")]
tests/ui/stability-attribute/auxiliary/default_body.rs:24:    #[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/default_body.rs:29:    #[stable(feature = "stable_feature", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-core.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-core.rs:2:#![stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-core.rs:4:#[unstable(feature = "unstable_test_feature", issue = "1")]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-core.rs:6:    #[stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs:2:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs:3:#![feature(rustc_attrs)]
tests/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs:4:#![stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs:6:#[unstable(feature = "unstable_test_feature", issue = "1")]
tests/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs:8:    #[stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs:12:    #[stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/stability-attribute-implies.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/stability-attribute-implies.rs:2:#![stable(feature = "stability_attribute_implies", since = "1.0.0")]
tests/ui/stability-attribute/auxiliary/stability-attribute-implies.rs:4:#[stable(feature = "foo", since = "1.62.0")]
tests/ui/stability-attribute/auxiliary/stability-attribute-implies.rs:7:#[unstable(feature = "foobar", issue = "1", implied_by = "foo")]
tests/ui/stability-attribute/auxiliary/stability_attribute_issue.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/stability_attribute_issue.rs:2:#![stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/stability_attribute_issue.rs:5:#[unstable(feature = "unstable_test_feature", issue = "1")]
tests/ui/stability-attribute/auxiliary/stability_attribute_issue.rs:8:#[unstable(feature = "unstable_test_feature", reason = "message", issue = "2")]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs:1:#![feature(staged_api)]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs:2:#![feature(unstable_test_feature)]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs:3:#![stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs:7:#[stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs:9:    #[stable(feature = "stable_test_feature", since = "1.2.0")]
tests/ui/stability-attribute/suggest-vec-allocator-api.rs:2:    let _: Vec<u8, _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.rs:6:        _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.rs:7:    let _ = Vec::<u16, _>::new(); //~ ERROR use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/suggest-vec-allocator-api.rs:8:    let _boxed: Box<u32, _> = Box::new(10); //~ ERROR use of unstable library feature 'allocator_api'
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs:3:#![deny(stable_features)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs:4:#![feature(const_foo)]
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs:5://~^ ERROR the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs:8:// diagnostic mentioning partial stabilization and that given the implied unstable feature is
tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs:9:// used (there is a `const_foobar` call), that the compiler suggests changing to that feature and
tests/ui/try-block/try-block-bad-type.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-in-match.rs:4:#![feature(try_blocks)]
tests/ui/try-block/try-block-catch.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-in-while.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-unreachable-code-lint.rs:5:#![feature(try_blocks)]
tests/ui/try-block/try-block-in-return.rs:4:#![feature(try_blocks)]
tests/ui/try-block/try-block-opt-init.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-type-error.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-unused-delims.rs:5:#![feature(try_blocks)]
tests/ui/try-block/issue-45124.rs:5:#![feature(try_blocks)]
tests/ui/try-block/try-block-maybe-bad-lifetime.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-bad-lifetime.rs:3:#![feature(try_blocks)]
tests/ui/try-block/try-block-unused-delims.fixed:5:#![feature(try_blocks)]
tests/ui/try-block/try-block.rs:7:#![feature(try_blocks)]
tests/ui/unsized-locals/unsized-exprs.rs:1:#![feature(unsized_tuple_coercion, unsized_fn_params)]
tests/ui/unsized-locals/double-move.rs:1:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/double-move.rs:2://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/unsized-locals/unsized-exprs3.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized-locals/issue-30276.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized-locals/unsized-locals-using-unsized-fn-params.rs:1:#![feature(box_patterns)]
tests/ui/unsized-locals/unsized-locals-using-unsized-fn-params.rs:2:#![feature(unsized_fn_params)]
tests/ui/unsized-locals/double-move.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/unsized-locals/double-move.stderr:4:LL | #![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/double-move.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/unsized-locals/align.rs:4:#![feature(unsized_locals)]
tests/ui/unsized-locals/align.rs:5:#![allow(incomplete_features)]
tests/ui/unsized-locals/unsized-parameters.rs:3:#![allow(incomplete_features)]
tests/ui/unsized-locals/unsized-parameters.rs:4:#![feature(unsized_fn_params)]
tests/ui/unsized-locals/issue-30276-feature-flagged.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/unsized-locals/issue-30276-feature-flagged.stderr:2:  --> $DIR/issue-30276-feature-flagged.rs:1:12
tests/ui/unsized-locals/issue-30276-feature-flagged.stderr:4:LL | #![feature(unsized_locals)]
tests/ui/unsized-locals/issue-30276-feature-flagged.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/unsized-locals/issue-30276-feature-flagged.stderr:11:  --> $DIR/issue-30276-feature-flagged.rs:7:29
tests/ui/unsized-locals/issue-30276-feature-flagged.stderr:18:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized-locals/issue-30276-feature-flagged.rs:1:#![feature(unsized_locals)]
tests/ui/unsized-locals/issue-30276-feature-flagged.rs:2://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/unsized-locals/autoderef.rs:3:#![allow(incomplete_features)]
tests/ui/unsized-locals/autoderef.rs:4:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/suggest-borrow.stderr:9:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized-locals/suggest-borrow.stderr:54:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized-locals/unsized-locals-using-unsized-fn-params.stderr:9:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized-locals/unsized-locals-using-unsized-fn-params.stderr:19:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized-locals/unsized-locals-using-unsized-fn-params.stderr:29:   = help: unsized locals are gated as an unstable feature
tests/ui/unsized-locals/by-value-trait-object-safety-rpass.rs:3:#![allow(incomplete_features)]
tests/ui/unsized-locals/by-value-trait-object-safety-rpass.rs:4:#![feature(unsized_locals)]
tests/ui/unsized-locals/by-value-trait-object-safety.rs:1:#![feature(unsized_locals)]
tests/ui/unsized-locals/by-value-trait-object-safety.rs:2://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/unsized-locals/issue-50940-with-feature.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/unsized-locals/issue-50940-with-feature.stderr:2:  --> $DIR/issue-50940-with-feature.rs:1:12
tests/ui/unsized-locals/issue-50940-with-feature.stderr:4:LL | #![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/issue-50940-with-feature.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/unsized-locals/issue-50940-with-feature.stderr:11:  --> $DIR/issue-50940-with-feature.rs:6:5
tests/ui/unsized-locals/issue-50940-with-feature.stderr:18:  --> $DIR/issue-50940-with-feature.rs:5:12
tests/ui/unsized-locals/unsized-exprs-rpass.rs:2:#![allow(incomplete_features, unused_braces, unused_parens)]
tests/ui/unsized-locals/unsized-exprs-rpass.rs:3:#![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/borrow-after-move.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/unsized-locals/borrow-after-move.stderr:4:LL | #![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/borrow-after-move.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/unsized-locals/reference-unsized-locals.rs:3:#![allow(incomplete_features)]
tests/ui/unsized-locals/reference-unsized-locals.rs:4:#![feature(unsized_locals)]
tests/ui/unsized-locals/borrow-after-move.rs:1:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/borrow-after-move.rs:2://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/unsized-locals/issue-67981.rs:1:#![feature(unsized_fn_params)]
tests/ui/unsized-locals/by-value-trait-object-safety.stderr:1:warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/unsized-locals/by-value-trait-object-safety.stderr:4:LL | #![feature(unsized_locals)]
tests/ui/unsized-locals/by-value-trait-object-safety.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/unsized-locals/issue-50940.stderr:9:   = help: unsized fn params are gated as an unstable feature
tests/ui/unsized-locals/issue-50940-with-feature.rs:1:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/issue-50940-with-feature.rs:2://~^ WARN the feature `unsized_locals` is incomplete
tests/ui/unsized-locals/by-value-trait-object-safety-withdefault.rs:3:#![allow(incomplete_features)]
tests/ui/unsized-locals/by-value-trait-object-safety-withdefault.rs:4:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/rust-call.rs:1:#![feature(unsized_tuple_coercion)]
tests/ui/unsized-locals/rust-call.rs:2:#![feature(unboxed_closures)]
tests/ui/unsized-locals/rust-call.rs:3:#![feature(unsized_fn_params)]
tests/ui/unsized-locals/unsized-index.rs:3:#![feature(unsized_fn_params)]
tests/ui/unsized-locals/simple-unsized-locals.rs:3:#![allow(incomplete_features)]
tests/ui/unsized-locals/simple-unsized-locals.rs:4:#![feature(unsized_locals)]
tests/ui/unsized-locals/auxiliary/ufuncs.rs:1:#![feature(unsized_locals, unsized_fn_params)]
tests/ui/unsized-locals/unsized-exprs2.rs:1:#![feature(unsized_tuple_coercion, unsized_fn_params)]
tests/ui/unboxed-closures/unboxed-closure-feature-gate.rs:1:// Check that parenthetical notation is feature-gated except with the
tests/ui/unboxed-closures/unboxed-closure-sugar-region.rs:5:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/issue-53448.rs:3:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closures-mutate-upvar.rs:5:#![feature(unboxed_closures, tuple_trait)]
tests/ui/unboxed-closures/unboxed-closures-infer-explicit-call-early.rs:2:#![feature(fn_traits)]
tests/ui/unboxed-closures/non-tupled-arg-mismatch.rs:1:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.rs:1:// Test that the `Fn` traits require `()` form without a feature gate.
tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:1:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closure-feature-gate.stderr:2:  --> $DIR/unboxed-closure-feature-gate.rs:13:20
tests/ui/unboxed-closures/unboxed-closure-feature-gate.stderr:8:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/unboxed-closures/unboxed-closures-blanket-fn.rs:5:#![feature(lang_items)]
tests/ui/unboxed-closures/unboxed-closures-manual-impl.rs:2:#![feature(unboxed_closures, fn_traits)]
tests/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.rs:4:#![feature(fn_traits, unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closures-fnmut-as-fnonce.rs:5:#![feature(unboxed_closures, fn_traits)]
tests/ui/unboxed-closures/issue-30906.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:1:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:1:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closure-sugar-equiv.rs:6:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.rs:1:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/non-tupled-call.rs:1:#![feature(fn_traits, unboxed_closures, tuple_trait)]
tests/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.stderr:8:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.stderr:17:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/unboxed-closures/unboxed-closure-sugar-default.rs:4:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.rs:1:#![feature(fn_traits)]
tests/ui/unboxed-closures/unboxed-closures-all-traits.rs:2:#![feature(lang_items)]
tests/ui/unboxed-closures/unboxed-closure-illegal-move.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.rs:6:#![feature(unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closures-fn-as-fnmut-and-fnonce.rs:5:#![feature(unboxed_closures, fn_traits)]
tests/ui/unboxed-closures/unboxed-closures-recursive-fn-using-fn-mut.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/unboxed-closures/unboxed-closures-blanket-fn-mut.rs:5:#![feature(lang_items)]
tests/ui/unboxed-closures/unboxed-closures-infer-recursive-fn.rs:2:#![feature(fn_traits, unboxed_closures)]
tests/ui/range/range-inclusive-pattern-precedence2.rs:4:#![feature(box_patterns)]
tests/ui/range/issue-54505-no-std.rs:8:#![feature(lang_items)]
tests/ui/range/range-pattern-out-of-bounds-issue-68972.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/deref-patterns/default-infer.rs:2:#![feature(string_deref_patterns)]
tests/ui/deref-patterns/refs.rs:2:#![feature(string_deref_patterns)]
tests/ui/deref-patterns/basic.rs:3:#![feature(string_deref_patterns)]
tests/ui/extern/issue-112363-extern-item-where-clauses-debug-ice.stderr:42:   = help: add `#![feature(extern_types)]` to the crate attributes to enable
tests/ui/extern/issue-13655.rs:2:#![feature(fn_traits, unboxed_closures)]
tests/ui/extern/extern-with-type-bounds.rs:1:#![feature(intrinsics)]
tests/ui/extern/extern-types-size_of_val.rs:2:#![feature(extern_types)]
tests/ui/extern/extern-types-manual-sync-send.rs:4:#![feature(extern_types)]
tests/ui/extern/extern-vectorcall.rs:6:#![feature(abi_vectorcall)]
tests/ui/extern/extern-types-pointer-cast.rs:5:#![feature(extern_types)]
tests/ui/extern/extern-types-unsized.rs:3:#![feature(extern_types)]
tests/ui/extern/extern-types-trait-impl.rs:4:#![feature(extern_types)]
tests/ui/extern/extern-const.fixed:11:#![feature(rustc_private)]
tests/ui/extern/extern-types-inherent-impl.rs:6:#![feature(extern_types)]
tests/ui/extern/extern-const.rs:11:#![feature(rustc_private)]
tests/ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:25:#![feature(core_panic)]
tests/ui/extern/extern-type-diag-not-similar.rs:6:#![feature(extern_types)]
tests/ui/extern/issue-1251.rs:6:#![feature(rustc_private)]
tests/ui/extern/extern-thiscall.rs:4:#![feature(abi_thiscall)]
tests/ui/extern/extern-types-not-sync-send.rs:3:#![feature(extern_types)]
tests/ui/extern/extern-types-thin-pointer.rs:5:#![feature(extern_types)]
tests/ui/extern/extern-types-distinct-types.rs:1:#![feature(extern_types)]
tests/ui/extern/auxiliary/extern-types-inherent-impl.rs:1:#![feature(extern_types)]
tests/ui/extern/extern-prelude-core.rs:2:#![feature(lang_items, start)]
tests/ui/issues/issue-19982.rs:3:#![feature(fn_traits, unboxed_closures)]
tests/ui/issues/issue-44056.rs:4:// compile-flags: -Ctarget-feature=+avx -Clto
tests/ui/issues/issue-55380.rs:2:#![feature(specialization)]
tests/ui/issues/issue-55380.rs:3://~^ WARN the feature `specialization` is incomplete
tests/ui/issues/issue-23024.stderr:8:   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable
tests/ui/issues/issue-45510.rs:4:#![feature(fn_traits)]
tests/ui/issues/issue-45510.rs:5:#![feature(unboxed_closures)]
tests/ui/issues/issue-13259-windows-tcb-trash.rs:2:#![feature(rustc_private)]
tests/ui/issues/issue-15756.stderr:9:   = help: unsized locals are gated as an unstable feature
tests/ui/issues/issue-23073.rs:1:#![feature(associated_type_defaults)]
tests/ui/issues/issue-20544.rs:2:#![feature(unboxed_closures)]
tests/ui/issues/issue-20544.rs:3:#![feature(fn_traits)]
tests/ui/issues/issue-25901.stderr:19:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/issues/issue-14959.rs:4:#![feature(fn_traits, unboxed_closures)]
tests/ui/issues/issue-42312.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/issues/issue-42312.stderr:25:   = help: unsized fn params are gated as an unstable feature
tests/ui/issues/issue-26905.rs:1:#![feature(unsize, coerce_unsized)]
tests/ui/issues/issue-51044.rs:3:// Check that the feature gate normalizes associated types.
tests/ui/issues/issue-11552.rs:2:#![feature(box_patterns)]
tests/ui/issues/issue-50403.rs:1:#![feature(concat_idents)]
tests/ui/issues/issue-33687.rs:2:#![feature(unboxed_closures)]
tests/ui/issues/issue-33687.rs:3:#![feature(fn_traits)]
tests/ui/issues/issue-21033.rs:6:#![feature(box_patterns)]
tests/ui/issues/issue-24434.rs:4:#![cfg_attr(set1, feature(rustc_attrs))]
tests/ui/issues/issue-52489.stderr:1:error[E0658]: use of unstable library feature 'issue_52489_unstable'
tests/ui/issues/issue-52489.stderr:7:   = help: add `#![feature(issue_52489_unstable)]` to the crate attributes to enable
tests/ui/issues/issue-43431.rs:1:#![feature(fn_traits)]
tests/ui/issues/issue-22603.rs:3:#![feature(unboxed_closures, fn_traits)]
tests/ui/issues/issue-9575.rs:1:#![feature(start)]
tests/ui/issues/issue-6557.rs:5:#![feature(box_patterns)]
tests/ui/issues/issue-23550.rs:2:#![feature(core_intrinsics)]
tests/ui/issues/issue-16774.rs:2:#![feature(box_patterns)]
tests/ui/issues/issue-50187.rs:3:#![feature(decl_macro)]
tests/ui/issues/issue-5100.rs:1:#![feature(box_patterns)]
tests/ui/issues/issue-18804/auxiliary/lib.rs:2:#![feature(linkage)]
tests/ui/issues/issue-30490.rs:12:#![cfg_attr(unix, feature(rustc_private))]
tests/ui/issues/issue-17337.rs:1:#![feature(staged_api)]
tests/ui/issues/issue-17337.rs:4:#![unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/issues/issue-17337.rs:9:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/issues/issue-27078.stderr:7:   = help: unsized fn params are gated as an unstable feature
tests/ui/issues/issue-20225.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/issues/issue-18389.rs:1:#![feature(type_privacy_lints)]
tests/ui/issues/issue-40883.rs:5:#![feature(test)]
tests/ui/issues/issue-43988.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/issues/issue-106755.rs:3:#![feature(negative_impls)]
tests/ui/issues/issue-106755.rs:4:#![feature(marker_trait_attr)]
tests/ui/issues/issue-29516.rs:2:#![feature(auto_traits)]
tests/ui/issues/issue-29516.rs:3:#![feature(negative_impls)]
tests/ui/issues/issue-29485.rs:7:#[feature(recover)]
tests/ui/issues/issue-4972.rs:1:#![feature(box_patterns)]
tests/ui/issues/issue-51947.rs:4:#![feature(linkage)]
tests/ui/issues/issue-37051.rs:3:#![feature(associated_type_defaults)]
tests/ui/issues/issue-50582.stderr:8:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/issues/issue-15094.rs:1:#![feature(fn_traits, unboxed_closures)]
tests/ui/issues/issue-22789.rs:3:#![feature(unboxed_closures, fn_traits)]
tests/ui/issues/issue-22034.rs:1:#![feature(rustc_private)]
tests/ui/issues/issue-33387.rs:2:#![feature(rustc_attrs)]
tests/ui/issues/issue-34780.rs:2:#![allow(stable_features)]
tests/ui/issues/issue-34780.rs:3:#![feature(associated_consts)]
tests/ui/issues/issue-29663.rs:2:#![allow(stable_features)]
tests/ui/issues/issue-29663.rs:5:#![feature(volatile)]
tests/ui/issues/issue-29723.rs:3:#![feature(if_let_guard)]
tests/ui/issues/issue-32950.rs:1:#![feature(concat_idents)]
tests/ui/issues/issue-42956.rs:3:#![allow(stable_features)]
tests/ui/issues/issue-42956.rs:4:#![feature(associated_consts)]
tests/ui/issues/issue-21634.rs:2:#![allow(stable_features)]
tests/ui/issues/issue-21634.rs:4:#![feature(cfg_target_feature)]
tests/ui/issues/issue-21634.rs:6:#[cfg(any(not(target_arch = "x86"), target_feature = "sse2"))]
tests/ui/issues/issue-21634.rs:19:#[cfg(all(target_arch = "x86", not(target_feature = "sse2")))]
tests/ui/issues/issue-32782.stderr:1:error[E0658]: allow_internal_unstable side-steps feature gating and stability checks
tests/ui/issues/issue-32782.stderr:10:   = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable
tests/ui/issues/issue-38954.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/issues/issue-50714-1.rs:4:#![feature(start)]
tests/ui/issues/issue-18952.rs:4:#![feature(fn_traits)]
tests/ui/issues/issue-18952.rs:5:#![feature(unboxed_closures)]
tests/ui/issues/issue-41936-variance-coerce-unsized-cycle.rs:8:#![feature(unsize)]
tests/ui/issues/issue-41936-variance-coerce-unsized-cycle.rs:9:#![feature(coerce_unsized)]
tests/ui/issues/issue-50585.stderr:8:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/issues/issue-52489.rs:6://~^ ERROR use of unstable library feature 'issue_52489_unstable'
tests/ui/issues/issue-49298.rs:2:#![feature(test)]
tests/ui/issues/issue-20313-rpass.rs:4:#![feature(link_llvm_intrinsics)]
tests/ui/issues/issue-16739.rs:2:#![feature(unboxed_closures, fn_traits)]
tests/ui/issues/issue-26905-rpass.rs:2:#![feature(unsize, coerce_unsized)]
tests/ui/issues/issue-49632.rs:2:#![feature(stmt_expr_attributes)]
tests/ui/issues/issue-55380.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/issues/issue-55380.stderr:4:LL | #![feature(specialization)]
tests/ui/issues/issue-55380.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/issues/issue-48006.rs:3:#![feature(step_trait)]
tests/ui/issues/issue-2214.rs:4:#![feature(rustc_private)]
tests/ui/issues/issue-41696.rs:7:#![feature(test)]
tests/ui/issues/issue-15673.rs:2:#![allow(stable_features)]
tests/ui/issues/issue-15673.rs:4:#![feature(iter_arith)]
tests/ui/issues/issue-41229-ref-str.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/issues/issue-20847.rs:2:#![feature(fn_traits)]
tests/ui/issues/issue-5883.stderr:8:   = help: unsized fn params are gated as an unstable feature
tests/ui/issues/issue-17954.rs:1:#![feature(thread_local)]
tests/ui/issues/issue-50811.rs:2:#![feature(test)]
tests/ui/issues/issue-33992.rs:6:#![feature(linkage)]
tests/ui/issues/issue-26812.rs:1:#![feature(default_type_parameter_fallback)]
tests/ui/issues/issue-28498-ugeh-ex1.rs:8:#![feature(dropck_eyepatch)]
tests/ui/issues/issue-49934.rs:1:#![feature(stmt_expr_attributes)]
tests/ui/issues/issue-20313.stderr:8:   = help: add `#![feature(link_llvm_intrinsics)]` to the crate attributes to enable
tests/ui/issues/issue-3656.rs:10:#![feature(rustc_private)]
tests/ui/issues/issue-20644.rs:4:#![allow(stable_features)]
tests/ui/issues/issue-20644.rs:11:#![feature(os)]
tests/ui/issues/issue-12127.rs:1:#![feature(unboxed_closures, tuple_trait)]
tests/ui/issues/issue-61894.rs:3:#![feature(core_intrinsics)]
tests/ui/issues/issue-39687.rs:1:#![feature(fn_traits)]
tests/ui/issues/auxiliary/issue-52489.rs:2:#![unstable(feature = "issue_52489_unstable", issue = "none")]
tests/ui/issues/auxiliary/issue-52489.rs:3:#![feature(staged_api)]
tests/ui/issues/auxiliary/issue-111011.rs:1:#![feature(async_closure)]
tests/ui/issues/issue-4335.rs:1:#![feature(fn_traits)]
tests/ui/issues/issue-39827.rs:2:#![feature(core_intrinsics)]
tests/ui/issues/issue-70673.rs:5:#![feature(thread_local)]
tests/ui/function-pointer/sized-ret-with-binder.rs:3:#![feature(unboxed_closures)]
tests/ui/function-pointer/unsized-ret.rs:1:#![feature(fn_traits)]
tests/ui/function-pointer/unsized-ret.rs:2:#![feature(unboxed_closures)]
tests/ui/function-pointer/unsized-ret.rs:3:#![feature(tuple_trait)]
tests/ui/no-core-2.rs:4:#![feature(no_core)]
tests/ui/typeck/issue-91267.rs:1:#![feature(type_ascription)]
tests/ui/typeck/issue-84768.rs:3:#![feature(fn_traits)]
tests/ui/typeck/typeck-default-trait-impl-negation-sync.rs:1:#![feature(negative_impls)]
tests/ui/typeck/typeck-unsafe-always-share.rs:3:#![feature(negative_impls)]
tests/ui/typeck/typeck_type_placeholder_item.rs:2:#![feature(associated_type_defaults)]
tests/ui/typeck/typeck_type_placeholder_item.rs:3:#![feature(type_alias_impl_trait)]
tests/ui/typeck/typeck-default-trait-impl-negation-send.rs:1:#![feature(negative_impls)]
tests/ui/typeck/issue-57404.rs:1:#![feature(unboxed_closures)]
tests/ui/typeck/issue-57404.rs:2:#![feature(fn_traits)]
tests/ui/typeck/issue-105946.stderr:14:   = help: add `#![feature(half_open_range_patterns_in_slices)]` to the crate attributes to enable
tests/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.rs:7:#![feature(negative_impls)]
tests/ui/typeck/issue-91334.rs:5:#![feature(generators)]
tests/ui/typeck/issue-83693.rs:3:#![feature(fn_traits)]
tests/ui/typeck/auxiliary/tdticc_coherence_lib.rs:1:#![feature(auto_traits, core)]
tests/ui/const_prop/unsized-local-ice.rs:3:#![feature(unsized_fn_params)]
tests/ui/const_prop/const-prop-read-static-in-const.stderr:9:help: skipping check that does not even have a feature gate
tests/ui/coercion/coerce-issue-49593-box-never-windows.rs:6:#![feature(never_type)]
tests/ui/coercion/coerce-issue-49593-box-never-windows.rs:7:#![cfg_attr(fallback, feature(never_type_fallback))]
tests/ui/coercion/coerce-to-bang-cast.rs:1:#![feature(never_type)]
tests/ui/coercion/coerce-issue-49593-box-never.rs:6:#![feature(never_type)]
tests/ui/coercion/coerce-issue-49593-box-never.rs:7:#![cfg_attr(fallback, feature(never_type_fallback))]
tests/ui/coercion/issue-53475.rs:1:#![feature(coerce_unsized)]
tests/ui/coercion/coerce-expect-unsized-ascribed.rs:4:#![feature(type_ascription)]
tests/ui/coercion/issue-36007.rs:2:#![feature(coerce_unsized, unsize)]
tests/ui/coercion/coerce-to-bang.rs:1:#![feature(never_type)]
tests/ui/mir/validate/storage-live.rs:10:#![feature(custom_mir, core_intrinsics)]
tests/ui/mir/mir_alignment_check_i686-pc-windows-msvc.rs:10:#![feature(strict_provenance)]
tests/ui/mir/mir_codegen_ssa.rs:3:#![feature(custom_mir, core_intrinsics)]
tests/ui/mir/mir_let_chains_drop_order.rs:6:#![feature(let_chains)]
tests/ui/mir/mir_calls_to_shims.rs:4:#![feature(fn_traits)]
tests/ui/mir/mir_calls_to_shims.rs:5:#![feature(never_type)]
tests/ui/mir/ssa-analysis-regression-50041.rs:5:#![feature(lang_items)]
tests/ui/mir/thir-constparam-temp.rs:3:#![feature(adt_const_params)]
tests/ui/mir/thir-constparam-temp.rs:4:#![allow(incomplete_features)]
tests/ui/mir/mir_raw_fat_ptr.rs:4:#![feature(raw_ref_op)]
tests/ui/mir/mir_codegen_critical_edge.rs:6:#![feature(rustc_attrs)]
tests/ui/mir/issue-92893.stderr:22:   = help: add `#![feature(let_chains)]` to the crate attributes to enable
tests/ui/mir/mir_codegen_calls.rs:2:#![feature(fn_traits, test)]
tests/ui/mir/mir_coercions.rs:2:#![feature(coerce_unsized, unsize)]
tests/ui/mir/issue-99852.rs:3:#![feature(let_chains)]
tests/ui/mir/mir_ascription_coercion.rs:4:#![feature(type_ascription)]
tests/ui/mir/issue-68841.rs:5:#![feature(async_closure)]
tests/ui/mir/issue-75053.rs:3:#![feature(type_alias_impl_trait, rustc_attrs)]
tests/ui/mir/issue-83499-input-output-iteration-ice.rs:3:#![feature(c_variadic)]
tests/ui/mir/mir_match_test.rs:1:#![feature(exclusive_range_pattern)]
tests/ui/mir/unsize-trait.rs:5:#![feature(unsize)]
tests/ui/mir/mir_fat_ptr_drop.rs:3:#![allow(stable_features)]
tests/ui/mir/mir_fat_ptr_drop.rs:7:#![feature(braced_empty_structs)]
tests/ui/mir/mir_fat_ptr_drop.rs:8:#![feature(rustc_attrs)]
tests/ui/mir/checks_without_panic_impl.rs:10:#![feature(lang_items)]
tests/ui/mir/checks_without_panic_impl.rs:11:#![feature(no_core)]
tests/ui/infinite/infinite-trait-alias-recursion.rs:1:#![feature(trait_alias)]
tests/ui/foreign/foreign-fn-linkname.rs:5:#![feature(rustc_private)]
tests/ui/foreign/foreign2.rs:5:#![feature(rustc_private)]
tests/ui/env-funky-keys.rs:12:#![feature(rustc_private)]
tests/ui/coinduction/canonicalization-rerun.rs:34:#![feature(rustc_attrs)]
tests/ui/check-cfg/diagnotics.stderr:5:   |       ^^^^^^ help: there is a config with a similar name: `feature`
tests/ui/check-cfg/diagnotics.stderr:7:   = help: expected values for `feature` are: `foo`
tests/ui/check-cfg/diagnotics.stderr:16:   = help: expected values for `feature` are: `foo`
tests/ui/check-cfg/diagnotics.stderr:19:LL | #[cfg(feature = "foo")]
tests/ui/check-cfg/diagnotics.stderr:28:   = help: expected values for `feature` are: `foo`
tests/ui/check-cfg/diagnotics.stderr:31:LL | #[cfg(feature = "foo")]
tests/ui/check-cfg/mix.stderr:12:LL | #[cfg(feature)]
tests/ui/check-cfg/mix.stderr:15:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:20:LL | #[cfg(feature = "bar")]
tests/ui/check-cfg/mix.stderr:23:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:28:LL | #[cfg(feature = "zebra")]
tests/ui/check-cfg/mix.stderr:31:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:39:warning: unexpected condition value `bar` for condition name `feature`
tests/ui/check-cfg/mix.stderr:56:LL |     cfg!(feature = "bar");
tests/ui/check-cfg/mix.stderr:59:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:64:LL |     cfg!(feature = "zebra");
tests/ui/check-cfg/mix.stderr:67:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:90:LL |     cfg!(any(feature = "bad", windows));
tests/ui/check-cfg/mix.stderr:93:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:134:LL |     cfg!(any(unix, feature = "zebra"));
tests/ui/check-cfg/mix.stderr:137:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:142:LL |     cfg!(any(xxx, feature = "zebra"));
tests/ui/check-cfg/mix.stderr:148:LL |     cfg!(any(xxx, feature = "zebra"));
tests/ui/check-cfg/mix.stderr:151:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:168:LL |     cfg!(all(feature = "zebra", feature = "zebra", feature = "zebra"));
tests/ui/check-cfg/mix.stderr:171:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:176:LL |     cfg!(all(feature = "zebra", feature = "zebra", feature = "zebra"));
tests/ui/check-cfg/mix.stderr:179:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/mix.stderr:184:LL |     cfg!(all(feature = "zebra", feature = "zebra", feature = "zebra"));
tests/ui/check-cfg/mix.stderr:187:   = note: expected values for `feature` are: `foo`
tests/ui/check-cfg/compact-values.rs:6:#![feature(cfg_target_compact)]
tests/ui/check-cfg/no-values.stderr:4:LL | #[cfg(feature = "foo")]
tests/ui/check-cfg/no-values.stderr:9:   = note: no expected value for `feature`
tests/ui/check-cfg/well-known-names.stderr:14:LL | #[cfg(features = "foo")]
tests/ui/check-cfg/well-known-names.stderr:17:   |       help: there is a config with a similar name: `feature`
tests/ui/check-cfg/values-target-json.rs:7:#![feature(lang_items, no_core, auto_traits)]
tests/ui/check-cfg/diagnotics.rs:2:// compile-flags: --check-cfg=names() --check-cfg=values(feature,"foo") --check-cfg=values(no_values) -Z unstable-options
tests/ui/check-cfg/diagnotics.rs:6:fn feature() {}
tests/ui/check-cfg/diagnotics.rs:10:fn feature() {}
tests/ui/check-cfg/diagnotics.rs:14:fn feature() {}
tests/ui/check-cfg/diagnotics.rs:16:#[cfg(feature = "foo")]
tests/ui/check-cfg/diagnotics.rs:17:fn feature() {}
tests/ui/check-cfg/invalid-cfg-value.stderr:4:LL | #[cfg(feature = "sedre")]
tests/ui/check-cfg/invalid-cfg-value.stderr:9:   = note: expected values for `feature` are: `full`, `serde`
tests/ui/check-cfg/invalid-cfg-value.stderr:15:LL | #[cfg(feature = "rand")]
tests/ui/check-cfg/invalid-cfg-value.stderr:18:   = note: expected values for `feature` are: `full`, `serde`
tests/ui/check-cfg/invalid-cfg-value.stderr:20:warning: unexpected condition value `rand` for condition name `feature`
tests/ui/check-cfg/invalid-cfg-value.rs:5:// compile-flags: --check-cfg=values(feature,"serde","full") --cfg=feature="rand" -Z unstable-options
tests/ui/check-cfg/invalid-cfg-value.rs:7:#[cfg(feature = "sedre")]
tests/ui/check-cfg/invalid-cfg-value.rs:11:#[cfg(feature = "serde")]
tests/ui/check-cfg/invalid-cfg-value.rs:14:#[cfg(feature = "rand")]
tests/ui/check-cfg/no-values.rs:4:// compile-flags: --check-cfg=values(test) --check-cfg=values(feature) -Z unstable-options
tests/ui/check-cfg/no-values.rs:6:#[cfg(feature = "foo")]
tests/ui/check-cfg/well-known-names.rs:13:#[cfg(features = "foo")]
tests/ui/check-cfg/well-known-names.rs:15:fn feature_misspell() {}
tests/ui/check-cfg/well-known-names.rs:17:#[cfg(feature = "foo")]
tests/ui/check-cfg/well-known-names.rs:18:fn feature() {}
tests/ui/check-cfg/compact-names.rs:6:#![feature(cfg_target_compact)]
tests/ui/check-cfg/mix.rs:6:// compile-flags: --check-cfg=names() --check-cfg=values(feature,"foo") --cfg feature="bar" --cfg unknown_name -Z unstable-options
tests/ui/check-cfg/mix.rs:15:#[cfg(feature)]
tests/ui/check-cfg/mix.rs:17:fn no_feature() {}
tests/ui/check-cfg/mix.rs:19:#[cfg(feature = "foo")]
tests/ui/check-cfg/mix.rs:22:#[cfg(feature = "bar")]
tests/ui/check-cfg/mix.rs:26:#[cfg(feature = "zebra")]
tests/ui/check-cfg/mix.rs:34:#[cfg_attr(feature = "foo", no_mangle)]
tests/ui/check-cfg/mix.rs:41:    cfg!(feature = "foo");
tests/ui/check-cfg/mix.rs:42:    cfg!(feature = "bar");
tests/ui/check-cfg/mix.rs:44:    cfg!(feature = "zebra");
tests/ui/check-cfg/mix.rs:52:    cfg!(any(feature = "bad", windows));
tests/ui/check-cfg/mix.rs:64:    cfg!(any(unix, feature = "zebra"));
tests/ui/check-cfg/mix.rs:66:    cfg!(any(xxx, feature = "zebra"));
tests/ui/check-cfg/mix.rs:72:    cfg!(all(feature = "zebra", feature = "zebra", feature = "zebra"));
tests/ui/consts/const-fn-type-name-any.rs:3:#![feature(const_type_name)]
tests/ui/consts/const_let_eq_float.rs:3:#![feature(const_fn_floating_point_arithmetic)]
tests/ui/consts/constifconst-call-in-const-position.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/consts/constifconst-call-in-const-position.stderr:4:LL | #![feature(const_trait_impl, generic_const_exprs)]
tests/ui/consts/constifconst-call-in-const-position.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/consts/issue-73976-polymorphic.rs:8:#![feature(const_type_id)]
tests/ui/consts/issue-73976-polymorphic.rs:9:#![feature(const_type_name)]
tests/ui/consts/const-endianess.rs:2:#![feature(test)]
tests/ui/consts/const-blocks/fn-call-in-const.rs:3:#![feature(inline_const)]
tests/ui/consts/const-unwrap.rs:3:#![feature(const_option)]
tests/ui/consts/qualif-indirect-mutation-pass.rs:3:#![feature(const_mut_refs)]
tests/ui/consts/qualif-indirect-mutation-pass.rs:4:#![feature(const_precise_live_drops)]
tests/ui/consts/issue-68542-closure-in-array-len.stderr:23:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/ptr_comparisons.rs:7:#![feature(
tests/ui/consts/unwind-abort.rs:3:#![feature(c_unwind, const_extern_fn)]
tests/ui/consts/validate_never_arrays.rs:4:#![feature(never_type)]
tests/ui/consts/const-typeid-of-rpass.rs:2:#![feature(const_type_id)]
tests/ui/consts/const-typeid-of-rpass.rs:3:#![feature(core_intrinsics)]
tests/ui/consts/const-multi-ref.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-multi-ref.stderr:17:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/consts/intrinsic_without_const_stab_fail.rs:1:#![feature(intrinsics, staged_api)]
tests/ui/consts/intrinsic_without_const_stab_fail.rs:2:#![stable(feature = "core", since = "1.6.0")]
tests/ui/consts/intrinsic_without_const_stab_fail.rs:8:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/intrinsic_without_const_stab_fail.rs:9:#[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
tests/ui/consts/const-address-of-mut.rs:1:#![feature(raw_ref_op)]
tests/ui/consts/const_discriminant.rs:2:#![feature(const_discriminant)]
tests/ui/consts/constifconst-call-in-const-position.rs:3:#![feature(const_trait_impl, generic_const_exprs)]
tests/ui/consts/fn_trait_refs.stderr:1:error[E0635]: unknown feature `const_fn_trait_ref_impls`
tests/ui/consts/fn_trait_refs.stderr:4:LL | #![feature(const_fn_trait_ref_impls)]
tests/ui/consts/fn_trait_refs.stderr:7:error[E0635]: unknown feature `const_cmp`
tests/ui/consts/fn_trait_refs.stderr:10:LL | #![feature(const_cmp)]
tests/ui/consts/refs_check_const_value_eq-issue-88876.rs:3:#![allow(incomplete_features)]
tests/ui/consts/refs_check_const_value_eq-issue-88876.rs:4:#![feature(adt_const_params)]
tests/ui/consts/issue-90870.stderr:8:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/issue-90870.stderr:21:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/issue-90870.stderr:34:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/issue-94675.rs:1:#![feature(const_trait_impl, const_mut_refs)]
tests/ui/consts/static_mut_containing_mut_ref2.rs:3:#![cfg_attr(mut_refs, feature(const_mut_refs))]
tests/ui/consts/stable-precise-live-drops-in-libcore.rs:1:#![stable(feature = "core", since = "1.6.0")]
tests/ui/consts/stable-precise-live-drops-in-libcore.rs:2:#![feature(staged_api)]
tests/ui/consts/stable-precise-live-drops-in-libcore.rs:3:#![feature(const_precise_live_drops)]
tests/ui/consts/stable-precise-live-drops-in-libcore.rs:11:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/stable-precise-live-drops-in-libcore.rs:12:    #[rustc_const_stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/refs_check_const_eq-issue-88384.rs:1:#![feature(fn_traits)]
tests/ui/consts/refs_check_const_eq-issue-88384.rs:2:#![feature(adt_const_params)]
tests/ui/consts/refs_check_const_eq-issue-88384.rs:3://~^ WARNING the feature `adt_const_params` is incomplete
tests/ui/consts/const-address-of.rs:3:#![feature(raw_ref_op)]
tests/ui/consts/issue-79137-toogeneric.rs:3:#![feature(variant_count)]
tests/ui/consts/issue-90870.fixed:11:    //~| HELP: add `#![feature(const_trait_impl)]`
tests/ui/consts/issue-90870.fixed:18:    //~| HELP: add `#![feature(const_trait_impl)]`
tests/ui/consts/issue-90870.fixed:26:        //~| HELP: add `#![feature(const_trait_impl)]`
tests/ui/consts/drop_zst.rs:3:#![feature(const_precise_live_drops)]
tests/ui/consts/issue-44415.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const_fn_floating_point_arithmetic.stock.stderr:8:   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable
tests/ui/consts/const_fn_floating_point_arithmetic.stock.stderr:17:   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable
tests/ui/consts/const_fn_floating_point_arithmetic.stock.stderr:26:   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable
tests/ui/consts/const_fn_floating_point_arithmetic.stock.stderr:35:   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable
tests/ui/consts/const_fn_floating_point_arithmetic.stock.stderr:44:   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable
tests/ui/consts/issue-104396.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/consts/issue-104396.stderr:4:LL | #![feature(generic_const_exprs)]
tests/ui/consts/issue-104396.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/consts/intrinsic_without_const_stab.rs:1:#![feature(intrinsics, staged_api)]
tests/ui/consts/intrinsic_without_const_stab.rs:2:#![stable(feature = "core", since = "1.6.0")]
tests/ui/consts/intrinsic_without_const_stab.rs:4:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/intrinsic_without_const_stab.rs:5:#[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
tests/ui/consts/trait_specialization.stderr:1:warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/consts/trait_specialization.stderr:4:LL | #![feature(specialization)]
tests/ui/consts/trait_specialization.stderr:9:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/consts/try-operator.stderr:1:error[E0635]: unknown feature `const_convert`
tests/ui/consts/try-operator.stderr:4:LL | #![feature(const_convert)]
tests/ui/consts/bswap-const.rs:3:#![feature(core_intrinsics)]
tests/ui/consts/promoted_const_call2.rs:1:#![feature(const_precise_live_drops)]
tests/ui/consts/const_in_pattern/reject_non_structural.rs:11:#![feature(type_ascription)]
tests/ui/consts/const_in_pattern/accept_structural.rs:17:#![feature(type_ascription)]
tests/ui/consts/issue-56164.stderr:23:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/write_to_static_via_mut_ref.rs:1:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/unwind-abort.rs:1:#![feature(c_unwind, const_extern_fn)]
tests/ui/consts/const-eval/issue-91827-extern-types.rs:6:#![feature(extern_types)]
tests/ui/consts/const-eval/panic-assoc-never-type.rs:4:#![feature(never_type)]
tests/ui/consts/const-eval/ub-enum.rs:5:#![feature(never_type)]
tests/ui/consts/const-eval/const_panic_stability.rs:6:#![stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/const-eval/const_panic_stability.rs:7:#![feature(staged_api)]
tests/ui/consts/const-eval/const_panic_stability.rs:9:#[stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/const-eval/const_panic_stability.rs:10:#[rustc_const_stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/const-eval/index-out-of-bounds-never-type.rs:5:#![feature(never_type)]
tests/ui/consts/const-eval/panic-never-type.rs:2:#![feature(never_type)]
tests/ui/consts/const-eval/nrvo.rs:6:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/dont_promote_unstable_const_fn.stderr:7:   = help: add `#![feature(foo)]` to the crate attributes to enable
tests/ui/consts/const-eval/size-of-t.stderr:8:   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions
tests/ui/consts/const-eval/ub-nonnull.rs:4:#![feature(rustc_attrs, ptr_metadata)]
tests/ui/consts/const-eval/simd/insert_extract.rs:2:#![feature(repr_simd)]
tests/ui/consts/const-eval/simd/insert_extract.rs:3:#![feature(platform_intrinsics)]
tests/ui/consts/const-eval/simd/insert_extract.rs:4:#![feature(staged_api)]
tests/ui/consts/const-eval/simd/insert_extract.rs:5:#![stable(feature = "foo", since = "1.3.37")]
tests/ui/consts/const-eval/simd/insert_extract.rs:15:    #[rustc_const_stable(feature = "foo", since = "1.3.37")]
tests/ui/consts/const-eval/simd/insert_extract.rs:17:    #[rustc_const_stable(feature = "foo", since = "1.3.37")]
tests/ui/consts/const-eval/dont_promote_unstable_const_fn.rs:1:#![unstable(feature = "humans",
tests/ui/consts/const-eval/dont_promote_unstable_const_fn.rs:6:#![feature(staged_api)]
tests/ui/consts/const-eval/dont_promote_unstable_const_fn.rs:8:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/const-eval/dont_promote_unstable_const_fn.rs:9:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/ui/consts/const-eval/const_fn_ptr_fail2.stderr:37:help: skipping check that does not even have a feature gate
tests/ui/consts/const-eval/const-eval-intrinsic-promotion.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/partial_ptr_overwrite.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/issue-65394.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-eval/issue-55541.rs:5:#![feature(extern_types)]
tests/ui/consts/const-eval/const_panic_libcore_bin.rs:2:#![feature(lang_items)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.rs:2:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.rs:3:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_transient.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_transient.rs:3:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_transient.rs:4:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs:2:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs:3:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_untyped.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_untyped.rs:2:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_untyped.rs:3:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs:2:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs:3:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.rs:2:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic.rs:3:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic.rs:4:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs:3:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs:4:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:3:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:4:#![feature(inline_const)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_zero_sized.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_zero_sized.rs:3:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_zero_sized.rs:4:#![feature(inline_const)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.rs:2:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs:3:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs:4:#![feature(const_heap)]
tests/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs:5:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/const_fn_ptr.stderr:3:help: skipping check that does not even have a feature gate
tests/ui/consts/const-eval/const_fn_ptr.stderr:8:help: skipping check that does not even have a feature gate
tests/ui/consts/const-eval/const_fn_ptr.stderr:13:help: skipping check that does not even have a feature gate
tests/ui/consts/const-eval/ub-slice-get-unchecked.rs:3:#![feature(const_slice_index)]
tests/ui/consts/const-eval/const_fn_target_feature.stderr:2:  --> $DIR/const_fn_target_feature.rs:10:24
tests/ui/consts/const-eval/const_fn_target_feature.stderr:5:   |                        ^^^^^^^^^ calling a function that requires unavailable target features: avx2
tests/ui/consts/const-eval/extern_fat_pointer.rs:3:#![feature(extern_types)]
tests/ui/consts/const-eval/const_fn_ptr_fail.stderr:3:help: skipping check that does not even have a feature gate
tests/ui/consts/const-eval/raw-bytes.rs:6:#![feature(never_type, rustc_attrs, ptr_metadata, slice_from_ptr_range, const_slice_from_ptr_range)]
tests/ui/consts/const-eval/const_fn_target_feature.rs:2:// compile-flags:-C target-feature=+ssse3
tests/ui/consts/const-eval/const_fn_target_feature.rs:13:#[target_feature(enable = "ssse3")]
tests/ui/consts/const-eval/const_fn_target_feature.rs:16:#[target_feature(enable = "avx2")]
tests/ui/consts/const-eval/transmute-size-mismatch.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-eval/transmute-size-mismatch.rs:2:#![feature(custom_mir)]
tests/ui/consts/const-eval/mod-static-with-const-fn.rs:4:#![feature(const_mut_refs)]
tests/ui/consts/const-eval/auxiliary/stability.rs:4:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/const-eval/auxiliary/stability.rs:6:#![feature(staged_api)]
tests/ui/consts/const-eval/auxiliary/stability.rs:8:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/const-eval/auxiliary/stability.rs:9:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/ui/consts/const-eval/ub-enum-overwrite.rs:1:#![feature(const_mut_refs)]
tests/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs:1:// Check that `const extern fn` and `const unsafe extern fn` are feature-gated
tests/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr:2:  --> $DIR/feature-gate-const_extern_fn.rs:7:14
tests/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr:8:   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable
tests/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr:11:  --> $DIR/feature-gate-const_extern_fn.rs:11:21
tests/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr:17:   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable
tests/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.rs:1:#![feature(const_extern_fn)]
tests/ui/consts/const-extern-fn/const-extern-fn.rs:2:#![feature(const_extern_fn)]
tests/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs:4:#![feature(const_extern_fn)]
tests/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs:1:#![feature(const_extern_fn)]
tests/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr:8:   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable
tests/ui/consts/const-block-const-bound.rs:2:#![feature(const_trait_impl, inline_const, negative_impls)]
tests/ui/consts/rustc-const-stability-require-const.rs:2:#![feature(staged_api)]
tests/ui/consts/rustc-const-stability-require-const.rs:3:#![stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:5:#[stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:6:#[rustc_const_unstable(feature = "const_foo", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.rs:10:#[stable(feature = "bar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:11:#[rustc_const_stable(feature = "const_bar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:15:#[stable(feature = "potato", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:19:    #[stable(feature = "salad", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:20:    #[rustc_const_unstable(feature = "const_salad", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.rs:24:    #[stable(feature = "roasted", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:25:    #[rustc_const_unstable(feature = "const_roasted", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.rs:30:#[stable(feature = "bar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:31:#[rustc_const_stable(feature = "const_bar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:35:#[stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:36:#[rustc_const_unstable(feature = "const_foo", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.rs:41:#[stable(feature = "foobar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:42:#[rustc_const_unstable(feature = "foobar_const", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.rs:45:#[stable(feature = "barfoo", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.rs:46:#[rustc_const_stable(feature = "barfoo_const", since = "1.0.0")]
tests/ui/consts/const-fn-type-name.rs:3:#![feature(core_intrinsics)]
tests/ui/consts/const-fn-type-name.rs:4:#![feature(const_type_name)]
tests/ui/consts/std/cell.rs:1:#![feature(const_refs_to_cell)]
tests/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:2:#![feature(rustc_allow_const_fn_unstable)]
tests/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:4:#![feature(rustc_attrs, staged_api)]
tests/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:5:#![stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:7:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:8:#[rustc_const_stable(since="1.0.0", feature = "mep")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr:17:error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr:25:LL + #[rustc_const_unstable(feature = "...", issue = "...")]
tests/ui/consts/min_const_fn/address_of.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/address_of.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr:26:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr:35:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:1:#![unstable(feature = "humans",
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:6:#![feature(const_fn_floating_point_arithmetic, foo, foo2)]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:7:#![feature(staged_api)]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:9:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:10:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:14:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:18:#[unstable(feature = "foo2", issue = "none")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:21:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:22:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:26:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:27:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:28:// Const-stable functions cannot rely on unstable const-eval features.
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:30://~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:32:// check whether this function cannot be called even with the feature gate active
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:33:#[unstable(feature = "foo2", issue = "none")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs:37:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/address_of_const.rs:3:#![feature(raw_ref_op)]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:1:#![unstable(feature = "humans",
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:6:#![feature(foo, foo2)]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:7:#![feature(staged_api)]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:9:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:10:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:14:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:18:#[unstable(feature = "foo2", issue = "none")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:21:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:22:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:26:// check whether this function cannot be called even with the feature gate active
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:27:#[unstable(feature = "foo2", issue = "none")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:30:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs:31:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:1:#![unstable(feature = "humans",
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:6:#![feature(const_fn_floating_point_arithmetic, foo, foo2)]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:7:#![feature(staged_api)]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:9:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:10:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:13:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:14:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:18:#[unstable(feature = "foo2", issue = "none")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:21:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:22:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:26:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:27:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:30://~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:32:// check whether this function cannot be called even with the feature gate active
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:33:#[unstable(feature = "foo2", issue = "none")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:36:#[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs:37:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr:17:error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`
tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr:25:LL + #[rustc_const_unstable(feature = "...", issue = "...")]
tests/ui/consts/min_const_fn/address_of.rs:1:#![feature(raw_ref_op)]
tests/ui/consts/min_const_fn/min_const_fn.stderr:16:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:25:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:34:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:51:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:60:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:69:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:86:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:95:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:104:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:113:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:122:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:131:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/min_const_fn.stderr:192:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/mutable_borrow.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/min_const_fn/mutable_borrow.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-ptr-nonnull-rpass.rs:3:#![feature(ptr_internals, test)]
tests/ui/consts/const-needs_drop-monomorphic.rs:2:#![feature(generic_const_exprs)]
tests/ui/consts/const-needs_drop-monomorphic.rs:4:#![allow(incomplete_features)]
tests/ui/consts/async-block.without_feature.stderr:8:   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable
tests/ui/consts/async-block.without_feature.stderr:17:   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable
tests/ui/consts/const-address-of-interior-mut.rs:1:#![feature(raw_ref_op)]
tests/ui/consts/static_mut_containing_mut_ref2.stock.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/issue-73976-monomorphic.rs:8:#![feature(const_type_id)]
tests/ui/consts/issue-73976-monomorphic.rs:9:#![feature(const_type_name)]
tests/ui/consts/issue-73976-monomorphic.rs:10:#![feature(const_trait_impl)]
tests/ui/consts/gate-do-not-const-check.stderr:7:   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable
tests/ui/consts/assert-type-intrinsics.rs:1:#![feature(never_type)]
tests/ui/consts/assert-type-intrinsics.rs:2:#![feature(const_assert_type2)]
tests/ui/consts/assert-type-intrinsics.rs:3:#![feature(core_intrinsics)]
tests/ui/consts/const-err2.rs:12:#![feature(rustc_attrs)]
tests/ui/consts/issue-50439.rs:1:#![feature(specialization)]
tests/ui/consts/issue-50439.rs:2:#![allow(incomplete_features)]
tests/ui/consts/const-fn.rs:2:#![allow(stable_features)]
tests/ui/consts/const-fn.rs:6:#![feature(const_indexing)]
tests/ui/consts/const-try.rs:6:#![feature(try_trait_v2)]
tests/ui/consts/const-try.rs:7:#![feature(const_trait_impl)]
tests/ui/consts/const-try.rs:8:#![feature(const_try)]
tests/ui/consts/unstable-const-fn-in-libcore.rs:3:// const-qualification could miss some `const fn`s if they were unstable and the feature
tests/ui/consts/unstable-const-fn-in-libcore.rs:6:#![stable(feature = "core", since = "1.6.0")]
tests/ui/consts/unstable-const-fn-in-libcore.rs:7:#![feature(staged_api, const_trait_impl)]
tests/ui/consts/unstable-const-fn-in-libcore.rs:15:    #[rustc_const_unstable(feature = "foo", issue = "none")]
tests/ui/consts/unstable-const-fn-in-libcore.rs:16:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/rustc-impl-const-stability.rs:4:#![feature(staged_api)]
tests/ui/consts/rustc-impl-const-stability.rs:5:#![feature(const_trait_impl)]
tests/ui/consts/rustc-impl-const-stability.rs:6:#![stable(feature = "foo", since = "1.0.0")]
tests/ui/consts/rustc-impl-const-stability.rs:8:#[stable(feature = "potato", since = "1.27.0")]
tests/ui/consts/rustc-impl-const-stability.rs:13:#[stable(feature = "potato", since = "1.27.0")]
tests/ui/consts/rustc-impl-const-stability.rs:14:#[rustc_const_unstable(feature = "data_foo", issue = "none")]
tests/ui/consts/const-size_of_val-align_of_val.rs:3:#![feature(const_size_of_val, const_align_of_val)]
tests/ui/consts/const-size_of_val-align_of_val.rs:4:#![feature(const_size_of_val_raw, const_align_of_val_raw, layout_for_ptr)]
tests/ui/consts/issue-94371.rs:3:#![feature(const_swap)]
tests/ui/consts/issue-94371.rs:4:#![feature(const_mut_refs)]
tests/ui/consts/promotion-mutable-ref.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/const-for-feature-gate.stderr:2:  --> $DIR/const-for-feature-gate.rs:4:5
tests/ui/consts/const-for-feature-gate.stderr:8:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/consts/offset_from.rs:3:#![feature(const_ptr_sub_ptr)]
tests/ui/consts/offset_from.rs:4:#![feature(ptr_sub_ptr)]
tests/ui/consts/const-fn-stability-calls-3.rs:1:// Test use of const fn from another crate without a feature gate.
tests/ui/consts/unstable-precise-live-drops-in-libcore.rs:3:#![stable(feature = "core", since = "1.6.0")]
tests/ui/consts/unstable-precise-live-drops-in-libcore.rs:4:#![feature(staged_api)]
tests/ui/consts/unstable-precise-live-drops-in-libcore.rs:5:#![feature(const_precise_live_drops)]
tests/ui/consts/unstable-precise-live-drops-in-libcore.rs:13:    #[stable(feature = "rust1", since = "1.0.0")]
tests/ui/consts/unstable-precise-live-drops-in-libcore.rs:14:    #[rustc_const_unstable(feature = "foo", issue = "none")]
tests/ui/consts/issue-79137-monomorphic.rs:5:#![feature(variant_count)]
tests/ui/consts/ptr_is_null.rs:4:#![feature(const_ptr_is_null)]
tests/ui/consts/invalid-inline-const-in-match-arm.stderr:23:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/const_fn_unsize.rs:2:#![feature(slice_ptr_len)]
tests/ui/consts/async-block.rs:4:// revisions: with_feature without_feature
tests/ui/consts/async-block.rs:6:#![feature(rustc_attrs)]
tests/ui/consts/async-block.rs:7:#![cfg_attr(with_feature, feature(const_async_blocks))]
tests/ui/consts/async-block.rs:13://[without_feature]~^ `async` block
tests/ui/consts/async-block.rs:16://[without_feature]~^ `async` block
tests/ui/consts/async-block.rs:19:fn main() {} //[with_feature]~ fatal error triggered by #[rustc_error]
tests/ui/consts/offset_from_ub.rs:1:#![feature(const_ptr_sub_ptr)]
tests/ui/consts/offset_from_ub.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-fn-not-in-trait.rs:2:// not a default is provided, and even with the feature gate.
tests/ui/consts/missing_span_in_backtrace.rs:4:#![feature(const_swap)]
tests/ui/consts/missing_span_in_backtrace.rs:5:#![feature(const_mut_refs)]
tests/ui/consts/write_to_mut_ref_dest.stock.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/write_to_mut_ref_dest.stock.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-mut-refs/const_mut_refs.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/const-mut-refs/mut_ref_in_final.rs:1:#![feature(const_mut_refs)]
tests/ui/consts/const-mut-refs/mut_ref_in_final.rs:2:#![feature(raw_ref_op)]
tests/ui/consts/const-mut-refs/issue-76510.32bit.stderr:14:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-mut-refs/issue-76510.64bit.stderr:14:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-mut-refs/feature-gate-const_mut_refs.stderr:2:  --> $DIR/feature-gate-const_mut_refs.rs:5:14
tests/ui/consts/const-mut-refs/feature-gate-const_mut_refs.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs:1:#![feature(const_mut_refs)]
tests/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs:2:#![feature(raw_ref_op)]
tests/ui/consts/const-mut-refs/const_mut_address_of.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/const-mut-refs/const_mut_address_of.rs:3:#![feature(raw_ref_op)]
tests/ui/consts/issue-103790.stderr:53:LL | / #![feature(generic_const_exprs)]
tests/ui/consts/issue-103790.stderr:54:LL | | #![allow(incomplete_features)]
tests/ui/consts/const-points-to-static.64bit.stderr:14:help: skipping check that does not even have a feature gate
tests/ui/consts/const_let_assign3.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const_let_assign3.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const_let_assign3.stderr:26:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/try-operator.rs:3:#![feature(try_trait_v2)]
tests/ui/consts/try-operator.rs:4:#![feature(const_trait_impl)]
tests/ui/consts/try-operator.rs:5:#![feature(const_try)]
tests/ui/consts/try-operator.rs:6:#![feature(const_convert)]
tests/ui/consts/const_cmp_type_id.rs:2:#![feature(const_type_id)]
tests/ui/consts/const_cmp_type_id.rs:3:#![feature(const_trait_impl)]
tests/ui/consts/issue-69488.rs:3:#![feature(const_ptr_write)]
tests/ui/consts/issue-69488.rs:4:#![feature(const_mut_refs)]
tests/ui/consts/write_to_mut_ref_dest.rs:4:#![cfg_attr(mut_refs, feature(const_mut_refs))]
tests/ui/consts/issue-28113.stderr:23:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/issue-29914.rs:2:#![allow(stable_features)]
tests/ui/consts/issue-29914.rs:4:#![feature(const_indexing)]
tests/ui/consts/const_fn_floating_point_arithmetic.rs:5:#![feature(rustc_attrs)]
tests/ui/consts/const_fn_floating_point_arithmetic.rs:6:#![cfg_attr(gated, feature(const_fn_floating_point_arithmetic))]
tests/ui/consts/control-flow/drop-pass.rs:5:#![cfg_attr(precise, feature(const_precise_live_drops))]
tests/ui/consts/control-flow/try.stderr:8:   = help: add `#![feature(const_try)]` to the crate attributes to enable
tests/ui/consts/control-flow/drop-precise.rs:4:#![feature(const_precise_live_drops)]
tests/ui/consts/control-flow/drop-fail.rs:3:#![cfg_attr(precise, feature(const_precise_live_drops))]
tests/ui/consts/control-flow/loop.stderr:10:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/consts/control-flow/loop.stderr:21:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/consts/const-try-feature-gate.stderr:2:  --> $DIR/const-try-feature-gate.rs:4:5
tests/ui/consts/const-try-feature-gate.stderr:8:   = help: add `#![feature(const_try)]` to the crate attributes to enable
tests/ui/consts/const-address-of-mut.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-address-of-mut.stderr:17:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-address-of-mut.stderr:26:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-address-of-mut.stderr:35:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-for.rs:1:#![feature(const_for)]
tests/ui/consts/const-for.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/fn_trait_refs.rs:3:#![feature(const_fn_trait_ref_impls)]
tests/ui/consts/fn_trait_refs.rs:4:#![feature(fn_traits)]
tests/ui/consts/fn_trait_refs.rs:5:#![feature(unboxed_closures)]
tests/ui/consts/fn_trait_refs.rs:6:#![feature(const_trait_impl)]
tests/ui/consts/fn_trait_refs.rs:7:#![feature(const_mut_refs)]
tests/ui/consts/fn_trait_refs.rs:8:#![feature(const_cmp)]
tests/ui/consts/fn_trait_refs.rs:9:#![feature(const_refs_to_cell)]
tests/ui/consts/const-points-to-static.32bit.stderr:14:help: skipping check that does not even have a feature gate
tests/ui/consts/promoted_const_call.rs:1:#![feature(const_mut_refs)]
tests/ui/consts/promoted_const_call.rs:2:#![feature(const_trait_impl)]
tests/ui/consts/qualif-indirect-mutation-fail.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/qualif-indirect-mutation-fail.rs:3:#![feature(const_precise_live_drops)]
tests/ui/consts/qualif-indirect-mutation-fail.rs:4:#![feature(const_swap)]
tests/ui/consts/qualif-indirect-mutation-fail.rs:5:#![feature(raw_ref_op)]
tests/ui/consts/refs_check_const_eq-issue-88384.stderr:1:warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/consts/refs_check_const_eq-issue-88384.stderr:4:LL | #![feature(adt_const_params)]
tests/ui/consts/refs_check_const_eq-issue-88384.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/consts/const-float-classify.rs:4:#![feature(const_float_bits_conv)]
tests/ui/consts/const-float-classify.rs:5:#![feature(const_float_classify)]
tests/ui/consts/const-float-classify.rs:6:#![feature(const_trait_impl)]
tests/ui/consts/promoted_const_call5.rs:1:#![feature(rustc_attrs)]
tests/ui/consts/promoted_const_call5.rs:2:#![feature(staged_api)]
tests/ui/consts/promoted_const_call5.rs:3:#![stable(feature = "a", since = "1.0.0")]
tests/ui/consts/promoted_const_call5.rs:6:#[stable(feature = "a", since = "1.0.0")]
tests/ui/consts/promoted_const_call5.rs:7:#[rustc_const_stable(feature = "a", since = "1.0.0")]
tests/ui/consts/promoted_const_call5.rs:11:#[stable(feature = "a", since = "1.0.0")]
tests/ui/consts/promoted_const_call5.rs:12:#[rustc_const_stable(feature = "a", since = "1.0.0")]
tests/ui/consts/promoted_const_call5.rs:18:#[stable(feature = "a", since = "1.0.0")]
tests/ui/consts/promoted_const_call5.rs:19:#[rustc_const_stable(feature = "a", since = "1.0.0")]
tests/ui/consts/const-fn-error.stderr:14:   = help: add `#![feature(const_for)]` to the crate attributes to enable
tests/ui/consts/const-fn-error.stderr:25:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/const-fn-error.stderr:34:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/const-fn-error.stderr:43:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/trait_specialization.rs:8:#![feature(specialization)] //~ WARN the feature `specialization` is incomplete
tests/ui/consts/copy-intrinsic.rs:1:#![stable(feature = "dummy", since = "1.0.0")]
tests/ui/consts/copy-intrinsic.rs:4:#![feature(intrinsics, staged_api)]
tests/ui/consts/copy-intrinsic.rs:5:#![feature(const_mut_refs)]
tests/ui/consts/copy-intrinsic.rs:9:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
tests/ui/consts/copy-intrinsic.rs:12:    #[rustc_const_stable(feature = "const_intrinsic_copy", since = "1.63.0")]
tests/ui/consts/miri_unleashed/abi-mismatch.rs:4:#![feature(const_extern_fn)]
tests/ui/consts/miri_unleashed/mutable_references_err.32bit.stderr:36:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references_err.32bit.stderr:41:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references_err.32bit.stderr:46:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs:4:#![feature(exclusive_range_pattern, half_open_range_patterns_in_slices)]
tests/ui/consts/miri_unleashed/mutable_references_err.64bit.stderr:36:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references_err.64bit.stderr:41:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references_err.64bit.stderr:46:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/ptr_arith.stderr:18:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/non_const_fn.stderr:9:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/assoc_const.stderr:30:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/tls.stderr:15:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/tls.stderr:20:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/raw_mutable_const.stderr:11:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/box.stderr:9:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/box.stderr:14:help: skipping check for `const_mut_refs` feature
tests/ui/consts/miri_unleashed/box.stderr:19:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references.stderr:9:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references.stderr:14:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references.stderr:19:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references.stderr:24:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/mutable_references.stderr:29:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.stderr:2:  --> $DIR/feature-gate-unleash_the_miri_inside_of_you.rs:9:20
tests/ui/consts/miri_unleashed/inline_asm.stderr:9:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:43:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:48:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:53:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:58:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:63:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:68:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr:73:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/slice_eq.rs:4:#![feature(const_raw_ptr_comparison)]
tests/ui/consts/miri_unleashed/ptr_arith.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/miri_unleashed/abi-mismatch.stderr:20:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:43:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:48:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:53:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:58:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:63:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:68:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr:73:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:61:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:66:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:71:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:76:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:81:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:86:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:91:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:96:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:101:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr:106:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:61:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:66:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:71:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:76:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:81:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:86:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:91:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:96:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:101:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr:106:help: skipping check that does not even have a feature gate
tests/ui/consts/miri_unleashed/tls.rs:2:#![feature(thread_local)]
tests/ui/consts/miri_unleashed/drop.stderr:16:help: skipping check that does not even have a feature gate
tests/ui/consts/promoted-const-drop.rs:1:#![feature(const_trait_impl)]
tests/ui/consts/promoted-const-drop.rs:2:#![feature(const_mut_refs)]
tests/ui/consts/const-float-bits-conv.rs:4:#![feature(const_float_bits_conv)]
tests/ui/consts/const-float-bits-conv.rs:5:#![feature(const_float_classify)]
tests/ui/consts/precise-drop-with-promoted.rs:4:#![feature(const_precise_live_drops)]
tests/ui/consts/const-size_of_val-align_of_val-extern-type.rs:1:#![feature(extern_types)]
tests/ui/consts/const-size_of_val-align_of_val-extern-type.rs:2:#![feature(core_intrinsics)]
tests/ui/consts/const-size_of_val-align_of_val-extern-type.rs:3:#![feature(const_size_of_val, const_align_of_val)]
tests/ui/consts/const-address-of-interior-mut.stderr:8:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/consts/const-address-of-interior-mut.stderr:17:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/consts/const-address-of-interior-mut.stderr:26:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/consts/const-address-of-interior-mut.stderr:35:   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable
tests/ui/consts/const-float-bits-reject-conv.rs:3:#![feature(const_float_bits_conv)]
tests/ui/consts/const-float-bits-reject-conv.rs:4:#![feature(const_float_classify)]
tests/ui/consts/const-suggest-feature.rs:4:    //~| HELP add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/invalid-inline-const-in-match-arm.rs:1:#![allow(incomplete_features)]
tests/ui/consts/invalid-inline-const-in-match-arm.rs:2:#![feature(inline_const_pat)]
tests/ui/consts/issue-103790.rs:1:#![feature(generic_const_exprs)]
tests/ui/consts/issue-103790.rs:2:#![allow(incomplete_features)]
tests/ui/consts/const-ptr-unique-rpass.rs:3:#![feature(ptr_internals, test)]
tests/ui/consts/const-ptr-unique.rs:1:#![feature(ptr_internals)]
tests/ui/consts/const-fn-stability-calls.rs:4:// Test use of const fn from another crate without a feature gate.
tests/ui/consts/closure-structural-match-issue-90013.rs:3:#![feature(inline_const)]
tests/ui/consts/const-int-unchecked.rs:1:#![feature(core_intrinsics)]
tests/ui/consts/const-int-unchecked.rs:2:#![feature(const_int_unchecked_arith)]
tests/ui/consts/rustc-const-stability-require-const.stderr:4:LL | #[rustc_const_unstable(feature = "const_foo", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.stderr:18:LL | #[rustc_const_stable(feature = "const_bar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.stderr:32:LL |     #[rustc_const_unstable(feature = "const_salad", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.stderr:46:LL |     #[rustc_const_unstable(feature = "const_roasted", issue = "none")]
tests/ui/consts/rustc-const-stability-require-const.stderr:60:LL | #[rustc_const_stable(feature = "const_bar", since = "1.0.0")]
tests/ui/consts/rustc-const-stability-require-const.stderr:74:LL | #[rustc_const_unstable(feature = "const_foo", issue = "none")]
tests/ui/consts/precise-drop-with-coverage.rs:7:#![feature(const_precise_live_drops)]
tests/ui/consts/invalid-union.rs:11:#![feature(const_mut_refs)]
tests/ui/consts/const-suggest-feature.stderr:2:  --> $DIR/const-suggest-feature.rs:2:5
tests/ui/consts/const-suggest-feature.stderr:8:   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable
tests/ui/consts/issue-102117.rs:1:#![feature(inline_const, const_type_id)]
tests/ui/consts/const-for.stderr:10:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/const-for.stderr:19:   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable
tests/ui/consts/const-int-pow-rpass.rs:3:#![feature(wrapping_next_power_of_two)]
tests/ui/consts/issue-90870.rs:11:    //~| HELP: add `#![feature(const_trait_impl)]`
tests/ui/consts/issue-90870.rs:18:    //~| HELP: add `#![feature(const_trait_impl)]`
tests/ui/consts/issue-90870.rs:26:        //~| HELP: add `#![feature(const_trait_impl)]`
tests/ui/consts/auxiliary/closure-in-foreign-crate.rs:2:#![feature(const_closures, const_trait_impl)]
tests/ui/consts/auxiliary/closure-in-foreign-crate.rs:3:#![allow(incomplete_features)]
tests/ui/consts/auxiliary/external_macro.rs:1:#![feature(allow_internal_unstable)]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:3:#![feature(staged_api, rustc_attrs)]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:4:#![stable(since="1.0.0", feature = "mep")]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:9:#[stable(since="1.0.0", feature = "mep")]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:10:#[rustc_const_stable(since="1.0.0", feature = "mep")]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:14:#[stable(since="1.0.0", feature = "mep")]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:18:    #[stable(since="1.0.0", feature = "mep")]
tests/ui/consts/auxiliary/promotable_const_fn_lib.rs:19:    #[rustc_const_stable(feature = "mep", since = "1.0.0")]
tests/ui/consts/issue-104396.rs:4:#![feature(generic_const_exprs)]
tests/ui/consts/issue-104396.rs:5://~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/consts/const-variant-count.rs:3:#![feature(variant_count)]
tests/ui/consts/const-variant-count.rs:4:#![feature(never_type)]
tests/ui/mir-dataflow/uninits-2.rs:3:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/mir-dataflow/liveness-ptr.rs:1:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/mir-dataflow/def-inits-1.rs:3:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/mir-dataflow/liveness-enum.rs:1:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/mir-dataflow/liveness-projection.rs:1:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/mir-dataflow/inits-1.rs:3:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/mir-dataflow/uninits-1.rs:3:#![feature(core_intrinsics, rustc_attrs)]
tests/ui/object-lifetime/object-lifetime-default.rs:1:#![feature(rustc_attrs)]
tests/ui/object-lifetime/object-lifetime-default-inferred.rs:8:#![feature(generic_arg_infer)]
tests/ui/for-loop-while/break-while-condition.rs:1:#![feature(never_type)]
tests/ui/for-loop-while/loop-break-value.rs:4:#![feature(never_type)]
tests/ui/for-loop-while/for-loop-no-std.rs:3:#![feature(lang_items, start)]
tests/ui/transmutability/abstraction/const_generic_fn.rs:5:#![feature(transmutability)]
tests/ui/transmutability/abstraction/const_generic_fn.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/abstraction/abstracted_assume.rs:6:#![feature(adt_const_params)]
tests/ui/transmutability/abstraction/abstracted_assume.rs:7:#![feature(transmutability)]
tests/ui/transmutability/abstraction/abstracted_assume.rs:8:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/should_reject_contraction.rs:4:#![feature(transmutability)]
tests/ui/transmutability/unions/should_reject_contraction.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/should_permit_intersecting_if_validity_is_assumed.rs:6:#![feature(transmutability)]
tests/ui/transmutability/unions/should_permit_intersecting_if_validity_is_assumed.rs:7:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/should_pad_variants.rs:5:#![feature(transmutability)]
tests/ui/transmutability/unions/should_reject_disjoint.rs:4:#![feature(transmutability)]
tests/ui/transmutability/unions/should_reject_disjoint.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/boolish.rs:4:#![feature(transmutability)]
tests/ui/transmutability/unions/boolish.rs:5:#![feature(marker_trait_attr)]
tests/ui/transmutability/unions/boolish.rs:7:#![allow(incomplete_features)]
tests/ui/transmutability/unions/should_reject_intersecting.rs:5:#![feature(transmutability)]
tests/ui/transmutability/unions/should_reject_intersecting.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/repr/should_require_well_defined_layout.rs:4:#![feature(transmutability)]
tests/ui/transmutability/unions/repr/should_require_well_defined_layout.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/repr/should_handle_align.rs:5:#![feature(transmutability)]
tests/ui/transmutability/unions/repr/should_handle_align.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/unions/repr/should_handle_packed.rs:5:#![feature(transmutability)]
tests/ui/transmutability/unions/repr/should_handle_packed.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/issue-110892.rs:2:#![feature(generic_const_exprs, transmutability)]
tests/ui/transmutability/issue-110892.rs:3:#![allow(incomplete_features)]
tests/ui/transmutability/visibility/assume/should_accept_if_dst_has_unreachable_field.rs:7:#![feature(transmutability)]
tests/ui/transmutability/visibility/assume/should_accept_if_dst_has_private_field.rs:6:#![feature(transmutability)]
tests/ui/transmutability/visibility/assume/should_accept_if_dst_has_private_variant.rs:6:#![feature(transmutability)]
tests/ui/transmutability/visibility/assume/should_accept_if_dst_has_tricky_unreachable_field.rs:12:#![feature(transmutability)]
tests/ui/transmutability/visibility/assume/should_accept_if_dst_has_unreachable_ty.rs:7:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_accept_if_src_has_unreachable_ty.rs:6:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_accept_if_src_has_private_variant.rs:6:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_reject_if_dst_has_private_field.rs:5:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_accept_if_src_has_unreachable_field.rs:6:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.rs:7:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_accept_if_src_has_private_field.rs:6:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.rs:7:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_reject_if_dst_has_tricky_unreachable_field.rs:18:#![feature(transmutability)]
tests/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.rs:5:#![feature(transmutability)]
tests/ui/transmutability/references/u8-to-unit.rs:2:#![feature(transmutability)]
tests/ui/transmutability/references/unit-to-u8.rs:2:#![feature(transmutability)]
tests/ui/transmutability/references/recursive-wrapper-types-bit-compatible-mut.rs:2:#![feature(transmutability)]
tests/ui/transmutability/references/recursive-wrapper-types-bit-compatible.rs:2:#![feature(transmutability)]
tests/ui/transmutability/references/recursive-wrapper-types.rs:2:#![feature(transmutability)]
tests/ui/transmutability/references/recursive-wrapper-types-bit-incompatible.rs:2:#![feature(transmutability)]
tests/ui/transmutability/references/unit-to-itself.rs:2:#![feature(transmutability)]
tests/ui/transmutability/malformed-program-gracefulness/unknown_src.rs:4:#![feature(transmutability)]
tests/ui/transmutability/malformed-program-gracefulness/unknown_src.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.rs:1:// The trait must not be available if its feature flag is absent.
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.rs:6://~^ ERROR use of unstable library feature 'transmutability' [E0658]
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.rs:9://~^ ERROR use of unstable library feature 'transmutability' [E0658]
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.stderr:1:error[E0658]: use of unstable library feature 'transmutability'
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.stderr:2:  --> $DIR/feature-missing.rs:5:5
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.stderr:8:   = help: add `#![feature(transmutability)]` to the crate attributes to enable
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.stderr:10:error[E0658]: use of unstable library feature 'transmutability'
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.stderr:11:  --> $DIR/feature-missing.rs:8:5
tests/ui/transmutability/malformed-program-gracefulness/feature-missing.stderr:17:   = help: add `#![feature(transmutability)]` to the crate attributes to enable
tests/ui/transmutability/malformed-program-gracefulness/unknown_src_field.rs:4:#![feature(transmutability)]
tests/ui/transmutability/malformed-program-gracefulness/unknown_src_field.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/malformed-program-gracefulness/unknown_dst.rs:4:#![feature(transmutability)]
tests/ui/transmutability/malformed-program-gracefulness/unknown_dst.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.rs:5:#![feature(adt_const_params)]
tests/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.rs:6:#![feature(generic_const_exprs)]
tests/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.rs:7:#![feature(transmutability)]
tests/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.rs:8:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/enums/should_respect_endianness.rs:5:#![feature(transmutability)]
tests/ui/transmutability/enums/should_pad_variants.rs:5:#![feature(transmutability)]
tests/ui/transmutability/enums/repr/should_require_well_defined_layout.rs:4:#![feature(repr128)]
tests/ui/transmutability/enums/repr/should_require_well_defined_layout.rs:5:#![feature(transmutability)]
tests/ui/transmutability/enums/repr/should_require_well_defined_layout.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.rs:4:#![feature(transmutability)]
tests/ui/transmutability/enums/should_order_correctly.rs:5:#![feature(transmutability)]
tests/ui/transmutability/issue-101739-1.rs:1:#![feature(transmutability)]
tests/ui/transmutability/primitives/numbers.rs:5:#![feature(transmutability)]
tests/ui/transmutability/primitives/numbers.rs:7:#![allow(incomplete_features)]
tests/ui/transmutability/primitives/bool.rs:4:#![feature(transmutability)]
tests/ui/transmutability/primitives/unit.rs:7:#![feature(transmutability)]
tests/ui/transmutability/primitives/bool-mut.rs:4:#![feature(transmutability)]
tests/ui/transmutability/issue-101739-2.rs:2:#![feature(transmutability)]
tests/ui/transmutability/issue-101739-2.rs:3:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/region-infer.rs:1:#![feature(transmutability)]
tests/ui/transmutability/structs/should_order_fields_correctly.rs:5:#![feature(transmutability)]
tests/ui/transmutability/structs/repr/should_require_well_defined_layout.rs:4:#![feature(transmutability)]
tests/ui/transmutability/structs/repr/should_require_well_defined_layout.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/structs/repr/should_handle_align.rs:5:#![feature(transmutability)]
tests/ui/transmutability/structs/repr/should_handle_align.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/structs/repr/should_handle_packed.rs:5:#![feature(transmutability)]
tests/ui/transmutability/structs/repr/should_handle_packed.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/arrays/should_require_well_defined_layout.rs:4:#![feature(transmutability)]
tests/ui/transmutability/arrays/should_require_well_defined_layout.rs:5:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/arrays/should_have_correct_length.rs:5:#![feature(transmutability)]
tests/ui/transmutability/arrays/should_have_correct_length.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/arrays/issue-103783-array-length.rs:2:#![feature(transmutability)]
tests/ui/transmutability/arrays/should_inherit_alignment.rs:5:#![feature(transmutability)]
tests/ui/transmutability/arrays/should_inherit_alignment.rs:6:#![allow(dead_code, incomplete_features, non_camel_case_types)]
tests/ui/transmutability/alignment/align-pass.rs:2:#![feature(transmutability)]
tests/ui/transmutability/alignment/align-fail.rs:2:#![feature(transmutability)]
tests/ui/transmutability/issue-110467.rs:3:#![feature(transmutability)]
tests/ui/str/str-array-assignment.stderr:28:   = help: unsized locals are gated as an unstable feature
tests/ui/associated-type-bounds/supertrait-defines-ty.rs:6:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-99828.stderr:8:   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable
tests/ui/associated-type-bounds/fn-wrap-apit.rs:4:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/fn-where.rs:5:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/fn-aux.rs:4:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/bad-universal-in-impl-sig.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/const-projection-err.gce.stderr:1:warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/const-projection-err.gce.stderr:4:LL | #![cfg_attr(gce, feature(generic_const_exprs))]
tests/ui/associated-type-bounds/const-projection-err.gce.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/type-alias.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-61752.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/fn-dyn-apit.rs:5:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/fn-inline.rs:5:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-73818.rs:5:#![allow(incomplete_features)]
tests/ui/associated-type-bounds/issue-73818.rs:6:#![feature(specialization)]
tests/ui/associated-type-bounds/fn-apit.rs:5:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/implied-in-supertrait.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/dyn-rpit-and-let.rs:3:// FIXME: uncomment let binding types below when `impl_trait_in_bindings` feature is fixed.
tests/ui/associated-type-bounds/dyn-rpit-and-let.rs:5:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/entails-sized-object-safety.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs:3:#![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs:4://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/associated-type-bounds/return-type-notation/unpretty-parenthesized.stdout:1:#![feature(prelude_import)]
tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs:1:#![feature(return_type_notation)]
tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs:2://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/associated-type-bounds/return-type-notation/basic.current_with.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/basic.current_with.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.current_with.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/basic.next_with.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/basic.next_with.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.next_with.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/basic.next_without.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/basic.next_without.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.next_without.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.next.stderr:14:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.next.stderr:23:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.next.stderr:25:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.next.stderr:28:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.next.stderr:32:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/equality.current.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/equality.current.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/equality.current.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr:14:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr:23:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr:25:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr:28:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr:32:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/missing.rs:3:#![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/missing.rs:4://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/associated-type-bounds/return-type-notation/unpretty-parenthesized.stderr:8:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/equality.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/equality.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/equality.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/missing.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/missing.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/missing.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.current.stderr:14:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.current.stderr:23:   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.current.stderr:25:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.current.stderr:28:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.current.stderr:32:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/basic.current_without.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/basic.current_without.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.current_without.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/equality.rs:3:#![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/equality.rs:4://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/equality.next.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/equality.next.stderr:4:LL | #![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/equality.next.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr:1:warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes
tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr:4:LL | #![feature(return_type_notation)]
tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr:8:   = note: `#[warn(incomplete_features)]` on by default
tests/ui/associated-type-bounds/return-type-notation/basic.rs:5:#![feature(return_type_notation, async_fn_in_trait)]
tests/ui/associated-type-bounds/return-type-notation/basic.rs:6://~^ WARN the feature `return_type_notation` is incomplete
tests/ui/associated-type-bounds/struct-bounds.rs:4:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-71443-2.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/inside-adt.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-104916.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-83017.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/bounds-on-assoc-in-trait.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-81193.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-71443-1.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/trait-params.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs:11:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/union-bounds.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-70292.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/elision.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/elision.rs:2:#![feature(anonymous_lifetime_in_impl_trait)]
tests/ui/associated-type-bounds/trait-alias-impl-trait.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/trait-alias-impl-trait.rs:4:#![feature(type_alias_impl_trait)]
tests/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs:4:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/ambiguous-associated-type.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/implied-region-constraints.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/rpit.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/const-projection-err.rs:3:#![feature(associated_const_equality)]
tests/ui/associated-type-bounds/const-projection-err.rs:4:#![cfg_attr(gce, feature(generic_const_exprs))]
tests/ui/associated-type-bounds/const-projection-err.rs:5://[gce]~^ WARN the feature `generic_const_exprs` is incomplete
tests/ui/associated-type-bounds/enum-bounds.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/issue-79949.rs:3:#![allow(incomplete_features)]
tests/ui/associated-type-bounds/issue-79949.rs:4:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/hrtb.rs:3:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/duplicate.rs:1:#![feature(associated_type_bounds)]
tests/ui/associated-type-bounds/duplicate.rs:2:#![feature(type_alias_impl_trait)]
tests/ui/associated-type-bounds/dyn-impl-trait-type.rs:3:#![feature(associated_type_bounds)]
tests/ui/offset-of/offset-of-tuple-nested.rs:5:#![feature(offset_of)]
tests/ui/offset-of/offset-of-tuple-nested.rs:6:#![feature(builtin_syntax)]
tests/ui/offset-of/offset-of-tuple.rs:1:#![feature(offset_of)]
tests/ui/offset-of/offset-of-tuple.rs:2:#![feature(builtin_syntax)]
tests/ui/offset-of/offset-of-inference.rs:3:#![feature(offset_of)]
tests/ui/offset-of/offset-of-must-use.rs:3:#![feature(offset_of)]
tests/ui/offset-of/offset-of-dst-field.rs:1:#![feature(offset_of, extern_types)]
tests/ui/offset-of/offset-of-unstable.rs:3:#![feature(offset_of)]
tests/ui/offset-of/offset-of-unstable.rs:13:        //~^ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:14:        Unstable, //~ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:18:    offset_of!(StableWithUnstableField, unstable); //~ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:20:    offset_of!(StableWithUnstableFieldType, stable.unstable); //~ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:22:        //~^ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:23:        UnstableWithStableFieldType, //~ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:27:        //~^ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-unstable.rs:28:        UnstableWithStableFieldType, //~ ERROR use of unstable library feature
tests/ui/offset-of/offset-of-builtin.rs:1:#![feature(builtin_syntax)]
tests/ui/offset-of/offset-of-unstable.stderr:1:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:7:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:9:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:15:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:17:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:23:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:25:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:35:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:38:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:44:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:47:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:53:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:56:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:66:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-unstable.stderr:69:error[E0658]: use of unstable library feature 'unstable_test_feature'
tests/ui/offset-of/offset-of-unstable.stderr:79:   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable
tests/ui/offset-of/offset-of-arg-count.rs:1:#![feature(offset_of)]
tests/ui/offset-of/offset-of-unsized.rs:5:#![feature(offset_of)]
tests/ui/offset-of/offset-of-private.rs:1:#![feature(offset_of)]
tests/ui/offset-of/offset-of-enum.rs:1:#![feature(offset_of)]
tests/ui/offset-of/offset-of-output-type.rs:1:#![feature(offset_of)]
tests/ui/offset-of/offset-of-self.rs:1:#![feature(offset_of)]
tests/ui/offset-of/offset-of-unstable-with-feature.rs:4:#![feature(offset_of, unstable_test_feature)]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:2:#![feature(staged_api)]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:3:#![stable(feature = "stable_test_feature", since = "1.0")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:5:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:7:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:11:#[stable(feature = "stable_test_feature", since = "1.0")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:13:    #[stable(feature = "stable_test_feature", since = "1.0")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:17:#[stable(feature = "stable_test_feature", since = "1.0")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:19:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:23:#[stable(feature = "stable_test_feature", since = "1.0")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:25:    #[stable(feature = "stable_test_feature", since = "1.0")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:29:#[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/offset-of/auxiliary/offset-of-staged-api.rs:31:    #[unstable(feature = "unstable_test_feature", issue = "none")]
tests/ui/iterators/iter-cloned-type-inference.rs:2:#![allow(stable_features)]
tests/ui/iterators/iter-cloned-type-inference.rs:7:#![feature(iter_arith)]
tests/ui/iterators/collect-into-slice.stderr:9:   = help: unsized locals are gated as an unstable feature
tests/ui/repr/repr-transparent.rs:6:#![feature(transparent_unions)]
tests/ui/repr/align-with-extern-c-fn.rs:3:#![allow(stable_features)]
tests/ui/repr/align-with-extern-c-fn.rs:8:#![feature(repr_align)]
tests/ui/repr/16-bit-repr-c-enum.rs:8:#![feature(no_core, lang_items, intrinsics, staged_api)]
tests/ui/repr/16-bit-repr-c-enum.rs:11:#![stable(feature = "", since = "")]
tests/ui/repr/16-bit-repr-c-enum.rs:25:    #[stable(feature = "", since = "")]
tests/ui/repr/16-bit-repr-c-enum.rs:26:    #[rustc_const_stable(feature = "", since = "")]
tests/ui/repr/attr-usage-repr.rs:1:#![feature(repr_simd)]
tests/ui/auxiliary/default-ty-param-cross-crate-crate.rs:3:#![feature(default_type_parameter_fallback)]
tests/ui/auxiliary/hello_macro.rs:5:#![feature(proc_macro_quote)]
tests/ui/auxiliary/using-target-feature-unstable.rs:1:#![feature(avx512_target_feature)]
tests/ui/auxiliary/using-target-feature-unstable.rs:4:#[target_feature(enable = "avx512ifma")]
tests/ui/auxiliary/pub-and-stability.rs:7:// 2. a stable attribute (feature "unit_test")
tests/ui/auxiliary/pub-and-stability.rs:8:// 3. an unstable attribute that unit test declares (feature "unstable_declared")
tests/ui/auxiliary/pub-and-stability.rs:9:// 4. an unstable attribute that unit test fails to declare (feature "unstable_undeclared")
tests/ui/auxiliary/pub-and-stability.rs:27:#![feature(staged_api)]
tests/ui/auxiliary/pub-and-stability.rs:29:#![stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:31:#[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:36:    #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:38:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:40:        #[unstable(feature = "unstable_declared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:42:        #[unstable(feature = "unstable_undeclared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:44:        #[unstable(feature = "unstable_undeclared", issue = "38412")] // SILLY
tests/ui/auxiliary/pub-and-stability.rs:46:        #[unstable(feature = "unstable_declared", issue = "38412")] // SILLY
tests/ui/auxiliary/pub-and-stability.rs:48:        #[stable(feature = "unit_test", since = "1.0.0")] // SILLY
tests/ui/auxiliary/pub-and-stability.rs:53:    #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:55:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:57:        #[unstable(feature = "unstable_declared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:59:        #[unstable(feature = "unstable_undeclared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:67:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:72:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:77:    #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:79:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:81:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:83:        #[unstable(feature = "unstable_undeclared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:85:        #[unstable(feature = "unstable_declared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:89:    #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:97:    #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:106:        #[unstable(feature = "unstable_undeclared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:108:        #[unstable(feature = "unstable_declared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:110:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/pub-and-stability.rs:113:        #[unstable(feature = "unstable_undeclared", issue = "38412")] // SILLY
tests/ui/auxiliary/pub-and-stability.rs:115:        #[unstable(feature = "unstable_declared", issue = "38412")] // SILLY
tests/ui/auxiliary/pub-and-stability.rs:117:        #[stable(feature = "unit_test", since = "1.0.0")] // SILLY
tests/ui/auxiliary/pub-and-stability.rs:122:        #[unstable(feature = "unstable_undeclared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:124:        #[unstable(feature = "unstable_declared", issue = "38412")]
tests/ui/auxiliary/pub-and-stability.rs:126:        #[stable(feature = "unit_test", since = "1.0.0")]
tests/ui/auxiliary/check_static_recursion_foreign_helper.rs:3:#![feature(rustc_private)]
tests/ui/process/nofile-limit.rs:9:// compile-flags: -Ctarget-feature=+crt-static -Crpath=no -Crelocation-model=static
tests/ui/process/nofile-limit.rs:10:#![feature(exit_status_error)]
tests/ui/process/nofile-limit.rs:11:#![feature(rustc_private)]
tests/ui/process/fds-are-cloexec.rs:8:#![feature(rustc_private)]
tests/ui/process/process-panic-after-fork.rs:10:#![feature(rustc_private)]
tests/ui/process/process-panic-after-fork.rs:11:#![feature(never_type)]
tests/ui/process/process-panic-after-fork.rs:12:#![feature(panic_always_abort)]
tests/ui/process/issue-20091.rs:2:#![allow(stable_features)]
tests/ui/process/issue-20091.rs:7:#![feature(os)]
tests/ui/process/no-stdio.rs:8:#![feature(rustc_private)]
tests/ui/process/signal-exit-status.rs:7:#![feature(core_intrinsics)]
tests/ui/process/try-wait.rs:3:#![allow(stable_features)]
tests/ui/process/try-wait.rs:7:#![feature(process_try_wait)]
tests/ui/process/core-run-destroy.rs:4:#![allow(stable_features)]
tests/ui/process/core-run-destroy.rs:17:#![feature(rustc_private, duration)]
tests/ui/wf/wf-trait-bound.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-inherent-impl-method-where-clause.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-trait-fn-arg.rs:3:#![feature(rustc_attrs)]
tests/ui/wf/wf-in-fn-arg.rs:3:#![feature(rustc_attrs)]
tests/ui/wf/wf-trait-default-fn-ret.rs:4:#![feature(rustc_attrs)]
tests/ui/wf/wf-const-type.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-inherent-impl-where-clause.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-trait-fn-ret.rs:3:#![feature(rustc_attrs)]
tests/ui/wf/wf-enum-bound.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-in-fn-ret.rs:3:#![feature(rustc_attrs)]
tests/ui/wf/wf-struct-bound.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-static-type.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-convert-unsafe-trait-obj.rs:4:#![feature(object_safe_for_dispatch)]
tests/ui/wf/wf-enum-fields.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-trait-associated-type-trait.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-unsafe-trait-obj-match.rs:4:#![feature(object_safe_for_dispatch)]
tests/ui/wf/wf-enum-fields-struct-variant.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-outlives-ty-in-fn-or-trait.rs:1:#![feature(rustc_attrs)]
tests/ui/wf/wf-trait-superbound.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-trait-superbound.rs:4:#![feature(rustc_attrs)]
tests/ui/wf/wf-struct-field.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-trait-associated-type-bound.rs:3:#![feature(associated_type_defaults)]
tests/ui/wf/wf-convert-unsafe-trait-obj-box.rs:4:#![feature(object_safe_for_dispatch)]
tests/ui/wf/wf-trait-associated-type-region.rs:3:#![feature(associated_type_defaults)]
tests/ui/c-variadic/issue-86053-2.rs:4:#![feature(c_variadic)]
tests/ui/c-variadic/variadic-ffi-2.rs:2:#![feature(extended_varargs_abi_support)]
tests/ui/c-variadic/variadic-ffi-6.rs:2:#![feature(c_variadic)]
tests/ui/c-variadic/variadic-ffi-4.rs:3:#![feature(c_variadic)]
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:2:  --> $DIR/feature-gate-extended_varargs_abi_support.rs:1:14
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:8:   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:11:  --> $DIR/feature-gate-extended_varargs_abi_support.rs:1:14
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:17:  --> $DIR/feature-gate-extended_varargs_abi_support.rs:6:12
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:23:   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:26:  --> $DIR/feature-gate-extended_varargs_abi_support.rs:6:12
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:32:  --> $DIR/feature-gate-extended_varargs_abi_support.rs:11:11
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:38:   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable
tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr:41:  --> $DIR/feature-gate-extended_varargs_abi_support.rs:11:11
tests/ui/c-variadic/variadic-ffi-1.rs:4:#![feature(no_core, lang_items)]
tests/ui/c-variadic/variadic-unreachable-arg-error.rs:3:#![feature(c_variadic)]
tests/ui/c-variadic/issue-86053-1.rs:7:#![feature(c_variadic)]
tests/codegen-units/item-collection/non-generic-functions.rs:4:#![feature(start)]
tests/codegen-units/item-collection/trait-implementations.rs:4:#![feature(start)]
tests/codegen-units/item-collection/generic-impl.rs:4:#![feature(start)]
tests/codegen-units/item-collection/function-as-argument.rs:4:#![feature(start)]
tests/codegen-units/item-collection/drop_in_place_intrinsic.rs:5:#![feature(start)]
tests/codegen-units/item-collection/trait-method-as-argument.rs:4:#![feature(start)]
tests/codegen-units/item-collection/instantiation-through-vtable.rs:5:#![feature(start)]
tests/codegen-units/item-collection/cross-crate-generic-functions.rs:4:#![feature(start)]
tests/codegen-units/item-collection/trait-method-default-impl.rs:4:#![feature(start)]
tests/codegen-units/item-collection/unsizing.rs:6:#![feature(coerce_unsized)]
tests/codegen-units/item-collection/unsizing.rs:7:#![feature(unsize)]
tests/codegen-units/item-collection/unsizing.rs:8:#![feature(start)]
tests/codegen-units/item-collection/items-within-generic-items.rs:4:#![feature(start)]
tests/codegen-units/item-collection/tuple-drop-glue.rs:6:#![feature(start)]
tests/codegen-units/item-collection/generic-functions.rs:4:#![feature(start)]
tests/codegen-units/item-collection/cross-crate-closures.rs:9:#![feature(start)]
tests/codegen-units/item-collection/generic-drop-glue.rs:6:#![feature(start)]
tests/codegen-units/item-collection/static-init.rs:3:#![feature(start)]
tests/codegen-units/item-collection/statics-and-consts.rs:4:#![feature(start)]
tests/codegen-units/item-collection/impl-in-non-instantiated-generic.rs:4:#![feature(start)]
tests/codegen-units/item-collection/transitive-drop-glue.rs:6:#![feature(start)]
tests/codegen-units/item-collection/non-generic-drop-glue.rs:6:#![feature(start)]
tests/codegen-units/item-collection/implicit-panic-call.rs:6:#![feature(lang_items)]
tests/codegen-units/item-collection/implicit-panic-call.rs:7:#![feature(no_core)]
tests/codegen-units/item-collection/non-generic-closures.rs:10:#![feature(start)]
tests/codegen-units/item-collection/cross-crate-trait-method.rs:4:#![feature(start)]
tests/codegen-units/partitioning/methods-are-with-self-type.rs:13:#![feature(start)]
tests/codegen-units/partitioning/vtable-through-const.rs:12:#![feature(start)]
tests/rustdoc/async-trait-sig.rs:3:#![feature(async_fn_in_trait)]
tests/rustdoc/async-trait-sig.rs:4:#![allow(incomplete_features)]
tests/rustdoc/macro-document-private.rs:8:#![feature(decl_macro)]
tests/rustdoc/hide-unstable-trait.rs:4:#![feature(private_trait)]
tests/rustdoc/notable-trait/doc-notable_trait.rs:1:#![feature(doc_notable_trait)]
tests/rustdoc/notable-trait/notable-trait-generics.rs:1:#![feature(doc_notable_trait)]
tests/rustdoc/notable-trait/doc-notable_trait-slice.rs:1:#![feature(doc_notable_trait)]
tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_ref_t.rs:8:#![feature(rustc_attrs)]
tests/rustdoc/notable-trait/doc-notable_trait_box_is_not_an_iterator.rs:1:#![feature(doc_notable_trait)]
tests/rustdoc/notable-trait/doc-notable_trait_box_is_not_an_iterator.rs:2:#![feature(lang_items)]
tests/rustdoc/notable-trait/doc-notable_trait_box_is_not_an_iterator.rs:3:#![feature(no_core)]
tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_an_iterator.rs:9:#![feature(rustc_attrs)]
tests/rustdoc/sidebar-all-page.rs:3:#![feature(rustc_attrs)]
tests/rustdoc/primitive-reference.rs:3:#![feature(rustc_attrs)]
tests/rustdoc/empty-impl-block-private.rs:1:#![feature(inherent_associated_types)]
tests/rustdoc/empty-impl-block-private.rs:2:#![allow(incomplete_features)]
tests/rustdoc/issue-79201.rs:1:#![feature(doc_cfg)]
tests/rustdoc/issue-79201.rs:5:// @matches - '//*[@class="stab portability"]' 'crate feature foo-root'
tests/rustdoc/issue-79201.rs:6:// @matches - '//*[@class="stab portability"]' 'crate feature foo-public-mod'
tests/rustdoc/issue-79201.rs:7:// @matches - '//*[@class="stab portability"]' 'crate feature foo-private-mod'
tests/rustdoc/issue-79201.rs:8:// @matches - '//*[@class="stab portability"]' 'crate feature foo-fn'
tests/rustdoc/issue-79201.rs:9:// @matches - '//*[@class="stab portability"]' 'crate feature foo-method'
tests/rustdoc/issue-79201.rs:13:#[doc(cfg(feature = "foo-root"))]
tests/rustdoc/issue-79201.rs:16:#[doc(cfg(feature = "foo-public-mod"))]
tests/rustdoc/issue-79201.rs:21:#[doc(cfg(feature = "foo-private-mod"))]
tests/rustdoc/issue-79201.rs:26:#[doc(cfg(feature = "foo-const"))]
tests/rustdoc/issue-79201.rs:31:#[doc(cfg(feature = "foo-fn"))]
tests/rustdoc/issue-79201.rs:36:#[doc(cfg(feature = "foo-method"))]
tests/rustdoc/issue-105952.rs:3:#![feature(associated_const_equality)]
tests/rustdoc/const-display.rs:3:#![unstable(feature = "humans",
tests/rustdoc/const-display.rs:7:#![feature(foo, foo2)]
tests/rustdoc/const-display.rs:8:#![feature(staged_api)]
tests/rustdoc/const-display.rs:12:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:13:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/rustdoc/const-display.rs:18:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:19:#[rustc_const_unstable(feature="foo", issue = "none")]
tests/rustdoc/const-display.rs:24:#[unstable(feature = "humans", issue = "none")]
tests/rustdoc/const-display.rs:29:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:30:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:36:#[unstable(feature = "foo2", issue = "none")]
tests/rustdoc/const-display.rs:41:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:42:#[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:54:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:55:    #[rustc_const_unstable(feature="foo", issue = "none")]
tests/rustdoc/const-display.rs:60:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:61:    #[rustc_const_unstable(feature="foo", issue = "none")]
tests/rustdoc/const-display.rs:66:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:67:    #[rustc_const_stable(feature = "const2", since = "1.2.0")]
tests/rustdoc/const-display.rs:71:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:77:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/const-display.rs:78:    #[rustc_const_stable(feature = "const2", since = "1.2.0")]
tests/rustdoc/const-display.rs:83:    #[unstable(feature = "foo2", issue = "none")]
tests/rustdoc/const-display.rs:84:    #[rustc_const_stable(feature = "const3", since = "1.3.0")]
tests/rustdoc/foreigntype-reexport.rs:1:#![feature(extern_types)]
tests/rustdoc/titles.rs:2:#![feature(rustc_attrs)]
tests/rustdoc/deprecated-future-staged-api.rs:1:#![feature(staged_api)]
tests/rustdoc/deprecated-future-staged-api.rs:2:#![stable(feature = "deprecated-future-staged-api", since = "1.0.0")]
tests/rustdoc/deprecated-future-staged-api.rs:9:#[stable(feature = "deprecated-future-staged-api", since = "1.0.0")]
tests/rustdoc/deprecated-future-staged-api.rs:17:#[stable(feature = "deprecated-future-staged-api", since = "1.0.0")]
tests/rustdoc/inline_local/please_inline.rs:17:    #[feature(inline)]
tests/rustdoc/issue-27759.rs:1:#![feature(staged_api)]
tests/rustdoc/issue-27759.rs:4:#![unstable(feature="test", issue="27759")]
tests/rustdoc/issue-27759.rs:8:#[unstable(feature="test", issue="27759")]
tests/rustdoc/issue-27759.rs:12:    #[unstable(feature="test_function", issue="12345")]
tests/rustdoc/unindent.rs:9:#[cfg_attr(not(feature = "one"), doc = "    .second()")]
tests/rustdoc/unindent.rs:20:#[cfg_attr(not(feature = "one"), doc = "    .another()")]
tests/rustdoc/unindent.rs:31:#[cfg_attr(not(feature = "one"), doc = "    .another()")]
tests/rustdoc/doc-cfg-hide.rs:2:#![feature(doc_auto_cfg, doc_cfg, doc_cfg_hide)]
tests/rustdoc/doc-cfg-hide.rs:4:#![doc(cfg_hide(feature = "solecism"))]
tests/rustdoc/doc-cfg-hide.rs:8:// compile-flags:--cfg feature="solecism"
tests/rustdoc/doc-cfg-hide.rs:9:#[cfg(feature = "solecism")]
tests/rustdoc/doc-cfg-hide.rs:14:// @matches - '//*[@class="stab portability"]' 'crate feature solecism'
tests/rustdoc/doc-cfg-hide.rs:15:#[cfg(feature = "solecism")]
tests/rustdoc/doc-cfg-hide.rs:16:#[doc(cfg(feature = "solecism"))]
tests/rustdoc/doc-cfg-hide.rs:21:// @matches - '//*[@class="stab portability"]' 'crate feature hyperdulia'
tests/rustdoc/doc-cfg-hide.rs:22:// compile-flags:--cfg feature="hyperdulia"
tests/rustdoc/doc-cfg-hide.rs:23:#[cfg(feature = "solecism")]
tests/rustdoc/doc-cfg-hide.rs:24:#[cfg(feature = "hyperdulia")]
tests/rustdoc/doc-cfg-hide.rs:29:// @matches - '//*[@class="stab portability"]' 'crate feature oystercatcher only'
tests/rustdoc/doc-cfg-hide.rs:30:// compile-flags:--cfg feature="oystercatcher"
tests/rustdoc/doc-cfg-hide.rs:31:#[cfg(all(feature = "solecism", feature = "oystercatcher"))]
tests/rustdoc/doc-cfg-traits.rs:2:#![feature(doc_cfg, associated_type_defaults)]
tests/rustdoc/doc-cfg-traits.rs:13:// @matches - '//*[@class="stab portability"]' 'crate feature zibib'
tests/rustdoc/doc-cfg-traits.rs:14:// @matches - '//*[@class="stab portability"]' 'crate feature poriform'
tests/rustdoc/doc-cfg-traits.rs:15:// @matches - '//*[@class="stab portability"]' 'crate feature ethopoeia'
tests/rustdoc/doc-cfg-traits.rs:16:// @matches - '//*[@class="stab portability"]' 'crate feature lea'
tests/rustdoc/doc-cfg-traits.rs:17:// @matches - '//*[@class="stab portability"]' 'crate feature unit'
tests/rustdoc/doc-cfg-traits.rs:18:// @matches - '//*[@class="stab portability"]' 'crate feature quarter'
tests/rustdoc/doc-cfg-traits.rs:22:    #[doc(cfg(feature = "zibib"))]
tests/rustdoc/doc-cfg-traits.rs:27:    #[doc(cfg(feature = "poriform"))]
tests/rustdoc/doc-cfg-traits.rs:32:    #[doc(cfg(feature = "ethopoeia"))]
tests/rustdoc/doc-cfg-traits.rs:36:#[doc(cfg(feature = "lea"))]
tests/rustdoc/doc-cfg-traits.rs:39:#[doc(cfg(feature = "unit"))]
tests/rustdoc/doc-cfg-traits.rs:44:// @matches - '//*[@class="stab portability"]' 'crate feature jurisconsult'
tests/rustdoc/doc-cfg-traits.rs:45:// @matches - '//*[@class="stab portability"]' 'crate feature lithomancy'
tests/rustdoc/doc-cfg-traits.rs:46:// @matches - '//*[@class="stab portability"]' 'crate feature boodle'
tests/rustdoc/doc-cfg-traits.rs:47:// @matches - '//*[@class="stab portability"]' 'crate feature mistetch'
tests/rustdoc/doc-cfg-traits.rs:48:// @matches - '//*[@class="stab portability"]' 'crate feature lea'
tests/rustdoc/doc-cfg-traits.rs:49:// @matches - '//*[@class="stab portability"]' 'crate feature unit'
tests/rustdoc/doc-cfg-traits.rs:50:// @matches - '//*[@class="stab portability"]' 'crate feature quarter'
tests/rustdoc/doc-cfg-traits.rs:51:#[doc(cfg(feature = "jurisconsult"))]
tests/rustdoc/doc-cfg-traits.rs:55:    #[doc(cfg(feature = "lithomancy"))]
tests/rustdoc/doc-cfg-traits.rs:60:    #[doc(cfg(feature = "boodle"))]
tests/rustdoc/doc-cfg-traits.rs:65:    #[doc(cfg(feature = "mistetch"))]
tests/rustdoc/doc-cfg-traits.rs:69:#[doc(cfg(feature = "lea"))]
tests/rustdoc/doc-cfg-traits.rs:72:#[doc(cfg(feature = "unit"))]
tests/rustdoc/doc-cfg-traits.rs:78:// @matches - '//*[@class="stab portability"]' 'crate feature zibib'
tests/rustdoc/doc-cfg-traits.rs:79:// @matches - '//*[@class="stab portability"]' 'crate feature poriform'
tests/rustdoc/doc-cfg-traits.rs:80:// @matches - '//*[@class="stab portability"]' 'crate feature ethopoeia'
tests/rustdoc/doc-cfg-traits.rs:82:// @matches - '//*[@class="stab portability"]' 'crate feature jurisconsult'
tests/rustdoc/doc-cfg-traits.rs:83:// @matches - '//*[@class="stab portability"]' 'crate feature lithomancy'
tests/rustdoc/doc-cfg-traits.rs:84:// @matches - '//*[@class="stab portability"]' 'crate feature boodle'
tests/rustdoc/doc-cfg-traits.rs:85:// @matches - '//*[@class="stab portability"]' 'crate feature mistetch'
tests/rustdoc/doc-cfg-traits.rs:87:// @matches - '//*[@class="stab portability"]' 'crate feature copy'
tests/rustdoc/doc-cfg-traits.rs:93:#[doc(cfg(feature = "jurisconsult"))]
tests/rustdoc/doc-cfg-traits.rs:96:#[doc(cfg(feature = "copy"))]
tests/rustdoc/doc-cfg-traits.rs:101:// @matches - '//*[@class="stab portability"]' 'crate feature quarter'
tests/rustdoc/doc-cfg-traits.rs:103:// @matches - '//*[@class="stab portability"]' 'crate feature zibib'
tests/rustdoc/doc-cfg-traits.rs:104:// @matches - '//*[@class="stab portability"]' 'crate feature poriform'
tests/rustdoc/doc-cfg-traits.rs:105:// @matches - '//*[@class="stab portability"]' 'crate feature ethopoeia'
tests/rustdoc/doc-cfg-traits.rs:107:// @matches - '//*[@class="stab portability"]' 'crate feature jurisconsult'
tests/rustdoc/doc-cfg-traits.rs:108:// @matches - '//*[@class="stab portability"]' 'crate feature lithomancy'
tests/rustdoc/doc-cfg-traits.rs:109:// @matches - '//*[@class="stab portability"]' 'crate feature boodle'
tests/rustdoc/doc-cfg-traits.rs:110:// @matches - '//*[@class="stab portability"]' 'crate feature mistetch'
tests/rustdoc/doc-cfg-traits.rs:112:// @matches - '//*[@class="stab portability"]' 'crate feature copy'
tests/rustdoc/doc-cfg-traits.rs:113:#[doc(cfg(feature = "quarter"))]
tests/rustdoc/doc-cfg-traits.rs:117:#[doc(cfg(feature = "quarter"))]
tests/rustdoc/doc-cfg-traits.rs:120:#[doc(cfg(all(feature = "jurisconsult", feature = "quarter")))]
tests/rustdoc/doc-cfg-traits.rs:123:#[doc(cfg(all(feature = "copy", feature = "quarter")))]
tests/rustdoc/trait_alias.rs:1:#![feature(trait_alias)]
tests/rustdoc/issue-15318-3.rs:1:#![feature(rustc_attrs)]
tests/rustdoc/reexport-stability-tags-deprecated-and-portability.rs:2:#![feature(doc_cfg)]
tests/rustdoc/reexport-stability-tags-deprecated-and-portability.rs:8:    #[doc(cfg(feature = "sync"))]
tests/rustdoc/reexport-stability-tags-deprecated-and-portability.rs:12:    #[doc(cfg(feature = "sync"))]
tests/rustdoc/issue-30252.rs:1:// compile-flags:--test --cfg feature="bar"
tests/rustdoc/issue-30252.rs:4:/// assert_eq!(cfg!(feature = "bar"), true);
tests/rustdoc/check-source-code-urls-to-def.rs:5:#![feature(rustc_attrs)]
tests/rustdoc/issue-89852.rs:4:#![feature(no_core)]
tests/rustdoc/negative-impl.rs:1:#![feature(negative_impls)]
tests/rustdoc/async-trait.rs:4:#![feature(async_fn_in_trait)]
tests/rustdoc/async-trait.rs:5:#![allow(incomplete_features)]
tests/rustdoc/empty-section.rs:3:#![feature(negative_impls)]
tests/rustdoc/empty-impl-block-private-with-doc.rs:3:#![feature(inherent_associated_types)]
tests/rustdoc/empty-impl-block-private-with-doc.rs:4:#![allow(incomplete_features)]
tests/rustdoc/macro-private-not-documented.rs:7:#![feature(decl_macro)]
tests/rustdoc/const-intrinsic.rs:1:#![feature(intrinsics)]
tests/rustdoc/const-intrinsic.rs:2:#![feature(staged_api)]
tests/rustdoc/const-intrinsic.rs:5:#![stable(since="1.0.0", feature="rust1")]
tests/rustdoc/const-intrinsic.rs:10:    #[stable(since="1.0.0", feature="rust1")]
tests/rustdoc/const-intrinsic.rs:11:    #[rustc_const_stable(feature = "const_transmute", since = "1.56.0")]
tests/rustdoc/const-intrinsic.rs:16:    #[stable(since="1.0.0", feature="rust1")]
tests/rustdoc/const-intrinsic.rs:23:    #[stable(since="1.0.0", feature="rust1")]
tests/rustdoc/issue-47038.rs:1:#![feature(decl_macro)]
tests/rustdoc/issue-20646.rs:4:#![feature(associated_types)]
tests/rustdoc/reexport-attr-merge.rs:6:#![feature(doc_cfg)]
tests/rustdoc/reexport-attr-merge.rs:10:#[doc(hidden, cfg(feature = "foo"))]
tests/rustdoc/reexport-attr-merge.rs:13:#[doc(hidden, no_inline, cfg(feature = "bar"))]
tests/rustdoc/edition-doctest.rs:4:/// #![feature(try_blocks)]
tests/rustdoc/edition-doctest.rs:25:/// #![feature(try_blocks)]
tests/rustdoc/issue-23511.rs:1:#![feature(rustc_attrs)]
tests/rustdoc/issue-23511.rs:2:#![feature(rustdoc_internals)]
tests/rustdoc/playground.rs:18://! #![feature(something)]
tests/rustdoc/playground.rs:27:// @matches foo/index.html '//a[@class="test-arrow"][@href="https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn+main()+%7B%0A++++println!(%22Hello,+world!%22);%0A%7D&version=nightly&edition=2015"]' "Run"
tests/rustdoc/issue-38129.rs:39:pub fn non_feature_attr() {}
tests/rustdoc/issue-38129.rs:42:/// #![feature(core_intrinsics)]
tests/rustdoc/issue-38129.rs:45:pub fn feature_attr() {}
tests/rustdoc/issue-38129.rs:48:/// #![feature(core_intrinsics)]
tests/rustdoc/issue-38129.rs:76:/// #![feature(core_intrinsics)]
tests/rustdoc/doc-cfg-implicit.rs:2:#![feature(doc_auto_cfg, doc_cfg)]
tests/rustdoc/doc-cfg-implicit.rs:6:// @matches - '//*[@class="stab portability"]' 'crate feature disorbed'
tests/rustdoc/doc-cfg-implicit.rs:7:// compile-flags:--cfg feature="disorbed"
tests/rustdoc/doc-cfg-implicit.rs:8:#[cfg(feature = "disorbed")]
tests/rustdoc/doc-cfg-implicit.rs:13:// @matches - '//*[@class="stab portability"]' 'crate feature aesthesia'
tests/rustdoc/doc-cfg-implicit.rs:14:// compile-flags:--cfg feature="aesthesia"
tests/rustdoc/doc-cfg-implicit.rs:15:#[doc(cfg(feature = "aesthesia"))]
tests/rustdoc/doc-cfg-implicit.rs:20:// @matches - '//*[@class="stab portability"]' 'crate feature pliothermic'
tests/rustdoc/doc-cfg-implicit.rs:21:// compile-flags:--cfg feature="epopoeist"
tests/rustdoc/doc-cfg-implicit.rs:22:#[cfg(feature = "epopoeist")]
tests/rustdoc/doc-cfg-implicit.rs:23:#[doc(cfg(feature = "pliothermic"))]
tests/rustdoc/doc-cfg-implicit.rs:28:// compile-flags:--cfg feature="simillimum"
tests/rustdoc/doc-cfg-implicit.rs:29:#[cfg(feature = "simillimum")]
tests/rustdoc/doc-cfg-target-feature.rs:6:// #49723: rustdoc didn't add target features when extracting or running doctests
tests/rustdoc/doc-cfg-target-feature.rs:8:#![feature(doc_cfg)]
tests/rustdoc/doc-cfg-target-feature.rs:15:/// #![feature(cfg_target_feature)]
tests/rustdoc/doc-cfg-target-feature.rs:17:/// #[cfg(target_feature = "sse")]
tests/rustdoc/doc-cfg-target-feature.rs:20:#[doc(cfg(target_feature = "sse"))]
tests/rustdoc/const-generics/lazy_normalization_consts/const-equate-pred.rs:2:#![feature(generic_const_exprs)]
tests/rustdoc/const-generics/lazy_normalization_consts/const-equate-pred.rs:3:#![allow(incomplete_features)]
tests/rustdoc/const-generics/generic_const_exprs.rs:2:#![feature(generic_const_exprs)]
tests/rustdoc/const-generics/generic_const_exprs.rs:3:#![allow(incomplete_features)]
tests/rustdoc/const-generics/const-impl.rs:1:#![allow(incomplete_features)]
tests/rustdoc/const-generics/const-impl.rs:2:#![feature(adt_const_params)]
tests/rustdoc/macro-in-async-block.rs:3:#![feature(decl_macro)]
tests/rustdoc/primitive/primitive-generic-impl.rs:1:#![feature(rustc_attrs)]
tests/rustdoc/primitive/primitive.rs:3:#![feature(rustc_attrs)]
tests/rustdoc/doc_auto_cfg_nested_impl.rs:3:#![feature(doc_auto_cfg)]
tests/rustdoc/doc_auto_cfg_nested_impl.rs:13://        'Available on non-crate feature coolstuff only.'
tests/rustdoc/doc_auto_cfg_nested_impl.rs:14:#[cfg(not(feature = "coolstuff"))]
tests/rustdoc/doc_auto_cfg_nested_impl.rs:17:#[cfg(not(feature = "coolstuff"))]
tests/rustdoc/doc_auto_cfg_nested_impl.rs:20:    // This impl should also have the `not(feature = "coolstuff")`.
tests/rustdoc/doc_auto_cfg_nested_impl.rs:22:    //        'Available on non-crate feature coolstuff only.'
tests/rustdoc/primitive-unit-auto-trait.rs:4:#![feature(rustc_attrs)]
tests/rustdoc/auto-impl-primitive.rs:1:#![feature(rustc_attrs)]
tests/rustdoc/rfc-2632-const-trait-impl.rs:8:#![feature(const_trait_impl)]
tests/rustdoc/must_implement_one_of.rs:2:#![feature(rustc_attrs)]
tests/rustdoc/force-target-feature.rs:2:// compile-flags:--test -C target-feature=+avx
tests/rustdoc/force-target-feature.rs:10:#[doc(cfg(target_feature = "avx"))]
tests/rustdoc/stability.rs:1:#![feature(staged_api)]
tests/rustdoc/stability.rs:3:#![unstable(feature = "test", issue = "none")]
tests/rustdoc/alias-reexport2.rs:5:#![feature(lazy_type_alias)]
tests/rustdoc/sidebar-items.rs:1:#![feature(associated_type_defaults)]
tests/rustdoc/foreigntype.rs:1:#![feature(extern_types)]
tests/rustdoc/issue-28478.rs:1:#![feature(associated_type_defaults)]
tests/rustdoc/feature-gate-doc_auto_cfg.rs:1:#![feature(doc_cfg)]
tests/rustdoc/generic_const_exprs.rs:3:#![allow(incomplete_features)]
tests/rustdoc/generic_const_exprs.rs:4:#![feature(generic_const_exprs)]
tests/rustdoc/issue-111064-reexport-trait-from-hidden-2.rs:1:#![feature(no_core)]
tests/rustdoc/primitive-tuple-auto-trait.rs:4:#![feature(rustc_attrs)]
tests/rustdoc/issue-111249-file-creation.rs:2:#![feature(no_core)]
tests/rustdoc/negative-impl-sidebar.rs:1:#![feature(negative_impls)]
tests/rustdoc/hide-complex-unevaluated-const-arguments.rs:7:#![feature(const_trait_impl, generic_const_exprs)]
tests/rustdoc/hide-complex-unevaluated-const-arguments.rs:8:#![allow(incomplete_features)]
tests/rustdoc/hide-complex-unevaluated-const-arguments.rs:19:    // feature. If / once this expression kind gets supported, this
tests/rustdoc/deref/deref-const-fn.rs:6:#![feature(staged_api)]
tests/rustdoc/deref/deref-const-fn.rs:8:#![stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/deref/deref-const-fn.rs:11:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/deref/deref-const-fn.rs:17:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/deref/deref-const-fn.rs:18:    #[rustc_const_stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/deref/deref-const-fn.rs:22:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/deref/deref-const-fn.rs:31:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/auto_aliases.rs:1:#![feature(auto_traits)]
tests/rustdoc/tab_title.rs:2:#![feature(rustc_attrs)]
tests/rustdoc/tab_title.rs:3:#![feature(rustdoc_internals)]
tests/rustdoc/legacy-const-generic.rs:2:#![feature(rustc_attrs)]
tests/rustdoc/doc-cfg-simplification.rs:2:#![feature(doc_cfg)]
tests/rustdoc/doc-cfg-simplification.rs:10:// @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:18:#[doc(cfg(feature = "ratel"))]
tests/rustdoc/doc-cfg-simplification.rs:22:    // @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:27:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and zoonosology'
tests/rustdoc/doc-cfg-simplification.rs:28:    #[doc(cfg(feature = "zoonosology"))]
tests/rustdoc/doc-cfg-simplification.rs:33:    // @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:38:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and yusho'
tests/rustdoc/doc-cfg-simplification.rs:39:    #[doc(cfg(feature = "yusho"))]
tests/rustdoc/doc-cfg-simplification.rs:44:    // @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:49:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and nunciative'
tests/rustdoc/doc-cfg-simplification.rs:50:    #[doc(cfg(feature = "nunciative"))]
tests/rustdoc/doc-cfg-simplification.rs:55:    // @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:60:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and thionic'
tests/rustdoc/doc-cfg-simplification.rs:61:    #[doc(cfg(feature = "thionic"))]
tests/rustdoc/doc-cfg-simplification.rs:66:    // @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:71:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and zincic'
tests/rustdoc/doc-cfg-simplification.rs:72:    // @matches - '//*[@class="stab portability"]' 'crate feature rutherford'
tests/rustdoc/doc-cfg-simplification.rs:73:    #[doc(cfg(feature = "zincic"))]
tests/rustdoc/doc-cfg-simplification.rs:77:        #[doc(cfg(feature = "rutherford"))]
tests/rustdoc/doc-cfg-simplification.rs:83:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and cosmotellurian'
tests/rustdoc/doc-cfg-simplification.rs:84:    // @matches - '//*[@class="stab portability"]' 'crate feature biotaxy'
tests/rustdoc/doc-cfg-simplification.rs:85:    // @matches - '//*[@class="stab portability"]' 'crate feature xiphopagus'
tests/rustdoc/doc-cfg-simplification.rs:86:    // @matches - '//*[@class="stab portability"]' 'crate feature juxtapositive'
tests/rustdoc/doc-cfg-simplification.rs:87:    // @matches - '//*[@class="stab portability"]' 'crate feature fuero'
tests/rustdoc/doc-cfg-simplification.rs:88:    // @matches - '//*[@class="stab portability"]' 'crate feature palaeophile'
tests/rustdoc/doc-cfg-simplification.rs:89:    // @matches - '//*[@class="stab portability"]' 'crate feature broadcloth'
tests/rustdoc/doc-cfg-simplification.rs:90:    // @matches - '//*[@class="stab portability"]' 'crate features broadcloth and xanthocomic'
tests/rustdoc/doc-cfg-simplification.rs:91:    // @matches - '//*[@class="stab portability"]' 'crate feature broadcloth'
tests/rustdoc/doc-cfg-simplification.rs:92:    // @matches - '//*[@class="stab portability"]' 'crate features broadcloth and whosoever'
tests/rustdoc/doc-cfg-simplification.rs:93:    #[doc(cfg(feature = "cosmotellurian"))]
tests/rustdoc/doc-cfg-simplification.rs:98:            #[doc(cfg(feature = "xiphopagus"))]
tests/rustdoc/doc-cfg-simplification.rs:102:        #[doc(cfg(feature = "biotaxy"))]
tests/rustdoc/doc-cfg-simplification.rs:106:            #[doc(cfg(feature = "juxtapositive"))]
tests/rustdoc/doc-cfg-simplification.rs:114:        #[doc(cfg(feature = "fuero"))]
tests/rustdoc/doc-cfg-simplification.rs:119:        #[doc(cfg(feature = "palaeophile"))]
tests/rustdoc/doc-cfg-simplification.rs:123:    #[doc(cfg(feature = "broadcloth"))]
tests/rustdoc/doc-cfg-simplification.rs:127:        #[doc(cfg(feature = "xanthocomic"))]
tests/rustdoc/doc-cfg-simplification.rs:132:        #[doc(cfg(feature = "whosoever"))]
tests/rustdoc/doc-cfg-simplification.rs:138:    // @matches - '//*[@class="stab portability"]' 'crate feature ratel'
tests/rustdoc/doc-cfg-simplification.rs:139:    // @matches - '//*[@class="stab portability"]' 'crate feature unzymotic'
tests/rustdoc/doc-cfg-simplification.rs:140:    // @matches - '//*[@class="stab portability"]' 'crate feature summate'
tests/rustdoc/doc-cfg-simplification.rs:141:    // @matches - '//*[@class="stab portability"]' 'crate feature unctuous'
tests/rustdoc/doc-cfg-simplification.rs:145:        #[doc(cfg(feature = "unzymotic"))]
tests/rustdoc/doc-cfg-simplification.rs:150:        #[doc(cfg(feature = "summate"))]
tests/rustdoc/doc-cfg-simplification.rs:155:        #[doc(cfg(feature = "unctuous"))]
tests/rustdoc/doc-cfg-simplification.rs:161:    // @matches - '//*[@class="stab portability"]' 'crate features ratel and aposiopesis'
tests/rustdoc/doc-cfg-simplification.rs:162:    // @matches - '//*[@class="stab portability"]' 'crate feature umbracious'
tests/rustdoc/doc-cfg-simplification.rs:163:    // @matches - '//*[@class="stab portability"]' 'crate feature uakari'
tests/rustdoc/doc-cfg-simplification.rs:164:    // @matches - '//*[@class="stab portability"]' 'crate feature rotograph'
tests/rustdoc/doc-cfg-simplification.rs:165:    #[doc(cfg(feature = "aposiopesis"))]
tests/rustdoc/doc-cfg-simplification.rs:169:        #[doc(cfg(feature = "umbracious"))]
tests/rustdoc/doc-cfg-simplification.rs:174:        #[doc(cfg(feature = "uakari"))]
tests/rustdoc/doc-cfg-simplification.rs:179:        #[doc(cfg(feature = "rotograph"))]
tests/rustdoc/issue-110629-private-type-cycle.rs:3:#![feature(type_alias_impl_trait)]
tests/rustdoc/issue-18199.rs:3:#![doc(test(attr(feature(staged_api))))]
tests/rustdoc/issue-18199.rs:6:/// #![unstable(feature="test", issue="18199")]
tests/rustdoc/inherent-projections.rs:1:#![feature(inherent_associated_types)]
tests/rustdoc/inherent-projections.rs:2:#![allow(incomplete_features)]
tests/rustdoc/impl-parts-crosscrate.rs:4:#![feature(negative_impls)]
tests/rustdoc/extern-method.rs:4:#![feature(unboxed_closures)]
tests/rustdoc/default-trait-method.rs:1:#![feature(min_specialization)]
tests/rustdoc/synthetic_auto/crate-local.rs:1:#![feature(auto_traits)]
tests/rustdoc/intra-doc/prim-methods-external-core.rs:7:#![feature(no_core, lang_items)]
tests/rustdoc/intra-doc/inherent-associated-types.rs:1:#![feature(inherent_associated_types)]
tests/rustdoc/intra-doc/inherent-associated-types.rs:3:#![allow(incomplete_features)]
tests/rustdoc/intra-doc/no-doc-primitive.rs:4:#![feature(no_core, lang_items, rustc_attrs)]
tests/rustdoc/intra-doc/libstd-re-export.rs:2:#![feature(intra_doc_pointers)]
tests/rustdoc/intra-doc/non-path-primitives.rs:2:#![feature(intra_doc_pointers)]
tests/rustdoc/intra-doc/prim-associated-traits.rs:1:#![feature(never_type)]
tests/rustdoc/intra-doc/prim-self.rs:3:#![allow(incomplete_features)] // inherent_associated_types
tests/rustdoc/intra-doc/prim-self.rs:4:#![feature(rustc_attrs)]
tests/rustdoc/intra-doc/prim-self.rs:5:#![feature(no_core)]
tests/rustdoc/intra-doc/prim-self.rs:6:#![feature(rustdoc_internals)]
tests/rustdoc/intra-doc/prim-self.rs:7:#![feature(inherent_associated_types)]
tests/rustdoc/intra-doc/prim-self.rs:8:#![feature(lang_items)]
tests/rustdoc/intra-doc/extern-type.rs:1:#![feature(extern_types)]
tests/rustdoc/intra-doc/prim-methods-local.rs:2:#![feature(no_core, lang_items, rustc_attrs, rustdoc_internals)]
tests/rustdoc/intra-doc/auxiliary/extern-builtin-type-impl-dep.rs:3:#![feature(lang_items, rustc_attrs)]
tests/rustdoc/intra-doc/auxiliary/my-core.rs:1:#![feature(no_core, lang_items, rustdoc_internals, rustc_attrs)]
tests/rustdoc/intra-doc/associated-defaults.rs:2:#![feature(associated_type_defaults)]
tests/rustdoc/primitive-tuple-variadic.rs:4:#![feature(rustdoc_internals)]
tests/rustdoc/rustc-incoherent-impls.rs:5:#![feature(rustc_attrs)]
tests/rustdoc/alias-reexport.rs:5:#![feature(lazy_type_alias)]
tests/rustdoc/non_lifetime_binders.rs:1:#![feature(non_lifetime_binders)]
tests/rustdoc/non_lifetime_binders.rs:2:#![allow(incomplete_features)]
tests/rustdoc/assoc-consts-version.rs:3:#![feature(staged_api)]
tests/rustdoc/assoc-consts-version.rs:5:#![stable(since="1.1.1", feature="rust1")]
tests/rustdoc/assoc-consts-version.rs:7:#[stable(since="1.1.1", feature="rust1")]
tests/rustdoc/assoc-consts-version.rs:13:    #[stable(since="1.1.2", feature="rust2")]
tests/rustdoc/impl-parts.rs:1:#![feature(negative_impls)]
tests/rustdoc/impl-parts.rs:2:#![feature(auto_traits)]
tests/rustdoc/macro-indirect-use.rs:6:#![feature(decl_macro)]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:2:#![feature(doc_cfg)]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:3:#![feature(staged_api)]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:4:#![stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:6:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:8:    #[unstable(feature = "humans", issue = "none")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:11:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:12:    #[doc(cfg(feature = "sync"))]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:15:    #[unstable(feature = "humans", issue = "none")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:16:    #[doc(cfg(feature = "sync"))]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:19:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:24:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:29:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:34:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:39:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:44:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:49:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:54:#[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/reexport-stability-tags-unstable-and-portability.rs:59:    #[stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/macro-generated-macro.rs:16:// @has - //pre '(<= #![no_std] #[cfg(feature = "alloc")] =>) => { ... };'
tests/rustdoc/macro-generated-macro.rs:17:make_macro!(attributes #![no_std] #[cfg(feature = "alloc")]);
tests/rustdoc/document-item-with-associated-const-in-where-clause.rs:1:#![feature(generic_const_exprs)]
tests/rustdoc/document-item-with-associated-const-in-where-clause.rs:2:#![allow(incomplete_features)]
tests/rustdoc/doc-cfg.rs:1:#![feature(doc_cfg)]
tests/rustdoc/doc-cfg.rs:2:#![feature(target_feature, cfg_target_feature)]
tests/rustdoc/doc-cfg.rs:72:// tagging a function with `#[target_feature]` creates a doc(cfg(target_feature)) node for that
tests/rustdoc/doc-cfg.rs:79:// @has doc_cfg/fn.uses_target_feature.html
tests/rustdoc/doc-cfg.rs:81://        'Available with target feature avx only.'
tests/rustdoc/doc-cfg.rs:82:#[target_feature(enable = "avx")]
tests/rustdoc/doc-cfg.rs:83:pub unsafe fn uses_target_feature() {
tests/rustdoc/doc-cfg.rs:87:// @has doc_cfg/fn.uses_cfg_target_feature.html
tests/rustdoc/doc-cfg.rs:89://        'Available with target feature avx only.'
tests/rustdoc/doc-cfg.rs:90:#[doc(cfg(target_feature = "avx"))]
tests/rustdoc/doc-cfg.rs:91:pub fn uses_cfg_target_feature() {
tests/rustdoc/doc-cfg.rs:92:    uses_target_feature();
tests/rustdoc/implementor-stable-version.rs:1:#![stable(feature = "bar", since = "OLD 1.0")]
tests/rustdoc/implementor-stable-version.rs:4:#![feature(staged_api)]
tests/rustdoc/implementor-stable-version.rs:6:#[stable(feature = "bar", since = "OLD 1.0")]
tests/rustdoc/implementor-stable-version.rs:9:#[stable(feature = "baz", since = "OLD 1.0")]
tests/rustdoc/implementor-stable-version.rs:12:#[stable(feature = "baz", since = "OLD 1.0")]
tests/rustdoc/implementor-stable-version.rs:16:#[stable(feature = "foobar", since = "NEW 2.0")]
tests/rustdoc/implementor-stable-version.rs:20:#[stable(feature = "foobaz", since = "OLD 1.0")]
tests/rustdoc/primitive-slice-auto-trait.rs:4:#![feature(rustc_attrs)]
tests/rustdoc/macro_pub_in_module.rs:6:#![feature(decl_macro, no_core, rustc_attrs)]
tests/rustdoc/source-version-separator.rs:1:#![stable(feature = "bar", since = "1.0")]
tests/rustdoc/source-version-separator.rs:3:#![feature(staged_api)]
tests/rustdoc/source-version-separator.rs:7:#[stable(feature = "bar", since = "1.0")]
tests/rustdoc/source-version-separator.rs:10:    #[stable(feature = "foobar", since = "3.0")]
tests/rustdoc/source-version-separator.rs:18:#[stable(feature = "baz", since = "1.0")]
tests/rustdoc/source-version-separator.rs:23:    #[stable(feature = "foobar", since = "3.0")]
tests/rustdoc/source-version-separator.rs:27:#[stable(feature = "yolo", since = "4.0")]
tests/rustdoc/visibility.rs:4:#![feature(inherent_associated_types)]
tests/rustdoc/visibility.rs:5:#![allow(incomplete_features)]
tests/rustdoc/doc-auto-cfg.rs:1:#![feature(doc_auto_cfg)]
tests/rustdoc/return-impl-trait.rs:1:#![feature(type_alias_impl_trait)]
tests/rustdoc/not-wf-ambiguous-normalization.rs:3:#![feature(type_alias_impl_trait)]
tests/rustdoc/issue-32374.rs:1:#![feature(staged_api)]
tests/rustdoc/issue-32374.rs:3:#![unstable(feature = "test", issue = "32374")]
tests/rustdoc/issue-32374.rs:20:#[unstable(feature = "test", issue = "32374")]
tests/rustdoc/issue-32374.rs:30:#[unstable(feature = "test", issue = "32374", reason = "unstable")]
tests/rustdoc/doc-cfg-implicit-gate.rs:1:// compile-flags:--cfg feature="worricow"
tests/rustdoc/doc-cfg-implicit-gate.rs:6:#[cfg(feature = "worricow")]
tests/rustdoc/cross-crate-primitive-doc.rs:5:#![feature(no_core)]
tests/rustdoc/auto-traits.rs:3:#![feature(auto_traits)]
tests/rustdoc/issue-55321.rs:1:#![feature(negative_impls)]
tests/rustdoc/cfg_doc_reexport.rs:1:#![feature(doc_cfg)]
tests/rustdoc/cfg_doc_reexport.rs:2:#![feature(no_core)]
tests/rustdoc/cfg_doc_reexport.rs:11:#[doc(cfg(feature = "foobar"))]
tests/rustdoc/cfg_doc_reexport.rs:15:    //    'Available on crate feature foobar only.'
tests/rustdoc/cfg_doc_reexport.rs:21:#[doc(cfg(feature = "foobar"))]
tests/rustdoc/cfg_doc_reexport.rs:27:    //    'Available on crate feature bar only.'
tests/rustdoc/cfg_doc_reexport.rs:28:    #[doc(cfg(feature = "bar"))]
tests/rustdoc/cfg_doc_reexport.rs:32:#[doc(cfg(feature = "bar"))]
tests/rustdoc/masked.rs:3:#![feature(doc_masked)]
tests/rustdoc/decl_macro_priv.rs:3:#![feature(decl_macro)]
tests/rustdoc/duplicate-cfg.rs:2:#![feature(doc_cfg)]
tests/rustdoc/duplicate-cfg.rs:6:// @has '-' '//*[@class="item-name"]//*[@class="stab portability"]/@title' 'Available on crate feature `sync` only'
tests/rustdoc/duplicate-cfg.rs:10:#[doc(cfg(feature = "sync"))]
tests/rustdoc/duplicate-cfg.rs:11:#[doc(cfg(feature = "sync"))]
tests/rustdoc/duplicate-cfg.rs:12:/// my feature sync struct
tests/rustdoc/duplicate-cfg.rs:16:// @has '-' '//*[@class="stab portability"]' 'Available on crate feature sync only.'
tests/rustdoc/duplicate-cfg.rs:17:#[doc(cfg(feature = "sync"))]
tests/rustdoc/duplicate-cfg.rs:20:    // @has '-' '//*[@class="stab portability"]' 'Available on crate feature sync only.'
tests/rustdoc/duplicate-cfg.rs:21:    #[doc(cfg(feature = "sync"))]
tests/rustdoc/duplicate-cfg.rs:26:// @has '-' '//*[@class="stab portability"]' 'Available on crate features sync and send only.'
tests/rustdoc/duplicate-cfg.rs:27:#[doc(cfg(all(feature = "sync", feature = "send")))]
tests/rustdoc/duplicate-cfg.rs:30:    // @has '-' '//*[@class="stab portability"]' 'Available on crate features sync and send only.'
tests/rustdoc/duplicate-cfg.rs:31:    #[doc(cfg(feature = "sync"))]
tests/rustdoc/duplicate-cfg.rs:36:// @has '-' '//*[@class="stab portability"]' 'Available on crate feature sync only.'
tests/rustdoc/duplicate-cfg.rs:37:#[doc(cfg(feature = "sync"))]
tests/rustdoc/duplicate-cfg.rs:40:    // @has '-' '//*[@class="stab portability"]' 'Available on crate features sync and send only.'
tests/rustdoc/duplicate-cfg.rs:41:    #[doc(cfg(all(feature = "sync", feature = "send")))]
tests/rustdoc/duplicate-cfg.rs:46:// @has '-' '//*[@class="stab portability"]' 'Available on crate feature sync and crate feature send and foo only.'
tests/rustdoc/duplicate-cfg.rs:47:#[doc(cfg(all(feature = "sync", feature = "send", foo)))]
tests/rustdoc/duplicate-cfg.rs:50:    // @has '-' '//*[@class="stab portability"]' 'Available on crate feature sync and crate feature send and foo and bar only.'
tests/rustdoc/duplicate-cfg.rs:51:    #[doc(cfg(all(feature = "send", feature = "sync", bar)))]
tests/rustdoc/decl_macro.rs:3:#![feature(decl_macro)]
tests/rustdoc/safe-intrinsic.rs:1:#![feature(intrinsics)]
tests/rustdoc/safe-intrinsic.rs:2:#![feature(no_core)]
tests/rustdoc/safe-intrinsic.rs:3:#![feature(rustc_attrs)]
tests/rustdoc/issue-75588.rs:7:#![feature(extremely_unstable_foo)]
tests/rustdoc/version-separator-without-source.rs:2:#![feature(staged_api)]
tests/rustdoc/version-separator-without-source.rs:3:#![stable(feature = "bar", since = "1.0")]
tests/rustdoc/version-separator-without-source.rs:9:#[stable(feature = "bar", since = "1.0")]
tests/rustdoc/version-separator-without-source.rs:15:#[stable(feature = "bar", since = "1.0")]
tests/rustdoc/version-separator-without-source.rs:21:    #[stable(feature = "foobar", since = "2.0")]
tests/rustdoc/inline_cross/macros.rs:4:#![feature(macro_test)]
tests/rustdoc/inline_cross/auxiliary/assoc-const-equality.rs:1:#![feature(associated_const_equality)]
tests/rustdoc/inline_cross/auxiliary/assoc-items.rs:1:#![feature(associated_type_defaults)]
tests/rustdoc/inline_cross/auxiliary/default-trait-method.rs:1:#![feature(specialization)]
tests/rustdoc/inline_cross/auxiliary/macros.rs:1:#![feature(staged_api)]
tests/rustdoc/inline_cross/auxiliary/macros.rs:2:#![stable(feature = "rust1", since = "1.0.0")]
tests/rustdoc/inline_cross/auxiliary/macros.rs:5:#[unstable(feature = "macro_test", issue = "none")]
tests/rustdoc/inline_cross/auxiliary/repr.rs:1:#![feature(repr_simd)]
tests/rustdoc/macro-in-closure.rs:3:#![feature(decl_macro)]
tests/rustdoc/impl-trait-alias.rs:1:#![feature(type_alias_impl_trait)]
tests/rustdoc/keyword.rs:3:#![feature(rustdoc_internals)]
tests/rustdoc/auxiliary/rustdoc-extern-method.rs:2:#![feature(unboxed_closures)]
tests/rustdoc/auxiliary/rustdoc-impl-parts-crosscrate.rs:1:#![feature(auto_traits)]
tests/rustdoc/auxiliary/realcore.rs:2:#![feature(staged_api)]
tests/rustdoc/auxiliary/realcore.rs:3:#![unstable(feature = "extremely_unstable", issue = "none")]
tests/rustdoc/auxiliary/realcore.rs:5:#[unstable(feature = "extremely_unstable_foo", issue = "none")]
tests/rustdoc/auxiliary/realcore.rs:8:#[unstable(feature = "extremely_unstable_foo", issue = "none")]
tests/rustdoc/auxiliary/realcore.rs:11:#[unstable(feature = "extremely_unstable_foo", issue = "none")]
tests/rustdoc/auxiliary/realcore.rs:14:#[stable(feature = "faked_deref", since = "1.47.0")]
tests/rustdoc/auxiliary/issue-15318.rs:5:#![feature(rustc_attrs)]
tests/rustdoc/auxiliary/issue-15318.rs:6:#![feature(lang_items)]
tests/rustdoc/auxiliary/real_gimli.rs:4:#![feature(staged_api, extremely_unstable)]
tests/rustdoc/auxiliary/real_gimli.rs:5:#![unstable(feature = "rustc_private", issue = "none")]
tests/rustdoc/auxiliary/real_gimli.rs:9:#[unstable(feature = "rustc_private", issue = "none")]
tests/rustdoc/auxiliary/real_gimli.rs:12:#[unstable(feature = "rustc_private", issue = "none")]
tests/rustdoc/auxiliary/issue-73061.rs:3:#![feature(impl_trait_in_assoc_type)]
tests/rustdoc/auxiliary/unstable-trait.rs:1:#![feature(staged_api)]
tests/rustdoc/auxiliary/unstable-trait.rs:2:#![stable(feature = "private_general", since = "1.0.0")]
tests/rustdoc/auxiliary/unstable-trait.rs:4:#[unstable(feature = "private_trait", issue = "none")]
tests/rustdoc/auxiliary/unstable-trait.rs:7:#[stable(feature = "private_general", since = "1.0.0")]
tests/rustdoc/auxiliary/unstable-trait.rs:13:    #[stable(feature = "private_general", since = "1.0.0")]
tests/rustdoc/auxiliary/unstable-trait.rs:18:    #[unstable(feature = "private_trait", issue = "none")]
tests/rustdoc/auxiliary/unstable-trait.rs:21:    #[stable(feature = "private_general", since = "1.0.0")]
tests/rustdoc/auxiliary/unstable-trait.rs:25:#[stable(feature = "private_general", since = "1.0.0")]
tests/rustdoc/auxiliary/reexports.rs:1:#![feature(decl_macro)]
tests/rustdoc/auxiliary/async-trait-dep.rs:3:#![feature(async_fn_in_trait)]
tests/rustdoc/auxiliary/async-trait-dep.rs:4:#![allow(incomplete_features)]
tests/rustdoc/auxiliary/primitive-doc.rs:3:#![feature(rustc_attrs)]
tests/rustdoc/auxiliary/primitive-doc.rs:4:#![feature(no_core)]
tests/rustdoc/auxiliary/alias-reexport2.rs:1:#![feature(lazy_type_alias)]
tests/rustdoc/auxiliary/all-item-types.rs:1:#![feature(extern_types)]
tests/rustdoc/auxiliary/incoherent-impl-types.rs:1:#![feature(rustc_attrs)]
tests/rustdoc/auxiliary/rustdoc-default-impl.rs:1:#![feature(auto_traits)]
tests/rustdoc/auxiliary/trait-alias-mention.rs:1:#![feature(trait_alias)]
tests/rustdoc/auxiliary/alias-reexport.rs:1:#![feature(lazy_type_alias)]
tests/rustdoc/auxiliary/macro_pub_in_module.rs:3:#![feature(decl_macro)]
tests/rustdoc/auxiliary/auto-traits.rs:1:#![feature(auto_traits)]
tests/rustdoc/anchors.rs:3:#![feature(inherent_associated_types)]
tests/rustdoc/anchors.rs:4:#![allow(incomplete_features)]
tests/rustdoc-ui/invalid-keyword.rs:1:#![feature(rustdoc_internals)]
tests/rustdoc-ui/error-in-impl-trait/trait-alias.rs:2:#![feature(type_alias_impl_trait)]
tests/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs:2:#![feature(type_alias_impl_trait)]
tests/rustdoc-ui/invalid_associated_const.rs:1:#![feature(associated_const_equality)]
tests/rustdoc-ui/doctest/doc-test-doctest-feature.stdout:3:test $DIR/doc-test-doctest-feature.rs - Foo (line 9) ... ok
tests/rustdoc-ui/doctest/doc-test-rustdoc-feature.rs:6:#![feature(doc_cfg)]
tests/rustdoc-ui/doctest/doc-test-rustdoc-feature.rs:11:/// #![feature(doc_cfg)]
tests/rustdoc-ui/doctest/check-cfg-test.rs:2:// compile-flags: --test --nocapture --check-cfg=values(feature,"test") -Z unstable-options
tests/rustdoc-ui/doctest/check-cfg-test.rs:7:/// The doctest will produce a warning because feature invalid is unexpected
tests/rustdoc-ui/doctest/check-cfg-test.rs:9:/// #[cfg(feature = "invalid")]
tests/rustdoc-ui/doctest/check-cfg-test.stderr:4:LL | #[cfg(feature = "invalid")]
tests/rustdoc-ui/doctest/check-cfg-test.stderr:7:   = note: expected values for `feature` are: `test`
tests/rustdoc-ui/doctest/doc-test-rustdoc-feature.stdout:3:test $DIR/doc-test-rustdoc-feature.rs - Foo (line 10) ... ok
tests/rustdoc-ui/doc-alias-assoc-const.rs:1:#![feature(trait_alias)]
tests/rustdoc-ui/feature-gate-doc_cfg_hide.stderr:2:  --> $DIR/feature-gate-doc_cfg_hide.rs:1:1
tests/rustdoc-ui/feature-gate-doc_cfg_hide.stderr:8:   = help: add `#![feature(doc_cfg_hide)]` to the crate attributes to enable
tests/rustdoc-ui/invalid-cfg.rs:1:#![feature(doc_cfg)]
tests/rustdoc-ui/rustc-check-passes.rs:1:#![feature(rustdoc_internals)]
tests/rustdoc-ui/rustc-check-passes.rs:2:#![feature(rustdoc_internals)] //~ ERROR
tests/rustdoc-ui/issue-110629-private-type-cycle.rs:3:#![feature(type_alias_impl_trait)]
tests/rustdoc-ui/intra-doc/non-path-primitives.rs:2:#![feature(intra_doc_pointers)]
tests/rustdoc-ui/intra-doc/feature-gate-intra-doc-pointers.stderr:2:  --> $DIR/feature-gate-intra-doc-pointers.rs:1:6
tests/rustdoc-ui/intra-doc/feature-gate-intra-doc-pointers.stderr:8:   = help: add `#![feature(intra_doc_pointers)]` to the crate attributes to enable
tests/rustdoc-ui/intra-doc/feature-gate-intra-doc-pointers.stderr:12:  --> $DIR/feature-gate-intra-doc-pointers.rs:3:6
tests/rustdoc-ui/intra-doc/feature-gate-intra-doc-pointers.stderr:18:   = help: add `#![feature(intra_doc_pointers)]` to the crate attributes to enable
tests/rustdoc-ui/intra-doc/auxiliary/pointer-reexports-allowed.rs:1:#![feature(intra_doc_pointers)]
tests/rustdoc-ui/rustc-check-passes.stderr:1:error[E0636]: the feature `rustdoc_internals` has already been declared
tests/rustdoc-ui/rustc-check-passes.stderr:4:LL | #![feature(rustdoc_internals)]
tests/rustdoc-ui/wasm-safe.rs:4:#[target_feature(enable = "simd128")]
tests/rustdoc-ui/doc-cfg.rs:1:#![feature(doc_cfg)]
tests/rustdoc-ui/ambiguous-inherent-assoc-ty.rs:5:#![feature(inherent_associated_types)]
tests/rustdoc-ui/ambiguous-inherent-assoc-ty.rs:6:#![allow(incomplete_features)]
tests/rustdoc-ui/lints/expect-tool-lint-rfc-2383.rs:2:#![feature(lint_reasons)]
tests/rustdoc-ui/lints/check.rs:5:#![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/lints/check.stderr:4:LL | / #![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/lints/check.stderr:39:LL | / #![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/lints/doc-spotlight.fixed:3:#![feature(doc_notable_trait)]
tests/rustdoc-ui/lints/lint-group.rs:1:#![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/lints/lint-missing-doc-code-example.rs:1:#![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/lints/doc_cfg_hide.rs:1:#![feature(doc_cfg_hide)]
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:2:  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:3:1
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:9:   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:11:  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:1:9
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:17:  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:3:1
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:24:   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:27:  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:3:1
tests/rustdoc-ui/lints/feature-gate-rustdoc_missing_doc_code_examples.stderr:34:   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable
tests/rustdoc-ui/lints/check-fail.rs:3:#![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/lints/doc-without-codeblock.rs:1:#![feature(rustdoc_missing_doc_code_examples)] //~ ERROR missing code example in this documentation
tests/rustdoc-ui/lints/doc-spotlight.rs:3:#![feature(doc_notable_trait)]
tests/rustdoc-ui/lints/doc-without-codeblock.stderr:4:LL | / #![feature(rustdoc_missing_doc_code_examples)]
tests/rustdoc-ui/issues/issue-110900.rs:4:#![feature(associated_type_bounds)]
tests/rustdoc-ui/issues/issue-96287.rs:1:#![feature(type_alias_impl_trait)]
tests/rustdoc-ui/issues/issue-79494.rs:3:#![feature(const_transmute)]
tests/rustdoc-ui/check-cfg/check-cfg-test.stderr:4:LL | #[cfg(feature = "invalid")]
tests/rustdoc-ui/check-cfg/check-cfg-test.stderr:7:   = note: expected values for `feature` are: test
tests/rustdoc-ui/coverage/exotic.rs:4:#![feature(rustdoc_internals)]
tests/rustdoc-ui/coverage/exotic.rs:5:#![feature(rustc_attrs)]
tests/rustdoc-ui/coverage/exotic.rs:7://! the features only used in std also have entries in the table, so make sure those get pulled out
tests/rustdoc-ui/coverage/traits.rs:4:#![feature(trait_alias)]
tests/rustdoc-ui/coverage/traits.rs:5:#![feature(type_alias_impl_trait)]
tests/rustdoc-ui/coverage/basic.rs:4:#![feature(extern_types)]
tests/rustdoc-ui/auxiliary/panic-item.rs:4:#![feature(lang_items)]
tests/rustdoc-ui/tuple-variadic-check.rs:1:#![feature(rustdoc_internals)]
tests/incremental/issue-39828/auxiliary/generic.rs:5:#![feature(rustc_attrs)]
tests/incremental/change_crate_dep_kind.rs:10:#![feature(panic_unwind)]
tests/incremental/ich_resolve_results.rs:7:#![feature(rustc_attrs)]
tests/incremental/issue-49595/issue-49595.rs:5:#![feature(rustc_attrs)]
tests/incremental/inlined_hir_34991/main.rs:9:#![feature(rustc_attrs)]
tests/incremental/issue-61530.rs:1:#![feature(repr_simd, platform_intrinsics)]
tests/incremental/hashes/extern_mods.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/extern_mods.rs:17:#![feature(unboxed_closures)]
tests/incremental/hashes/let_expressions.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/consts.rs:13:#![feature(rustc_attrs)]
tests/incremental/hashes/function_interfaces.rs:16:#![feature(linkage)]
tests/incremental/hashes/function_interfaces.rs:17:#![feature(rustc_attrs)]
tests/incremental/hashes/struct_defs.rs:21:#![feature(rustc_attrs)]
tests/incremental/hashes/match_expressions.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/statics.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/statics.rs:17:#![feature(linkage)]
tests/incremental/hashes/statics.rs:18:#![feature(thread_local)]
tests/incremental/hashes/loop_expressions.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/indexing_expressions.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/while_let_loops.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/for_loops.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/exported_vs_not.rs:9:#![feature(rustc_attrs)]
tests/incremental/hashes/while_loops.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/if_expressions.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/unary_and_binary_exprs.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/enum_constructors.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/struct_constructors.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/type_defs.rs:18:#![feature(rustc_attrs)]
tests/incremental/hashes/closure_expressions.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/enum_defs.rs:21:#![feature(rustc_attrs)]
tests/incremental/hashes/enum_defs.rs:22:#![feature(stmt_expr_attributes)]
tests/incremental/hashes/trait_impls.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/trait_impls.rs:17:#![feature(specialization)]
tests/incremental/hashes/panic_exprs.rs:16:#![feature(rustc_attrs)]
tests/incremental/hashes/inline_asm.rs:17:#![feature(rustc_attrs)]
tests/incremental/hashes/inherent_impls.rs:17:#![feature(rustc_attrs)]
tests/incremental/hashes/call_expressions.rs:17:#![feature(rustc_attrs)]
tests/incremental/hashes/trait_defs.rs:21:#![feature(rustc_attrs)]
tests/incremental/hashes/trait_defs.rs:23:#![feature(associated_type_defaults)]
tests/incremental/change_pub_inherent_method_sig/struct_point.rs:8:#![feature(rustc_attrs)]
tests/incremental/change_pub_inherent_method_sig/struct_point.rs:9:#![feature(stmt_expr_attributes)]
tests/incremental/change_symbol_export_status.rs:6:#![feature(rustc_attrs)]
tests/incremental/change_crate_order/main.rs:5:#![feature(rustc_attrs)]
tests/incremental/spike-neg2.rs:11:#![feature(rustc_attrs)]
tests/incremental/change_private_fn_cc/struct_point.rs:10:#![feature(rustc_attrs)]
tests/incremental/change_private_fn_cc/struct_point.rs:11:#![feature(stmt_expr_attributes)]
tests/incremental/struct_change_field_name.rs:8:#![feature(rustc_attrs)]
tests/incremental/callee_caller_cross_crate/b.rs:5:#![feature(rustc_attrs)]
tests/incremental/split_debuginfo_mode.rs:14:#![feature(rustc_attrs)]
tests/incremental/crate_hash_reorder.rs:6:#![feature(rustc_attrs)]
tests/incremental/ich_method_call_trait_scope.rs:7:#![feature(rustc_attrs)]
tests/incremental/change_private_impl_method/struct_point.rs:8:#![feature(rustc_attrs)]
tests/incremental/change_private_impl_method/struct_point.rs:9:#![feature(stmt_expr_attributes)]
tests/incremental/struct_remove_field.rs:7:#![feature(rustc_attrs)]
tests/incremental/delayed_span_bug.rs:5:#![feature(rustc_attrs)]
tests/incremental/const-generics/hash-tyvid-regression-3.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/hash-tyvid-regression-3.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/hash-tyvid-regression-2.rs:2:#![feature(generic_const_exprs, adt_const_params)]
tests/incremental/const-generics/hash-tyvid-regression-2.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/change-const-param-gat.rs:3:#![feature(generic_associated_types)]
tests/incremental/const-generics/issue-68477.rs:5:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-3.rs:2:#![feature(generic_const_exprs, adt_const_params)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-3.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-2.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-2.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-1.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-1.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-3.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-3.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-86953.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-86953.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-88022.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-88022.rs:3:#![allow(incomplete_features, unused_braces)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-1.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-1.rs:3:#![allow(incomplete_features, unused_braces)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-82034.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-82034.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/hash-tyvid-regression-1.rs:2:#![feature(generic_const_exprs, adt_const_params)]
tests/incremental/const-generics/hash-tyvid-regression-1.rs:3:#![allow(incomplete_features)]
tests/incremental/const-generics/hash-tyvid-regression-4.rs:2:#![feature(generic_const_exprs)]
tests/incremental/const-generics/hash-tyvid-regression-4.rs:3:#![allow(incomplete_features)]
tests/incremental/split_debuginfo_cached.rs:12:#![feature(rustc_attrs)]
tests/incremental/hello_world.rs:5:#![feature(rustc_attrs)]
tests/incremental/rlib_cross_crate/b.rs:11:#![feature(rustc_attrs)]
tests/incremental/issue-42602.rs:13:#![feature(rustc_attrs)]
tests/incremental/span_hash_stable/main.rs:10:#![feature(rustc_attrs)]
tests/incremental/type_alias_cross_crate/b.rs:5:#![feature(rustc_attrs)]
tests/incremental/issue-59524-layout-scalar-valid-range-is-not-unused.rs:9:#![feature(rustc_attrs)]
tests/incremental/spans_significant_w_panic.rs:8:#![feature(rustc_attrs)]
tests/incremental/spans_in_type_debuginfo.rs:11:#![feature(rustc_attrs)]
tests/incremental/krate_reassign_34991/main.rs:4:#![feature(rustc_attrs)]
tests/incremental/hygiene/load_cached_hygiene.rs:24:#![feature(rustc_attrs)]
tests/incremental/hygiene/auxiliary/cached_hygiene.rs:7:#![feature(rustc_attrs)]
tests/incremental/struct_add_field.rs:7:#![feature(rustc_attrs)]
tests/incremental/const-generic-type-cycle.rs:8:#![feature(trait_alias)]
tests/incremental/krate-inlined.rs:9:#![feature(rustc_attrs)]
tests/incremental/spans_significant_w_debuginfo.rs:9:#![feature(rustc_attrs)]
tests/incremental/krate-inherent.rs:6:#![feature(rustc_attrs)]
tests/incremental/struct_change_field_type_cross_crate/b.rs:5:#![feature(rustc_attrs)]
tests/incremental/cache_file_headers.rs:15:#![feature(rustc_attrs)]
tests/incremental/dirty_clean.rs:5:#![feature(rustc_attrs)]
tests/incremental/struct_change_field_type.rs:7:#![feature(rustc_attrs)]
tests/incremental/source_loc_macros.rs:8:#![feature(rustc_attrs)]
tests/incremental/thinlto/cgu_keeps_identical_fn.rs:10:#![feature(rustc_attrs)]
tests/incremental/thinlto/cgu_invalidated_via_import.rs:9:#![feature(rustc_attrs)]
tests/incremental/thinlto/independent_cgus_dont_affect_each_other.rs:8:#![feature(rustc_attrs)]
tests/incremental/issue-80336-invalid-span.rs:9:    let _ = is_x86_feature_detected!("avx2");
tests/incremental/lto-in-linker.rs:6:#![feature(rustc_attrs)]
tests/incremental/foreign.rs:7:#![feature(rustc_private)]
tests/incremental/ich_nested_items.rs:9:#![feature(rustc_attrs)]
tests/incremental/string_constant.rs:6:#![feature(rustc_attrs)]
tests/incremental/change_pub_inherent_method_body/struct_point.rs:8:#![feature(rustc_attrs)]
tests/incremental/change_pub_inherent_method_body/struct_point.rs:9:#![feature(stmt_expr_attributes)]
tests/incremental/unchecked_dirty_clean.rs:5:#![feature(rustc_attrs)]
tests/incremental/spike-neg1.rs:11:#![feature(rustc_attrs)]
tests/incremental/rlib-lto.rs:5:#![feature(rustc_attrs)]
tests/incremental/change_private_impl_method_cc/struct_point.rs:10:#![feature(rustc_attrs)]
tests/incremental/change_private_impl_method_cc/struct_point.rs:11:#![feature(stmt_expr_attributes)]
tests/incremental/issue-38222.rs:7:#![feature(rustc_attrs)]
tests/incremental/struct_change_nothing.rs:7:#![feature(rustc_attrs)]
tests/incremental/commandline-args.rs:8:#![feature(rustc_attrs)]
tests/incremental/change_add_field/struct_point.rs:10:#![feature(rustc_attrs)]
tests/incremental/change_add_field/struct_point.rs:11:#![feature(stmt_expr_attributes)]
tests/incremental/hash-module-order.rs:12:#![feature(rustc_attrs)]
tests/incremental/add_private_fn_at_krate_root_cc/struct_point.rs:10:#![feature(rustc_attrs)]
tests/incremental/add_private_fn_at_krate_root_cc/struct_point.rs:11:#![feature(stmt_expr_attributes)]
tests/incremental/change_implementation_cross_crate/main.rs:8:#![feature(rustc_attrs)]
tests/incremental/remove-private-item-cross-crate/main.rs:8:#![feature(rustc_attrs)]
tests/incremental/issue-35593.rs:7:#![feature(rustc_attrs)]
tests/incremental/spike.rs:8:#![feature(rustc_attrs)]
tests/incremental/remapped_paths_cc/main.rs:9:#![feature(rustc_attrs)]
tests/incremental/remapped_paths_cc/auxiliary/extern_crate.rs:5:#![feature(rustc_attrs)]
tests/incremental/issue-59523-on-implemented-is-not-unused.rs:8:#![feature(rustc_attrs)]
tests/incremental/auxiliary/issue-79661.rs:1:#![feature(rustc_attrs)]
tests/incremental/change_private_fn/struct_point.rs:8:#![feature(rustc_attrs)]
tests/incremental/change_private_fn/struct_point.rs:9:#![feature(stmt_expr_attributes)]
tests/incremental/feature_gate.rs:1:// This test makes sure that we detect changed feature gates.
tests/incremental/feature_gate.rs:6:#![feature(rustc_attrs)]
tests/incremental/feature_gate.rs:7:#![cfg_attr(rpass1, feature(abi_unadjusted))]
tests/assembly/is_aligned.rs:10:#![feature(core_intrinsics)]
tests/assembly/is_aligned.rs:11:#![feature(pointer_is_aligned)]
tests/assembly/asm/riscv-types.rs:7:// compile-flags: -C target-feature=+d
tests/assembly/asm/riscv-types.rs:9:#![feature(no_core, lang_items, rustc_attrs)]
tests/assembly/asm/loongarch-type.rs:6:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]
tests/assembly/asm/avr-types.rs:5:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]
tests/assembly/asm/avr-modifiers.rs:5:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]
tests/assembly/asm/mips-types.rs:8:#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]
tests/assembly/asm/arm-modifiers.rs:4:// compile-flags: -C target-feature=+neon
tests/assembly/asm/arm-modifiers.rs:7:#![feature(no_core, lang_items, rustc_attrs, repr_simd)]
tests/assembly/asm/aarch64-el2vmsa.rs:5:#![feature(no_core, lang_items, rustc_attrs)]
tests/assembly/asm/nvptx-types.rs:6:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]
tests/assembly/asm/aarch64-types.rs:5:#![feature(no_core, lang_items, rustc_attrs, repr_simd)]
tests/assembly/asm/hexagon-types.rs:5:#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]
tests/assembly/asm/powerpc-types.rs:8:#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]
tests/assembly/asm/arm-types.rs:3:// compile-flags: -C target-feature=+neon
tests/assembly/asm/arm-types.rs:6:#![feature(no_core, lang_items, rustc_attrs, repr_simd)]
tests/assembly/asm/wasm-types.rs:6:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]
tests/assembly/asm/msp430-types.rs:5:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch, asm_const)]
tests/assembly/asm/inline-asm-avx.rs:6:#![feature(portable_simd)]
tests/assembly/asm/inline-asm-avx.rs:11:#[target_feature(enable = "avx")]
tests/assembly/asm/s390x-types.rs:6:#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]
tests/assembly/asm/x86-modifiers.rs:9:// compile-flags: -C target-feature=+avx512bw
tests/assembly/asm/x86-modifiers.rs:11:#![feature(no_core, lang_items, rustc_attrs)]
tests/assembly/asm/x86-types.rs:8:// compile-flags: -C target-feature=+avx512bw
tests/assembly/asm/x86-types.rs:10:#![feature(no_core, lang_items, rustc_attrs, repr_simd)]
tests/assembly/asm/bpf-types.rs:2:// compile-flags: --target bpfel-unknown-none -C target_feature=+alu32
tests/assembly/asm/bpf-types.rs:5:#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]
tests/assembly/asm/m68k-types.rs:5:#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]
tests/assembly/asm/aarch64-modifiers.rs:6:#![feature(no_core, lang_items, rustc_attrs)]
tests/assembly/asm/global_asm.rs:7:#![feature(asm_const)]
tests/assembly/nvptx-kernel-abi/nvptx-kernel-args-abi-v7.rs:21:#![feature(abi_ptx, lang_items, no_core)]
tests/assembly/pic-relocation-model.rs:7:#![feature(no_core, lang_items)]
tests/assembly/pie-relocation-model.rs:7:#![feature(no_core, lang_items)]
tests/assembly/nvptx-safe-naming.rs:6:#![feature(abi_ptx)]
tests/assembly/slice-is_ascii.rs:11:#![feature(str_internals)]
tests/assembly/aarch64-naked-fn-no-bti-prolog.rs:7:#![feature(naked_functions)]
tests/assembly/nvptx-linking-binary.rs:6:#![feature(abi_ptx)]
tests/assembly/x86_64-naked-fn-no-cet-prolog.rs:7:#![feature(naked_functions)]
tests/assembly/dwarf5.rs:6:#![feature(no_core, lang_items)]
tests/assembly/stack-protector/stack-protector-target-support.rs:182:#![feature(no_core, lang_items)]
tests/assembly/stack-protector/stack-protector-heuristics-effect.rs:15:#![allow(incomplete_features)]
tests/assembly/stack-protector/stack-protector-heuristics-effect.rs:17:#![feature(unsized_locals, unsized_fn_params)]
tests/assembly/stack-protector/stack-protector-heuristics-effect.rs:355:// this is support for the "unsized locals" unstable feature:
tests/assembly/stack-protector/stack-protector-heuristics-effect.rs:356:// https://doc.rust-lang.org/unstable-book/language-features/unsized-locals.html.
tests/assembly/x86-stack-probes.rs:10:#![feature(no_core, lang_items)]
tests/assembly/aarch64-pointer-auth.rs:8:#![feature(no_core, lang_items)]
tests/assembly/nvptx-internalizing.rs:6:#![feature(abi_ptx)]
tests/assembly/x86_64-sse_crc.rs:3:// compile-flags: --crate-type staticlib -Ctarget-feature=+sse4.2
tests/assembly/sparc-struct-abi.rs:9:#![feature(no_core, lang_items)]
tests/assembly/static-relocation-model.rs:11:#![feature(no_core, lang_items)]
tests/assembly/nvptx-linking-cdylib.rs:6:#![feature(abi_ptx)]
tests/assembly/target-feature-multiple.rs:5:// [TWOFLAGS] compile-flags: -C target-feature=+rdrnd -C target-feature=+rdseed
tests/assembly/target-feature-multiple.rs:6:// [SINGLEFLAG] compile-flags: -C target-feature=+rdrnd,+rdseed
tests/assembly/target-feature-multiple.rs:8:// Target features set via flags aren't necessarily reflected in the IR, so the only way to test
tests/assembly/target-feature-multiple.rs:9:// them is to build code that requires the features to be enabled to work.
tests/assembly/target-feature-multiple.rs:17:// See also tests/codegen/target-feature-overrides.rs
tests/assembly/target-feature-multiple.rs:18:#![feature(no_core, lang_items, link_llvm_intrinsics, abi_unadjusted)]
tests/assembly/target-feature-multiple.rs:28:// Use of these requires target features to be enabled
tests/assembly/auxiliary/breakpoint-panic-handler.rs:1:#![feature(core_intrinsics)]
tests/assembly/wasm_exceptions.rs:3:// compile-flags: -C target-feature=+exception-handling
tests/assembly/wasm_exceptions.rs:8:#![feature(core_intrinsics)]
tests/assembly/wasm_exceptions.rs:9:#![feature(rustc_attrs)]
tests/assembly/nvptx-atomics.rs:6:#![feature(abi_ptx, core_intrinsics)]
tests/rustdoc-json/methods/abi.rs:3:#![feature(abi_vectorcall)]
tests/rustdoc-json/methods/abi.rs:4:#![feature(no_core)]
tests/rustdoc-json/glob_import.rs:3:#![feature(no_core)]
tests/rustdoc-json/traits/trait_alias.rs:4:#![feature(trait_alias)]
tests/rustdoc-json/traits/private_supertrait.rs:3:#![feature(no_core)]
tests/rustdoc-json/traits/supertrait.rs:3:#![feature(no_core)]
tests/rustdoc-json/traits/supertrait.rs:4:#![feature(lang_items)]
tests/rustdoc-json/traits/implementors.rs:1:#![feature(no_core)]
tests/rustdoc-json/reexport/same_type_reexported_more_than_once.rs:5:#![feature(no_core)]
tests/rustdoc-json/reexport/glob_collision.rs:3:#![feature(no_core)]
tests/rustdoc-json/reexport/export_extern_crate_as_self.rs:3:#![feature(no_core)]
tests/rustdoc-json/reexport/mod_not_included.rs:3:#![feature(no_core)]
tests/rustdoc-json/reexport/rename_private.rs:4:#![feature(no_core)]
tests/rustdoc-json/reexport/same_name_different_types.rs:3:#![feature(no_core)]
tests/rustdoc-json/reexport/simple_private.rs:3:#![feature(no_core)]
tests/rustdoc-json/reexport/macro.rs:4:#![feature(no_core)]
tests/rustdoc-json/reexport/in_root_and_mod_pub.rs:1:#![feature(no_core)]
tests/rustdoc-json/reexport/glob_private.rs:4:#![feature(no_core)]
tests/rustdoc-json/reexport/pub_use_doc_hidden.rs:3:#![feature(no_core)]
tests/rustdoc-json/reexport/in_root_and_mod.rs:1:#![feature(no_core)]
tests/rustdoc-json/reexport/private_two_names.rs:7:#![feature(no_core)]
tests/rustdoc-json/reexport/rename_public.rs:4:#![feature(no_core)]
tests/rustdoc-json/reexport/private_twice_one_inline.rs:8:#![feature(no_core)]
tests/rustdoc-json/reexport/simple_public.rs:4:#![feature(no_core)]
tests/rustdoc-json/reexport/glob_extern.rs:4:#![feature(no_core)]
tests/rustdoc-json/fns/generic_args.rs:3:#![feature(no_core)]
tests/rustdoc-json/fns/generics.rs:3:#![feature(no_core)]
tests/rustdoc-json/fns/abi.rs:3:#![feature(abi_vectorcall)]
tests/rustdoc-json/fns/extern_c_variadic.rs:1:#![feature(no_core)]
tests/rustdoc-json/fns/generic_returns.rs:3:#![feature(no_core)]
tests/rustdoc-json/enums/use_variant.rs:1:#![feature(no_core)]
tests/rustdoc-json/enums/field_hidden.rs:4:#![feature(no_core)]
tests/rustdoc-json/enums/use_glob.rs:3:#![feature(no_core)]
tests/rustdoc-json/enums/kind.rs:3:#![feature(no_core)]
tests/rustdoc-json/enums/discriminant/limits.rs:2:#![feature(repr128)]
tests/rustdoc-json/enums/discriminant/limits.rs:3:#![allow(incomplete_features)]
tests/rustdoc-json/enums/tuple_fields_hidden.rs:1:#![feature(no_core)]
tests/rustdoc-json/return_private.rs:4:#![feature(no_core)]
tests/rustdoc-json/impls/impl_item_visibility_show_hidden.rs:2:#![feature(no_core)]
tests/rustdoc-json/impls/local_for_local_primitive.rs:1:#![feature(no_core)]
tests/rustdoc-json/impls/local_for_local_primitive.rs:2:#![feature(rustc_attrs)]
tests/rustdoc-json/impls/local_for_local.rs:1:#![feature(no_core)]
tests/rustdoc-json/impls/issue-112852-dangling-trait-impl-id-2.rs:1:#![feature(no_core)]
tests/rustdoc-json/impls/auto.rs:1:#![feature(no_core, auto_traits, lang_items)]
tests/rustdoc-json/impls/import_from_private.rs:3:#![feature(no_core)]
tests/rustdoc-json/impls/impl_item_visibility.rs:1:#![feature(no_core)]
tests/rustdoc-json/impls/issue-112852-dangling-trait-impl-id.rs:1:#![feature(no_core)]
tests/rustdoc-json/impls/issue-112852-dangling-trait-impl-id-3.rs:3:#![feature(no_core)]
tests/rustdoc-json/impls/impl_item_visibility_show_private.rs:2:#![feature(no_core)]
tests/rustdoc-json/primitives/local_primitive.rs:3:#![feature(no_core)]
tests/rustdoc-json/primitives/local_primitive.rs:4:#![feature(rustc_attrs)]
tests/rustdoc-json/primitives/local_primitive.rs:5:#![feature(rustdoc_internals)]
tests/rustdoc-json/primitives/use_primitive.rs:3:#![feature(rustc_attrs)]
tests/rustdoc-json/primitives/primitive_overloading.rs:5:#![feature(rustc_attrs)]
tests/rustdoc-json/primitives/primitive_overloading.rs:6:#![feature(no_core)]
tests/rustdoc-json/primitives/primitive_impls.rs:1:#![feature(no_core)]
tests/rustdoc-json/primitives/primitive_impls.rs:2:#![feature(rustc_attrs)]
tests/rustdoc-json/primitives/primitive_impls.rs:3:#![feature(rustdoc_internals)]
tests/rustdoc-json/primitives/primitive_type.rs:1:#![feature(never_type)]
tests/rustdoc-json/fn_pointer/generics.rs:3:#![feature(no_core)]
tests/rustdoc-json/fn_pointer/abi.rs:3:#![feature(abi_vectorcall)]
tests/rustdoc-json/lifetime/longest.rs:3:#![feature(no_core)]
tests/rustdoc-json/lifetime/outlives.rs:3:#![feature(no_core)]
tests/rustdoc-json/type/inherent_associated_type.rs:2:#![feature(inherent_associated_types)]
tests/rustdoc-json/type/inherent_associated_type.rs:3:#![feature(no_core)]
tests/rustdoc-json/type/inherent_associated_type.rs:4:#![allow(incomplete_features)]
tests/rustdoc-json/type/inherent_associated_type_bound.rs:2:#![feature(inherent_associated_types)]
tests/rustdoc-json/type/inherent_associated_type_bound.rs:3:#![allow(incomplete_features)]
tests/rustdoc-json/type/inherent_associated_type_projections.rs:2:#![feature(inherent_associated_types)]
tests/rustdoc-json/type/inherent_associated_type_projections.rs:3:#![allow(incomplete_features)]
tests/rustdoc-json/type/extern.rs:1:#![feature(extern_types)]
tests/rustdoc-json/generic-associated-types/gats.rs:4:#![feature(lang_items, no_core)]
tests/rustdoc-json/non_lifetime_binders.rs:3:#![feature(non_lifetime_binders)]
tests/rustdoc-json/non_lifetime_binders.rs:4:#![allow(incomplete_features)]
tests/rustdoc-json/non_lifetime_binders.rs:7:#![feature(lang_items, no_core)]
tests/rustdoc-json/doc_hidden_failure.rs:3:#![feature(no_core)]
tests/rustdoc-json/stripped_modules.rs:2:#![feature(no_core)]
tests/rustdoc-json/keyword.rs:6:#![feature(rustdoc_internals)]
tests/rustdoc-gui/search-result-go-to-first.goml:1:// This test ensures that the "go_to_first" feature is working as expected.
tests/rustdoc-gui/search-result-go-to-first.goml:4:// that the feature is changing page as expected.
tests/rustdoc-gui/search-result-go-to-first.goml:16:// Now we can check that the feature is working as expected!
tests/rustdoc-gui/src/lib2/lib.rs:3:#![feature(doc_cfg)]
tests/rustdoc-gui/src/lib2/lib.rs:22:#[doc(cfg(feature = "foo-method"))]
tests/rustdoc-gui/src/lib2/lib.rs:33:#[doc(cfg(feature = "foo-method"))]
tests/rustdoc-gui/src/staged_api/Cargo.toml:9:[features]
tests/rustdoc-gui/src/staged_api/Cargo.toml:10:default = ["some_feature", "some_other_feature"]
tests/rustdoc-gui/src/staged_api/Cargo.toml:11:some_feature = []
tests/rustdoc-gui/src/staged_api/Cargo.toml:12:some_other_feature = []
tests/rustdoc-gui/src/staged_api/lib.rs:1:#![feature(staged_api)]
tests/rustdoc-gui/src/staged_api/lib.rs:2:#![stable(feature = "some_feature", since = "1.3.5")]
tests/rustdoc-gui/src/staged_api/lib.rs:4:#[stable(feature = "some_feature", since = "1.3.5")]
tests/rustdoc-gui/src/staged_api/lib.rs:8:    #[stable(feature = "some_feature", since = "1.3.5")]
tests/rustdoc-gui/src/staged_api/lib.rs:10:    #[stable(feature = "some_other_feature", since = "1.3.6")]
tests/rustdoc-gui/src/test_docs/Cargo.toml:11:[features]
tests/rustdoc-gui/src/test_docs/Cargo.toml:12:default = ["some-feature"]
tests/rustdoc-gui/src/test_docs/Cargo.toml:13:some-feature = []
tests/rustdoc-gui/src/test_docs/lib.rs:2://! documentation generated so we can test each different features.
tests/rustdoc-gui/src/test_docs/lib.rs:6:#![feature(rustdoc_internals)]
tests/rustdoc-gui/src/test_docs/lib.rs:7:#![feature(doc_cfg)]
tests/rustdoc-gui/src/test_docs/lib.rs:8:#![feature(associated_type_defaults)]
tests/rustdoc-gui/src/test_docs/lib.rs:11:Enable the feature <span class="stab portability"><code>some-feature</code></span> to enjoy
tests/rustdoc-gui/src/test_docs/lib.rs:13:Enable the feature <span class="stab portability"><code>some-feature</code></span> to enjoy
tests/rustdoc-gui/src/test_docs/lib.rs:15:Enable the feature <span class="stab portability"><code>some-feature</code></span> to enjoy
tests/rustdoc-gui/src/test_docs/lib.rs:307:#[doc(cfg(feature = "some-feature"))]
tests/rustdoc-gui/src/test_docs/lib.rs:513:        any(not(feature = "appservice-api-c"), not(feature = "appservice-api-s")),
tests/rustdoc-gui/src/test_docs/lib.rs:514:        any(not(feature = "client"), not(feature = "server")),
tests/run-make-fulldeps/obtain-borrowck/driver.rs:1:#![feature(rustc_private)]
tests/run-make-fulldeps/issue-19371/foo.rs:1:#![feature(rustc_private)]
tests/run-make-fulldeps/hotplug_codegen_backend/some_crate.rs:1:#![feature(no_core)]
tests/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs:1:#![feature(rustc_private)]
tests/rustdoc-js/never-search.rs:1:#![feature(never_type)]
tests/rustdoc-js/foreign-type-path.rs:1:#![feature(extern_types)]
tests/ui-fulldeps/pathless-extern-unstable.rs:7://~^ ERROR use of unstable library feature 'rustc_private'
tests/ui-fulldeps/dropck-tarena-cycle-checked.rs:9:#![feature(rustc_private)]
tests/ui-fulldeps/regions-mock-tcx.rs:7:// following features:
tests/ui-fulldeps/regions-mock-tcx.rs:12:#![feature(rustc_private, libc)]
tests/ui-fulldeps/lint-pass-macros.rs:4:#![feature(rustc_private)]
tests/ui-fulldeps/dropck-tarena-unsound-drop.rs:12:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/rustc_pass_by_value.rs:3:#![feature(rustc_attrs)]
tests/ui-fulldeps/internal-lints/rustc_pass_by_value.rs:4:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/diagnostics.rs:4:#![feature(rustc_attrs)]
tests/ui-fulldeps/internal-lints/diagnostics.rs:5:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/default_hash_types.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/ty_tykind_usage.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/bad_opt_access.rs:7:#![feature(rustc_private)]
tests/ui-fulldeps/internal-lints/query_stability.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/dropck_tarena_sound_drop.rs:13:#![feature(rustc_private)]
tests/ui-fulldeps/empty-struct-braces-derive.rs:4:#![feature(rustc_private)]
tests/ui-fulldeps/stable-mir/crate-info.rs:9:#![feature(rustc_private)]
tests/ui-fulldeps/stable-mir/crate-info.rs:10:#![feature(assert_matches)]
tests/ui-fulldeps/plugin/multiple-plugins.rs:8:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-group-plugin.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-tool-test.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-plugin-cmdline-load.rs:6:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-plugin-forbid-cmdline.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-plugin-deny-attr.rs:4:#![feature(plugin)]
tests/ui-fulldeps/plugin/lto-syntax-extension.rs:8:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-plugin-deny-cmdline.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-group-plugin-deny-cmdline.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/issue-15778-fail.rs:5:#![feature(plugin)] //~ ERROR crate is not marked with #![crate_okay]
tests/ui-fulldeps/plugin/plugin-args.rs:4:#![feature(plugin)]
tests/ui-fulldeps/plugin/macro-crate-rlib.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-tool-cmdline-allow.rs:6:#![feature(plugin)]
tests/ui-fulldeps/plugin/gated-plugin.stderr:8:   = help: add `#![feature(plugin)]` to the crate attributes to enable
tests/ui-fulldeps/plugin/lint-plugin-forbid-attrs.rs:4:#![feature(plugin)]
tests/ui-fulldeps/plugin/feature-gate-plugin.stderr:2:  --> $DIR/feature-gate-plugin.rs:4:1
tests/ui-fulldeps/plugin/feature-gate-plugin.stderr:8:   = help: add `#![feature(plugin)]` to the crate attributes to enable
tests/ui-fulldeps/plugin/feature-gate-plugin.stderr:11:  --> $DIR/feature-gate-plugin.rs:4:1
tests/ui-fulldeps/plugin/lint-plugin.rs:4:#![feature(plugin)]
tests/ui-fulldeps/plugin/issue-15778-fail.stderr:12:LL | / #![feature(plugin)]
tests/ui-fulldeps/plugin/outlive-expansion-phase.rs:5:#![feature(plugin)]
tests/ui-fulldeps/plugin/lint-plugin-cmdline-allow.rs:6:#![feature(plugin)]
tests/ui-fulldeps/plugin/auxiliary/multiple-plugins-2.rs:2:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/empty-plugin.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/lint-tool-test.rs:1:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/lint-group-plugin-test.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/lint-for-crate.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/outlive-expansion-phase.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/lint-plugin-test.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/issue-40001-plugin.rs:1:#![feature(plugin, rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/lto-syntax-extension-plugin.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/rlib-crate-test.rs:4:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/auxiliary/multiple-plugins-1.rs:2:#![feature(rustc_private)]
tests/ui-fulldeps/plugin/issue-40001.rs:5:#![feature(plugin, register_tool)]
tests/ui-fulldeps/compiler-calls.rs:7:#![feature(rustc_private)]
tests/ui-fulldeps/pprust-expr-roundtrip.rs:20:#![feature(rustc_private)]
tests/ui-fulldeps/mod_dir_path_canonicalized.rs:7:#![feature(rustc_private)]
tests/ui-fulldeps/hash-stable-is-unstable.stderr:1:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui-fulldeps/hash-stable-is-unstable.stderr:8:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui-fulldeps/hash-stable-is-unstable.stderr:10:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui-fulldeps/hash-stable-is-unstable.stderr:17:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui-fulldeps/hash-stable-is-unstable.stderr:19:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui-fulldeps/hash-stable-is-unstable.stderr:26:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui-fulldeps/hash-stable-is-unstable.stderr:28:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui-fulldeps/hash-stable-is-unstable.stderr:35:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui-fulldeps/hash-stable-is-unstable.stderr:37:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui-fulldeps/hash-stable-is-unstable.stderr:44:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui-fulldeps/fluent-messages/test.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/missing-rustc-driver-error.rs:7:#![feature(rustc_private)]
tests/ui-fulldeps/hash-stable-is-unstable.rs:3://~^ use of unstable library feature 'rustc_private'
tests/ui-fulldeps/hash-stable-is-unstable.rs:5://~^ use of unstable library feature 'rustc_private'
tests/ui-fulldeps/hash-stable-is-unstable.rs:7://~^ use of unstable library feature 'rustc_private'
tests/ui-fulldeps/hash-stable-is-unstable.rs:10://~^ use of unstable library feature 'rustc_private'
tests/ui-fulldeps/hash-stable-is-unstable.rs:13://~^ use of unstable library feature 'rustc_private'
tests/ui-fulldeps/rustc_encodable_hygiene.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/session-diagnostic/invalid-variable.rs:5:#![feature(rustc_private)]
tests/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs:11:#![feature(rustc_private)]
tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.rs:13:#![feature(rustc_private)]
tests/ui-fulldeps/session-diagnostic/enforce_slug_naming.rs:3:#![feature(rustc_private)]
tests/ui-fulldeps/session-diagnostic/diagnostic-derive.rs:13:#![feature(rustc_private)]
tests/ui-fulldeps/deriving-hygiene.rs:4:#![feature(rustc_private)]
tests/ui-fulldeps/pathless-extern-unstable.stderr:1:error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?
tests/ui-fulldeps/pathless-extern-unstable.stderr:8:   = help: add `#![feature(rustc_private)]` to the crate attributes to enable
tests/ui-fulldeps/deriving-global.rs:3:#![feature(rustc_private)]
tests/codegen/sanitizer-cfi-normalize-integers.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers
tests/codegen/generator-debug.rs:10:#![feature(generators, generator_trait)]
tests/codegen/used_with_arg.rs:2:#![feature(used_with_arg)]
tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers -Zsanitizer-cfi-generalize-pointers
tests/codegen/simd-wide-sum.rs:11:#![feature(portable_simd)]
tests/codegen/stack-probes-call.rs:14:#![feature(no_core, lang_items)]
tests/codegen/c-variadic-copy.rs:4:#![feature(c_variadic)]
tests/codegen/frame-pointer.rs:14:#![feature(no_core, lang_items)]
tests/codegen/sanitizer_scs_attr_check.rs:8:#![feature(no_sanitize)]
tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle.rs:11:#![feature(no_core, lang_items)]
tests/codegen/sanitizer-kcfi-add-kcfi-flag.rs:4:// compile-flags: -Ctarget-feature=-crt-static -Zsanitizer=kcfi
tests/codegen/sanitizer-cfi-emit-type-checks.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Copt-level=0
tests/codegen/ffi-pure.rs:3:#![feature(ffi_pure)]
tests/codegen/repr-transparent.rs:9:#![feature(repr_simd, transparent_unions)]
tests/codegen/c-variadic.rs:6:#![feature(c_variadic)]
tests/codegen/c-variadic.rs:7:#![feature(c_unwind)]
tests/codegen/naked-functions.rs:6:#![feature(naked_functions)]
tests/codegen/dst-vtable-align-nonzero.rs:4:#![feature(core_intrinsics)]
tests/codegen/split-lto-unit.rs:4:// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsplit-lto-unit
tests/codegen/abi-repr-ext.rs:22:#![feature(no_core, lang_items)]
tests/codegen/call-llvm-intrinsics.rs:6:#![feature(link_llvm_intrinsics)]
tests/codegen/avr/avr-func-addrspace.rs:12:#![feature(no_core, lang_items, intrinsics, unboxed_closures, arbitrary_self_types)]
tests/codegen/zst-offset.rs:4:#![feature(repr_simd)]
tests/codegen/option-as-slice.rs:7:#![feature(option_as_slice)]
tests/codegen/sanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/codegen/sanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs:7:#![feature(cfi_encoding, extern_types)]
tests/codegen/i686-macosx-deployment-target.rs:8:#![feature(no_core, lang_items)]
tests/codegen/branch-protection.rs:12:#![feature(no_core, lang_items)]
tests/codegen/some-abis-do-extend-params-to-32-bits.rs:22:#![feature(no_core, lang_items)]
tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs:11:#![feature(no_core, lang_items)]
tests/codegen/virtual-function-elimination.rs:10:#![allow(incomplete_features)]
tests/codegen/virtual-function-elimination.rs:11:#![feature(unsized_locals)]
tests/codegen/simd_arith_offset.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/slice-as_chunks.rs:7:#![feature(slice_as_chunks)]
tests/codegen/sanitizer-cfi-generalize-pointers.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers
tests/codegen/riscv-abi/call-llvm-intrinsics.rs:5:#![feature(link_llvm_intrinsics)]
tests/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs:6:#![feature(no_core, lang_items)]
tests/codegen/x86_64-macosx-deployment-target.rs:8:#![feature(no_core, lang_items)]
tests/codegen/naked-noinline.rs:6:#![feature(naked_functions)]
tests/codegen/naked-nocoverage.rs:8:#![feature(naked_functions)]
tests/codegen/optimize-attr-1.rs:6:#![feature(optimize_attribute)]
tests/codegen/repr-transparent-aggregates-2.rs:18:#![feature(transparent_unions)]
tests/codegen/abi-x86-interrupt.rs:2:// llvm. Also checks that the abi_x86_interrupt feature gate allows usage
tests/codegen/abi-x86-interrupt.rs:10:#![feature(abi_x86_interrupt, no_core, lang_items)]
tests/codegen/i686-no-macosx-deployment-target.rs:8:#![feature(no_core, lang_items)]
tests/codegen/bpf-alu32.rs:3:#![feature(bpf_target_feature)]
tests/codegen/bpf-alu32.rs:7:#[target_feature(enable = "alu32")]
tests/codegen/function-arguments.rs:4:#![feature(dyn_star)]
tests/codegen/no-jump-tables.rs:10:#![feature(no_core, lang_items)]
tests/codegen/asm-sanitize-llvm.rs:6:// inadvertently rely on the LLVM-specific syntax and features.
tests/codegen/asm-sanitize-llvm.rs:8:#![feature(no_core, lang_items, rustc_attrs)]
tests/codegen/repr-transparent-aggregates-3.rs:7:#![feature(transparent_unions)]
tests/codegen/enable-lto-unit-splitting.rs:3:// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsplit-lto-unit
tests/codegen/swap-simd-types.rs:1:// compile-flags: -O -C target-feature=+avx
tests/codegen/catch-unwind.rs:17:#![feature(c_unwind)]
tests/codegen/cold-call-declare-and-call.rs:4:#![feature(rust_cold_cc)]
tests/codegen/sanitizer-no-sanitize.rs:8:#![feature(no_sanitize)]
tests/codegen/sanitizer_memtag_attr_check.rs:5:// compile-flags: -Zsanitizer=memtag -Ctarget-feature=+mte
tests/codegen/unchecked_shifts.rs:6:#![feature(unchecked_math)]
tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs:8:#![allow(incomplete_features)]
tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs:10:#![feature(adt_const_params, extern_types, inline_const, type_alias_impl_trait)]
tests/codegen/sanitizer-no-sanitize-inlining.rs:11:#![feature(no_sanitize)]
tests/codegen/asm-powerpc-clobbers.rs:10:#![feature(no_core, rustc_attrs, lang_items, asm_experimental_arch)]
tests/codegen/gdb_debug_script_load.rs:9:#![feature(start)]
tests/codegen/c-variadic-opt.rs:4:#![feature(c_variadic)]
tests/codegen/x86_64-no-macosx-deployment-target.rs:8:#![feature(no_core, lang_items)]
tests/codegen/asm-may_unwind.rs:5:#![feature(asm_unwind)]
tests/codegen/align-fn.rs:4:#![feature(fn_align)]
tests/codegen/unwind-extern-imports.rs:6:#![feature(c_unwind)]
tests/codegen/stack-probes-inline.rs:22:#![feature(no_core, lang_items)]
tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/codegen/sse42-implies-crc32.rs:7:#[target_feature(enable = "sse4.2")]
tests/codegen/sse42-implies-crc32.rs:15:// CHECK: attributes #0 {{.*"target-features"="\+sse4.2,\+crc32"}}
tests/codegen/cf-protection.rs:13:#![feature(no_core, lang_items)]
tests/codegen/sanitizer-cfi-add-enable-split-lto-unit-flag.rs:4:// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/codegen/slice_as_from_ptr_range.rs:7:#![feature(slice_from_ptr_range)]
tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs:11:#![feature(no_core, lang_items)]
tests/codegen/swap-large-types.rs:75:// memcpys below to VMOVAPS on YMMs if one enables the AVX target feature.
tests/codegen/sanitizer-cfi-add-canonical-jump-tables-flag.rs:4:// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/codegen/function-arguments-noopt.rs:7:#![feature(rustc_attrs)]
tests/codegen/abi-efiapi.rs:17:#![feature(no_core, lang_items)]
tests/codegen/ascii-char.rs:5:#![feature(ascii_char)]
tests/codegen/repr-transparent-aggregates-1.rs:17:#![feature(transparent_unions)]
tests/codegen/wasm_casts_trapping.rs:2:// compile-flags: -C target-feature=-nontrapping-fptoint
tests/codegen/mainsubprogramstart.rs:6:#![feature(start)]
tests/codegen/deduced-param-attrs.rs:4:#![allow(incomplete_features)]
tests/codegen/deduced-param-attrs.rs:5:#![feature(unsized_locals, unsized_fn_params)]
tests/codegen/align-byval.rs:21:#![feature(no_core, lang_items)]
tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs:11:#![feature(no_core, lang_items)]
tests/codegen/abi-sysv64.rs:2:// llvm. Also checks that the abi-sysv64 feature gate allows usage
tests/codegen/abi-sysv64.rs:10:#![feature(abi_x86_interrupt, no_core, lang_items)]
tests/codegen/unwind-abis/fastcall-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind)]
tests/codegen/unwind-abis/system-unwind-abi.rs:9:#![feature(c_unwind)]
tests/codegen/unwind-abis/win64-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind)]
tests/codegen/unwind-abis/nounwind.rs:5:#![feature(c_unwind)]
tests/codegen/unwind-abis/c-unwind-abi.rs:9:#![feature(c_unwind)]
tests/codegen/unwind-abis/stdcall-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind)]
tests/codegen/unwind-abis/aapcs-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind)]
tests/codegen/unwind-abis/sysv64-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind)]
tests/codegen/unwind-abis/c-unwind-abi-panic-abort.rs:7:#![feature(c_unwind)]
tests/codegen/unwind-abis/thiscall-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind, abi_thiscall)]
tests/codegen/unwind-abis/cdecl-unwind-abi.rs:9:#![feature(c_unwind)]
tests/codegen/unwind-abis/vectorcall-unwind-abi.rs:4:#![feature(no_core, lang_items, c_unwind, abi_vectorcall)]
tests/codegen/sparc-struct-abi.rs:6:#![feature(no_core, lang_items)]
tests/codegen/intrinsics/transmute.rs:6:#![feature(core_intrinsics)]
tests/codegen/intrinsics/transmute.rs:7:#![feature(custom_mir)]
tests/codegen/intrinsics/transmute.rs:8:#![feature(inline_const)]
tests/codegen/intrinsics/offset.rs:5:#![feature(core_intrinsics)]
tests/codegen/intrinsics/nearby.rs:2:#![feature(core_intrinsics)]
tests/codegen/intrinsics/mask.rs:3:#![feature(core_intrinsics)]
tests/codegen/intrinsics/offset_from.rs:5:#![feature(core_intrinsics)]
tests/codegen/intrinsics/unchecked_math.rs:2:#![feature(core_intrinsics)]
tests/codegen/intrinsics/nontemporal.rs:3:#![feature(core_intrinsics)]
tests/codegen/intrinsics/exact_div.rs:4:#![feature(core_intrinsics)]
tests/codegen/intrinsics/volatile.rs:4:#![feature(core_intrinsics)]
tests/codegen/intrinsics/likely.rs:4:#![feature(core_intrinsics)]
tests/codegen/intrinsics/prefetch.rs:4:#![feature(core_intrinsics)]
tests/codegen/intrinsics/volatile_order.rs:2:#![feature(core_intrinsics)]
tests/codegen/intrinsics/const_eval_select.rs:4:#![feature(const_eval_select)]
tests/codegen/intrinsics/const_eval_select.rs:5:#![feature(core_intrinsics)]
tests/codegen/const_scalar_pair.rs:3:#![feature(inline_const)]
tests/codegen/generator-debug-msvc.rs:10:#![feature(generators, generator_trait)]
tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers
tests/codegen/sanitizer-cfi-emit-type-checks-attr-no-sanitize.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Copt-level=0
tests/codegen/sanitizer-cfi-emit-type-checks-attr-no-sanitize.rs:7:#![feature(no_sanitize)]
tests/codegen/target-feature-overrides.rs:4:// [COMPAT] compile-flags: -Ctarget-feature=+avx2,+avx
tests/codegen/target-feature-overrides.rs:5:// [INCOMPAT] compile-flags: -Ctarget-feature=-avx2,-avx
tests/codegen/target-feature-overrides.rs:7:// See also tests/assembly/target-feature-multiple.rs
tests/codegen/target-feature-overrides.rs:8:#![feature(no_core, lang_items)]
tests/codegen/target-feature-overrides.rs:23:#[target_feature(enable = "avx")]
tests/codegen/target-feature-overrides.rs:32:// target features same as global
tests/codegen/target-feature-overrides.rs:43:// COMPAT-SAME: "target-features"="+avx2,+avx,+avx"
tests/codegen/target-feature-overrides.rs:44:// INCOMPAT-SAME: "target-features"="-avx2,-avx,+avx"
tests/codegen/target-feature-overrides.rs:46:// COMPAT-SAME: "target-features"="+avx2,+avx"
tests/codegen/target-feature-overrides.rs:47:// INCOMPAT-SAME: "target-features"="-avx2,-avx"
tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs:11:#![feature(no_core, lang_items)]
tests/codegen/float_math.rs:4:#![feature(core_intrinsics)]
tests/codegen/sanitizer-kasan-emits-instrumentation.rs:17:#![feature(no_core, no_sanitize, lang_items)]
tests/codegen/ffi-const.rs:3:#![feature(ffi_const)]
tests/codegen/align-byval-vector.rs:10:#![feature(no_core, lang_items, repr_simd, simd_ffi)]
tests/codegen/default-requires-uwtable.rs:8:#![feature(no_core, lang_items)]
tests/codegen/fastcall-inreg.rs:10:#![feature(no_core, lang_items)]
tests/codegen/intrinsic-no-unnamed-attr.rs:3:#![feature(intrinsics)]
tests/codegen/aarch64-struct-align-128.rs:11:#![feature(no_core, lang_items)]
tests/codegen/enum-debug-niche-2.rs:13:#![feature(never_type)]
tests/codegen/unpadded-simd.rs:6:#![feature(repr_simd)]
tests/codegen/unwind-and-panic-abort.rs:4:#![feature(c_unwind)]
tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers
tests/codegen/vec-shrink-panik.rs:10:#![feature(shrink_to)]
tests/codegen/issues/issue-105386-ub-in-debuginfo.rs:4:#![feature(stmt_expr_attributes)]
tests/codegen/issues/issue-111603.rs:4:#![feature(get_mut_unchecked, new_uninit)]
tests/codegen/issues/issue-96274.rs:5:#![feature(inline_const)]
tests/codegen/issues/issue-84268.rs:2:#![feature(platform_intrinsics, repr_simd)]
tests/codegen/issues/issue-44056-macos-tls-align.rs:7:#![feature(thread_local)]
tests/codegen/issues/issue-47442.rs:6:#![feature(test)]
tests/codegen/issues/issue-103285-ptr-addr-overflow-check.rs:4:#![feature(strict_provenance)]
tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs:11:#![feature(no_core, no_sanitize, lang_items)]
tests/codegen/loongarch-abi/call-llvm-intrinsics.rs:5:#![feature(link_llvm_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-pow.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-generic-select.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-log2.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-log.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-cos.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-log10.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-generic-scatter.rs:7:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:6:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:7:#![feature(inline_const)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-exp2.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-abs.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-ceil.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-floor.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-fma.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-generic-extract-insert.rs:5:#![feature(repr_simd, platform_intrinsics, min_const_generics)]
tests/codegen/simd-intrinsic/simd-intrinsic-generic-gather.rs:7:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-sin.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-powi.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-fsqrt.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/simd-intrinsic/simd-intrinsic-float-exp.rs:5:#![feature(repr_simd, platform_intrinsics)]
tests/codegen/iter-repeat-n-trivial-drop.rs:6:#![feature(iter_repeat_n)]
tests/codegen/dst-vtable-size-range.rs:4:#![feature(core_intrinsics)]
tests/codegen/union-abi.rs:8:#![feature(repr_simd)]
tests/codegen/try_question_mark_nop.rs:6:#![feature(try_blocks)]
tests/codegen/asm-target-clobbers.rs:3:// [avx512]compile-flags: -C target-feature=+avx512f
tests/codegen/unwind-extern-exports.rs:6:#![feature(c_unwind)]
tests/codegen/sanitizer-kcfi-emit-type-metadata-trait-objects.rs:11:#![feature(arbitrary_self_types, no_core, lang_items)]
tests/codegen/enum-u128.rs:15:#![allow(incomplete_features)]
tests/codegen/enum-u128.rs:16:#![feature(repr128)]
tests/codegen/tied-features-strength.rs:6:// The "+v8a" feature is matched as optional as it isn't added when we
tests/codegen/tied-features-strength.rs:8:// is LLVM-14 we can remove the optional regex matching for this feature.
tests/codegen/tied-features-strength.rs:10:// [ENABLE_SVE] compile-flags: -C target-feature=+sve
tests/codegen/tied-features-strength.rs:11:// ENABLE_SVE: attributes #0 = { {{.*}} "target-features"="{{((\+outline-atomics,?)|(\+v8a,?)?|(\+sve,?)|(\+neon,?))*}}" }
tests/codegen/tied-features-strength.rs:13:// [DISABLE_SVE] compile-flags: -C target-feature=-sve
tests/codegen/tied-features-strength.rs:14:// DISABLE_SVE: attributes #0 = { {{.*}} "target-features"="{{((\+outline-atomics,?)|(\+v8a,?)?|(-sve,?)|(\+neon,?))*}}" }
tests/codegen/tied-features-strength.rs:16:// [DISABLE_NEON] compile-flags: -C target-feature=-neon
tests/codegen/tied-features-strength.rs:17:// DISABLE_NEON: attributes #0 = { {{.*}} "target-features"="{{((\+outline-atomics,?)|(\+v8a,?)?|(-fp-armv8,?)|(-neon,?))*}}" }
tests/codegen/tied-features-strength.rs:19:// [ENABLE_NEON] compile-flags: -C target-feature=+neon
tests/codegen/tied-features-strength.rs:20:// ENABLE_NEON: attributes #0 = { {{.*}} "target-features"="{{((\+outline-atomics,?)|(\+v8a,?)?|(\+fp-armv8,?)|(\+neon,?))*}}" }
tests/codegen/tied-features-strength.rs:23:#![feature(no_core, lang_items)]
tests/codegen/wasm_exceptions.rs:5:#![feature(core_intrinsics)]
tests/codegen/wasm_exceptions.rs:6:#![feature(rustc_attrs)]
tests/codegen/ffi-returns-twice.rs:3:#![feature(ffi_returns_twice)]
tests/codegen/sanitizer-cfi-emit-type-metadata-trait-objects.rs:4:// compile-flags: -Clto -Cno-prepopulate-passes -Copt-level=0 -Ctarget-feature=-crt-static -Zsanitizer=cfi
tests/run-coverage/yield.coverage:1:    1|       |#![feature(generators, generator_trait)]
tests/run-coverage/closure_macro_async.rs:2:#![feature(no_coverage)]
tests/run-coverage/abort.rs:1:#![feature(c_unwind)]
tests/run-coverage/match_or_pattern.rs:1:#![feature(or_patterns)]
tests/run-coverage/no_cov_crate.rs:2:#![feature(no_coverage)]
tests/run-coverage/closure_macro_async.coverage:2:    2|       |#![feature(no_coverage)]
tests/run-coverage/abort.coverage:1:    1|       |#![feature(c_unwind)]
tests/run-coverage/generator.coverage:1:    1|       |#![feature(generators, generator_trait)]
tests/run-coverage/closure_macro.coverage:2:    2|       |#![feature(no_coverage)]
tests/run-coverage/yield.rs:1:#![feature(generators, generator_trait)]
tests/run-coverage/no_cov_crate.coverage:2:    2|       |#![feature(no_coverage)]
tests/run-coverage/closure_macro.rs:2:#![feature(no_coverage)]
tests/run-coverage/match_or_pattern.coverage:1:    1|       |#![feature(or_patterns)]
tests/run-coverage/generator.rs:1:#![feature(generators, generator_trait)]
tests/debuginfo/msvc-pretty-enums.rs:136:#![feature(rustc_attrs)]
tests/debuginfo/msvc-pretty-enums.rs:137:#![feature(repr128)]
tests/debuginfo/msvc-pretty-enums.rs:138:#![feature(arbitrary_enum_discriminant)]
tests/debuginfo/packed-struct.rs:62:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-static-method-on-struct-and-enum.rs:24:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/struct-style-enum.rs:42:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/tuple-struct.rs:67:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/vec-slices.rs:98:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-in-match.rs:136:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/borrowed-basic.rs:112:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/cross-crate-spans.rs:1:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/var-captured-in-nested-closure.rs:136:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/name-shadowing-and-scope-nesting.rs:98:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-enum-with-different-disr-sizes.rs:64:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/function-prologue-stepping-regular.rs:120:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/constant-debug-locs.rs:6:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/shadowed-variable.rs:82:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/simple-struct.rs:126:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-in-for-loop.rs:85:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/basic-types-metadata.rs:67:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-in-unique-closure.rs:69:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/simd.rs:56:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/simd.rs:58:#![feature(repr_simd)]
tests/debuginfo/borrowed-enum.rs:33:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/marker-types.rs:30:#![feature(ptr_internals)]
tests/debuginfo/generic-function.rs:56:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/trait-pointers.rs:8:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/destructured-fn-argument.rs:360:#![feature(box_patterns)]
tests/debuginfo/destructured-fn-argument.rs:361:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/destructured-local.rs:287:#![feature(box_patterns)]
tests/debuginfo/destructured-local.rs:288:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/struct-namespace.rs:24:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/issue-22656.rs:23:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/multiple-functions.rs:40:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/method-on-generic-struct.rs:126:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/basic-types-globals-metadata.rs:52:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/static-method-on-struct-and-enum.rs:51:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/method-on-trait.rs:124:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/reference-debuginfo.rs:123:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/tuple-style-enum.rs:42:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/var-captured-in-sendable-closure.rs:37:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generator-locals.rs:57:#![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]
tests/debuginfo/destructured-for-loop-variable.rs:175:#![feature(box_patterns)]
tests/debuginfo/destructured-for-loop-variable.rs:176:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/associated-types.rs:86:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-in-unconditional-loop.rs:137:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-struct-style-enum.rs:24:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/simple-tuple.rs:170:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/simple-lexical-scope.rs:78:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/unique-enum.rs:35:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/unreachable-locals.rs:6:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/function-names.rs:84:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/function-names.rs:86:#![feature(adt_const_params, generators, generator_trait)]
tests/debuginfo/function-names.rs:87:#![allow(incomplete_features)]
tests/debuginfo/by-value-self-argument-in-trait-impl.rs:43:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/function-arguments.rs:42:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/issue-57822.rs:29:#![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]
tests/debuginfo/struct-with-destructor.rs:45:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/basic-types-globals.rs:61:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/method-on-enum.rs:110:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/box.rs:27:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/basic-types.rs:135:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-in-while.rs:137:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/borrowed-unique-basic.rs:115:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-method-on-generic-struct.rs:126:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/vec.rs:25:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/gdb-char.rs:14:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/type-names.rs:268:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/type-names.rs:270:#![feature(extern_types)]
tests/debuginfo/unsized.rs:67:#![feature(unsized_tuple_coercion)]
tests/debuginfo/unsized.rs:68:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/multiple-functions-equal-var-names.rs:40:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/collapse-debuginfo-no-attr.rs:2:#![feature(collapse_debuginfo)]
tests/debuginfo/collapse-debuginfo-no-attr.rs:5:// `collapse_debuginfo` feature is active and the attribute is not provided.
tests/debuginfo/constant-in-match-pattern.rs:6:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-functions-nested.rs:71:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/c-style-enum.rs:129:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/shadowed-argument.rs:57:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/closure-in-generic-function.rs:42:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/borrowed-struct.rs:66:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/c-style-enum-in-composite.rs:70:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/basic-types-mut-globals.rs:106:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/enum-thinlto.rs:22:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/multi-cgu.rs:37:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/borrowed-tuple.rs:40:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/tuple-in-struct.rs:43:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/borrowed-c-style-enum.rs:38:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/collapse-debuginfo-no-attr-flag.rs:2:#![feature(collapse_debuginfo)]
tests/debuginfo/lexical-scopes-in-block-expression.rs:399:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/issue-12886.rs:12:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/extern-c-fn.rs:41:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/include_string.rs:31:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/limited-debuginfo.rs:26:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/collapse-debuginfo-with-attr-flag.rs:2:#![feature(collapse_debuginfo)]
tests/debuginfo/method-on-tuple-struct.rs:124:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/tuple-in-tuple.rs:130:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-struct.rs:64:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/boxed-struct.rs:31:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-with-macro.rs:113:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/recursive-enum.rs:10:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/evec-in-struct.rs:53:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/function-arg-initialization.rs:220:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/recursive-struct.rs:64:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/collapse-debuginfo-with-attr.rs:2:#![feature(collapse_debuginfo)]
tests/debuginfo/collapse-debuginfo-with-attr.rs:5:// `collapse_debuginfo` feature is active and the attribute is provided.
tests/debuginfo/var-captured-in-stack-closure.rs:119:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generator-objects.rs:66:#![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]
tests/debuginfo/lexical-scope-in-stack-closure.rs:68:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/method-on-struct.rs:124:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/self-in-generic-default-method.rs:124:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/packed-struct-with-destructor.rs:81:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/struct-in-enum.rs:38:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/union-smoke.rs:31:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/by-value-non-immediate-argument.rs:68:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/auxiliary/cross_crate_spans.rs:4:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/struct-in-struct.rs:59:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/generic-tuple-style-enum.rs:41:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/self-in-default-method.rs:124:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/lexical-scope-in-if.rs:142:#![feature(omit_gdb_pretty_printer_section)]
tests/debuginfo/option-like-enum.rs:81:#![feature(omit_gdb_pretty_printer_section)]
tests/run-make/linkage-attr-on-static/bar.rs:1:#![feature(linkage)]
tests/run-make/issue-26006/in/time/lib.rs:1:#![feature(rustc_private)]
tests/run-make/wasm-symbols-not-exported/bar.rs:1:#![feature(panic_handler, alloc_error_handler)]
tests/run-make/rustdoc-error-lines/input.rs:3:// random #![feature] to ensure that crate attrs
tests/run-make/rustdoc-error-lines/input.rs:6:/// #![feature(bool_to_option)]
tests/run-make/rustdoc-error-lines/input.rs:16:/// #![feature(bool_to_option)]
tests/run-make/rustdoc-error-lines/input.rs:25:/// #![feature(bool_to_option)]
tests/run-make/static-pie/Makefile:14:		${RUSTC} -Clinker=$* -Clinker-flavor=gcc --target ${TARGET} -C target-feature=+crt-static test-aslr.rs; \
tests/run-make/debug-assertions/debug.rs:1:#![feature(rustc_attrs)]
tests/run-make/rlib-format-packed-bundled-libs-3/rust_dep_cfg.rs:1:#![feature(link_cfg)]
tests/run-make/rlib-format-packed-bundled-libs-3/rust_dep.rs:1:#![feature(packed_bundled_libs)]
tests/run-make/mismatching-target-triples/foo.rs:1:#![feature(no_core)]
tests/run-make/mismatching-target-triples/bar.rs:1:#![feature(no_core)]
tests/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh:13:            # HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.
tests/run-make/issue-51671/app.rs:2:#![feature(lang_items, alloc_error_handler)]
tests/run-make/atomic-lock-free/atomic_lock_free.rs:1:#![feature(no_core, intrinsics, lang_items)]
tests/run-make/fmt-write-bloat/main.rs:1:#![feature(lang_items)]
tests/run-make/fmt-write-bloat/main.rs:2:#![feature(start)]
tests/run-make/sysroot-crates-are-unstable/test.py:49:    if 'use of unstable library feature' not in '{}{}'.format(stdout, stderr):
tests/run-make/raw-dylib-alt-calling-convention/lib.rs:1:#![feature(abi_vectorcall)]
tests/run-make/std-core-cycle/bar.rs:1:#![feature(allocator_api)]
tests/run-make/issue-53964/panic.rs:2:#![feature(panic_handler)]
tests/run-make/sepcomp-inlining/foo.rs:1:#![feature(start)]
tests/run-make/target-specs/foo.rs:1:#![feature(lang_items, no_core, auto_traits)]
tests/run-make/env-dep-info/macro_def.rs:1:#![feature(proc_macro_tracked_env)]
tests/run-make/c-link-to-rust-va-list-fn/checkrust.rs:2:#![feature(c_variadic)]
tests/run-make/c-link-to-rust-va-list-fn/checkrust.rs:3:#![feature(rustc_private)]
tests/run-make/static-extern-type/use-foo.rs:1:#![feature(extern_types)]
tests/run-make/use-extern-for-plugins/baz.rs:1:#![feature(no_core)]
tests/run-make/use-extern-for-plugins/bar.rs:1:#![feature(no_core)]
tests/run-make/track-path-dep-info/macro_def.rs:1:#![feature(track_path)]
tests/run-make/volatile-intrinsics/main.rs:1:#![feature(core_intrinsics, volatile)]
tests/run-make/thumb-none-qemu/script.sh:12:        # HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.
tests/run-make/issue-69368/a.rs:2:#![feature(lang_items)]
tests/run-make/issue-69368/a.rs:3:#![feature(panic_unwind)]
tests/run-make/issue-69368/b.rs:2:#![feature(alloc_error_handler)]
tests/run-make/issue-69368/c.rs:2:#![feature(start)]
tests/run-make/emit-stack-sizes/Makefile:6:# This feature only works when the output object format is ELF so we ignore
tests/run-make/CURRENT_RUSTC_VERSION/main.rs:1:#![feature(foo)]
tests/run-make/CURRENT_RUSTC_VERSION/stable.rs:1:#![feature(staged_api)]
tests/run-make/CURRENT_RUSTC_VERSION/stable.rs:2:#![stable(since = "1.0.0", feature = "rust1")]
tests/run-make/CURRENT_RUSTC_VERSION/stable.rs:4:#[stable(since = "CURRENT_RUSTC_VERSION", feature = "foo")]
tests/run-make/repr128-dwarf/lib.rs:2:#![feature(repr128)]
tests/run-make/extern-fn-with-extern-types/test.rs:1:#![feature(extern_types)]
tests/run-make/link-path-order/main.rs:1:#![feature(rustc_private)]
tests/run-make/thumb-none-cortex-m/Makefile:35:	# HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.
tests/run-make/no-alloc-shim/Makefile:19:	$(RUSTC) foo.rs --crate-type bin --emit obj -Cpanic=abort --cfg check_feature_gate
tests/run-make/no-alloc-shim/foo.rs:1:#![feature(default_alloc_error_handler)]
tests/run-make/no-alloc-shim/foo.rs:33:#[cfg(not(check_feature_gate))]
tests/run-make/issue-22131/Makefile:5:	$(RUSTC) --cfg 'feature="bar"' --crate-type lib foo.rs
tests/run-make/issue-22131/Makefile:6:	$(RUSTDOC) --test --cfg 'feature="bar"' \
tests/run-make/issue-22131/foo.rs:4:#[cfg(feature = "bar")]
tests/run-make/allow-warnings-cmdline-stability/foo.rs:1:#![feature(unstable_test_feature)]
tests/run-make/allow-warnings-cmdline-stability/bar.rs:2:#![feature(staged_api)]
tests/run-make/allow-warnings-cmdline-stability/bar.rs:3:#![unstable(feature = "unstable_test_feature", issue = "none")]
tests/run-make/wasm-exceptions-nostd/Makefile:7:RUSTC := $(RUSTC) -C target-feature=+exception-handling
tests/run-make/wasm-exceptions-nostd/src/lib.rs:4:// Allow a few unstable features because we create a panic
tests/run-make/wasm-exceptions-nostd/src/lib.rs:7:#![feature(core_intrinsics)]
tests/run-make/wasm-exceptions-nostd/src/lib.rs:8:#![feature(lang_items)]
tests/run-make/wasm-exceptions-nostd/src/lib.rs:9:#![feature(link_llvm_intrinsics)]
tests/run-make/wasm-exceptions-nostd/src/lib.rs:10:#![feature(panic_info_message)]
tests/run-make/raw-dylib-cross-compilation/lib.rs:1:#![feature(no_core, lang_items)]
tests/run-make/min-global-align/min_global_align.rs:1:#![feature(no_core, lang_items)]
tests/run-make/forced-unwind-terminate-pof/foo.rs:3:#![feature(c_unwind)]
tests/run-make/link-cfg/dep.rs:1:#![feature(link_cfg)]
tests/run-make/link-cfg/dep-with-staticlib.rs:1:#![feature(link_cfg)]
tests/run-make/link-cfg/no-deps.rs:1:#![feature(link_cfg)]
tests/run-make/simd-ffi/simd.rs:5:#![feature(no_core, auto_traits)]
tests/run-make/simd-ffi/simd.rs:7:#![feature(repr_simd, simd_ffi, link_llvm_intrinsics, lang_items, rustc_attrs)]
tests/run-make/simd-ffi/Makefile:38:# we need some features because the integer SIMD instructions are not
tests/run-make/simd-ffi/Makefile:39:# enabled by-default for i686 and ARM; these features will be invalid
tests/run-make/simd-ffi/Makefile:44:                -C target-feature='+neon,+sse2' -C extra-filename=-$(1)
tests/run-make/rustdoc-target-spec-json-path/my_crate.rs:1:#![feature(no_core)]
tests/run-make/rustdoc-target-spec-json-path/dummy_core.rs:1:#![feature(no_core)]
tests/run-make/tools.mk:27:# is configured to execute one or the other shell binary). `dash` features
tests/run-make/tools.mk:28:# support only a small subset of `bash` features, so `dash` can be thought of as
tests/run-make/test-benches/smokebench.rs:1:#![feature(test)]
tests/run-make/wasm-abi/foo.rs:3:#![feature(wasm_abi)]
tests/run-make/raw-dylib-import-name-type/driver.rs:1:#![feature(abi_vectorcall)]
tests/run-make/msvc-opt-minsize/foo.rs:1:#![feature(test)]
tests/run-make/link-dedup/depb.rs:1:#![feature(link_cfg)]
tests/run-make/intrinsic-unreachable/exit-unreachable.rs:1:#![feature(core_intrinsics)]
tests/run-make/valid-print-requests/valid-print-requests.stderr:1:error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `all-target-specs-json`, `link-args`, `split-debuginfo`, `deployment-target`
tests/pretty/auto-trait.rs:1:#![feature(auto_traits)]
tests/pretty/dollar-crate.pp:1:#![feature(prelude_import)]
tests/pretty/trait-polarity.rs:1:#![feature(negative_impls)]
tests/pretty/tests-are-sorted.pp:1:#![feature(prelude_import)]
tests/pretty/attr-literals.rs:5:#![feature(rustc_attrs)]
tests/pretty/issue-12590-c.pp:1:#![feature(prelude_import)]
tests/pretty/stmt_expr_attributes.rs:3:#![feature(inline_const)]
tests/pretty/stmt_expr_attributes.rs:4:#![feature(inline_const_pat)]
tests/pretty/stmt_expr_attributes.rs:5:#![feature(rustc_attrs)]
tests/pretty/stmt_expr_attributes.rs:6:#![feature(stmt_expr_attributes)]
tests/pretty/yeet-expr.rs:2:#![feature(yeet_expr)]
tests/pretty/attr-fn-inner.rs:7:#![feature(rustc_attrs)]
tests/pretty/delimited-token-groups.rs:3:#![feature(rustc_attrs)]
tests/pretty/expanded-and-path-remap-80832.pp:1:#![feature(prelude_import)]
tests/pretty/fn-variadic.rs:5:#![feature(c_variadic)]
tests/pretty/macro.rs:3:#![feature(decl_macro)]
tests/pretty/asm.pp:1:#![feature(prelude_import)]
tests/pretty/cast-lt.pp:1:#![feature(prelude_import)]
tests/pretty/offset_of.rs:2:#![feature(offset_of)]
tests/pretty/raw-address-of.rs:2:#![feature(raw_ref_op)]
tests/run-pass-valgrind/dst-dtor-3.rs:1:#![feature(unsized_tuple_coercion)]
tests/run-pass-valgrind/osx-frameworks.rs:3:#![feature(rustc_private)]
tests/run-pass-valgrind/dst-dtor-4.rs:1:#![feature(unsized_tuple_coercion)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call2.rs:1:#![feature(unsized_locals)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call2.rs:2:#![feature(unboxed_closures)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call2.rs:3:#![feature(tuple_trait)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call.rs:1:#![feature(unsized_locals)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call.rs:2:#![feature(unboxed_closures)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call.rs:3:#![feature(tuple_trait)]
tests/run-pass-valgrind/unsized-locals/long-live-the-unsized-temporary.rs:1:#![allow(incomplete_features)]
tests/run-pass-valgrind/unsized-locals/long-live-the-unsized-temporary.rs:2:#![feature(unsized_locals, unsized_fn_params)]
tests/run-pass-valgrind/unsized-locals/by-value-trait-objects.rs:1:#![feature(unsized_locals)]
tests/mir-opt/box_expr.rs:3:#![feature(rustc_attrs, stmt_expr_attributes)]
tests/mir-opt/remove_never_const.rs:8:#![feature(never_type)]
tests/mir-opt/reference_prop.rs:4:#![feature(raw_ref_op)]
tests/mir-opt/reference_prop.rs:5:#![feature(core_intrinsics, custom_mir)]
tests/mir-opt/tls_access.rs:4:#![feature(thread_local)]
tests/mir-opt/instsimplify_duplicate_switch_targets.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/switch_to_self.rs:4:#![feature(core_intrinsics, custom_mir)]
tests/mir-opt/generator_drop_cleanup.rs:1:#![feature(generators, generator_trait)]
tests/mir-opt/pre-codegen/checked_ops.rs:7:#![feature(step_trait)]
tests/mir-opt/pre-codegen/intrinsics.rs:8:#![feature(core_intrinsics)]
tests/mir-opt/asm_unwind_panic_abort.rs:8:#![feature(asm_unwind)]
tests/mir-opt/lower_intrinsics.rs:4:#![feature(core_intrinsics, intrinsics, rustc_attrs)]
tests/mir-opt/dont_yeet_assert.rs:4:#![feature(core_intrinsics)]
tests/mir-opt/simplify_duplicate_unreachable_blocks.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/issue_41697.rs:8:#![feature(rustc_attrs)]
tests/mir-opt/issue_72181_1.rs:4:#![feature(never_type)]
tests/mir-opt/nrvo_miscompile_111005.rs:5:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/simplify_locals.rs:4:#![feature(thread_local)]
tests/mir-opt/separate_const_switch.rs:1:#![feature(control_flow_enum)]
tests/mir-opt/separate_const_switch.rs:2:#![feature(try_trait_v2)]
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-unwind.diff:1:- // MIR for `inlined_target_feature` before Inline
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-unwind.diff:2:+ // MIR for `inlined_target_feature` after Inline
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-unwind.diff:4:  fn inlined_target_feature() -> () {
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-unwind.diff:7:+     scope 1 (inlined target_feature) {
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-unwind.diff:12:-         _1 = target_feature() -> [return: bb1, unwind continue];
tests/mir-opt/inline/inline_compatibility.rs:7:#![feature(no_sanitize)]
tests/mir-opt/inline/inline_compatibility.rs:8:#![feature(target_feature_11)]
tests/mir-opt/inline/inline_compatibility.rs:9:#![feature(c_variadic)]
tests/mir-opt/inline/inline_compatibility.rs:11:// EMIT_MIR inline_compatibility.inlined_target_feature.Inline.diff
tests/mir-opt/inline/inline_compatibility.rs:12:#[target_feature(enable = "sse2")]
tests/mir-opt/inline/inline_compatibility.rs:13:pub unsafe fn inlined_target_feature() {
tests/mir-opt/inline/inline_compatibility.rs:14:    target_feature();
tests/mir-opt/inline/inline_compatibility.rs:17:// EMIT_MIR inline_compatibility.not_inlined_target_feature.Inline.diff
tests/mir-opt/inline/inline_compatibility.rs:18:pub unsafe fn not_inlined_target_feature() {
tests/mir-opt/inline/inline_compatibility.rs:19:    target_feature();
tests/mir-opt/inline/inline_compatibility.rs:34:#[target_feature(enable = "sse2")]
tests/mir-opt/inline/inline_compatibility.rs:35:pub unsafe fn target_feature() {}
tests/mir-opt/inline/inline_instruction_set.rs:9:#![feature(rustc_attrs)]
tests/mir-opt/inline/inline_instruction_set.rs:10:#![feature(no_core, lang_items)]
tests/mir-opt/inline/inline_instruction_set.rs:11:#![feature(isa_attribute)]
tests/mir-opt/inline/inline_generator.rs:3:#![feature(generators, generator_trait)]
tests/mir-opt/inline/unchecked_shifts.rs:3:#![feature(unchecked_math)]
tests/mir-opt/inline/asm_unwind.rs:6:#![feature(asm_unwind)]
tests/mir-opt/inline/unsized_argument.rs:2:#![feature(unsized_fn_params)]
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff:1:- // MIR for `not_inlined_target_feature` before Inline
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff:2:+ // MIR for `not_inlined_target_feature` after Inline
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff:4:  fn not_inlined_target_feature() -> () {
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff:10:          _1 = target_feature() -> [return: bb1, unwind unreachable];
tests/mir-opt/inline/inline_specialization.rs:2:#![feature(specialization)]
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-abort.diff:1:- // MIR for `inlined_target_feature` before Inline
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-abort.diff:2:+ // MIR for `inlined_target_feature` after Inline
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-abort.diff:4:  fn inlined_target_feature() -> () {
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-abort.diff:7:+     scope 1 (inlined target_feature) {
tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-abort.diff:12:-         _1 = target_feature() -> [return: bb1, unwind unreachable];
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff:1:- // MIR for `not_inlined_target_feature` before Inline
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff:2:+ // MIR for `not_inlined_target_feature` after Inline
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff:4:  fn not_inlined_target_feature() -> () {
tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff:10:          _1 = target_feature() -> [return: bb1, unwind continue];
tests/mir-opt/dataflow-const-prop/enum.rs:3:#![feature(custom_mir, core_intrinsics, rustc_attrs)]
tests/mir-opt/const_goto_const_eval_fail.rs:1:#![feature(min_const_generics)]
tests/mir-opt/funky_arms.rs:4:#![feature(flt2dec)]
tests/mir-opt/intrinsic_asserts.rs:2:#![feature(core_intrinsics)]
tests/mir-opt/issue_99325.rs:1:#![feature(adt_const_params)]
tests/mir-opt/issue_99325.rs:2:#![allow(incomplete_features)]
tests/mir-opt/copy-prop/reborrow.rs:5:#![feature(raw_ref_op)]
tests/mir-opt/copy-prop/custom_move_arg.rs:4:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/copy-prop/mutate_through_pointer.rs:13:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/copy-prop/non_dominate.rs:3:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/copy-prop/move_projection.rs:4:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/copy-prop/borrowed_local.rs:4:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/copy-prop/partial_init.rs:4:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/generator_storage_dead_unwind.rs:8:#![feature(generators, generator_trait)]
tests/mir-opt/match_test.rs:3:#![feature(exclusive_range_pattern)]
tests/mir-opt/const_prop_miscompile.rs:2:#![feature(raw_ref_op)]
tests/mir-opt/generator_tiny.rs:7:#![feature(generators, generator_trait)]
tests/mir-opt/enum_opt.rs:5:#![feature(arbitrary_enum_discriminant, repr128)]
tests/mir-opt/issue_62289.rs:5:#![feature(rustc_attrs)]
tests/mir-opt/deref-patterns/string.rs:3:#![feature(string_deref_patterns)]
tests/mir-opt/issue_104451_unwindable_intrinsics.rs:3:#![feature(core_intrinsics)]
tests/mir-opt/const_prop/boxes.rs:7:#![feature(rustc_attrs, stmt_expr_attributes)]
tests/mir-opt/const_prop/invalid_constant.rs:5:#![feature(adt_const_params)]
tests/mir-opt/const_prop/invalid_constant.rs:6:#![feature(inline_const)]
tests/mir-opt/const_prop/invalid_constant.rs:7:#![allow(incomplete_features)]
tests/mir-opt/const_prop/offset_of.rs:4:#![feature(offset_of)]
tests/mir-opt/combine_transmutes.rs:5:#![feature(core_intrinsics)]
tests/mir-opt/combine_transmutes.rs:6:#![feature(custom_mir)]
tests/mir-opt/uninhabited_enum.rs:1:#![feature(never_type)]
tests/mir-opt/building/uniform_array_move_out.rs:1:#![feature(stmt_expr_attributes, rustc_attrs)]
tests/mir-opt/building/receiver_ptr_mutability.rs:3:#![feature(arbitrary_self_types)]
tests/mir-opt/building/custom/consts.rs:1:#![feature(custom_mir, core_intrinsics, inline_const)]
tests/mir-opt/building/custom/aggregate_exprs.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/references.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/arbitrary_let.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/arrays.rs:1:#![feature(custom_mir, core_intrinsics, inline_const)]
tests/mir-opt/building/custom/as_cast.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/simple_assign.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/enums.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/terminators.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/operators.rs:2:#![feature(custom_mir, core_intrinsics, inline_const)]
tests/mir-opt/building/custom/projections.rs:1:#![feature(custom_mir, core_intrinsics)]
tests/mir-opt/building/custom/composite_return.rs:1:#![feature(custom_mir, core_intrinsics)]
