-- Language definition for JSON, generated by ast-generate. Do not edit!
{-# LANGUAGE CPP #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuantifiedConstraints #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UndecidableInstances #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

module Language.JSON.AST (module Language.JSON.AST, getTestCorpusDir) where

import qualified AST.Parse
import qualified AST.Token
import qualified AST.Traversable1.Class
import qualified AST.Unmarshal
import qualified Data.Foldable
import qualified Data.List as Data.OldList
import qualified Data.Maybe as GHC.Maybe
import qualified Data.Text.Internal
import qualified Data.Traversable
import qualified GHC.Base
import qualified GHC.Generics
import qualified GHC.Records
import qualified GHC.Show
import TreeSitter.JSON (getTestCorpusDir)
import qualified TreeSitter.Node
import qualified Prelude as GHC.Classes

debugSymbolNames :: [GHC.Base.String]
debugSymbolNames = debugSymbolNames_0

debugSymbolNames_0 :: [GHC.Base.String]
debugSymbolNames_0 =
  [ "end",
    "_{",
    "_,",
    "_}",
    "_:",
    "_[",
    "_]",
    "_\"",
    "_string_content_token1",
    "escape_sequence",
    "number",
    "true",
    "false",
    "null",
    "document",
    "_value",
    "object",
    "pair",
    "array",
    "string",
    "string_content",
    "_object_repeat1",
    "_array_repeat1",
    "_string_content_repeat1"
  ]

newtype Value a = Value {getValue :: ((Array GHC.Generics.:+: False GHC.Generics.:+: Null GHC.Generics.:+: Number GHC.Generics.:+: Object GHC.Generics.:+: String GHC.Generics.:+: True) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_1.
      AST.Traversable1.Class.Traversable1 a_1
    )

instance GHC.Records.HasField "ann" (Value a_2) a_2 where
  getField = AST.Unmarshal.gann GHC.Base.. getValue

deriving instance GHC.Classes.Eq a_3 => GHC.Classes.Eq (Value a_3)

deriving instance GHC.Classes.Ord a_4 => GHC.Classes.Ord (Value a_4)

deriving instance GHC.Show.Show a_5 => GHC.Show.Show (Value a_5)

instance AST.Unmarshal.Unmarshal Value

instance Data.Foldable.Foldable Value where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Value where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Value where
  traverse = AST.Traversable1.Class.traverseDefault1

data Array a = Array {ann :: a, extraChildren :: ([AST.Parse.Err (Value a)])}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_6.
      AST.Traversable1.Class.Traversable1 a_6
    )

instance AST.Unmarshal.SymbolMatching Array where
  matchedSymbols _ = [18]
  showFailure _ node_7 =
    "expected "
      GHC.Base.<> ( "array"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_7 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_7) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_8 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_9 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_10 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_11 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_8
        c1_9 = TreeSitter.Node.nodeStartPoint node_7
      TreeSitter.Node.TSPoint
        r2_10
        c2_11 = TreeSitter.Node.nodeEndPoint node_7

deriving instance GHC.Classes.Eq a_12 => GHC.Classes.Eq (Array a_12)

deriving instance GHC.Classes.Ord a_13 => GHC.Classes.Ord (Array a_13)

deriving instance GHC.Show.Show a_14 => GHC.Show.Show (Array a_14)

instance AST.Unmarshal.Unmarshal Array

instance Data.Foldable.Foldable Array where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Array where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Array where
  traverse = AST.Traversable1.Class.traverseDefault1

data Document a = Document {ann :: a, extraChildren :: (AST.Parse.Err (Value a))}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_15.
      AST.Traversable1.Class.Traversable1 a_15
    )

instance AST.Unmarshal.SymbolMatching Document where
  matchedSymbols _ = [14]
  showFailure _ node_16 =
    "expected "
      GHC.Base.<> ( "document"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_16 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_16) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_17 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_18 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_19 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_20 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_17
        c1_18 = TreeSitter.Node.nodeStartPoint node_16
      TreeSitter.Node.TSPoint
        r2_19
        c2_20 = TreeSitter.Node.nodeEndPoint node_16

deriving instance GHC.Classes.Eq a_21 => GHC.Classes.Eq (Document a_21)

deriving instance GHC.Classes.Ord a_22 => GHC.Classes.Ord (Document a_22)

deriving instance GHC.Show.Show a_23 => GHC.Show.Show (Document a_23)

instance AST.Unmarshal.Unmarshal Document

instance Data.Foldable.Foldable Document where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Document where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Document where
  traverse = AST.Traversable1.Class.traverseDefault1

data Object a = Object {ann :: a, extraChildren :: ([AST.Parse.Err (Pair a)])}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_24.
      AST.Traversable1.Class.Traversable1 a_24
    )

instance AST.Unmarshal.SymbolMatching Object where
  matchedSymbols _ = [16]
  showFailure _ node_25 =
    "expected "
      GHC.Base.<> ( "object"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_25 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_25) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_26 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_27 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_28 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_29 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_26
        c1_27 = TreeSitter.Node.nodeStartPoint node_25
      TreeSitter.Node.TSPoint
        r2_28
        c2_29 = TreeSitter.Node.nodeEndPoint node_25

deriving instance GHC.Classes.Eq a_30 => GHC.Classes.Eq (Object a_30)

deriving instance GHC.Classes.Ord a_31 => GHC.Classes.Ord (Object a_31)

deriving instance GHC.Show.Show a_32 => GHC.Show.Show (Object a_32)

instance AST.Unmarshal.Unmarshal Object

instance Data.Foldable.Foldable Object where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Object where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Object where
  traverse = AST.Traversable1.Class.traverseDefault1

data Pair a = Pair
  { ann :: a,
    value :: (AST.Parse.Err (Value a)),
    key :: (AST.Parse.Err ((Number GHC.Generics.:+: String) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_33.
      AST.Traversable1.Class.Traversable1 a_33
    )

instance AST.Unmarshal.SymbolMatching Pair where
  matchedSymbols _ = [17]
  showFailure _ node_34 =
    "expected "
      GHC.Base.<> ( "pair"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_34 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_34) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_35 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_36 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_37 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_38 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_35
        c1_36 = TreeSitter.Node.nodeStartPoint node_34
      TreeSitter.Node.TSPoint
        r2_37
        c2_38 = TreeSitter.Node.nodeEndPoint node_34

deriving instance GHC.Classes.Eq a_39 => GHC.Classes.Eq (Pair a_39)

deriving instance GHC.Classes.Ord a_40 => GHC.Classes.Ord (Pair a_40)

deriving instance GHC.Show.Show a_41 => GHC.Show.Show (Pair a_41)

instance AST.Unmarshal.Unmarshal Pair

instance Data.Foldable.Foldable Pair where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Pair where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Pair where
  traverse = AST.Traversable1.Class.traverseDefault1

data String a = String
  { ann :: a,
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (StringContent a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_42.
      AST.Traversable1.Class.Traversable1 a_42
    )

instance AST.Unmarshal.SymbolMatching String where
  matchedSymbols _ = [19]
  showFailure _ node_43 =
    "expected "
      GHC.Base.<> ( "string"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_43 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_43) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_44 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_45 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_46 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_47 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_44
        c1_45 = TreeSitter.Node.nodeStartPoint node_43
      TreeSitter.Node.TSPoint
        r2_46
        c2_47 = TreeSitter.Node.nodeEndPoint node_43

deriving instance GHC.Classes.Eq a_48 => GHC.Classes.Eq (String a_48)

deriving instance GHC.Classes.Ord a_49 => GHC.Classes.Ord (String a_49)

deriving instance GHC.Show.Show a_50 => GHC.Show.Show (String a_50)

instance AST.Unmarshal.Unmarshal String

instance Data.Foldable.Foldable String where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor String where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable String where
  traverse = AST.Traversable1.Class.traverseDefault1

data StringContent a = StringContent
  { ann :: a,
    extraChildren :: ([AST.Parse.Err (EscapeSequence a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_51.
      AST.Traversable1.Class.Traversable1 a_51
    )

instance AST.Unmarshal.SymbolMatching StringContent where
  matchedSymbols _ = [20]
  showFailure _ node_52 =
    "expected "
      GHC.Base.<> ( "string_content"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_52 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_52) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_53 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_54 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_55 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_56 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_53
        c1_54 = TreeSitter.Node.nodeStartPoint node_52
      TreeSitter.Node.TSPoint
        r2_55
        c2_56 = TreeSitter.Node.nodeEndPoint node_52

deriving instance GHC.Classes.Eq a_57 => GHC.Classes.Eq (StringContent a_57)

deriving instance GHC.Classes.Ord a_58 => GHC.Classes.Ord (StringContent a_58)

deriving instance GHC.Show.Show a_59 => GHC.Show.Show (StringContent a_59)

instance AST.Unmarshal.Unmarshal StringContent

instance Data.Foldable.Foldable StringContent where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor StringContent where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable StringContent where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousDQuote = AST.Token.Token "\"" 7

type AnonymousComma = AST.Token.Token "," 2

type AnonymousColon = AST.Token.Token ":" 4

type AnonymousLBracket = AST.Token.Token "[" 5

type AnonymousRBracket = AST.Token.Token "]" 6

data EscapeSequence a = EscapeSequence {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_60.
      AST.Traversable1.Class.Traversable1 a_60
    )

instance AST.Unmarshal.SymbolMatching EscapeSequence where
  matchedSymbols _ = [9]
  showFailure _ node_61 =
    "expected "
      GHC.Base.<> ( "escape_sequence"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_61 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_61) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_62 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_63 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_64 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_65 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_62
        c1_63 = TreeSitter.Node.nodeStartPoint node_61
      TreeSitter.Node.TSPoint
        r2_64
        c2_65 = TreeSitter.Node.nodeEndPoint node_61

deriving instance GHC.Classes.Eq a_66 => GHC.Classes.Eq (EscapeSequence a_66)

deriving instance GHC.Classes.Ord a_67 => GHC.Classes.Ord (EscapeSequence a_67)

deriving instance GHC.Show.Show a_68 => GHC.Show.Show (EscapeSequence a_68)

instance AST.Unmarshal.Unmarshal EscapeSequence

instance Data.Foldable.Foldable EscapeSequence where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor EscapeSequence where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable EscapeSequence where
  traverse = AST.Traversable1.Class.traverseDefault1

data False a = False {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_69.
      AST.Traversable1.Class.Traversable1 a_69
    )

instance AST.Unmarshal.SymbolMatching False where
  matchedSymbols _ = [12]
  showFailure _ node_70 =
    "expected "
      GHC.Base.<> ( "false"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_70 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_70) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_71 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_72 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_73 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_74 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_71
        c1_72 = TreeSitter.Node.nodeStartPoint node_70
      TreeSitter.Node.TSPoint
        r2_73
        c2_74 = TreeSitter.Node.nodeEndPoint node_70

deriving instance GHC.Classes.Eq a_75 => GHC.Classes.Eq (False a_75)

deriving instance GHC.Classes.Ord a_76 => GHC.Classes.Ord (False a_76)

deriving instance GHC.Show.Show a_77 => GHC.Show.Show (False a_77)

instance AST.Unmarshal.Unmarshal False

instance Data.Foldable.Foldable False where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor False where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable False where
  traverse = AST.Traversable1.Class.traverseDefault1

data Null a = Null {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_78.
      AST.Traversable1.Class.Traversable1 a_78
    )

instance AST.Unmarshal.SymbolMatching Null where
  matchedSymbols _ = [13]
  showFailure _ node_79 =
    "expected "
      GHC.Base.<> ( "null"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_79 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_79) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_80 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_81 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_82 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_83 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_80
        c1_81 = TreeSitter.Node.nodeStartPoint node_79
      TreeSitter.Node.TSPoint
        r2_82
        c2_83 = TreeSitter.Node.nodeEndPoint node_79

deriving instance GHC.Classes.Eq a_84 => GHC.Classes.Eq (Null a_84)

deriving instance GHC.Classes.Ord a_85 => GHC.Classes.Ord (Null a_85)

deriving instance GHC.Show.Show a_86 => GHC.Show.Show (Null a_86)

instance AST.Unmarshal.Unmarshal Null

instance Data.Foldable.Foldable Null where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Null where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Null where
  traverse = AST.Traversable1.Class.traverseDefault1

data Number a = Number {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_87.
      AST.Traversable1.Class.Traversable1 a_87
    )

instance AST.Unmarshal.SymbolMatching Number where
  matchedSymbols _ = [10]
  showFailure _ node_88 =
    "expected "
      GHC.Base.<> ( "number"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_88 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_88) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_89 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_90 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_91 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_92 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_89
        c1_90 = TreeSitter.Node.nodeStartPoint node_88
      TreeSitter.Node.TSPoint
        r2_91
        c2_92 = TreeSitter.Node.nodeEndPoint node_88

deriving instance GHC.Classes.Eq a_93 => GHC.Classes.Eq (Number a_93)

deriving instance GHC.Classes.Ord a_94 => GHC.Classes.Ord (Number a_94)

deriving instance GHC.Show.Show a_95 => GHC.Show.Show (Number a_95)

instance AST.Unmarshal.Unmarshal Number

instance Data.Foldable.Foldable Number where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Number where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Number where
  traverse = AST.Traversable1.Class.traverseDefault1

data True a = True {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_96.
      AST.Traversable1.Class.Traversable1 a_96
    )

instance AST.Unmarshal.SymbolMatching True where
  matchedSymbols _ = [11]
  showFailure _ node_97 =
    "expected "
      GHC.Base.<> ( "true"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_97 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_97) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_98 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_99 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_100 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_101 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_98
        c1_99 = TreeSitter.Node.nodeStartPoint node_97
      TreeSitter.Node.TSPoint
        r2_100
        c2_101 = TreeSitter.Node.nodeEndPoint node_97

deriving instance GHC.Classes.Eq a_102 => GHC.Classes.Eq (True a_102)

deriving instance GHC.Classes.Ord a_103 => GHC.Classes.Ord (True a_103)

deriving instance GHC.Show.Show a_104 => GHC.Show.Show (True a_104)

instance AST.Unmarshal.Unmarshal True

instance Data.Foldable.Foldable True where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor True where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable True where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousLBrace = AST.Token.Token "{" 1

type AnonymousRBrace = AST.Token.Token "}" 3

